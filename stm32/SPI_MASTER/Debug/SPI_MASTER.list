
SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e00  08002e00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e08  08002e08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002e80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002e80  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ff2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015a1  00000000  00000000  00028092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  00029638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000610  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233e7  00000000  00000000  0002a310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005ee5  00000000  00000000  0004d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d16dc  00000000  00000000  000535dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd8  00000000  00000000  00124d34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d6c 	.word	0x08002d6c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08002d6c 	.word	0x08002d6c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d013      	beq.n	800052c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000508:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800050c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000510:	2b00      	cmp	r3, #0
 8000512:	d00b      	beq.n	800052c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000514:	e000      	b.n	8000518 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000516:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000518:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f9      	beq.n	8000516 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000522:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0

  HAL_Init();
 8000542:	f000 fab9 	bl	8000ab8 <HAL_Init>

  SystemClock_Config();
 8000546:	f000 f835 	bl	80005b4 <SystemClock_Config>


  MX_GPIO_Init();
 800054a:	f000 f8d3 	bl	80006f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800054e:	f000 f89b 	bl	8000688 <MX_SPI1_Init>



uint8_t txBuf[]="its mun";
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <main+0x6c>)
 8000554:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800055c:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t rxBuf[100];


  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2110      	movs	r1, #16
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <main+0x70>)
 8000566:	f000 fdcb 	bl	8001100 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,(uint8_t*)txBuf, sizeof(txBuf),50 );
 800056a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800056e:	2332      	movs	r3, #50	; 0x32
 8000570:	2208      	movs	r2, #8
 8000572:	480f      	ldr	r0, [pc, #60]	; (80005b0 <main+0x74>)
 8000574:	f001 fa70 	bl	8001a58 <HAL_SPI_Transmit>
	  printf("%s\n",txBuf);
 8000578:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800057c:	4618      	mov	r0, r3
 800057e:	f001 ffe9 	bl	8002554 <puts>
	  HAL_SPI_Receive (&hspi1, (uint8_t*)rxBuf, sizeof(rxBuf), 50);
 8000582:	1d39      	adds	r1, r7, #4
 8000584:	2332      	movs	r3, #50	; 0x32
 8000586:	2264      	movs	r2, #100	; 0x64
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <main+0x74>)
 800058a:	f001 fb99 	bl	8001cc0 <HAL_SPI_Receive>
	  printf("%s\n",rxBuf);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f001 ffdf 	bl	8002554 <puts>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2110      	movs	r1, #16
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <main+0x70>)
 800059c:	f000 fdb0 	bl	8001100 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005a0:	2064      	movs	r0, #100	; 0x64
 80005a2:	f000 fafb 	bl	8000b9c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005a6:	e7db      	b.n	8000560 <main+0x24>
 80005a8:	08002d84 	.word	0x08002d84
 80005ac:	40020800 	.word	0x40020800
 80005b0:	20000098 	.word	0x20000098

080005b4 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 ff62 	bl	800248c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]


  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xd0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 800062c:	233c      	movs	r3, #60	; 0x3c
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fd79 	bl	8001134 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 f8b2 	bl	80007b0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f000 ffd3 	bl	8001614 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000674:	f000 f89c 	bl	80007b0 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_SPI1_Init>:


static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0


  hspi1.Instance = SPI1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_SPI1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_SPI1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_SPI1_Init+0x64>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_SPI1_Init+0x64>)
 80006bc:	2218      	movs	r2, #24
 80006be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_SPI1_Init+0x64>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_SPI1_Init+0x64>)
 80006da:	f001 f959 	bl	8001990 <HAL_SPI_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e4:	f000 f864 	bl	80007b0 <Error_Handler>
  }

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000098 	.word	0x20000098
 80006f0:	40013000 	.word	0x40013000

080006f4 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xb4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0xb4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0xb8>)
 8000780:	f000 fcbe 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000784:	2310      	movs	r3, #16
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xb8>)
 800079c:	f000 fb06 	bl	8000dac <HAL_GPIO_Init>

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:


void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i

  __disable_irq();
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <Error_Handler+0x6>

080007b8 <_write>:
  }

}


int _write(int file, char *ptr, int len) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_write+0x28>
//		__io_putchar(*ptr);
		ITM_SendChar(*ptr);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe8c 	bl	80004ec <ITM_SendChar>
		*ptr++;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_write+0x12>
	}
	return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <HAL_SPI_MspInit+0x84>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12b      	bne.n	80008be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_SPI_MspInit+0x88>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_SPI_MspInit+0x88>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_SPI_MspInit+0x88>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_SPI_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_SPI_MspInit+0x88>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_SPI_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089e:	23e0      	movs	r3, #224	; 0xe0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ae:	2305      	movs	r3, #5
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_SPI_MspInit+0x8c>)
 80008ba:	f000 fa77 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40013000 	.word	0x40013000
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f91c 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e00a      	b.n	8000950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800093a:	f3af 8000 	nop.w
 800093e:	4601      	mov	r1, r0
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	b2ca      	uxtb	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf0      	blt.n	800093a <_read+0x12>
	}

return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	return -1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098a:	605a      	str	r2, [r3, #4]
	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_isatty>:

int _isatty(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f001 fd1c 	bl	8002438 <__errno>
 8000a00:	4602      	mov	r2, r0
 8000a02:	230c      	movs	r3, #12
 8000a04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20030000 	.word	0x20030000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	2000008c 	.word	0x2000008c
 8000a34:	200000f8 	.word	0x200000f8

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <SystemInit+0x28>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <SystemInit+0x28>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SystemInit+0x28>)
 8000a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a52:	609a      	str	r2, [r3, #8]
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a6a:	e003      	b.n	8000a74 <LoopCopyDataInit>

08000a6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a72:	3104      	adds	r1, #4

08000a74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a7c:	d3f6      	bcc.n	8000a6c <CopyDataInit>
  ldr  r2, =_sbss
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a80:	e002      	b.n	8000a88 <LoopFillZerobss>

08000a82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a84:	f842 3b04 	str.w	r3, [r2], #4

08000a88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a8c:	d3f9      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a8e:	f7ff ffd3 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fcd7 	bl	8002444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fd51 	bl	800053c <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a9c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000aa0:	08002e10 	.word	0x08002e10
  ldr  r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aa8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000aac:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ab0:	200000f8 	.word	0x200000f8

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_Init+0x40>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_Init+0x40>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x40>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f92f 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe82 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f939 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f90f 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200000f0 	.word	0x200000f0

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200000f0 	.word	0x200000f0

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_Delay+0x40>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000008 	.word	0x20000008

08000be0 <__NVIC_SetPriorityGrouping>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_SetPriority>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff47 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff5c 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffb0 	bl	8000d00 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e177      	b.n	80010b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8166 	bne.w	80010b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d00b      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfa:	2b11      	cmp	r3, #17
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0xfc>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80c0 	beq.w	80010b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a64      	ldr	r2, [pc, #400]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b62      	ldr	r3, [pc, #392]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a60      	ldr	r2, [pc, #384]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x328>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d037      	beq.n	8000fea <HAL_GPIO_Init+0x23e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x32c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d031      	beq.n	8000fe6 <HAL_GPIO_Init+0x23a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d02b      	beq.n	8000fe2 <HAL_GPIO_Init+0x236>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x334>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x232>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_GPIO_Init+0x338>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x22e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x33c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x22a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_GPIO_Init+0x340>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x344>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x222>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x348>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x21e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <HAL_GPIO_Init+0x34c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000fc2:	2309      	movs	r3, #9
 8000fc4:	e012      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	e010      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fca:	2308      	movs	r3, #8
 8000fcc:	e00e      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e00c      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00a      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	e008      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x240>
 8000fea:	2300      	movs	r3, #0
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffc:	4934      	ldr	r1, [pc, #208]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <HAL_GPIO_Init+0x350>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102e:	4a33      	ldr	r2, [pc, #204]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001058:	4a28      	ldr	r2, [pc, #160]	; (80010fc <HAL_GPIO_Init+0x350>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001082:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_GPIO_Init+0x350>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_GPIO_Init+0x350>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	f67f ae84 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c0:	bf00      	nop
 80010c2:	3724      	adds	r7, #36	; 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40021c00 	.word	0x40021c00
 80010f4:	40022000 	.word	0x40022000
 80010f8:	40022400 	.word	0x40022400
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e25b      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d075      	beq.n	800123e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001152:	4ba3      	ldr	r3, [pc, #652]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d00c      	beq.n	8001178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4ba0      	ldr	r3, [pc, #640]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001166:	2b08      	cmp	r3, #8
 8001168:	d112      	bne.n	8001190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4b9d      	ldr	r3, [pc, #628]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001176:	d10b      	bne.n	8001190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	4b99      	ldr	r3, [pc, #612]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d05b      	beq.n	800123c <HAL_RCC_OscConfig+0x108>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d157      	bne.n	800123c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e236      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d106      	bne.n	80011a8 <HAL_RCC_OscConfig+0x74>
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a90      	ldr	r2, [pc, #576]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0xb0>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x98>
 80011b2:	4b8b      	ldr	r3, [pc, #556]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a8a      	ldr	r2, [pc, #552]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a87      	ldr	r2, [pc, #540]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0xb0>
 80011cc:	4b84      	ldr	r3, [pc, #528]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a83      	ldr	r2, [pc, #524]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a80      	ldr	r2, [pc, #512]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fcca 	bl	8000b84 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fcc6 	bl	8000b84 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1fb      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0xc0>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fcb6 	bl	8000b84 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fcb2 	bl	8000b84 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1e7      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0xe8>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d063      	beq.n	8001312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00b      	beq.n	800126e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125e:	2b08      	cmp	r3, #8
 8001260:	d11c      	bne.n	800129c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_RCC_OscConfig+0x152>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e1bb      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4952      	ldr	r1, [pc, #328]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	e03a      	b.n	8001312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <HAL_RCC_OscConfig+0x2b0>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fc6b 	bl	8000b84 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc67 	bl	8000b84 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e19c      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4940      	ldr	r1, [pc, #256]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_RCC_OscConfig+0x2b0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc4a 	bl	8000b84 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc46 	bl	8000b84 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e17b      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d030      	beq.n	8001380 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d016      	beq.n	8001354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x2b4>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fc2a 	bl	8000b84 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fc26 	bl	8000b84 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e15b      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x200>
 8001352:	e015      	b.n	8001380 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_RCC_OscConfig+0x2b4>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fc13 	bl	8000b84 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001362:	f7ff fc0f 	bl	8000b84 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e144      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a0 	beq.w	80014ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x2b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d121      	bne.n	800140e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_RCC_OscConfig+0x2b8>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbd5 	bl	8000b84 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e011      	b.n	8001402 <HAL_RCC_OscConfig+0x2ce>
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470000 	.word	0x42470000
 80013e8:	42470e80 	.word	0x42470e80
 80013ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f0:	f7ff fbc8 	bl	8000b84 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0fd      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x4d4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x2f0>
 8001416:	4b7d      	ldr	r3, [pc, #500]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a7c      	ldr	r2, [pc, #496]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	e01c      	b.n	800145e <HAL_RCC_OscConfig+0x32a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x312>
 800142c:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a76      	ldr	r2, [pc, #472]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	4b74      	ldr	r3, [pc, #464]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a73      	ldr	r2, [pc, #460]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x32a>
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a70      	ldr	r2, [pc, #448]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
 8001452:	4b6e      	ldr	r3, [pc, #440]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a6d      	ldr	r2, [pc, #436]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d015      	beq.n	8001492 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fb8d 	bl	8000b84 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f7ff fb89 	bl	8000b84 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4293      	cmp	r3, r2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0bc      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	4b61      	ldr	r3, [pc, #388]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ee      	beq.n	800146e <HAL_RCC_OscConfig+0x33a>
 8001490:	e014      	b.n	80014bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb77 	bl	8000b84 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fb73 	bl	8000b84 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0a6      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b0:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ee      	bne.n	800149a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d105      	bne.n	80014ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	4b52      	ldr	r3, [pc, #328]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8092 	beq.w	80015fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d05c      	beq.n	800159e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d141      	bne.n	8001570 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x4dc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb47 	bl	8000b84 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff fb43 	bl	8000b84 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e078      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150c:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	019b      	lsls	r3, r3, #6
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	061b      	lsls	r3, r3, #24
 800153c:	4933      	ldr	r1, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_RCC_OscConfig+0x4dc>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb1c 	bl	8000b84 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fb18 	bl	8000b84 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04d      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x41c>
 800156e:	e045      	b.n	80015fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x4dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb05 	bl	8000b84 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb01 	bl	8000b84 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e036      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x44a>
 800159c:	e02e      	b.n	80015fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e029      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d115      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10d      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000
 800160c:	40023800 	.word	0x40023800
 8001610:	42470060 	.word	0x42470060

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff fa3e 	bl	8000b84 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff fa3a 	bl	8000b84 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4601      	mov	r1, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	fa21 f303 	lsr.w	r3, r1, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f99e 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08002d8c 	.word	0x08002d8c
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f6:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d007      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x32>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d008      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x38>
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 80b4 	bne.w	8001974 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b5e      	ldr	r3, [pc, #376]	; (8001988 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800180e:	60bb      	str	r3, [r7, #8]
       break;
 8001810:	e0b3      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001812:	4b5e      	ldr	r3, [pc, #376]	; (800198c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001814:	60bb      	str	r3, [r7, #8]
      break;
 8001816:	e0b0      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001818:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001820:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001822:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04a      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	4b55      	ldr	r3, [pc, #340]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	f04f 0400 	mov.w	r4, #0
 8001838:	f240 11ff 	movw	r1, #511	; 0x1ff
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	ea03 0501 	and.w	r5, r3, r1
 8001844:	ea04 0602 	and.w	r6, r4, r2
 8001848:	4629      	mov	r1, r5
 800184a:	4632      	mov	r2, r6
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	f04f 0400 	mov.w	r4, #0
 8001854:	0154      	lsls	r4, r2, #5
 8001856:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800185a:	014b      	lsls	r3, r1, #5
 800185c:	4619      	mov	r1, r3
 800185e:	4622      	mov	r2, r4
 8001860:	1b49      	subs	r1, r1, r5
 8001862:	eb62 0206 	sbc.w	r2, r2, r6
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	f04f 0400 	mov.w	r4, #0
 800186e:	0194      	lsls	r4, r2, #6
 8001870:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001874:	018b      	lsls	r3, r1, #6
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	eb64 0402 	sbc.w	r4, r4, r2
 800187c:	f04f 0100 	mov.w	r1, #0
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	00e2      	lsls	r2, r4, #3
 8001886:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800188a:	00d9      	lsls	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	4614      	mov	r4, r2
 8001890:	195b      	adds	r3, r3, r5
 8001892:	eb44 0406 	adc.w	r4, r4, r6
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	0262      	lsls	r2, r4, #9
 80018a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018a4:	0259      	lsls	r1, r3, #9
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	4621      	mov	r1, r4
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	f7fe fc98 	bl	80001ec <__aeabi_uldivmod>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e049      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	ea03 0501 	and.w	r5, r3, r1
 80018da:	ea04 0602 	and.w	r6, r4, r2
 80018de:	4629      	mov	r1, r5
 80018e0:	4632      	mov	r2, r6
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	f04f 0400 	mov.w	r4, #0
 80018ea:	0154      	lsls	r4, r2, #5
 80018ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018f0:	014b      	lsls	r3, r1, #5
 80018f2:	4619      	mov	r1, r3
 80018f4:	4622      	mov	r2, r4
 80018f6:	1b49      	subs	r1, r1, r5
 80018f8:	eb62 0206 	sbc.w	r2, r2, r6
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	0194      	lsls	r4, r2, #6
 8001906:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800190a:	018b      	lsls	r3, r1, #6
 800190c:	1a5b      	subs	r3, r3, r1
 800190e:	eb64 0402 	sbc.w	r4, r4, r2
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	00e2      	lsls	r2, r4, #3
 800191c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001920:	00d9      	lsls	r1, r3, #3
 8001922:	460b      	mov	r3, r1
 8001924:	4614      	mov	r4, r2
 8001926:	195b      	adds	r3, r3, r5
 8001928:	eb44 0406 	adc.w	r4, r4, r6
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	02a2      	lsls	r2, r4, #10
 8001936:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800193a:	0299      	lsls	r1, r3, #10
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	4618      	mov	r0, r3
 8001942:	4621      	mov	r1, r4
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f04f 0400 	mov.w	r4, #0
 800194a:	461a      	mov	r2, r3
 800194c:	4623      	mov	r3, r4
 800194e:	f7fe fc4d 	bl	80001ec <__aeabi_uldivmod>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	60bb      	str	r3, [r7, #8]
      break;
 8001972:	e002      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001976:	60bb      	str	r3, [r7, #8]
      break;
 8001978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197a:	68bb      	ldr	r3, [r7, #8]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	007a1200 	.word	0x007a1200

08001990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e056      	b.n	8001a50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7fe ff41 	bl	8000844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2202      	movs	r2, #2
 80019c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	ea42 0103 	orr.w	r1, r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	f003 0104 	and.w	r1, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_SPI_Transmit+0x22>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e11e      	b.n	8001cb8 <HAL_SPI_Transmit+0x260>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a82:	f7ff f87f 	bl	8000b84 <HAL_GetTick>
 8001a86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d002      	beq.n	8001a9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a9c:	e103      	b.n	8001ca6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_SPI_Transmit+0x52>
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001aae:	e0fa      	b.n	8001ca6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001af6:	d107      	bne.n	8001b08 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	2b40      	cmp	r3, #64	; 0x40
 8001b14:	d007      	beq.n	8001b26 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2e:	d14b      	bne.n	8001bc8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_SPI_Transmit+0xe6>
 8001b38:	8afb      	ldrh	r3, [r7, #22]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d13e      	bne.n	8001bbc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	1c9a      	adds	r2, r3, #2
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b62:	e02b      	b.n	8001bbc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d112      	bne.n	8001b98 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	1c9a      	adds	r2, r3, #2
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b96:	e011      	b.n	8001bbc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b98:	f7fe fff4 	bl	8000b84 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d803      	bhi.n	8001bb0 <HAL_SPI_Transmit+0x158>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bae:	d102      	bne.n	8001bb6 <HAL_SPI_Transmit+0x15e>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bba:	e074      	b.n	8001ca6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ce      	bne.n	8001b64 <HAL_SPI_Transmit+0x10c>
 8001bc6:	e04c      	b.n	8001c62 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_Transmit+0x17e>
 8001bd0:	8afb      	ldrh	r3, [r7, #22]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d140      	bne.n	8001c58 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	330c      	adds	r3, #12
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bfc:	e02c      	b.n	8001c58 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d113      	bne.n	8001c34 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	330c      	adds	r3, #12
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c32:	e011      	b.n	8001c58 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c34:	f7fe ffa6 	bl	8000b84 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d803      	bhi.n	8001c4c <HAL_SPI_Transmit+0x1f4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d102      	bne.n	8001c52 <HAL_SPI_Transmit+0x1fa>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c56:	e026      	b.n	8001ca6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1cd      	bne.n	8001bfe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fba4 	bl	80023b4 <SPI_EndRxTxTransaction>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10a      	bne.n	8001c96 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
 8001ca2:	e000      	b.n	8001ca6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001ca4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cdc:	d112      	bne.n	8001d04 <HAL_SPI_Receive+0x44>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10e      	bne.n	8001d04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f8e9 	bl	8001ed2 <HAL_SPI_TransmitReceive>
 8001d00:	4603      	mov	r3, r0
 8001d02:	e0e2      	b.n	8001eca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_SPI_Receive+0x52>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e0db      	b.n	8001eca <HAL_SPI_Receive+0x20a>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d1a:	f7fe ff33 	bl	8000b84 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d002      	beq.n	8001d32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d30:	e0c2      	b.n	8001eb8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_SPI_Receive+0x7e>
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d42:	e0b9      	b.n	8001eb8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2204      	movs	r2, #4
 8001d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d8a:	d107      	bne.n	8001d9c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d007      	beq.n	8001dba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d162      	bne.n	8001e88 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001dc2:	e02e      	b.n	8001e22 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d115      	bne.n	8001dfe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f103 020c 	add.w	r2, r3, #12
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	7812      	ldrb	r2, [r2, #0]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dfc:	e011      	b.n	8001e22 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dfe:	f7fe fec1 	bl	8000b84 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d803      	bhi.n	8001e16 <HAL_SPI_Receive+0x156>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d102      	bne.n	8001e1c <HAL_SPI_Receive+0x15c>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e20:	e04a      	b.n	8001eb8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1cb      	bne.n	8001dc4 <HAL_SPI_Receive+0x104>
 8001e2c:	e031      	b.n	8001e92 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d113      	bne.n	8001e64 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	b292      	uxth	r2, r2
 8001e48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	1c9a      	adds	r2, r3, #2
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e62:	e011      	b.n	8001e88 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e64:	f7fe fe8e 	bl	8000b84 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d803      	bhi.n	8001e7c <HAL_SPI_Receive+0x1bc>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d102      	bne.n	8001e82 <HAL_SPI_Receive+0x1c2>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e86:	e017      	b.n	8001eb8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1cd      	bne.n	8001e2e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fa27 	bl	80022ea <SPI_EndRxTransaction>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	e000      	b.n	8001eb8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001eb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b08c      	sub	sp, #48	; 0x30
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_SPI_TransmitReceive+0x26>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e18a      	b.n	800220e <HAL_SPI_TransmitReceive+0x33c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f00:	f7fe fe40 	bl	8000b84 <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d00f      	beq.n	8001f42 <HAL_SPI_TransmitReceive+0x70>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f28:	d107      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x68>
 8001f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d003      	beq.n	8001f42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f40:	e15b      	b.n	80021fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0x82>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0x82>
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f5a:	e14e      	b.n	80021fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d003      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	887a      	ldrh	r2, [r7, #2]
 8001f92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d007      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fcc:	d178      	bne.n	80020c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x10a>
 8001fd6:	8b7b      	ldrh	r3, [r7, #26]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d166      	bne.n	80020aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	1c9a      	adds	r2, r3, #2
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002000:	e053      	b.n	80020aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d11b      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x176>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x176>
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d113      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	1c9a      	adds	r2, r3, #2
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d119      	bne.n	800208a <HAL_SPI_TransmitReceive+0x1b8>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	b292      	uxth	r2, r2
 800206c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	1c9a      	adds	r2, r3, #2
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002086:	2301      	movs	r3, #1
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800208a:	f7fe fd7b 	bl	8000b84 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002096:	429a      	cmp	r2, r3
 8002098:	d807      	bhi.n	80020aa <HAL_SPI_TransmitReceive+0x1d8>
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d003      	beq.n	80020aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020a8:	e0a7      	b.n	80021fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1a6      	bne.n	8002002 <HAL_SPI_TransmitReceive+0x130>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1a1      	bne.n	8002002 <HAL_SPI_TransmitReceive+0x130>
 80020be:	e07c      	b.n	80021ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_SPI_TransmitReceive+0x1fc>
 80020c8:	8b7b      	ldrh	r3, [r7, #26]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d16b      	bne.n	80021a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020f4:	e057      	b.n	80021a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d11c      	bne.n	800213e <HAL_SPI_TransmitReceive+0x26c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d017      	beq.n	800213e <HAL_SPI_TransmitReceive+0x26c>
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d114      	bne.n	800213e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	330c      	adds	r3, #12
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d119      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x2ae>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d014      	beq.n	8002180 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002180:	f7fe fd00 	bl	8000b84 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218c:	429a      	cmp	r2, r3
 800218e:	d803      	bhi.n	8002198 <HAL_SPI_TransmitReceive+0x2c6>
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d102      	bne.n	800219e <HAL_SPI_TransmitReceive+0x2cc>
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021a4:	e029      	b.n	80021fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1a2      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x224>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d19d      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f8f8 	bl	80023b4 <SPI_EndRxTxTransaction>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80021d6:	e010      	b.n	80021fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	e000      	b.n	80021fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80021f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800220a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800220e:	4618      	mov	r0, r3
 8002210:	3730      	adds	r7, #48	; 0x30
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002226:	e04c      	b.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d048      	beq.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002230:	f7fe fca8 	bl	8000b84 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d902      	bls.n	8002246 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d13d      	bne.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800225e:	d111      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d004      	beq.n	8002274 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d107      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228c:	d10f      	bne.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e00f      	b.n	80022e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1a3      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fe:	d111      	bne.n	8002324 <SPI_EndRxTransaction+0x3a>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002308:	d004      	beq.n	8002314 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d107      	bne.n	8002324 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232c:	d12a      	bne.n	8002384 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d012      	beq.n	800235e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff ff67 	bl	8002216 <SPI_WaitFlagStateUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d02d      	beq.n	80023aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0220 	orr.w	r2, r3, #32
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e026      	b.n	80023ac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	2101      	movs	r1, #1
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff ff54 	bl	8002216 <SPI_WaitFlagStateUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01a      	beq.n	80023aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e013      	b.n	80023ac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2200      	movs	r2, #0
 800238c:	2101      	movs	r1, #1
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff ff41 	bl	8002216 <SPI_WaitFlagStateUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	f043 0220 	orr.w	r2, r3, #32
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e000      	b.n	80023ac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <SPI_EndRxTxTransaction+0x7c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <SPI_EndRxTxTransaction+0x80>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023de:	d112      	bne.n	8002406 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff ff13 	bl	8002216 <SPI_WaitFlagStateUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e00f      	b.n	8002426 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3b01      	subs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d0f2      	beq.n	8002406 <SPI_EndRxTxTransaction+0x52>
 8002420:	e000      	b.n	8002424 <SPI_EndRxTxTransaction+0x70>
        break;
 8002422:	bf00      	nop
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000
 8002434:	165e9f81 	.word	0x165e9f81

08002438 <__errno>:
 8002438:	4b01      	ldr	r3, [pc, #4]	; (8002440 <__errno+0x8>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	2000000c 	.word	0x2000000c

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4e0d      	ldr	r6, [pc, #52]	; (800247c <__libc_init_array+0x38>)
 8002448:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244a:	1ba4      	subs	r4, r4, r6
 800244c:	10a4      	asrs	r4, r4, #2
 800244e:	2500      	movs	r5, #0
 8002450:	42a5      	cmp	r5, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	4e0b      	ldr	r6, [pc, #44]	; (8002484 <__libc_init_array+0x40>)
 8002456:	4c0c      	ldr	r4, [pc, #48]	; (8002488 <__libc_init_array+0x44>)
 8002458:	f000 fc88 	bl	8002d6c <_init>
 800245c:	1ba4      	subs	r4, r4, r6
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	2500      	movs	r5, #0
 8002462:	42a5      	cmp	r5, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800246c:	4798      	blx	r3
 800246e:	3501      	adds	r5, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002476:	4798      	blx	r3
 8002478:	3501      	adds	r5, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	08002e08 	.word	0x08002e08
 8002480:	08002e08 	.word	0x08002e08
 8002484:	08002e08 	.word	0x08002e08
 8002488:	08002e0c 	.word	0x08002e0c

0800248c <memset>:
 800248c:	4402      	add	r2, r0
 800248e:	4603      	mov	r3, r0
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <memset+0xa>
 8002494:	4770      	bx	lr
 8002496:	f803 1b01 	strb.w	r1, [r3], #1
 800249a:	e7f9      	b.n	8002490 <memset+0x4>

0800249c <_puts_r>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	460e      	mov	r6, r1
 80024a0:	4605      	mov	r5, r0
 80024a2:	b118      	cbz	r0, 80024ac <_puts_r+0x10>
 80024a4:	6983      	ldr	r3, [r0, #24]
 80024a6:	b90b      	cbnz	r3, 80024ac <_puts_r+0x10>
 80024a8:	f000 fa0c 	bl	80028c4 <__sinit>
 80024ac:	69ab      	ldr	r3, [r5, #24]
 80024ae:	68ac      	ldr	r4, [r5, #8]
 80024b0:	b913      	cbnz	r3, 80024b8 <_puts_r+0x1c>
 80024b2:	4628      	mov	r0, r5
 80024b4:	f000 fa06 	bl	80028c4 <__sinit>
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <_puts_r+0xac>)
 80024ba:	429c      	cmp	r4, r3
 80024bc:	d117      	bne.n	80024ee <_puts_r+0x52>
 80024be:	686c      	ldr	r4, [r5, #4]
 80024c0:	89a3      	ldrh	r3, [r4, #12]
 80024c2:	071b      	lsls	r3, r3, #28
 80024c4:	d51d      	bpl.n	8002502 <_puts_r+0x66>
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	b1db      	cbz	r3, 8002502 <_puts_r+0x66>
 80024ca:	3e01      	subs	r6, #1
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60a3      	str	r3, [r4, #8]
 80024d6:	b9e9      	cbnz	r1, 8002514 <_puts_r+0x78>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da2e      	bge.n	800253a <_puts_r+0x9e>
 80024dc:	4622      	mov	r2, r4
 80024de:	210a      	movs	r1, #10
 80024e0:	4628      	mov	r0, r5
 80024e2:	f000 f83f 	bl	8002564 <__swbuf_r>
 80024e6:	3001      	adds	r0, #1
 80024e8:	d011      	beq.n	800250e <_puts_r+0x72>
 80024ea:	200a      	movs	r0, #10
 80024ec:	e011      	b.n	8002512 <_puts_r+0x76>
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <_puts_r+0xb0>)
 80024f0:	429c      	cmp	r4, r3
 80024f2:	d101      	bne.n	80024f8 <_puts_r+0x5c>
 80024f4:	68ac      	ldr	r4, [r5, #8]
 80024f6:	e7e3      	b.n	80024c0 <_puts_r+0x24>
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <_puts_r+0xb4>)
 80024fa:	429c      	cmp	r4, r3
 80024fc:	bf08      	it	eq
 80024fe:	68ec      	ldreq	r4, [r5, #12]
 8002500:	e7de      	b.n	80024c0 <_puts_r+0x24>
 8002502:	4621      	mov	r1, r4
 8002504:	4628      	mov	r0, r5
 8002506:	f000 f87f 	bl	8002608 <__swsetup_r>
 800250a:	2800      	cmp	r0, #0
 800250c:	d0dd      	beq.n	80024ca <_puts_r+0x2e>
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	2b00      	cmp	r3, #0
 8002516:	da04      	bge.n	8002522 <_puts_r+0x86>
 8002518:	69a2      	ldr	r2, [r4, #24]
 800251a:	429a      	cmp	r2, r3
 800251c:	dc06      	bgt.n	800252c <_puts_r+0x90>
 800251e:	290a      	cmp	r1, #10
 8002520:	d004      	beq.n	800252c <_puts_r+0x90>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	6022      	str	r2, [r4, #0]
 8002528:	7019      	strb	r1, [r3, #0]
 800252a:	e7cf      	b.n	80024cc <_puts_r+0x30>
 800252c:	4622      	mov	r2, r4
 800252e:	4628      	mov	r0, r5
 8002530:	f000 f818 	bl	8002564 <__swbuf_r>
 8002534:	3001      	adds	r0, #1
 8002536:	d1c9      	bne.n	80024cc <_puts_r+0x30>
 8002538:	e7e9      	b.n	800250e <_puts_r+0x72>
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	200a      	movs	r0, #10
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	6022      	str	r2, [r4, #0]
 8002542:	7018      	strb	r0, [r3, #0]
 8002544:	e7e5      	b.n	8002512 <_puts_r+0x76>
 8002546:	bf00      	nop
 8002548:	08002dc0 	.word	0x08002dc0
 800254c:	08002de0 	.word	0x08002de0
 8002550:	08002da0 	.word	0x08002da0

08002554 <puts>:
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <puts+0xc>)
 8002556:	4601      	mov	r1, r0
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	f7ff bf9f 	b.w	800249c <_puts_r>
 800255e:	bf00      	nop
 8002560:	2000000c 	.word	0x2000000c

08002564 <__swbuf_r>:
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002566:	460e      	mov	r6, r1
 8002568:	4614      	mov	r4, r2
 800256a:	4605      	mov	r5, r0
 800256c:	b118      	cbz	r0, 8002576 <__swbuf_r+0x12>
 800256e:	6983      	ldr	r3, [r0, #24]
 8002570:	b90b      	cbnz	r3, 8002576 <__swbuf_r+0x12>
 8002572:	f000 f9a7 	bl	80028c4 <__sinit>
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <__swbuf_r+0x98>)
 8002578:	429c      	cmp	r4, r3
 800257a:	d12a      	bne.n	80025d2 <__swbuf_r+0x6e>
 800257c:	686c      	ldr	r4, [r5, #4]
 800257e:	69a3      	ldr	r3, [r4, #24]
 8002580:	60a3      	str	r3, [r4, #8]
 8002582:	89a3      	ldrh	r3, [r4, #12]
 8002584:	071a      	lsls	r2, r3, #28
 8002586:	d52e      	bpl.n	80025e6 <__swbuf_r+0x82>
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	b363      	cbz	r3, 80025e6 <__swbuf_r+0x82>
 800258c:	6923      	ldr	r3, [r4, #16]
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	1ac0      	subs	r0, r0, r3
 8002592:	6963      	ldr	r3, [r4, #20]
 8002594:	b2f6      	uxtb	r6, r6
 8002596:	4283      	cmp	r3, r0
 8002598:	4637      	mov	r7, r6
 800259a:	dc04      	bgt.n	80025a6 <__swbuf_r+0x42>
 800259c:	4621      	mov	r1, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 f926 	bl	80027f0 <_fflush_r>
 80025a4:	bb28      	cbnz	r0, 80025f2 <__swbuf_r+0x8e>
 80025a6:	68a3      	ldr	r3, [r4, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60a3      	str	r3, [r4, #8]
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	6022      	str	r2, [r4, #0]
 80025b2:	701e      	strb	r6, [r3, #0]
 80025b4:	6963      	ldr	r3, [r4, #20]
 80025b6:	3001      	adds	r0, #1
 80025b8:	4283      	cmp	r3, r0
 80025ba:	d004      	beq.n	80025c6 <__swbuf_r+0x62>
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	07db      	lsls	r3, r3, #31
 80025c0:	d519      	bpl.n	80025f6 <__swbuf_r+0x92>
 80025c2:	2e0a      	cmp	r6, #10
 80025c4:	d117      	bne.n	80025f6 <__swbuf_r+0x92>
 80025c6:	4621      	mov	r1, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	f000 f911 	bl	80027f0 <_fflush_r>
 80025ce:	b190      	cbz	r0, 80025f6 <__swbuf_r+0x92>
 80025d0:	e00f      	b.n	80025f2 <__swbuf_r+0x8e>
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <__swbuf_r+0x9c>)
 80025d4:	429c      	cmp	r4, r3
 80025d6:	d101      	bne.n	80025dc <__swbuf_r+0x78>
 80025d8:	68ac      	ldr	r4, [r5, #8]
 80025da:	e7d0      	b.n	800257e <__swbuf_r+0x1a>
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <__swbuf_r+0xa0>)
 80025de:	429c      	cmp	r4, r3
 80025e0:	bf08      	it	eq
 80025e2:	68ec      	ldreq	r4, [r5, #12]
 80025e4:	e7cb      	b.n	800257e <__swbuf_r+0x1a>
 80025e6:	4621      	mov	r1, r4
 80025e8:	4628      	mov	r0, r5
 80025ea:	f000 f80d 	bl	8002608 <__swsetup_r>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d0cc      	beq.n	800258c <__swbuf_r+0x28>
 80025f2:	f04f 37ff 	mov.w	r7, #4294967295
 80025f6:	4638      	mov	r0, r7
 80025f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08002dc0 	.word	0x08002dc0
 8002600:	08002de0 	.word	0x08002de0
 8002604:	08002da0 	.word	0x08002da0

08002608 <__swsetup_r>:
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <__swsetup_r+0xcc>)
 800260a:	b570      	push	{r4, r5, r6, lr}
 800260c:	681d      	ldr	r5, [r3, #0]
 800260e:	4606      	mov	r6, r0
 8002610:	460c      	mov	r4, r1
 8002612:	b125      	cbz	r5, 800261e <__swsetup_r+0x16>
 8002614:	69ab      	ldr	r3, [r5, #24]
 8002616:	b913      	cbnz	r3, 800261e <__swsetup_r+0x16>
 8002618:	4628      	mov	r0, r5
 800261a:	f000 f953 	bl	80028c4 <__sinit>
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <__swsetup_r+0xd0>)
 8002620:	429c      	cmp	r4, r3
 8002622:	d10f      	bne.n	8002644 <__swsetup_r+0x3c>
 8002624:	686c      	ldr	r4, [r5, #4]
 8002626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800262a:	b29a      	uxth	r2, r3
 800262c:	0715      	lsls	r5, r2, #28
 800262e:	d42c      	bmi.n	800268a <__swsetup_r+0x82>
 8002630:	06d0      	lsls	r0, r2, #27
 8002632:	d411      	bmi.n	8002658 <__swsetup_r+0x50>
 8002634:	2209      	movs	r2, #9
 8002636:	6032      	str	r2, [r6, #0]
 8002638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263c:	81a3      	strh	r3, [r4, #12]
 800263e:	f04f 30ff 	mov.w	r0, #4294967295
 8002642:	e03e      	b.n	80026c2 <__swsetup_r+0xba>
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <__swsetup_r+0xd4>)
 8002646:	429c      	cmp	r4, r3
 8002648:	d101      	bne.n	800264e <__swsetup_r+0x46>
 800264a:	68ac      	ldr	r4, [r5, #8]
 800264c:	e7eb      	b.n	8002626 <__swsetup_r+0x1e>
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <__swsetup_r+0xd8>)
 8002650:	429c      	cmp	r4, r3
 8002652:	bf08      	it	eq
 8002654:	68ec      	ldreq	r4, [r5, #12]
 8002656:	e7e6      	b.n	8002626 <__swsetup_r+0x1e>
 8002658:	0751      	lsls	r1, r2, #29
 800265a:	d512      	bpl.n	8002682 <__swsetup_r+0x7a>
 800265c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800265e:	b141      	cbz	r1, 8002672 <__swsetup_r+0x6a>
 8002660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002664:	4299      	cmp	r1, r3
 8002666:	d002      	beq.n	800266e <__swsetup_r+0x66>
 8002668:	4630      	mov	r0, r6
 800266a:	f000 fa19 	bl	8002aa0 <_free_r>
 800266e:	2300      	movs	r3, #0
 8002670:	6363      	str	r3, [r4, #52]	; 0x34
 8002672:	89a3      	ldrh	r3, [r4, #12]
 8002674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	6923      	ldr	r3, [r4, #16]
 800268c:	b94b      	cbnz	r3, 80026a2 <__swsetup_r+0x9a>
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d003      	beq.n	80026a2 <__swsetup_r+0x9a>
 800269a:	4621      	mov	r1, r4
 800269c:	4630      	mov	r0, r6
 800269e:	f000 f9bf 	bl	8002a20 <__smakebuf_r>
 80026a2:	89a2      	ldrh	r2, [r4, #12]
 80026a4:	f012 0301 	ands.w	r3, r2, #1
 80026a8:	d00c      	beq.n	80026c4 <__swsetup_r+0xbc>
 80026aa:	2300      	movs	r3, #0
 80026ac:	60a3      	str	r3, [r4, #8]
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	425b      	negs	r3, r3
 80026b2:	61a3      	str	r3, [r4, #24]
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	b953      	cbnz	r3, 80026ce <__swsetup_r+0xc6>
 80026b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80026c0:	d1ba      	bne.n	8002638 <__swsetup_r+0x30>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	0792      	lsls	r2, r2, #30
 80026c6:	bf58      	it	pl
 80026c8:	6963      	ldrpl	r3, [r4, #20]
 80026ca:	60a3      	str	r3, [r4, #8]
 80026cc:	e7f2      	b.n	80026b4 <__swsetup_r+0xac>
 80026ce:	2000      	movs	r0, #0
 80026d0:	e7f7      	b.n	80026c2 <__swsetup_r+0xba>
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	08002dc0 	.word	0x08002dc0
 80026dc:	08002de0 	.word	0x08002de0
 80026e0:	08002da0 	.word	0x08002da0

080026e4 <__sflush_r>:
 80026e4:	898a      	ldrh	r2, [r1, #12]
 80026e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ea:	4605      	mov	r5, r0
 80026ec:	0710      	lsls	r0, r2, #28
 80026ee:	460c      	mov	r4, r1
 80026f0:	d458      	bmi.n	80027a4 <__sflush_r+0xc0>
 80026f2:	684b      	ldr	r3, [r1, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dc05      	bgt.n	8002704 <__sflush_r+0x20>
 80026f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	dc02      	bgt.n	8002704 <__sflush_r+0x20>
 80026fe:	2000      	movs	r0, #0
 8002700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002706:	2e00      	cmp	r6, #0
 8002708:	d0f9      	beq.n	80026fe <__sflush_r+0x1a>
 800270a:	2300      	movs	r3, #0
 800270c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002710:	682f      	ldr	r7, [r5, #0]
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	602b      	str	r3, [r5, #0]
 8002716:	d032      	beq.n	800277e <__sflush_r+0x9a>
 8002718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	075a      	lsls	r2, r3, #29
 800271e:	d505      	bpl.n	800272c <__sflush_r+0x48>
 8002720:	6863      	ldr	r3, [r4, #4]
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002726:	b10b      	cbz	r3, 800272c <__sflush_r+0x48>
 8002728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800272a:	1ac0      	subs	r0, r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4602      	mov	r2, r0
 8002730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002732:	6a21      	ldr	r1, [r4, #32]
 8002734:	4628      	mov	r0, r5
 8002736:	47b0      	blx	r6
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	d106      	bne.n	800274c <__sflush_r+0x68>
 800273e:	6829      	ldr	r1, [r5, #0]
 8002740:	291d      	cmp	r1, #29
 8002742:	d848      	bhi.n	80027d6 <__sflush_r+0xf2>
 8002744:	4a29      	ldr	r2, [pc, #164]	; (80027ec <__sflush_r+0x108>)
 8002746:	40ca      	lsrs	r2, r1
 8002748:	07d6      	lsls	r6, r2, #31
 800274a:	d544      	bpl.n	80027d6 <__sflush_r+0xf2>
 800274c:	2200      	movs	r2, #0
 800274e:	6062      	str	r2, [r4, #4]
 8002750:	04d9      	lsls	r1, r3, #19
 8002752:	6922      	ldr	r2, [r4, #16]
 8002754:	6022      	str	r2, [r4, #0]
 8002756:	d504      	bpl.n	8002762 <__sflush_r+0x7e>
 8002758:	1c42      	adds	r2, r0, #1
 800275a:	d101      	bne.n	8002760 <__sflush_r+0x7c>
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	b903      	cbnz	r3, 8002762 <__sflush_r+0x7e>
 8002760:	6560      	str	r0, [r4, #84]	; 0x54
 8002762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002764:	602f      	str	r7, [r5, #0]
 8002766:	2900      	cmp	r1, #0
 8002768:	d0c9      	beq.n	80026fe <__sflush_r+0x1a>
 800276a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800276e:	4299      	cmp	r1, r3
 8002770:	d002      	beq.n	8002778 <__sflush_r+0x94>
 8002772:	4628      	mov	r0, r5
 8002774:	f000 f994 	bl	8002aa0 <_free_r>
 8002778:	2000      	movs	r0, #0
 800277a:	6360      	str	r0, [r4, #52]	; 0x34
 800277c:	e7c0      	b.n	8002700 <__sflush_r+0x1c>
 800277e:	2301      	movs	r3, #1
 8002780:	4628      	mov	r0, r5
 8002782:	47b0      	blx	r6
 8002784:	1c41      	adds	r1, r0, #1
 8002786:	d1c8      	bne.n	800271a <__sflush_r+0x36>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0c5      	beq.n	800271a <__sflush_r+0x36>
 800278e:	2b1d      	cmp	r3, #29
 8002790:	d001      	beq.n	8002796 <__sflush_r+0xb2>
 8002792:	2b16      	cmp	r3, #22
 8002794:	d101      	bne.n	800279a <__sflush_r+0xb6>
 8002796:	602f      	str	r7, [r5, #0]
 8002798:	e7b1      	b.n	80026fe <__sflush_r+0x1a>
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	e7ad      	b.n	8002700 <__sflush_r+0x1c>
 80027a4:	690f      	ldr	r7, [r1, #16]
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d0a9      	beq.n	80026fe <__sflush_r+0x1a>
 80027aa:	0793      	lsls	r3, r2, #30
 80027ac:	680e      	ldr	r6, [r1, #0]
 80027ae:	bf08      	it	eq
 80027b0:	694b      	ldreq	r3, [r1, #20]
 80027b2:	600f      	str	r7, [r1, #0]
 80027b4:	bf18      	it	ne
 80027b6:	2300      	movne	r3, #0
 80027b8:	eba6 0807 	sub.w	r8, r6, r7
 80027bc:	608b      	str	r3, [r1, #8]
 80027be:	f1b8 0f00 	cmp.w	r8, #0
 80027c2:	dd9c      	ble.n	80026fe <__sflush_r+0x1a>
 80027c4:	4643      	mov	r3, r8
 80027c6:	463a      	mov	r2, r7
 80027c8:	6a21      	ldr	r1, [r4, #32]
 80027ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027cc:	4628      	mov	r0, r5
 80027ce:	47b0      	blx	r6
 80027d0:	2800      	cmp	r0, #0
 80027d2:	dc06      	bgt.n	80027e2 <__sflush_r+0xfe>
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027da:	81a3      	strh	r3, [r4, #12]
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	e78e      	b.n	8002700 <__sflush_r+0x1c>
 80027e2:	4407      	add	r7, r0
 80027e4:	eba8 0800 	sub.w	r8, r8, r0
 80027e8:	e7e9      	b.n	80027be <__sflush_r+0xda>
 80027ea:	bf00      	nop
 80027ec:	20400001 	.word	0x20400001

080027f0 <_fflush_r>:
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	690b      	ldr	r3, [r1, #16]
 80027f4:	4605      	mov	r5, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	b1db      	cbz	r3, 8002832 <_fflush_r+0x42>
 80027fa:	b118      	cbz	r0, 8002804 <_fflush_r+0x14>
 80027fc:	6983      	ldr	r3, [r0, #24]
 80027fe:	b90b      	cbnz	r3, 8002804 <_fflush_r+0x14>
 8002800:	f000 f860 	bl	80028c4 <__sinit>
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <_fflush_r+0x48>)
 8002806:	429c      	cmp	r4, r3
 8002808:	d109      	bne.n	800281e <_fflush_r+0x2e>
 800280a:	686c      	ldr	r4, [r5, #4]
 800280c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002810:	b17b      	cbz	r3, 8002832 <_fflush_r+0x42>
 8002812:	4621      	mov	r1, r4
 8002814:	4628      	mov	r0, r5
 8002816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800281a:	f7ff bf63 	b.w	80026e4 <__sflush_r>
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_fflush_r+0x4c>)
 8002820:	429c      	cmp	r4, r3
 8002822:	d101      	bne.n	8002828 <_fflush_r+0x38>
 8002824:	68ac      	ldr	r4, [r5, #8]
 8002826:	e7f1      	b.n	800280c <_fflush_r+0x1c>
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <_fflush_r+0x50>)
 800282a:	429c      	cmp	r4, r3
 800282c:	bf08      	it	eq
 800282e:	68ec      	ldreq	r4, [r5, #12]
 8002830:	e7ec      	b.n	800280c <_fflush_r+0x1c>
 8002832:	2000      	movs	r0, #0
 8002834:	bd38      	pop	{r3, r4, r5, pc}
 8002836:	bf00      	nop
 8002838:	08002dc0 	.word	0x08002dc0
 800283c:	08002de0 	.word	0x08002de0
 8002840:	08002da0 	.word	0x08002da0

08002844 <std>:
 8002844:	2300      	movs	r3, #0
 8002846:	b510      	push	{r4, lr}
 8002848:	4604      	mov	r4, r0
 800284a:	e9c0 3300 	strd	r3, r3, [r0]
 800284e:	6083      	str	r3, [r0, #8]
 8002850:	8181      	strh	r1, [r0, #12]
 8002852:	6643      	str	r3, [r0, #100]	; 0x64
 8002854:	81c2      	strh	r2, [r0, #14]
 8002856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800285a:	6183      	str	r3, [r0, #24]
 800285c:	4619      	mov	r1, r3
 800285e:	2208      	movs	r2, #8
 8002860:	305c      	adds	r0, #92	; 0x5c
 8002862:	f7ff fe13 	bl	800248c <memset>
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <std+0x38>)
 8002868:	6263      	str	r3, [r4, #36]	; 0x24
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <std+0x3c>)
 800286c:	62a3      	str	r3, [r4, #40]	; 0x28
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <std+0x40>)
 8002870:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <std+0x44>)
 8002874:	6224      	str	r4, [r4, #32]
 8002876:	6323      	str	r3, [r4, #48]	; 0x30
 8002878:	bd10      	pop	{r4, pc}
 800287a:	bf00      	nop
 800287c:	08002c11 	.word	0x08002c11
 8002880:	08002c33 	.word	0x08002c33
 8002884:	08002c6b 	.word	0x08002c6b
 8002888:	08002c8f 	.word	0x08002c8f

0800288c <_cleanup_r>:
 800288c:	4901      	ldr	r1, [pc, #4]	; (8002894 <_cleanup_r+0x8>)
 800288e:	f000 b885 	b.w	800299c <_fwalk_reent>
 8002892:	bf00      	nop
 8002894:	080027f1 	.word	0x080027f1

08002898 <__sfmoreglue>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	1e4a      	subs	r2, r1, #1
 800289c:	2568      	movs	r5, #104	; 0x68
 800289e:	4355      	muls	r5, r2
 80028a0:	460e      	mov	r6, r1
 80028a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80028a6:	f000 f949 	bl	8002b3c <_malloc_r>
 80028aa:	4604      	mov	r4, r0
 80028ac:	b140      	cbz	r0, 80028c0 <__sfmoreglue+0x28>
 80028ae:	2100      	movs	r1, #0
 80028b0:	e9c0 1600 	strd	r1, r6, [r0]
 80028b4:	300c      	adds	r0, #12
 80028b6:	60a0      	str	r0, [r4, #8]
 80028b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028bc:	f7ff fde6 	bl	800248c <memset>
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd70      	pop	{r4, r5, r6, pc}

080028c4 <__sinit>:
 80028c4:	6983      	ldr	r3, [r0, #24]
 80028c6:	b510      	push	{r4, lr}
 80028c8:	4604      	mov	r4, r0
 80028ca:	bb33      	cbnz	r3, 800291a <__sinit+0x56>
 80028cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80028d0:	6503      	str	r3, [r0, #80]	; 0x50
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <__sinit+0x58>)
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <__sinit+0x5c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6282      	str	r2, [r0, #40]	; 0x28
 80028da:	4298      	cmp	r0, r3
 80028dc:	bf04      	itt	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	6183      	streq	r3, [r0, #24]
 80028e2:	f000 f81f 	bl	8002924 <__sfp>
 80028e6:	6060      	str	r0, [r4, #4]
 80028e8:	4620      	mov	r0, r4
 80028ea:	f000 f81b 	bl	8002924 <__sfp>
 80028ee:	60a0      	str	r0, [r4, #8]
 80028f0:	4620      	mov	r0, r4
 80028f2:	f000 f817 	bl	8002924 <__sfp>
 80028f6:	2200      	movs	r2, #0
 80028f8:	60e0      	str	r0, [r4, #12]
 80028fa:	2104      	movs	r1, #4
 80028fc:	6860      	ldr	r0, [r4, #4]
 80028fe:	f7ff ffa1 	bl	8002844 <std>
 8002902:	2201      	movs	r2, #1
 8002904:	2109      	movs	r1, #9
 8002906:	68a0      	ldr	r0, [r4, #8]
 8002908:	f7ff ff9c 	bl	8002844 <std>
 800290c:	2202      	movs	r2, #2
 800290e:	2112      	movs	r1, #18
 8002910:	68e0      	ldr	r0, [r4, #12]
 8002912:	f7ff ff97 	bl	8002844 <std>
 8002916:	2301      	movs	r3, #1
 8002918:	61a3      	str	r3, [r4, #24]
 800291a:	bd10      	pop	{r4, pc}
 800291c:	08002d9c 	.word	0x08002d9c
 8002920:	0800288d 	.word	0x0800288d

08002924 <__sfp>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <__sfp+0x70>)
 8002928:	681e      	ldr	r6, [r3, #0]
 800292a:	69b3      	ldr	r3, [r6, #24]
 800292c:	4607      	mov	r7, r0
 800292e:	b913      	cbnz	r3, 8002936 <__sfp+0x12>
 8002930:	4630      	mov	r0, r6
 8002932:	f7ff ffc7 	bl	80028c4 <__sinit>
 8002936:	3648      	adds	r6, #72	; 0x48
 8002938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800293c:	3b01      	subs	r3, #1
 800293e:	d503      	bpl.n	8002948 <__sfp+0x24>
 8002940:	6833      	ldr	r3, [r6, #0]
 8002942:	b133      	cbz	r3, 8002952 <__sfp+0x2e>
 8002944:	6836      	ldr	r6, [r6, #0]
 8002946:	e7f7      	b.n	8002938 <__sfp+0x14>
 8002948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800294c:	b16d      	cbz	r5, 800296a <__sfp+0x46>
 800294e:	3468      	adds	r4, #104	; 0x68
 8002950:	e7f4      	b.n	800293c <__sfp+0x18>
 8002952:	2104      	movs	r1, #4
 8002954:	4638      	mov	r0, r7
 8002956:	f7ff ff9f 	bl	8002898 <__sfmoreglue>
 800295a:	6030      	str	r0, [r6, #0]
 800295c:	2800      	cmp	r0, #0
 800295e:	d1f1      	bne.n	8002944 <__sfp+0x20>
 8002960:	230c      	movs	r3, #12
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4604      	mov	r4, r0
 8002966:	4620      	mov	r0, r4
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <__sfp+0x74>)
 800296c:	6665      	str	r5, [r4, #100]	; 0x64
 800296e:	e9c4 5500 	strd	r5, r5, [r4]
 8002972:	60a5      	str	r5, [r4, #8]
 8002974:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002978:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800297c:	2208      	movs	r2, #8
 800297e:	4629      	mov	r1, r5
 8002980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002984:	f7ff fd82 	bl	800248c <memset>
 8002988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800298c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002990:	e7e9      	b.n	8002966 <__sfp+0x42>
 8002992:	bf00      	nop
 8002994:	08002d9c 	.word	0x08002d9c
 8002998:	ffff0001 	.word	0xffff0001

0800299c <_fwalk_reent>:
 800299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029a0:	4680      	mov	r8, r0
 80029a2:	4689      	mov	r9, r1
 80029a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029a8:	2600      	movs	r6, #0
 80029aa:	b914      	cbnz	r4, 80029b2 <_fwalk_reent+0x16>
 80029ac:	4630      	mov	r0, r6
 80029ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80029b6:	3f01      	subs	r7, #1
 80029b8:	d501      	bpl.n	80029be <_fwalk_reent+0x22>
 80029ba:	6824      	ldr	r4, [r4, #0]
 80029bc:	e7f5      	b.n	80029aa <_fwalk_reent+0xe>
 80029be:	89ab      	ldrh	r3, [r5, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d907      	bls.n	80029d4 <_fwalk_reent+0x38>
 80029c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029c8:	3301      	adds	r3, #1
 80029ca:	d003      	beq.n	80029d4 <_fwalk_reent+0x38>
 80029cc:	4629      	mov	r1, r5
 80029ce:	4640      	mov	r0, r8
 80029d0:	47c8      	blx	r9
 80029d2:	4306      	orrs	r6, r0
 80029d4:	3568      	adds	r5, #104	; 0x68
 80029d6:	e7ee      	b.n	80029b6 <_fwalk_reent+0x1a>

080029d8 <__swhatbuf_r>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	460e      	mov	r6, r1
 80029dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e0:	2900      	cmp	r1, #0
 80029e2:	b096      	sub	sp, #88	; 0x58
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	da07      	bge.n	80029fa <__swhatbuf_r+0x22>
 80029ea:	2300      	movs	r3, #0
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	89b3      	ldrh	r3, [r6, #12]
 80029f0:	061a      	lsls	r2, r3, #24
 80029f2:	d410      	bmi.n	8002a16 <__swhatbuf_r+0x3e>
 80029f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f8:	e00e      	b.n	8002a18 <__swhatbuf_r+0x40>
 80029fa:	466a      	mov	r2, sp
 80029fc:	f000 f96e 	bl	8002cdc <_fstat_r>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	dbf2      	blt.n	80029ea <__swhatbuf_r+0x12>
 8002a04:	9a01      	ldr	r2, [sp, #4]
 8002a06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a0e:	425a      	negs	r2, r3
 8002a10:	415a      	adcs	r2, r3
 8002a12:	602a      	str	r2, [r5, #0]
 8002a14:	e7ee      	b.n	80029f4 <__swhatbuf_r+0x1c>
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	2000      	movs	r0, #0
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	b016      	add	sp, #88	; 0x58
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}

08002a20 <__smakebuf_r>:
 8002a20:	898b      	ldrh	r3, [r1, #12]
 8002a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a24:	079d      	lsls	r5, r3, #30
 8002a26:	4606      	mov	r6, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	d507      	bpl.n	8002a3c <__smakebuf_r+0x1c>
 8002a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	6123      	str	r3, [r4, #16]
 8002a34:	2301      	movs	r3, #1
 8002a36:	6163      	str	r3, [r4, #20]
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	ab01      	add	r3, sp, #4
 8002a3e:	466a      	mov	r2, sp
 8002a40:	f7ff ffca 	bl	80029d8 <__swhatbuf_r>
 8002a44:	9900      	ldr	r1, [sp, #0]
 8002a46:	4605      	mov	r5, r0
 8002a48:	4630      	mov	r0, r6
 8002a4a:	f000 f877 	bl	8002b3c <_malloc_r>
 8002a4e:	b948      	cbnz	r0, 8002a64 <__smakebuf_r+0x44>
 8002a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a54:	059a      	lsls	r2, r3, #22
 8002a56:	d4ef      	bmi.n	8002a38 <__smakebuf_r+0x18>
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	81a3      	strh	r3, [r4, #12]
 8002a62:	e7e3      	b.n	8002a2c <__smakebuf_r+0xc>
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <__smakebuf_r+0x7c>)
 8002a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	6020      	str	r0, [r4, #0]
 8002a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	9b00      	ldr	r3, [sp, #0]
 8002a74:	6163      	str	r3, [r4, #20]
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	6120      	str	r0, [r4, #16]
 8002a7a:	b15b      	cbz	r3, 8002a94 <__smakebuf_r+0x74>
 8002a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a80:	4630      	mov	r0, r6
 8002a82:	f000 f93d 	bl	8002d00 <_isatty_r>
 8002a86:	b128      	cbz	r0, 8002a94 <__smakebuf_r+0x74>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	89a3      	ldrh	r3, [r4, #12]
 8002a96:	431d      	orrs	r5, r3
 8002a98:	81a5      	strh	r5, [r4, #12]
 8002a9a:	e7cd      	b.n	8002a38 <__smakebuf_r+0x18>
 8002a9c:	0800288d 	.word	0x0800288d

08002aa0 <_free_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d045      	beq.n	8002b34 <_free_r+0x94>
 8002aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aac:	1f0c      	subs	r4, r1, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfb8      	it	lt
 8002ab2:	18e4      	addlt	r4, r4, r3
 8002ab4:	f000 f946 	bl	8002d44 <__malloc_lock>
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <_free_r+0x98>)
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	4610      	mov	r0, r2
 8002abe:	b933      	cbnz	r3, 8002ace <_free_r+0x2e>
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	6014      	str	r4, [r2, #0]
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aca:	f000 b93c 	b.w	8002d46 <__malloc_unlock>
 8002ace:	42a3      	cmp	r3, r4
 8002ad0:	d90c      	bls.n	8002aec <_free_r+0x4c>
 8002ad2:	6821      	ldr	r1, [r4, #0]
 8002ad4:	1862      	adds	r2, r4, r1
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	bf04      	itt	eq
 8002ada:	681a      	ldreq	r2, [r3, #0]
 8002adc:	685b      	ldreq	r3, [r3, #4]
 8002ade:	6063      	str	r3, [r4, #4]
 8002ae0:	bf04      	itt	eq
 8002ae2:	1852      	addeq	r2, r2, r1
 8002ae4:	6022      	streq	r2, [r4, #0]
 8002ae6:	6004      	str	r4, [r0, #0]
 8002ae8:	e7ec      	b.n	8002ac4 <_free_r+0x24>
 8002aea:	4613      	mov	r3, r2
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	b10a      	cbz	r2, 8002af4 <_free_r+0x54>
 8002af0:	42a2      	cmp	r2, r4
 8002af2:	d9fa      	bls.n	8002aea <_free_r+0x4a>
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	1858      	adds	r0, r3, r1
 8002af8:	42a0      	cmp	r0, r4
 8002afa:	d10b      	bne.n	8002b14 <_free_r+0x74>
 8002afc:	6820      	ldr	r0, [r4, #0]
 8002afe:	4401      	add	r1, r0
 8002b00:	1858      	adds	r0, r3, r1
 8002b02:	4282      	cmp	r2, r0
 8002b04:	6019      	str	r1, [r3, #0]
 8002b06:	d1dd      	bne.n	8002ac4 <_free_r+0x24>
 8002b08:	6810      	ldr	r0, [r2, #0]
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	4401      	add	r1, r0
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	e7d7      	b.n	8002ac4 <_free_r+0x24>
 8002b14:	d902      	bls.n	8002b1c <_free_r+0x7c>
 8002b16:	230c      	movs	r3, #12
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	e7d3      	b.n	8002ac4 <_free_r+0x24>
 8002b1c:	6820      	ldr	r0, [r4, #0]
 8002b1e:	1821      	adds	r1, r4, r0
 8002b20:	428a      	cmp	r2, r1
 8002b22:	bf04      	itt	eq
 8002b24:	6811      	ldreq	r1, [r2, #0]
 8002b26:	6852      	ldreq	r2, [r2, #4]
 8002b28:	6062      	str	r2, [r4, #4]
 8002b2a:	bf04      	itt	eq
 8002b2c:	1809      	addeq	r1, r1, r0
 8002b2e:	6021      	streq	r1, [r4, #0]
 8002b30:	605c      	str	r4, [r3, #4]
 8002b32:	e7c7      	b.n	8002ac4 <_free_r+0x24>
 8002b34:	bd38      	pop	{r3, r4, r5, pc}
 8002b36:	bf00      	nop
 8002b38:	20000090 	.word	0x20000090

08002b3c <_malloc_r>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	1ccd      	adds	r5, r1, #3
 8002b40:	f025 0503 	bic.w	r5, r5, #3
 8002b44:	3508      	adds	r5, #8
 8002b46:	2d0c      	cmp	r5, #12
 8002b48:	bf38      	it	cc
 8002b4a:	250c      	movcc	r5, #12
 8002b4c:	2d00      	cmp	r5, #0
 8002b4e:	4606      	mov	r6, r0
 8002b50:	db01      	blt.n	8002b56 <_malloc_r+0x1a>
 8002b52:	42a9      	cmp	r1, r5
 8002b54:	d903      	bls.n	8002b5e <_malloc_r+0x22>
 8002b56:	230c      	movs	r3, #12
 8002b58:	6033      	str	r3, [r6, #0]
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
 8002b5e:	f000 f8f1 	bl	8002d44 <__malloc_lock>
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <_malloc_r+0xac>)
 8002b64:	6814      	ldr	r4, [r2, #0]
 8002b66:	4621      	mov	r1, r4
 8002b68:	b991      	cbnz	r1, 8002b90 <_malloc_r+0x54>
 8002b6a:	4c20      	ldr	r4, [pc, #128]	; (8002bec <_malloc_r+0xb0>)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	b91b      	cbnz	r3, 8002b78 <_malloc_r+0x3c>
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 f83d 	bl	8002bf0 <_sbrk_r>
 8002b76:	6020      	str	r0, [r4, #0]
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	f000 f838 	bl	8002bf0 <_sbrk_r>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d124      	bne.n	8002bce <_malloc_r+0x92>
 8002b84:	230c      	movs	r3, #12
 8002b86:	6033      	str	r3, [r6, #0]
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f000 f8dc 	bl	8002d46 <__malloc_unlock>
 8002b8e:	e7e4      	b.n	8002b5a <_malloc_r+0x1e>
 8002b90:	680b      	ldr	r3, [r1, #0]
 8002b92:	1b5b      	subs	r3, r3, r5
 8002b94:	d418      	bmi.n	8002bc8 <_malloc_r+0x8c>
 8002b96:	2b0b      	cmp	r3, #11
 8002b98:	d90f      	bls.n	8002bba <_malloc_r+0x7e>
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	50cd      	str	r5, [r1, r3]
 8002b9e:	18cc      	adds	r4, r1, r3
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	f000 f8d0 	bl	8002d46 <__malloc_unlock>
 8002ba6:	f104 000b 	add.w	r0, r4, #11
 8002baa:	1d23      	adds	r3, r4, #4
 8002bac:	f020 0007 	bic.w	r0, r0, #7
 8002bb0:	1ac3      	subs	r3, r0, r3
 8002bb2:	d0d3      	beq.n	8002b5c <_malloc_r+0x20>
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	50e2      	str	r2, [r4, r3]
 8002bb8:	e7d0      	b.n	8002b5c <_malloc_r+0x20>
 8002bba:	428c      	cmp	r4, r1
 8002bbc:	684b      	ldr	r3, [r1, #4]
 8002bbe:	bf16      	itet	ne
 8002bc0:	6063      	strne	r3, [r4, #4]
 8002bc2:	6013      	streq	r3, [r2, #0]
 8002bc4:	460c      	movne	r4, r1
 8002bc6:	e7eb      	b.n	8002ba0 <_malloc_r+0x64>
 8002bc8:	460c      	mov	r4, r1
 8002bca:	6849      	ldr	r1, [r1, #4]
 8002bcc:	e7cc      	b.n	8002b68 <_malloc_r+0x2c>
 8002bce:	1cc4      	adds	r4, r0, #3
 8002bd0:	f024 0403 	bic.w	r4, r4, #3
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	d005      	beq.n	8002be4 <_malloc_r+0xa8>
 8002bd8:	1a21      	subs	r1, r4, r0
 8002bda:	4630      	mov	r0, r6
 8002bdc:	f000 f808 	bl	8002bf0 <_sbrk_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d0cf      	beq.n	8002b84 <_malloc_r+0x48>
 8002be4:	6025      	str	r5, [r4, #0]
 8002be6:	e7db      	b.n	8002ba0 <_malloc_r+0x64>
 8002be8:	20000090 	.word	0x20000090
 8002bec:	20000094 	.word	0x20000094

08002bf0 <_sbrk_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4c06      	ldr	r4, [pc, #24]	; (8002c0c <_sbrk_r+0x1c>)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	f7fd fee6 	bl	80009cc <_sbrk>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d102      	bne.n	8002c0a <_sbrk_r+0x1a>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	b103      	cbz	r3, 8002c0a <_sbrk_r+0x1a>
 8002c08:	602b      	str	r3, [r5, #0]
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	200000f4 	.word	0x200000f4

08002c10 <__sread>:
 8002c10:	b510      	push	{r4, lr}
 8002c12:	460c      	mov	r4, r1
 8002c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c18:	f000 f896 	bl	8002d48 <_read_r>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	bfab      	itete	ge
 8002c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c22:	89a3      	ldrhlt	r3, [r4, #12]
 8002c24:	181b      	addge	r3, r3, r0
 8002c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c2a:	bfac      	ite	ge
 8002c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c2e:	81a3      	strhlt	r3, [r4, #12]
 8002c30:	bd10      	pop	{r4, pc}

08002c32 <__swrite>:
 8002c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c36:	461f      	mov	r7, r3
 8002c38:	898b      	ldrh	r3, [r1, #12]
 8002c3a:	05db      	lsls	r3, r3, #23
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	4616      	mov	r6, r2
 8002c42:	d505      	bpl.n	8002c50 <__swrite+0x1e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	2200      	movs	r2, #0
 8002c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4c:	f000 f868 	bl	8002d20 <_lseek_r>
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c5a:	81a3      	strh	r3, [r4, #12]
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	463b      	mov	r3, r7
 8002c60:	4628      	mov	r0, r5
 8002c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c66:	f000 b817 	b.w	8002c98 <_write_r>

08002c6a <__sseek>:
 8002c6a:	b510      	push	{r4, lr}
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c72:	f000 f855 	bl	8002d20 <_lseek_r>
 8002c76:	1c43      	adds	r3, r0, #1
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	bf15      	itete	ne
 8002c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c86:	81a3      	strheq	r3, [r4, #12]
 8002c88:	bf18      	it	ne
 8002c8a:	81a3      	strhne	r3, [r4, #12]
 8002c8c:	bd10      	pop	{r4, pc}

08002c8e <__sclose>:
 8002c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c92:	f000 b813 	b.w	8002cbc <_close_r>
	...

08002c98 <_write_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	4c07      	ldr	r4, [pc, #28]	; (8002cb8 <_write_r+0x20>)
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f7fd fd86 	bl	80007b8 <_write>
 8002cac:	1c43      	adds	r3, r0, #1
 8002cae:	d102      	bne.n	8002cb6 <_write_r+0x1e>
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	b103      	cbz	r3, 8002cb6 <_write_r+0x1e>
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	200000f4 	.word	0x200000f4

08002cbc <_close_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4c06      	ldr	r4, [pc, #24]	; (8002cd8 <_close_r+0x1c>)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	f7fd fe4b 	bl	8000962 <_close>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_close_r+0x1a>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_close_r+0x1a>
 8002cd4:	602b      	str	r3, [r5, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	200000f4 	.word	0x200000f4

08002cdc <_fstat_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4c07      	ldr	r4, [pc, #28]	; (8002cfc <_fstat_r+0x20>)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	4605      	mov	r5, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	f7fd fe46 	bl	800097a <_fstat>
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d102      	bne.n	8002cf8 <_fstat_r+0x1c>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	b103      	cbz	r3, 8002cf8 <_fstat_r+0x1c>
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200000f4 	.word	0x200000f4

08002d00 <_isatty_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4c06      	ldr	r4, [pc, #24]	; (8002d1c <_isatty_r+0x1c>)
 8002d04:	2300      	movs	r3, #0
 8002d06:	4605      	mov	r5, r0
 8002d08:	4608      	mov	r0, r1
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	f7fd fe45 	bl	800099a <_isatty>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d102      	bne.n	8002d1a <_isatty_r+0x1a>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	b103      	cbz	r3, 8002d1a <_isatty_r+0x1a>
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	200000f4 	.word	0x200000f4

08002d20 <_lseek_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4c07      	ldr	r4, [pc, #28]	; (8002d40 <_lseek_r+0x20>)
 8002d24:	4605      	mov	r5, r0
 8002d26:	4608      	mov	r0, r1
 8002d28:	4611      	mov	r1, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7fd fe3e 	bl	80009b0 <_lseek>
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	d102      	bne.n	8002d3e <_lseek_r+0x1e>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	b103      	cbz	r3, 8002d3e <_lseek_r+0x1e>
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	200000f4 	.word	0x200000f4

08002d44 <__malloc_lock>:
 8002d44:	4770      	bx	lr

08002d46 <__malloc_unlock>:
 8002d46:	4770      	bx	lr

08002d48 <_read_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4c07      	ldr	r4, [pc, #28]	; (8002d68 <_read_r+0x20>)
 8002d4c:	4605      	mov	r5, r0
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	6022      	str	r2, [r4, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7fd fde6 	bl	8000928 <_read>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d102      	bne.n	8002d66 <_read_r+0x1e>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	b103      	cbz	r3, 8002d66 <_read_r+0x1e>
 8002d64:	602b      	str	r3, [r5, #0]
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	200000f4 	.word	0x200000f4

08002d6c <_init>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr

08002d78 <_fini>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr
