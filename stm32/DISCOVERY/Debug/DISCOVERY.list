
DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c958  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800cb08  0800cb08  0001cb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc0  0800ccc0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccc0  0800ccc0  0001ccc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc8  0800ccc8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc8  0800ccc8  0001ccc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cccc  0800cccc  0001cccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ccd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d24  20000094  0800cd64  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008db8  0800cd64  00028db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e183  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ab4  00000000  00000000  0004e247  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022c8  00000000  00000000  00053d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  00055fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c1a0  00000000  00000000  00058030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ecb1  00000000  00000000  000841d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3d6a  00000000  00000000  000a2e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00196beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009934  00000000  00000000  00196c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800caf0 	.word	0x0800caf0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800caf0 	.word	0x0800caf0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000b0 	.word	0x200000b0
 8000554:	20000108 	.word	0x20000108

08000558 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000560:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000564:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d013      	beq.n	8000598 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000578:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00b      	beq.n	8000598 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000580:	e000      	b.n	8000584 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000582:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f9      	beq.n	8000582 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800058e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000598:	687b      	ldr	r3, [r7, #4]
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
	...

080005a8 <main>:
void StartDefaultTask2(void const * argument);
void StartDefaultTask3(void const * argument);
const char* SerialPrint(void);

int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  HAL_Init();
 80005ae:	f001 f915 	bl	80017dc <HAL_Init>
  SystemClock_Config();
 80005b2:	f000 f85d 	bl	8000670 <SystemClock_Config>
  MX_GPIO_Init();
 80005b6:	f000 fae5 	bl	8000b84 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ba:	f000 f8dd 	bl	8000778 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005be:	f000 f8ef 	bl	80007a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005c2:	f000 fa8f 	bl	8000ae4 <MX_FMC_Init>
  MX_I2C3_Init();
 80005c6:	f000 f91d 	bl	8000804 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005ca:	f000 f95b 	bl	8000884 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ce:	f000 f9d9 	bl	8000984 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005d2:	f000 fa0d 	bl	80009f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 fa5b 	bl	8000a90 <MX_USART1_UART_Init>

  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0xb0>)
 80005dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f009 f88a 	bl	800970e <osThreadCreate>
 80005fa:	4602      	mov	r2, r0
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <main+0xb4>)
 80005fe:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <main+0xb8>)
 8000602:	f107 0420 	add.w	r4, r7, #32
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTask2Handle = osThreadCreate(osThread(defaultTask2), NULL);
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f009 f877 	bl	800970e <osThreadCreate>
 8000620:	4602      	mov	r2, r0
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <main+0xbc>)
 8000624:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask3, StartDefaultTask3, osPriorityBelowNormal, 0, 128);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <main+0xc0>)
 8000628:	1d3c      	adds	r4, r7, #4
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTask3Handle = osThreadCreate(osThread(defaultTask3), NULL);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f009 f866 	bl	800970e <osThreadCreate>
 8000642:	4602      	mov	r2, r0
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <main+0xc4>)
 8000646:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8000648:	f009 f85a 	bl	8009700 <osKernelStart>
 800064c:	2300      	movs	r3, #0

}
 800064e:	4618      	mov	r0, r3
 8000650:	3758      	adds	r7, #88	; 0x58
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	0800cb14 	.word	0x0800cb14
 800065c:	2000846c 	.word	0x2000846c
 8000660:	0800cb40 	.word	0x0800cb40
 8000664:	200086c4 	.word	0x200086c4
 8000668:	0800cb6c 	.word	0x0800cb6c
 800066c:	2000864c 	.word	0x2000864c

08000670 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a0      	sub	sp, #128	; 0x80
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00b fdc5 	bl	800c20e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2230      	movs	r2, #48	; 0x30
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f00b fdb6 	bl	800c20e <memset>

  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <SystemClock_Config+0x100>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <SystemClock_Config+0x100>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <SystemClock_Config+0x100>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <SystemClock_Config+0x104>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ca:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <SystemClock_Config+0x104>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0x104>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006de:	2301      	movs	r3, #1
 80006e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006f6:	2378      	movs	r3, #120	; 0x78
 80006f8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006fe:	2305      	movs	r3, #5
 8000700:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000706:	4618      	mov	r0, r3
 8000708:	f003 ff86 	bl	8004618 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000712:	f000 fbba 	bl	8000e8a <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800071e:	2390      	movs	r3, #144	; 0x90
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f9e0 	bl	8004af8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800073e:	f000 fba4 	bl	8000e8a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000742:	2308      	movs	r3, #8
 8000744:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000746:	2332      	movs	r3, #50	; 0x32
 8000748:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fbf2 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000762:	f000 fb92 	bl	8000e8a <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3780      	adds	r7, #128	; 0x80
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_CRC_Init>:


static void MX_CRC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_CRC_Init+0x20>)
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <MX_CRC_Init+0x24>)
 8000780:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_CRC_Init+0x20>)
 8000784:	f001 f970 	bl	8001a68 <HAL_CRC_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800078e:	f000 fb7c 	bl	8000e8a <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000851c 	.word	0x2000851c
 800079c:	40023000 	.word	0x40023000

080007a0 <MX_DMA2D_Init>:

static void MX_DMA2D_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  hdma2d.Instance = DMA2D;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_DMA2D_Init+0x60>)
 80007a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007d6:	f001 f963 	bl	8001aa0 <HAL_DMA2D_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007e0:	f000 fb53 	bl	8000e8a <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007e4:	2101      	movs	r1, #1
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_DMA2D_Init+0x5c>)
 80007e8:	f001 fab4 	bl	8001d54 <HAL_DMA2D_ConfigLayer>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007f2:	f000 fb4a 	bl	8000e8a <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20008650 	.word	0x20008650
 8000800:	4002b000 	.word	0x4002b000

08000804 <MX_I2C3_Init>:


static void MX_I2C3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  hi2c3.Instance = I2C3;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_I2C3_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_I2C3_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_I2C3_Init+0x74>)
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <MX_I2C3_Init+0x7c>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_I2C3_Init+0x74>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_I2C3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_I2C3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_I2C3_Init+0x74>)
 8000842:	f003 f9cd 	bl	8003be0 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 fb1d 	bl	8000e8a <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_I2C3_Init+0x74>)
 8000854:	f003 fafc 	bl	8003e50 <HAL_I2CEx_ConfigAnalogFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 fb14 	bl	8000e8a <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C3_Init+0x74>)
 8000866:	f003 fb2f 	bl	8003ec8 <HAL_I2CEx_ConfigDigitalFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000870:	f000 fb0b 	bl	8000e8a <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20008470 	.word	0x20008470
 800087c:	40005c00 	.word	0x40005c00
 8000880:	000186a0 	.word	0x000186a0

08000884 <MX_LTDC_Init>:


static void MX_LTDC_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2234      	movs	r2, #52	; 0x34
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f00b fcbc 	bl	800c20e <memset>

  hltdc.Instance = LTDC;
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <MX_LTDC_Init+0xf8>)
 8000898:	4a39      	ldr	r2, [pc, #228]	; (8000980 <MX_LTDC_Init+0xfc>)
 800089a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_LTDC_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <MX_LTDC_Init+0xf8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_LTDC_Init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <MX_LTDC_Init+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008b4:	4b31      	ldr	r3, [pc, #196]	; (800097c <MX_LTDC_Init+0xf8>)
 80008b6:	2209      	movs	r2, #9
 80008b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_LTDC_Init+0xf8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_LTDC_Init+0xf8>)
 80008c2:	221d      	movs	r2, #29
 80008c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_LTDC_Init+0xf8>)
 80008c8:	2203      	movs	r2, #3
 80008ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_LTDC_Init+0xf8>)
 80008ce:	f240 120d 	movw	r2, #269	; 0x10d
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_LTDC_Init+0xf8>)
 80008d6:	f240 1243 	movw	r2, #323	; 0x143
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_LTDC_Init+0xf8>)
 80008de:	f240 1217 	movw	r2, #279	; 0x117
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_LTDC_Init+0xf8>)
 80008e6:	f240 1247 	movw	r2, #327	; 0x147
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_LTDC_Init+0xf8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_LTDC_Init+0xf8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_LTDC_Init+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <MX_LTDC_Init+0xf8>)
 8000906:	f003 fb1f 	bl	8003f48 <HAL_LTDC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 fabb 	bl	8000e8a <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000918:	23f0      	movs	r3, #240	; 0xf0
 800091a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000920:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000924:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000926:	2302      	movs	r3, #2
 8000928:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800092a:	23ff      	movs	r3, #255	; 0xff
 800092c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000932:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000936:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000938:	2307      	movs	r3, #7
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800093c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000942:	23f0      	movs	r3, #240	; 0xf0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000946:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_LTDC_Init+0xf8>)
 8000966:	f003 fc81 	bl	800426c <HAL_LTDC_ConfigLayer>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000970:	f000 fa8b 	bl	8000e8a <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20008524 	.word	0x20008524
 8000980:	40016800 	.word	0x40016800

08000984 <MX_SPI5_Init>:


static void MX_SPI5_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  hspi5.Instance = SPI5;
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_SPI5_Init+0x64>)
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_SPI5_Init+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_SPI5_Init+0x64>)
 8000990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000994:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_SPI5_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_SPI5_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009b8:	2218      	movs	r2, #24
 80009ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009d0:	220a      	movs	r2, #10
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_SPI5_Init+0x64>)
 80009d6:	f004 fca5 	bl	8005324 <HAL_SPI_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009e0:	f000 fa53 	bl	8000e8a <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200084c4 	.word	0x200084c4
 80009ec:	40015000 	.word	0x40015000

080009f0 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <MX_TIM1_Init+0x9c>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a3a:	f004 fcd7 	bl	80053ec <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 fa21 	bl	8000e8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a56:	f004 fe20 	bl	800569a <HAL_TIM_ConfigClockSource>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a60:	f000 fa13 	bl	8000e8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_TIM1_Init+0x98>)
 8000a72:	f005 f82b 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a7c:	f000 fa05 	bl	8000e8a <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000860c 	.word	0x2000860c
 8000a8c:	40010000 	.word	0x40010000

08000a90 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART1_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f005 f890 	bl	8005bec <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f9da 	bl	8000e8a <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200085cc 	.word	0x200085cc
 8000ae0:	40011000 	.word	0x40011000

08000ae4 <MX_FMC_Init>:


static void MX_FMC_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_FMC_Init+0x98>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <MX_FMC_Init+0x9c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b16:	2210      	movs	r2, #16
 8000b18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28

  SdramTiming.LoadToActiveDelay = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b50:	2307      	movs	r3, #7
 8000b52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b54:	2303      	movs	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b66:	f004 fba9 	bl	80052bc <HAL_SDRAM_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b70:	f000 f98b 	bl	8000e8a <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20008690 	.word	0x20008690
 8000b80:	a0000140 	.word	0xa0000140

08000b84 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a79      	ldr	r2, [pc, #484]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b77      	ldr	r3, [pc, #476]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	4b73      	ldr	r3, [pc, #460]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a72      	ldr	r2, [pc, #456]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b70      	ldr	r3, [pc, #448]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a6b      	ldr	r2, [pc, #428]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a64      	ldr	r2, [pc, #400]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a5d      	ldr	r2, [pc, #372]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b5b      	ldr	r3, [pc, #364]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a56      	ldr	r2, [pc, #344]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a4f      	ldr	r2, [pc, #316]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <MX_GPIO_Init+0x204>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2116      	movs	r1, #22
 8000c7e:	4843      	ldr	r0, [pc, #268]	; (8000d8c <MX_GPIO_Init+0x208>)
 8000c80:	f001 faa4 	bl	80021cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	4841      	ldr	r0, [pc, #260]	; (8000d90 <MX_GPIO_Init+0x20c>)
 8000c8a:	f001 fa9f 	bl	80021cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c94:	483f      	ldr	r0, [pc, #252]	; (8000d94 <MX_GPIO_Init+0x210>)
 8000c96:	f001 fa99 	bl	80021cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ca0:	483d      	ldr	r0, [pc, #244]	; (8000d98 <MX_GPIO_Init+0x214>)
 8000ca2:	f001 fa93 	bl	80021cc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ca6:	2316      	movs	r3, #22
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4833      	ldr	r0, [pc, #204]	; (8000d8c <MX_GPIO_Init+0x208>)
 8000cbe:	f001 f8db 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cc2:	f248 0307 	movw	r3, #32775	; 0x8007
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <MX_GPIO_Init+0x218>)
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	482e      	ldr	r0, [pc, #184]	; (8000d90 <MX_GPIO_Init+0x20c>)
 8000cd8:	f001 f8ce 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4827      	ldr	r0, [pc, #156]	; (8000d90 <MX_GPIO_Init+0x20c>)
 8000cf4:	f001 f8c0 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_GPIO_Init+0x218>)
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4820      	ldr	r0, [pc, #128]	; (8000d8c <MX_GPIO_Init+0x208>)
 8000d0c:	f001 f8b4 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d10:	2304      	movs	r3, #4
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	481f      	ldr	r0, [pc, #124]	; (8000da0 <MX_GPIO_Init+0x21c>)
 8000d24:	f001 f8a8 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = TE_Pin;
 8000d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <MX_GPIO_Init+0x210>)
 8000d3e:	f001 f89b 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <MX_GPIO_Init+0x210>)
 8000d5c:	f001 f88c 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_GPIO_Init+0x214>)
 8000d7a:	f001 f87d 	bl	8001e78 <HAL_GPIO_Init>
}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	10120000 	.word	0x10120000
 8000da0:	40020400 	.word	0x40020400

08000da4 <StartDefaultTask>:


void StartDefaultTask(void const * argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  MX_USB_HOST_Init();
 8000dac:	f00a fee2 	bl	800bb74 <MX_USB_HOST_Init>
  for(;;)
  {
	  printf("discovery debug from Task1\n");
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <StartDefaultTask+0x1c>)
 8000db2:	f00b fb39 	bl	800c428 <puts>
    osDelay(1000);
 8000db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dba:	f008 fcf4 	bl	80097a6 <osDelay>
	  printf("discovery debug from Task1\n");
 8000dbe:	e7f7      	b.n	8000db0 <StartDefaultTask+0xc>
 8000dc0:	0800cb88 	.word	0x0800cb88

08000dc4 <StartDefaultTask2>:
  }
}

void StartDefaultTask2(void const * argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  MX_USB_HOST_Init();
 8000dcc:	f00a fed2 	bl	800bb74 <MX_USB_HOST_Init>
  for(;;)
  {
	  printf("discovery debug from Task2\n");
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <StartDefaultTask2+0x1c>)
 8000dd2:	f00b fb29 	bl	800c428 <puts>
    osDelay(1000);
 8000dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dda:	f008 fce4 	bl	80097a6 <osDelay>
	  printf("discovery debug from Task2\n");
 8000dde:	e7f7      	b.n	8000dd0 <StartDefaultTask2+0xc>
 8000de0:	0800cba4 	.word	0x0800cba4

08000de4 <StartDefaultTask3>:
  }
}

void StartDefaultTask3(void const * argument)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  MX_USB_HOST_Init();
 8000dec:	f00a fec2 	bl	800bb74 <MX_USB_HOST_Init>
  for(;;)
  {
	  const char* msg2=SerialPrint();
 8000df0:	f000 f80e 	bl	8000e10 <SerialPrint>
 8000df4:	60f8      	str	r0, [r7, #12]
	  printf("%s\n",msg2);
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f00b fb16 	bl	800c428 <puts>
	  printf("---------------------------------\n");
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <StartDefaultTask3+0x28>)
 8000dfe:	f00b fb13 	bl	800c428 <puts>
  osDelay(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e06:	f008 fcce 	bl	80097a6 <osDelay>
  {
 8000e0a:	e7f1      	b.n	8000df0 <StartDefaultTask3+0xc>
 8000e0c:	0800cbc0 	.word	0x0800cbc0

08000e10 <SerialPrint>:
  }
}

const char* SerialPrint(){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

	char* msg="discovery debug from Task3";
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SerialPrint+0x18>)
 8000e18:	607b      	str	r3, [r7, #4]
return msg;
 8000e1a:	687b      	ldr	r3, [r7, #4]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	0800cbe4 	.word	0x0800cbe4

08000e2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e3e:	f000 fcef 	bl	8001820 <HAL_IncTick>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40001000 	.word	0x40001000

08000e50 <_write>:


//writing msg to com

int _write(int file,char *ptr, int len)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	e00a      	b.n	8000e78 <_write+0x28>
 {
// __io_putchar(*ptr);
 ITM_SendChar(*ptr);
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb76 	bl	8000558 <ITM_SendChar>
 *ptr++;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf0      	blt.n	8000e62 <_write+0x12>
 }
return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <Error_Handler>:


void Error_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8e:	b672      	cpsid	i
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x6>
	...

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_MspInit+0x54>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <HAL_MspInit+0x54>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x54>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_MspInit+0x54>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_MspInit+0x54>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_MspInit+0x54>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	f06f 0001 	mvn.w	r0, #1
 8000eda:	f000 fd9b 	bl	8001a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_CRC_MspInit+0x3c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10d      	bne.n	8000f1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023000 	.word	0x40023000
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_DMA2D_MspInit+0x48>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d115      	bne.n	8000f6e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_DMA2D_MspInit+0x4c>)
 8000f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_DMA2D_MspInit+0x4c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	205a      	movs	r0, #90	; 0x5a
 8000f64:	f000 fd56 	bl	8001a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f68:	205a      	movs	r0, #90	; 0x5a
 8000f6a:	f000 fd6f 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	4002b000 	.word	0x4002b000
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_I2C_MspInit+0xc4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d14b      	bne.n	800103a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a27      	ldr	r2, [pc, #156]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fec:	2304      	movs	r3, #4
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4815      	ldr	r0, [pc, #84]	; (800104c <HAL_I2C_MspInit+0xcc>)
 8000ff8:	f000 ff3e 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800100e:	2304      	movs	r3, #4
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_I2C_MspInit+0xd0>)
 800101a:	f000 ff2d 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8001028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005c00 	.word	0x40005c00
 8001048:	40023800 	.word	0x40023800
 800104c:	40020800 	.word	0x40020800
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a7b      	ldr	r2, [pc, #492]	; (8001260 <HAL_LTDC_MspInit+0x20c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 80f0 	bne.w	8001258 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
 800107c:	4b79      	ldr	r3, [pc, #484]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	4a78      	ldr	r2, [pc, #480]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 8001082:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001086:	6453      	str	r3, [r2, #68]	; 0x44
 8001088:	4b76      	ldr	r3, [pc, #472]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	4b72      	ldr	r3, [pc, #456]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a71      	ldr	r2, [pc, #452]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a6a      	ldr	r2, [pc, #424]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b68      	ldr	r3, [pc, #416]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	4b64      	ldr	r3, [pc, #400]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a63      	ldr	r2, [pc, #396]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b61      	ldr	r3, [pc, #388]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4b56      	ldr	r3, [pc, #344]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a55      	ldr	r2, [pc, #340]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 800112a:	f043 0308 	orr.w	r3, r3, #8
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_LTDC_MspInit+0x210>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800114e:	230e      	movs	r3, #14
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4843      	ldr	r0, [pc, #268]	; (8001268 <HAL_LTDC_MspInit+0x214>)
 800115a:	f000 fe8d 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800115e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001170:	230e      	movs	r3, #14
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	483c      	ldr	r0, [pc, #240]	; (800126c <HAL_LTDC_MspInit+0x218>)
 800117c:	f000 fe7c 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001180:	2303      	movs	r3, #3
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001190:	2309      	movs	r3, #9
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	4835      	ldr	r0, [pc, #212]	; (8001270 <HAL_LTDC_MspInit+0x21c>)
 800119c:	f000 fe6c 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011a0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b2:	230e      	movs	r3, #14
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	482c      	ldr	r0, [pc, #176]	; (8001270 <HAL_LTDC_MspInit+0x21c>)
 80011be:	f000 fe5b 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011c2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d4:	230e      	movs	r3, #14
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4825      	ldr	r0, [pc, #148]	; (8001274 <HAL_LTDC_MspInit+0x220>)
 80011e0:	f000 fe4a 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011e4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f6:	230e      	movs	r3, #14
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <HAL_LTDC_MspInit+0x224>)
 8001202:	f000 fe39 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001206:	2348      	movs	r3, #72	; 0x48
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001216:	230e      	movs	r3, #14
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <HAL_LTDC_MspInit+0x228>)
 8001222:	f000 fe29 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001226:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001238:	2309      	movs	r3, #9
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <HAL_LTDC_MspInit+0x220>)
 8001244:	f000 fe18 	bl	8001e78 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2105      	movs	r1, #5
 800124c:	2058      	movs	r0, #88	; 0x58
 800124e:	f000 fbe1 	bl	8001a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001252:	2058      	movs	r0, #88	; 0x58
 8001254:	f000 fbfa 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3738      	adds	r7, #56	; 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40016800 	.word	0x40016800
 8001264:	40023800 	.word	0x40023800
 8001268:	40021400 	.word	0x40021400
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40021800 	.word	0x40021800
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00

08001280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_SPI_MspInit+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12c      	bne.n	80012fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_SPI_MspInit+0x88>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_SPI_MspInit+0x88>)
 80012ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_SPI_MspInit+0x88>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_SPI_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_SPI_MspInit+0x88>)
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_SPI_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012da:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012ec:	2305      	movs	r3, #5
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012f8:	f000 fdbe 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40015000 	.word	0x40015000
 8001308:	40023800 	.word	0x40023800
 800130c:	40021400 	.word	0x40021400

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_TIM_Base_MspInit+0x3c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10d      	bne.n	800133e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_TIM_Base_MspInit+0x40>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x40>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_TIM_Base_MspInit+0x40>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12c      	bne.n	80013d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x88>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_UART_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_UART_MspInit+0x88>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c0:	2307      	movs	r3, #7
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_UART_MspInit+0x8c>)
 80013cc:	f000 fd54 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020000 	.word	0x40020000

080013e4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_FMC_MspInit+0x104>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d16f      	bne.n	80014e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <HAL_FMC_MspInit+0x104>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <HAL_FMC_MspInit+0x108>)
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <HAL_FMC_MspInit+0x108>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6393      	str	r3, [r2, #56]	; 0x38
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <HAL_FMC_MspInit+0x108>)
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001422:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001426:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001434:	230c      	movs	r3, #12
 8001436:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	482c      	ldr	r0, [pc, #176]	; (80014f0 <HAL_FMC_MspInit+0x10c>)
 800143e:	f000 fd1b 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001442:	2301      	movs	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001452:	230c      	movs	r3, #12
 8001454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4826      	ldr	r0, [pc, #152]	; (80014f4 <HAL_FMC_MspInit+0x110>)
 800145c:	f000 fd0c 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001460:	f248 1333 	movw	r3, #33075	; 0x8133
 8001464:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001472:	230c      	movs	r3, #12
 8001474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	481f      	ldr	r0, [pc, #124]	; (80014f8 <HAL_FMC_MspInit+0x114>)
 800147c:	f000 fcfc 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001480:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001484:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001492:	230c      	movs	r3, #12
 8001494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4818      	ldr	r0, [pc, #96]	; (80014fc <HAL_FMC_MspInit+0x118>)
 800149c:	f000 fcec 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014a0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80014a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <HAL_FMC_MspInit+0x11c>)
 80014bc:	f000 fcdc 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d0:	230c      	movs	r3, #12
 80014d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <HAL_FMC_MspInit+0x120>)
 80014da:	f000 fccd 	bl	8001e78 <HAL_GPIO_Init>
 80014de:	e000      	b.n	80014e2 <HAL_FMC_MspInit+0xfe>
    return;
 80014e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000308 	.word	0x20000308
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40021800 	.word	0x40021800
 80014fc:	40021000 	.word	0x40021000
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40020400 	.word	0x40020400

08001508 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001510:	f7ff ff68 	bl	80013e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f000 fa6f 	bl	8001a14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f000 fa88 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_InitTick+0xa4>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_InitTick+0xa4>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_InitTick+0xa4>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001558:	f107 0210 	add.w	r2, r7, #16
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fcba 	bl	8004edc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001568:	f003 fc90 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 800156c:	4603      	mov	r3, r0
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_InitTick+0xa8>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	3b01      	subs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_InitTick+0xac>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_InitTick+0xb0>)
 8001584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_InitTick+0xac>)
 8001588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_InitTick+0xac>)
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_InitTick+0xac>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_InitTick+0xac>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_InitTick+0xac>)
 80015a2:	f003 ff23 	bl	80053ec <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <HAL_InitTick+0xac>)
 80015ae:	f003 ff48 	bl	8005442 <HAL_TIM_Base_Start_IT>
 80015b2:	4603      	mov	r3, r0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	431bde83 	.word	0x431bde83
 80015c8:	200086c8 	.word	0x200086c8
 80015cc:	40001000 	.word	0x40001000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM6_DAC_IRQHandler+0x10>)
 8001602:	f003 ff42 	bl	800548a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200086c8 	.word	0x200086c8

08001610 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <OTG_HS_IRQHandler+0x10>)
 8001616:	f001 f881 	bl	800271c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20008af0 	.word	0x20008af0

08001624 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <LTDC_IRQHandler+0x10>)
 800162a:	f002 fd5d 	bl	80040e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20008524 	.word	0x20008524

08001638 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA2D_IRQHandler+0x10>)
 800163e:	f000 fa78 	bl	8001b32 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20008650 	.word	0x20008650

0800164c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e00a      	b.n	8001674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165e:	f3af 8000 	nop.w
 8001662:	4601      	mov	r1, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf0      	blt.n	800165e <_read+0x12>
	}

return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ae:	605a      	str	r2, [r3, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_isatty>:

int _isatty(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return 1;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f00a fd30 	bl	800c184 <__errno>
 8001724:	4602      	mov	r2, r0
 8001726:	230c      	movs	r3, #12
 8001728:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20030000 	.word	0x20030000
 8001750:	00000400 	.word	0x00000400
 8001754:	2000030c 	.word	0x2000030c
 8001758:	20008db8 	.word	0x20008db8

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <SystemInit+0x28>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <SystemInit+0x28>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SystemInit+0x28>)
 8001772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001776:	609a      	str	r2, [r3, #8]
#endif
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800178c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800178e:	e003      	b.n	8001798 <LoopCopyDataInit>

08001790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001796:	3104      	adds	r1, #4

08001798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800179c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800179e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017a0:	d3f6      	bcc.n	8001790 <CopyDataInit>
  ldr  r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017a4:	e002      	b.n	80017ac <LoopFillZerobss>

080017a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017a8:	f842 3b04 	str.w	r3, [r2], #4

080017ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017b0:	d3f9      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017b2:	f7ff ffd3 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f00a fceb 	bl	800c190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7fe fef5 	bl	80005a8 <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80017c4:	0800ccd0 	.word	0x0800ccd0
  ldr  r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017cc:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80017d0:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80017d4:	20008db8 	.word	0x20008db8

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_Init+0x40>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_Init+0x40>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x40>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f8fa 	bl	80019fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fe86 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fb40 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	20008708 	.word	0x20008708

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20008708 	.word	0x20008708

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_Delay+0x40>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000008 	.word	0x20000008

080018a4 <__NVIC_SetPriorityGrouping>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4907      	ldr	r1, [pc, #28]	; (8001940 <__NVIC_EnableIRQ+0x38>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff4c 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a26:	f7ff ff61 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7ff ffb1 	bl	8001998 <NVIC_EncodePriority>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff80 	bl	8001944 <__NVIC_SetPriority>
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff54 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fa2e 	bl	8000eec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e03b      	b.n	8001b2a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fa32 	bl	8000f30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	f023 0107 	bic.w	r1, r3, #7
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68d1      	ldr	r1, [r2, #12]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d026      	beq.n	8001ba2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d021      	beq.n	8001ba2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b6c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2204      	movs	r2, #4
 8001b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d026      	beq.n	8001bfa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d021      	beq.n	8001bfa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d026      	beq.n	8001c52 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d021      	beq.n	8001c52 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2208      	movs	r2, #8
 8001c24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	f043 0204 	orr.w	r2, r3, #4
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00e      	beq.n	8001c84 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c74:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f853 	bl	8001d2a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d024      	beq.n	8001cd8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01f      	beq.n	8001cd8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2202      	movs	r2, #2
 8001cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01f      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01a      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f80e 	bl	8001d3e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA2D_ConfigLayer+0x20>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e079      	b.n	8001e68 <HAL_DMA2D_ConfigLayer+0x114>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	3318      	adds	r3, #24
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d9e:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <HAL_DMA2D_ConfigLayer+0x120>)
 8001da0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b0a      	cmp	r3, #10
 8001da8:	d003      	beq.n	8001db2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	d107      	bne.n	8001dc2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e005      	b.n	8001dce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	061b      	lsls	r3, r3, #24
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d120      	bne.n	8001e16 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	ea02 0103 	and.w	r1, r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	d003      	beq.n	8001e06 <HAL_DMA2D_ConfigLayer+0xb2>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	d127      	bne.n	8001e56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
 8001e14:	e01f      	b.n	8001e56 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	ea02 0103 	and.w	r1, r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b0a      	cmp	r3, #10
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d106      	bne.n	8001e56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e54:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	ff03000f 	.word	0xff03000f

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e177      	b.n	8002184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8166 	bne.w	800217e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_GPIO_Init+0x5a>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec6:	2b11      	cmp	r3, #17
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0xfc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80c0 	beq.w	800217e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <HAL_GPIO_Init+0x320>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a64      	ldr	r2, [pc, #400]	; (8002198 <HAL_GPIO_Init+0x320>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_GPIO_Init+0x320>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a60      	ldr	r2, [pc, #384]	; (800219c <HAL_GPIO_Init+0x324>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a57      	ldr	r2, [pc, #348]	; (80021a0 <HAL_GPIO_Init+0x328>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d037      	beq.n	80020b6 <HAL_GPIO_Init+0x23e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x32c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_GPIO_Init+0x23a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a55      	ldr	r2, [pc, #340]	; (80021a8 <HAL_GPIO_Init+0x330>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <HAL_GPIO_Init+0x236>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a54      	ldr	r2, [pc, #336]	; (80021ac <HAL_GPIO_Init+0x334>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d025      	beq.n	80020aa <HAL_GPIO_Init+0x232>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a53      	ldr	r2, [pc, #332]	; (80021b0 <HAL_GPIO_Init+0x338>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <HAL_GPIO_Init+0x22e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_GPIO_Init+0x33c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x22a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_GPIO_Init+0x340>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_GPIO_Init+0x344>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x348>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x34c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x21a>
 800208e:	2309      	movs	r3, #9
 8002090:	e012      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 8002092:	230a      	movs	r3, #10
 8002094:	e010      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 8002096:	2308      	movs	r3, #8
 8002098:	e00e      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 800209a:	2307      	movs	r3, #7
 800209c:	e00c      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00a      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e008      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x240>
 80020b6:	2300      	movs	r3, #0
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c8:	4934      	ldr	r1, [pc, #208]	; (800219c <HAL_GPIO_Init+0x324>)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d6:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <HAL_GPIO_Init+0x350>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fa:	4a33      	ldr	r2, [pc, #204]	; (80021c8 <HAL_GPIO_Init+0x350>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002100:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_GPIO_Init+0x350>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <HAL_GPIO_Init+0x350>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3301      	adds	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	f67f ae84 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800218c:	bf00      	nop
 800218e:	3724      	adds	r7, #36	; 0x24
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40021400 	.word	0x40021400
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40021c00 	.word	0x40021c00
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40022400 	.word	0x40022400
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80021fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002200:	b08f      	sub	sp, #60	; 0x3c
 8002202:	af0a      	add	r7, sp, #40	; 0x28
 8002204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e054      	b.n	80022ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f009 fcf6 	bl	800bc1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f004 f9fa 	bl	8006648 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	687e      	ldr	r6, [r7, #4]
 800225c:	466d      	mov	r5, sp
 800225e:	f106 0410 	add.w	r4, r6, #16
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002272:	1d33      	adds	r3, r6, #4
 8002274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	f004 f974 	bl	8006564 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f9f1 	bl	800666a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	687e      	ldr	r6, [r7, #4]
 8002290:	466d      	mov	r5, sp
 8002292:	f106 0410 	add.w	r4, r6, #16
 8002296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a6:	1d33      	adds	r3, r6, #4
 80022a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f004 fb04 	bl	80068b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022c2:	b590      	push	{r4, r7, lr}
 80022c4:	b089      	sub	sp, #36	; 0x24
 80022c6:	af04      	add	r7, sp, #16
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	4608      	mov	r0, r1
 80022cc:	4611      	mov	r1, r2
 80022ce:	461a      	mov	r2, r3
 80022d0:	4603      	mov	r3, r0
 80022d2:	70fb      	strb	r3, [r7, #3]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70bb      	strb	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_HCD_HC_Init+0x28>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e07f      	b.n	80023ea <HAL_HCD_HC_Init+0x128>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	333d      	adds	r3, #61	; 0x3d
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	3338      	adds	r3, #56	; 0x38
 8002316:	787a      	ldrb	r2, [r7, #1]
 8002318:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800232c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	3339      	adds	r3, #57	; 0x39
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	333f      	adds	r3, #63	; 0x3f
 8002352:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002360:	b2d8      	uxtb	r0, r3
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	333a      	adds	r3, #58	; 0x3a
 8002370:	4602      	mov	r2, r0
 8002372:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da0a      	bge.n	8002392 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	333b      	adds	r3, #59	; 0x3b
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e009      	b.n	80023a6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	333b      	adds	r3, #59	; 0x3b
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	333c      	adds	r3, #60	; 0x3c
 80023b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	787c      	ldrb	r4, [r7, #1]
 80023c2:	78ba      	ldrb	r2, [r7, #2]
 80023c4:	78f9      	ldrb	r1, [r7, #3]
 80023c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4623      	mov	r3, r4
 80023d8:	f004 fbf0 	bl	8006bbc <USB_HC_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}

080023f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_HCD_HC_Halt+0x1e>
 800240c:	2302      	movs	r3, #2
 800240e:	e00f      	b.n	8002430 <HAL_HCD_HC_Halt+0x3e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f004 fe2c 	bl	800707e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	70fb      	strb	r3, [r7, #3]
 800244a:	460b      	mov	r3, r1
 800244c:	70bb      	strb	r3, [r7, #2]
 800244e:	4613      	mov	r3, r2
 8002450:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	440b      	add	r3, r1
 8002460:	333b      	adds	r3, #59	; 0x3b
 8002462:	78ba      	ldrb	r2, [r7, #2]
 8002464:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	333f      	adds	r3, #63	; 0x3f
 8002476:	787a      	ldrb	r2, [r7, #1]
 8002478:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800247a:	7c3b      	ldrb	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d114      	bne.n	80024aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	3342      	adds	r3, #66	; 0x42
 8002490:	2203      	movs	r2, #3
 8002492:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	333d      	adds	r3, #61	; 0x3d
 80024a4:	7f3a      	ldrb	r2, [r7, #28]
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e009      	b.n	80024be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	3342      	adds	r3, #66	; 0x42
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024be:	787b      	ldrb	r3, [r7, #1]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	f200 80d6 	bhi.w	8002672 <HAL_HCD_HC_SubmitRequest+0x23a>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	0800265d 	.word	0x0800265d
 80024d4:	08002549 	.word	0x08002549
 80024d8:	080025d3 	.word	0x080025d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024dc:	7c3b      	ldrb	r3, [r7, #16]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	f040 80c9 	bne.w	8002676 <HAL_HCD_HC_SubmitRequest+0x23e>
 80024e4:	78bb      	ldrb	r3, [r7, #2]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 80c5 	bne.w	8002676 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80024ec:	8b3b      	ldrh	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	3351      	adds	r3, #81	; 0x51
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	3351      	adds	r3, #81	; 0x51
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3342      	adds	r3, #66	; 0x42
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002530:	e0a1      	b.n	8002676 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3342      	adds	r3, #66	; 0x42
 8002542:	2202      	movs	r2, #2
 8002544:	701a      	strb	r2, [r3, #0]
      break;
 8002546:	e096      	b.n	8002676 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002548:	78bb      	ldrb	r3, [r7, #2]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d120      	bne.n	8002590 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	3351      	adds	r3, #81	; 0x51
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3342      	adds	r3, #66	; 0x42
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002578:	e07e      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	3342      	adds	r3, #66	; 0x42
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
      break;
 800258e:	e073      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	3350      	adds	r3, #80	; 0x50
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	3342      	adds	r3, #66	; 0x42
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e05d      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	3342      	adds	r3, #66	; 0x42
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
      break;
 80025d0:	e052      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025d2:	78bb      	ldrb	r3, [r7, #2]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d120      	bne.n	800261a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	3351      	adds	r3, #81	; 0x51
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	3342      	adds	r3, #66	; 0x42
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002602:	e039      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3342      	adds	r3, #66	; 0x42
 8002614:	2202      	movs	r2, #2
 8002616:	701a      	strb	r2, [r3, #0]
      break;
 8002618:	e02e      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3350      	adds	r3, #80	; 0x50
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	3342      	adds	r3, #66	; 0x42
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
      break;
 8002644:	e018      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	3342      	adds	r3, #66	; 0x42
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
      break;
 800265a:	e00d      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3342      	adds	r3, #66	; 0x42
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
      break;
 8002670:	e002      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002672:	bf00      	nop
 8002674:	e000      	b.n	8002678 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002676:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3344      	adds	r3, #68	; 0x44
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	8b39      	ldrh	r1, [r7, #24]
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4403      	add	r3, r0
 800269c:	3348      	adds	r3, #72	; 0x48
 800269e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	335c      	adds	r3, #92	; 0x5c
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	334c      	adds	r3, #76	; 0x4c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	3339      	adds	r3, #57	; 0x39
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	335d      	adds	r3, #93	; 0x5d
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	3338      	adds	r3, #56	; 0x38
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	18d1      	adds	r1, r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	f004 fb60 	bl	8006dd0 <USB_HC_StartXfer>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop

0800271c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 f87d 	bl	8006832 <USB_GetMode>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	f040 80ef 	bne.w	800291e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f004 f861 	bl	800680c <USB_ReadInterrupts>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80e5 	beq.w	800291c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f858 	bl	800680c <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002766:	d104      	bne.n	8002772 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002770:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f848 	bl	800680c <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002786:	d104      	bne.n	8002792 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002790:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f004 f838 	bl	800680c <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a6:	d104      	bne.n	80027b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 f828 	bl	800680c <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d103      	bne.n	80027ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2202      	movs	r2, #2
 80027cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 f81a 	bl	800680c <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e2:	d115      	bne.n	8002810 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f009 fa86 	bl	800bd10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	4618      	mov	r0, r3
 800280c:	f004 f910 	bl	8006a30 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fff9 	bl	800680c <USB_ReadInterrupts>
 800281a:	4603      	mov	r3, r0
 800281c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002824:	d102      	bne.n	800282c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f001 f966 	bl	8003af8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 ffeb 	bl	800680c <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d106      	bne.n	800284e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f009 fa49 	bl	800bcd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2208      	movs	r2, #8
 800284c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 ffda 	bl	800680c <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002862:	d138      	bne.n	80028d6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f004 fbf7 	bl	800705c <USB_HC_ReadInterrupt>
 800286e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e025      	b.n	80028c2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d018      	beq.n	80028bc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a0:	d106      	bne.n	80028b0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8cf 	bl	8002a4c <HCD_HC_IN_IRQHandler>
 80028ae:	e005      	b.n	80028bc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fcfd 	bl	80032b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3d4      	bcc.n	8002876 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 ff96 	bl	800680c <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d101      	bne.n	80028ee <HAL_HCD_IRQHandler+0x1d2>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_HCD_IRQHandler+0x1d4>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d014      	beq.n	800291e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0210 	bic.w	r2, r2, #16
 8002902:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f001 f84b 	bl	80039a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0210 	orr.w	r2, r2, #16
 8002918:	619a      	str	r2, [r3, #24]
 800291a:	e000      	b.n	800291e <HAL_HCD_IRQHandler+0x202>
      return;
 800291c:	bf00      	nop
    }
  }
}
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_HCD_Start+0x16>
 8002936:	2302      	movs	r3, #2
 8002938:	e013      	b.n	8002962 <HAL_HCD_Start+0x3e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fe6d 	bl	8006626 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f004 f8d0 	bl	8006af8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_HCD_Stop+0x16>
 800297c:	2302      	movs	r3, #2
 800297e:	e00d      	b.n	800299c <HAL_HCD_Stop+0x32>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f004 fcb1 	bl	80072f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 f877 	bl	8006aa4 <USB_ResetPort>
 80029b6:	4603      	mov	r3, r0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	781b      	ldrb	r3, [r3, #0]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	334c      	adds	r3, #76	; 0x4c
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 f8b9 	bl	8006b98 <USB_GetCurrentFrame>
 8002a26:	4603      	mov	r3, r0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f004 f894 	bl	8006b6a <USB_GetHostSpeed>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d119      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	0151      	lsls	r1, r2, #5
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	440a      	add	r2, r1
 8002aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	60d3      	str	r3, [r2, #12]
 8002aae:	e0ce      	b.n	8002c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac6:	d12c      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	335d      	adds	r3, #93	; 0x5d
 8002aec:	2207      	movs	r2, #7
 8002aee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	0151      	lsls	r1, r2, #5
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	440a      	add	r2, r1
 8002b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 faaf 	bl	800707e <USB_HC_Halt>
 8002b20:	e095      	b.n	8002c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d109      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2320      	movs	r3, #32
 8002b48:	6093      	str	r3, [r2, #8]
 8002b4a:	e080      	b.n	8002c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d134      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	0151      	lsls	r1, r2, #5
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	440a      	add	r2, r1
 8002b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	335d      	adds	r3, #93	; 0x5d
 8002b92:	2205      	movs	r2, #5
 8002b94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 fa5a 	bl	800707e <USB_HC_Halt>
 8002bca:	e040      	b.n	8002c4e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d134      	bne.n	8002c4e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	0151      	lsls	r1, r2, #5
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	440a      	add	r2, r1
 8002bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fa35 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	461a      	mov	r2, r3
 8002c22:	2310      	movs	r3, #16
 8002c24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	335d      	adds	r3, #93	; 0x5d
 8002c36:	2208      	movs	r2, #8
 8002c38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	461a      	mov	r2, r3
 8002c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c64:	d122      	bne.n	8002cac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	0151      	lsls	r1, r2, #5
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	440a      	add	r2, r1
 8002c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 f9f4 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002caa:	e300      	b.n	80032ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f040 80fd 	bne.w	8002ebe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01b      	beq.n	8002d04 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3348      	adds	r3, #72	; 0x48
 8002cdc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0159      	lsls	r1, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002cf0:	1ad1      	subs	r1, r2, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4403      	add	r3, r0
 8002d00:	334c      	adds	r3, #76	; 0x4c
 8002d02:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	335d      	adds	r3, #93	; 0x5d
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3358      	adds	r3, #88	; 0x58
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	333f      	adds	r3, #63	; 0x3f
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	333f      	adds	r3, #63	; 0x3f
 8002d64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d121      	bne.n	8002dae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	0151      	lsls	r1, r2, #5
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	440a      	add	r2, r1
 8002d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f972 	bl	800707e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	2310      	movs	r3, #16
 8002daa:	6093      	str	r3, [r2, #8]
 8002dac:	e070      	b.n	8002e90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	333f      	adds	r3, #63	; 0x3f
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d12a      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	0151      	lsls	r1, r2, #5
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	440a      	add	r2, r1
 8002dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002de2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	b2d8      	uxtb	r0, r3
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	335c      	adds	r3, #92	; 0x5c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4601      	mov	r1, r0
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f008 ff8a 	bl	800bd2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e18:	e03a      	b.n	8002e90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	333f      	adds	r3, #63	; 0x3f
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d12f      	bne.n	8002e90 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	3350      	adds	r3, #80	; 0x50
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	f083 0301 	eor.w	r3, r3, #1
 8002e5a:	b2d8      	uxtb	r0, r3
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3350      	adds	r3, #80	; 0x50
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	b2d8      	uxtb	r0, r3
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	335c      	adds	r3, #92	; 0x5c
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4601      	mov	r1, r0
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f008 ff4e 	bl	800bd2c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3350      	adds	r3, #80	; 0x50
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2d8      	uxtb	r0, r3
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3350      	adds	r3, #80	; 0x50
 8002eb8:	4602      	mov	r2, r0
 8002eba:	701a      	strb	r2, [r3, #0]
}
 8002ebc:	e1f7      	b.n	80032ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f040 811a 	bne.w	800310a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	0151      	lsls	r1, r2, #5
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	440a      	add	r2, r1
 8002eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef0:	f023 0302 	bic.w	r3, r3, #2
 8002ef4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	335d      	adds	r3, #93	; 0x5d
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10a      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e0d9      	b.n	80030d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	335d      	adds	r3, #93	; 0x5d
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d10a      	bne.n	8002f4e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	2205      	movs	r2, #5
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e0c3      	b.n	80030d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d00a      	beq.n	8002f7a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	335d      	adds	r3, #93	; 0x5d
 8002f74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d156      	bne.n	8003028 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	3358      	adds	r3, #88	; 0x58
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3358      	adds	r3, #88	; 0x58
 8002f9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	3358      	adds	r3, #88	; 0x58
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d914      	bls.n	8002fe0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3358      	adds	r3, #88	; 0x58
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	335c      	adds	r3, #92	; 0x5c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e009      	b.n	8002ff4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800300a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003012:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e056      	b.n	80030d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	440b      	add	r3, r1
 8003036:	335d      	adds	r3, #93	; 0x5d
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d123      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	335c      	adds	r3, #92	; 0x5c
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003068:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003070:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e027      	b.n	80030d6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	335d      	adds	r3, #93	; 0x5d
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b07      	cmp	r3, #7
 800309a:	d11c      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	3358      	adds	r3, #88	; 0x58
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4403      	add	r3, r0
 80030be:	3358      	adds	r3, #88	; 0x58
 80030c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	335c      	adds	r3, #92	; 0x5c
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	2302      	movs	r3, #2
 80030e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	b2d8      	uxtb	r0, r3
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	335c      	adds	r3, #92	; 0x5c
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	4601      	mov	r1, r0
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f008 fe12 	bl	800bd2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003108:	e0d1      	b.n	80032ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d13e      	bne.n	800319e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	440a      	add	r2, r1
 8003136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	3358      	adds	r3, #88	; 0x58
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4403      	add	r3, r0
 8003162:	3358      	adds	r3, #88	; 0x58
 8003164:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	335d      	adds	r3, #93	; 0x5d
 8003176:	2206      	movs	r2, #6
 8003178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 ff7a 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	6093      	str	r3, [r2, #8]
}
 800319c:	e087      	b.n	80032ae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d17c      	bne.n	80032ae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	333f      	adds	r3, #63	; 0x3f
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d122      	bne.n	8003210 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	3358      	adds	r3, #88	; 0x58
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	0151      	lsls	r1, r2, #5
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	440a      	add	r2, r1
 80031f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f003 ff38 	bl	800707e <USB_HC_Halt>
 800320e:	e045      	b.n	800329c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	333f      	adds	r3, #63	; 0x3f
 8003236:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003238:	2b02      	cmp	r3, #2
 800323a:	d12f      	bne.n	800329c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3358      	adds	r3, #88	; 0x58
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d121      	bne.n	800329c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	335d      	adds	r3, #93	; 0x5d
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	440a      	add	r2, r1
 8003282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fef1 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2310      	movs	r3, #16
 80032ac:	6093      	str	r3, [r2, #8]
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d119      	bne.n	800331a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2304      	movs	r3, #4
 80032f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	0151      	lsls	r1, r2, #5
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	440a      	add	r2, r1
 800330e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003318:	e33e      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b20      	cmp	r3, #32
 800332e:	d141      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2320      	movs	r3, #32
 8003340:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	333d      	adds	r3, #61	; 0x3d
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 831f 	bne.w	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	333d      	adds	r3, #61	; 0x3d
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	335c      	adds	r3, #92	; 0x5c
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	0151      	lsls	r1, r2, #5
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	440a      	add	r2, r1
 8003398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 fe66 	bl	800707e <USB_HC_Halt>
}
 80033b2:	e2f1      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d13f      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	335d      	adds	r3, #93	; 0x5d
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	333d      	adds	r3, #61	; 0x3d
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	3358      	adds	r3, #88	; 0x58
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	0151      	lsls	r1, r2, #5
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	440a      	add	r2, r1
 800341c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f003 fe24 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	461a      	mov	r2, r3
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	6093      	str	r3, [r2, #8]
}
 8003448:	e2a6      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d122      	bne.n	80034a8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	440a      	add	r2, r1
 8003478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fdf6 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a4:	6093      	str	r3, [r2, #8]
}
 80034a6:	e277      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d135      	bne.n	800352a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	3358      	adds	r3, #88	; 0x58
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	0151      	lsls	r1, r2, #5
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	440a      	add	r2, r1
 80034e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fdbe 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	461a      	mov	r2, r3
 8003510:	2301      	movs	r3, #1
 8003512:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	335d      	adds	r3, #93	; 0x5d
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
}
 8003528:	e236      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d12b      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2308      	movs	r3, #8
 8003550:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	440a      	add	r2, r1
 8003568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f003 fd7e 	bl	800707e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	335d      	adds	r3, #93	; 0x5d
 8003592:	2205      	movs	r2, #5
 8003594:	701a      	strb	r2, [r3, #0]
}
 8003596:	e1ff      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d155      	bne.n	800365a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	3358      	adds	r3, #88	; 0x58
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	335d      	adds	r3, #93	; 0x5d
 80035d2:	2203      	movs	r2, #3
 80035d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	333d      	adds	r3, #61	; 0x3d
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d114      	bne.n	8003616 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	333c      	adds	r3, #60	; 0x3c
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	440b      	add	r3, r1
 8003610:	333d      	adds	r3, #61	; 0x3d
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	440a      	add	r2, r1
 800362c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fd1c 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2310      	movs	r3, #16
 8003656:	6093      	str	r3, [r2, #8]
}
 8003658:	e19e      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d12b      	bne.n	80036c8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	0151      	lsls	r1, r2, #5
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	440a      	add	r2, r1
 8003686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fcef 	bl	800707e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	335d      	adds	r3, #93	; 0x5d
 80036b0:	2206      	movs	r2, #6
 80036b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	461a      	mov	r2, r3
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	6093      	str	r3, [r2, #8]
}
 80036c6:	e167      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d135      	bne.n	800374c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fcb7 	bl	800707e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2310      	movs	r3, #16
 8003720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	335d      	adds	r3, #93	; 0x5d
 8003746:	2208      	movs	r2, #8
 8003748:	701a      	strb	r2, [r3, #0]
}
 800374a:	e125      	b.n	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	f040 811a 	bne.w	8003998 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	440a      	add	r2, r1
 800377a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800377e:	f023 0302 	bic.w	r3, r3, #2
 8003782:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	335d      	adds	r3, #93	; 0x5d
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d137      	bne.n	800380a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	335c      	adds	r3, #92	; 0x5c
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	333f      	adds	r3, #63	; 0x3f
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d00b      	beq.n	80037dc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	333f      	adds	r3, #63	; 0x3f
 80037d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	f040 80c5 	bne.w	8003966 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	440b      	add	r3, r1
 80037ea:	3351      	adds	r3, #81	; 0x51
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f083 0301 	eor.w	r3, r3, #1
 80037f2:	b2d8      	uxtb	r0, r3
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	3351      	adds	r3, #81	; 0x51
 8003804:	4602      	mov	r2, r0
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e0ad      	b.n	8003966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	335d      	adds	r3, #93	; 0x5d
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d10a      	bne.n	8003836 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	335c      	adds	r3, #92	; 0x5c
 8003830:	2202      	movs	r2, #2
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e097      	b.n	8003966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	335d      	adds	r3, #93	; 0x5d
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d10a      	bne.n	8003862 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	335c      	adds	r3, #92	; 0x5c
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e081      	b.n	8003966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	335d      	adds	r3, #93	; 0x5d
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b05      	cmp	r3, #5
 8003876:	d10a      	bne.n	800388e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	335c      	adds	r3, #92	; 0x5c
 8003888:	2205      	movs	r2, #5
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e06b      	b.n	8003966 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	335d      	adds	r3, #93	; 0x5d
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d00a      	beq.n	80038ba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	335d      	adds	r3, #93	; 0x5d
 80038b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d155      	bne.n	8003966 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	3358      	adds	r3, #88	; 0x58
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4403      	add	r3, r0
 80038dc:	3358      	adds	r3, #88	; 0x58
 80038de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	3358      	adds	r3, #88	; 0x58
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d914      	bls.n	8003920 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	3358      	adds	r3, #88	; 0x58
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	335c      	adds	r3, #92	; 0x5c
 800391a:	2204      	movs	r2, #4
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e009      	b.n	8003934 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	335c      	adds	r3, #92	; 0x5c
 8003930:	2202      	movs	r2, #2
 8003932:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800394a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003952:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	2302      	movs	r3, #2
 8003976:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	b2d8      	uxtb	r0, r3
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	335c      	adds	r3, #92	; 0x5c
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	4601      	mov	r1, r0
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f008 f9ca 	bl	800bd2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003998:	bf00      	nop
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	0c5b      	lsrs	r3, r3, #17
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d003      	beq.n	80039e4 <HCD_RXQLVL_IRQHandler+0x44>
 80039dc:	2b05      	cmp	r3, #5
 80039de:	f000 8082 	beq.w	8003ae6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039e2:	e083      	b.n	8003aec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07f      	beq.n	8003aea <HCD_RXQLVL_IRQHandler+0x14a>
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	3344      	adds	r3, #68	; 0x44
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d074      	beq.n	8003aea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	3344      	adds	r3, #68	; 0x44
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f002 fecd 	bl	80067ba <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3344      	adds	r3, #68	; 0x44
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	18d1      	adds	r1, r2, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4403      	add	r3, r0
 8003a44:	3344      	adds	r3, #68	; 0x44
 8003a46:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	; 0x4c
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	18d1      	adds	r1, r2, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4403      	add	r3, r0
 8003a6c:	334c      	adds	r3, #76	; 0x4c
 8003a6e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d031      	beq.n	8003aea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003aa4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3350      	adds	r3, #80	; 0x50
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2d8      	uxtb	r0, r3
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	3350      	adds	r3, #80	; 0x50
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	701a      	strb	r2, [r3, #0]
      break;
 8003ae4:	e001      	b.n	8003aea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003aea:	bf00      	nop
  }
}
 8003aec:	bf00      	nop
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	1ff80000 	.word	0x1ff80000

08003af8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d10b      	bne.n	8003b48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f008 f8da 	bl	800bcf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f043 0302 	orr.w	r3, r3, #2
 8003b46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d132      	bne.n	8003bb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d126      	bne.n	8003bb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d113      	bne.n	8003b94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b76:	d106      	bne.n	8003b86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f002 ff56 	bl	8006a30 <USB_InitFSLSPClkSel>
 8003b84:	e011      	b.n	8003baa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f002 ff4f 	bl	8006a30 <USB_InitFSLSPClkSel>
 8003b92:	e00a      	b.n	8003baa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d106      	bne.n	8003baa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ba8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f008 f8d0 	bl	800bd50 <HAL_HCD_PortEnabled_Callback>
 8003bb0:	e002      	b.n	8003bb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f008 f8da 	bl	800bd6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d103      	bne.n	8003bca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f043 0320 	orr.w	r3, r3, #32
 8003bc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6013      	str	r3, [r2, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e11f      	b.n	8003e32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f9ba 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c44:	f001 f922 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a7b      	ldr	r2, [pc, #492]	; (8003e3c <HAL_I2C_Init+0x25c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d807      	bhi.n	8003c64 <HAL_I2C_Init+0x84>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <HAL_I2C_Init+0x260>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e006      	b.n	8003c72 <HAL_I2C_Init+0x92>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <HAL_I2C_Init+0x264>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0db      	b.n	8003e32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a72      	ldr	r2, [pc, #456]	; (8003e48 <HAL_I2C_Init+0x268>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a64      	ldr	r2, [pc, #400]	; (8003e3c <HAL_I2C_Init+0x25c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <HAL_I2C_Init+0xd4>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	e009      	b.n	8003cc8 <HAL_I2C_Init+0xe8>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	4a63      	ldr	r2, [pc, #396]	; (8003e4c <HAL_I2C_Init+0x26c>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4956      	ldr	r1, [pc, #344]	; (8003e3c <HAL_I2C_Init+0x25c>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d80d      	bhi.n	8003d04 <HAL_I2C_Init+0x124>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e59      	subs	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	bf38      	it	cc
 8003d00:	2304      	movcc	r3, #4
 8003d02:	e04f      	b.n	8003da4 <HAL_I2C_Init+0x1c4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d111      	bne.n	8003d30 <HAL_I2C_Init+0x150>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	440b      	add	r3, r1
 8003d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e012      	b.n	8003d56 <HAL_I2C_Init+0x176>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e58      	subs	r0, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	0099      	lsls	r1, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d46:	3301      	adds	r3, #1
 8003d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x17e>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e022      	b.n	8003da4 <HAL_I2C_Init+0x1c4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10e      	bne.n	8003d84 <HAL_I2C_Init+0x1a4>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1e58      	subs	r0, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	440b      	add	r3, r1
 8003d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	e00f      	b.n	8003da4 <HAL_I2C_Init+0x1c4>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	6809      	ldr	r1, [r1, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6911      	ldr	r1, [r2, #16]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68d2      	ldr	r2, [r2, #12]
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	000186a0 	.word	0x000186a0
 8003e40:	001e847f 	.word	0x001e847f
 8003e44:	003d08ff 	.word	0x003d08ff
 8003e48:	431bde83 	.word	0x431bde83
 8003e4c:	10624dd3 	.word	0x10624dd3

08003e50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d129      	bne.n	8003eba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0210 	bic.w	r2, r2, #16
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d12a      	bne.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2224      	movs	r2, #36	; 0x24
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	f023 030f 	bic.w	r3, r3, #15
 8003f08:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	89fb      	ldrh	r3, [r7, #14]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	89fa      	ldrh	r2, [r7, #14]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0bf      	b.n	80040da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd f870 	bl	8001054 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6999      	ldr	r1, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fa0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6899      	ldr	r1, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <HAL_LTDC_Init+0x19c>)
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68d9      	ldr	r1, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <HAL_LTDC_Init+0x19c>)
 8003fea:	400b      	ands	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68d9      	ldr	r1, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6919      	ldr	r1, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <HAL_LTDC_Init+0x19c>)
 8004018:	400b      	ands	r3, r1
 800401a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6919      	ldr	r1, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6959      	ldr	r1, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <HAL_LTDC_Init+0x19c>)
 8004046:	400b      	ands	r3, r1
 8004048:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6959      	ldr	r1, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0206 	orr.w	r2, r2, #6
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	f000f800 	.word	0xf000f800

080040e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d023      	beq.n	8004152 <HAL_LTDC_IRQHandler+0x6a>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01e      	beq.n	8004152 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0204 	bic.w	r2, r2, #4
 8004122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2204      	movs	r2, #4
 800412a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2204      	movs	r2, #4
 8004140:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f86f 	bl	8004230 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d023      	beq.n	80041a4 <HAL_LTDC_IRQHandler+0xbc>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01e      	beq.n	80041a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0202 	bic.w	r2, r2, #2
 8004174:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2202      	movs	r2, #2
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004184:	f043 0202 	orr.w	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2204      	movs	r2, #4
 8004192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f846 	bl	8004230 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01b      	beq.n	80041e6 <HAL_LTDC_IRQHandler+0xfe>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d016      	beq.n	80041e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2201      	movs	r2, #1
 80041ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f82f 	bl	8004244 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_LTDC_IRQHandler+0x140>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0208 	bic.w	r2, r2, #8
 8004208:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f818 	bl	8004258 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_LTDC_ConfigLayer+0x1a>
 8004282:	2302      	movs	r3, #2
 8004284:	e02c      	b.n	80042e0 <HAL_LTDC_ConfigLayer+0x74>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2134      	movs	r1, #52	; 0x34
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f811 	bl	80042e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bdb0      	pop	{r4, r5, r7, pc}

080042e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	4413      	add	r3, r2
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	01db      	lsls	r3, r3, #7
 8004314:	4413      	add	r3, r2
 8004316:	3384      	adds	r3, #132	; 0x84
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4611      	mov	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	01d2      	lsls	r2, r2, #7
 8004324:	440a      	add	r2, r1
 8004326:	3284      	adds	r2, #132	; 0x84
 8004328:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800432c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433e:	4413      	add	r3, r2
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	01db      	lsls	r3, r3, #7
 800434c:	440b      	add	r3, r1
 800434e:	3384      	adds	r3, #132	; 0x84
 8004350:	4619      	mov	r1, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004366:	4413      	add	r3, r2
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	01db      	lsls	r3, r3, #7
 8004376:	4413      	add	r3, r2
 8004378:	3384      	adds	r3, #132	; 0x84
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4611      	mov	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	01d2      	lsls	r2, r2, #7
 8004386:	440a      	add	r2, r1
 8004388:	3284      	adds	r2, #132	; 0x84
 800438a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800438e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800439e:	4413      	add	r3, r2
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	01db      	lsls	r3, r3, #7
 80043ac:	440b      	add	r3, r1
 80043ae:	3384      	adds	r3, #132	; 0x84
 80043b0:	4619      	mov	r1, r3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	01db      	lsls	r3, r3, #7
 80043c2:	4413      	add	r3, r2
 80043c4:	3384      	adds	r3, #132	; 0x84
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	4611      	mov	r1, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	01d2      	lsls	r2, r2, #7
 80043d2:	440a      	add	r2, r1
 80043d4:	3284      	adds	r2, #132	; 0x84
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	01db      	lsls	r3, r3, #7
 80043e6:	4413      	add	r3, r2
 80043e8:	3384      	adds	r3, #132	; 0x84
 80043ea:	461a      	mov	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	4413      	add	r3, r2
 800441a:	3384      	adds	r3, #132	; 0x84
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	01db      	lsls	r3, r3, #7
 8004428:	4413      	add	r3, r2
 800442a:	3384      	adds	r3, #132	; 0x84
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004438:	461a      	mov	r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	431a      	orrs	r2, r3
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	440b      	add	r3, r1
 800444e:	3384      	adds	r3, #132	; 0x84
 8004450:	4619      	mov	r1, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	01db      	lsls	r3, r3, #7
 8004462:	4413      	add	r3, r2
 8004464:	3384      	adds	r3, #132	; 0x84
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	4611      	mov	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	01d2      	lsls	r2, r2, #7
 8004472:	440a      	add	r2, r1
 8004474:	3284      	adds	r2, #132	; 0x84
 8004476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	01db      	lsls	r3, r3, #7
 8004486:	4413      	add	r3, r2
 8004488:	3384      	adds	r3, #132	; 0x84
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	01db      	lsls	r3, r3, #7
 800449c:	4413      	add	r3, r2
 800449e:	3384      	adds	r3, #132	; 0x84
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	4611      	mov	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	01d2      	lsls	r2, r2, #7
 80044ac:	440a      	add	r2, r1
 80044ae:	3284      	adds	r2, #132	; 0x84
 80044b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6809      	ldr	r1, [r1, #0]
 80044c6:	4608      	mov	r0, r1
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	01c9      	lsls	r1, r1, #7
 80044cc:	4401      	add	r1, r0
 80044ce:	3184      	adds	r1, #132	; 0x84
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	01db      	lsls	r3, r3, #7
 80044de:	4413      	add	r3, r2
 80044e0:	3384      	adds	r3, #132	; 0x84
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	01db      	lsls	r3, r3, #7
 80044ee:	4413      	add	r3, r2
 80044f0:	3384      	adds	r3, #132	; 0x84
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	01db      	lsls	r3, r3, #7
 8004502:	4413      	add	r3, r2
 8004504:	3384      	adds	r3, #132	; 0x84
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004516:	2304      	movs	r3, #4
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e01b      	b.n	8004554 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d102      	bne.n	800452a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004524:	2303      	movs	r3, #3
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e014      	b.n	8004554 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00b      	beq.n	800454a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004536:	2b02      	cmp	r3, #2
 8004538:	d007      	beq.n	800454a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800453e:	2b03      	cmp	r3, #3
 8004540:	d003      	beq.n	800454a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004546:	2b07      	cmp	r3, #7
 8004548:	d102      	bne.n	8004550 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800454a:	2302      	movs	r3, #2
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	e001      	b.n	8004554 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004550:	2301      	movs	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	; 0x84
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4611      	mov	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	01d2      	lsls	r2, r2, #7
 800456e:	440a      	add	r2, r1
 8004570:	3284      	adds	r2, #132	; 0x84
 8004572:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	041a      	lsls	r2, r3, #16
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1acb      	subs	r3, r1, r3
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	3303      	adds	r3, #3
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6809      	ldr	r1, [r1, #0]
 800459a:	4608      	mov	r0, r1
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	01c9      	lsls	r1, r1, #7
 80045a0:	4401      	add	r1, r0
 80045a2:	3184      	adds	r1, #132	; 0x84
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	01db      	lsls	r3, r3, #7
 80045b2:	4413      	add	r3, r2
 80045b4:	3384      	adds	r3, #132	; 0x84
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	4611      	mov	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	01d2      	lsls	r2, r2, #7
 80045c2:	440a      	add	r2, r1
 80045c4:	3284      	adds	r2, #132	; 0x84
 80045c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	01db      	lsls	r3, r3, #7
 80045da:	4413      	add	r3, r2
 80045dc:	3384      	adds	r3, #132	; 0x84
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	4413      	add	r3, r2
 80045f2:	3384      	adds	r3, #132	; 0x84
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	4611      	mov	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	01d2      	lsls	r2, r2, #7
 8004600:	440a      	add	r2, r1
 8004602:	3284      	adds	r2, #132	; 0x84
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e25b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d075      	beq.n	8004722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004636:	4ba3      	ldr	r3, [pc, #652]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b04      	cmp	r3, #4
 8004640:	d00c      	beq.n	800465c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004642:	4ba0      	ldr	r3, [pc, #640]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800464a:	2b08      	cmp	r3, #8
 800464c:	d112      	bne.n	8004674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464e:	4b9d      	ldr	r3, [pc, #628]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465a:	d10b      	bne.n	8004674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	4b99      	ldr	r3, [pc, #612]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d05b      	beq.n	8004720 <HAL_RCC_OscConfig+0x108>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d157      	bne.n	8004720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e236      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d106      	bne.n	800468c <HAL_RCC_OscConfig+0x74>
 800467e:	4b91      	ldr	r3, [pc, #580]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a90      	ldr	r2, [pc, #576]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e01d      	b.n	80046c8 <HAL_RCC_OscConfig+0xb0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x98>
 8004696:	4b8b      	ldr	r3, [pc, #556]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a8a      	ldr	r2, [pc, #552]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b88      	ldr	r3, [pc, #544]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a87      	ldr	r2, [pc, #540]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e00b      	b.n	80046c8 <HAL_RCC_OscConfig+0xb0>
 80046b0:	4b84      	ldr	r3, [pc, #528]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a83      	ldr	r2, [pc, #524]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a80      	ldr	r2, [pc, #512]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d013      	beq.n	80046f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fd f8ba 	bl	8001848 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fd f8b6 	bl	8001848 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1fb      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b76      	ldr	r3, [pc, #472]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0xc0>
 80046f6:	e014      	b.n	8004722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd f8a6 	bl	8001848 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fd f8a2 	bl	8001848 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e1e7      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0xe8>
 800471e:	e000      	b.n	8004722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d063      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800472e:	4b65      	ldr	r3, [pc, #404]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473a:	4b62      	ldr	r3, [pc, #392]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004742:	2b08      	cmp	r3, #8
 8004744:	d11c      	bne.n	8004780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004746:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d116      	bne.n	8004780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004752:	4b5c      	ldr	r3, [pc, #368]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_RCC_OscConfig+0x152>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d001      	beq.n	800476a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e1bb      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476a:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4952      	ldr	r1, [pc, #328]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	e03a      	b.n	80047f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004788:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <HAL_RCC_OscConfig+0x2b0>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fd f85b 	bl	8001848 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004796:	f7fd f857 	bl	8001848 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e19c      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b4:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4940      	ldr	r1, [pc, #256]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	600b      	str	r3, [r1, #0]
 80047c8:	e015      	b.n	80047f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ca:	4b3f      	ldr	r3, [pc, #252]	; (80048c8 <HAL_RCC_OscConfig+0x2b0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fd f83a 	bl	8001848 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d8:	f7fd f836 	bl	8001848 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e17b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d030      	beq.n	8004864 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <HAL_RCC_OscConfig+0x2b4>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fd f81a 	bl	8001848 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004818:	f7fd f816 	bl	8001848 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e15b      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x200>
 8004836:	e015      	b.n	8004864 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCC_OscConfig+0x2b4>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483e:	f7fd f803 	bl	8001848 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004846:	f7fc ffff 	bl	8001848 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e144      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a0 	beq.w	80049b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004876:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	; 0x40
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_OscConfig+0x2b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d121      	bne.n	80048f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ae:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <HAL_RCC_OscConfig+0x2b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a07      	ldr	r2, [pc, #28]	; (80048d0 <HAL_RCC_OscConfig+0x2b8>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ba:	f7fc ffc5 	bl	8001848 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	e011      	b.n	80048e6 <HAL_RCC_OscConfig+0x2ce>
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	42470000 	.word	0x42470000
 80048cc:	42470e80 	.word	0x42470e80
 80048d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fc ffb8 	bl	8001848 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0fd      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	4b81      	ldr	r3, [pc, #516]	; (8004aec <HAL_RCC_OscConfig+0x4d4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d106      	bne.n	8004908 <HAL_RCC_OscConfig+0x2f0>
 80048fa:	4b7d      	ldr	r3, [pc, #500]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a7c      	ldr	r2, [pc, #496]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
 8004906:	e01c      	b.n	8004942 <HAL_RCC_OscConfig+0x32a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b05      	cmp	r3, #5
 800490e:	d10c      	bne.n	800492a <HAL_RCC_OscConfig+0x312>
 8004910:	4b77      	ldr	r3, [pc, #476]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a76      	ldr	r2, [pc, #472]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
 800491c:	4b74      	ldr	r3, [pc, #464]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4a73      	ldr	r2, [pc, #460]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	; 0x70
 8004928:	e00b      	b.n	8004942 <HAL_RCC_OscConfig+0x32a>
 800492a:	4b71      	ldr	r3, [pc, #452]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492e:	4a70      	ldr	r2, [pc, #448]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6713      	str	r3, [r2, #112]	; 0x70
 8004936:	4b6e      	ldr	r3, [pc, #440]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d015      	beq.n	8004976 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fc ff7d 	bl	8001848 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fc ff79 	bl	8001848 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0bc      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ee      	beq.n	8004952 <HAL_RCC_OscConfig+0x33a>
 8004974:	e014      	b.n	80049a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fc ff67 	bl	8001848 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fc ff63 	bl	8001848 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e0a6      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	4b56      	ldr	r3, [pc, #344]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ee      	bne.n	800497e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b52      	ldr	r3, [pc, #328]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	4a51      	ldr	r2, [pc, #324]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8092 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049bc:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d05c      	beq.n	8004a82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d141      	bne.n	8004a54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d0:	4b48      	ldr	r3, [pc, #288]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d6:	f7fc ff37 	bl	8001848 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049de:	f7fc ff33 	bl	8001848 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e078      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f0:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	019b      	lsls	r3, r3, #6
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	3b01      	subs	r3, #1
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	061b      	lsls	r3, r3, #24
 8004a20:	4933      	ldr	r1, [pc, #204]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a26:	4b33      	ldr	r3, [pc, #204]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fc ff0c 	bl	8001848 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fc ff08 	bl	8001848 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e04d      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x41c>
 8004a52:	e045      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7fc fef5 	bl	8001848 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fc fef1 	bl	8001848 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e036      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x44a>
 8004a80:	e02e      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e029      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <HAL_RCC_OscConfig+0x4d8>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d115      	bne.n	8004adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10d      	bne.n	8004adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d106      	bne.n	8004adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40007000 	.word	0x40007000
 8004af0:	40023800 	.word	0x40023800
 8004af4:	42470060 	.word	0x42470060

08004af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0cc      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b68      	ldr	r3, [pc, #416]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d90c      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0b8      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b4c:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a58      	ldr	r2, [pc, #352]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	494d      	ldr	r1, [pc, #308]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d044      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d119      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e07f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb6:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e06f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e067      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd6:	4b37      	ldr	r3, [pc, #220]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 0203 	bic.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4934      	ldr	r1, [pc, #208]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be8:	f7fc fe2e 	bl	8001848 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf0:	f7fc fe2a 	bl	8001848 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e04f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 020c 	and.w	r2, r3, #12
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d1eb      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d20c      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e032      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	490e      	ldr	r1, [pc, #56]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c7e:	f000 f821 	bl	8004cc4 <HAL_RCC_GetSysClockFreq>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c90:	5cd3      	ldrb	r3, [r2, r3]
 8004c92:	fa21 f303 	lsr.w	r3, r1, r3
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fc3c 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023c00 	.word	0x40023c00
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	0800cc44 	.word	0x0800cc44
 8004cbc:	20000000 	.word	0x20000000
 8004cc0:	20000004 	.word	0x20000004

08004cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cda:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d007      	beq.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x32>
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d008      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x38>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 80b4 	bne.w	8004e58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cf0:	4b5e      	ldr	r3, [pc, #376]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cf2:	60bb      	str	r3, [r7, #8]
       break;
 8004cf4:	e0b3      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf6:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004cf8:	60bb      	str	r3, [r7, #8]
      break;
 8004cfa:	e0b0      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cfc:	4b5a      	ldr	r3, [pc, #360]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d06:	4b58      	ldr	r3, [pc, #352]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d04a      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	f04f 0400 	mov.w	r4, #0
 8004d1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	ea03 0501 	and.w	r5, r3, r1
 8004d28:	ea04 0602 	and.w	r6, r4, r2
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4632      	mov	r2, r6
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	f04f 0400 	mov.w	r4, #0
 8004d38:	0154      	lsls	r4, r2, #5
 8004d3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d3e:	014b      	lsls	r3, r1, #5
 8004d40:	4619      	mov	r1, r3
 8004d42:	4622      	mov	r2, r4
 8004d44:	1b49      	subs	r1, r1, r5
 8004d46:	eb62 0206 	sbc.w	r2, r2, r6
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	f04f 0400 	mov.w	r4, #0
 8004d52:	0194      	lsls	r4, r2, #6
 8004d54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d58:	018b      	lsls	r3, r1, #6
 8004d5a:	1a5b      	subs	r3, r3, r1
 8004d5c:	eb64 0402 	sbc.w	r4, r4, r2
 8004d60:	f04f 0100 	mov.w	r1, #0
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	00e2      	lsls	r2, r4, #3
 8004d6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d6e:	00d9      	lsls	r1, r3, #3
 8004d70:	460b      	mov	r3, r1
 8004d72:	4614      	mov	r4, r2
 8004d74:	195b      	adds	r3, r3, r5
 8004d76:	eb44 0406 	adc.w	r4, r4, r6
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	0262      	lsls	r2, r4, #9
 8004d84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d88:	0259      	lsls	r1, r3, #9
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	4621      	mov	r1, r4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f04f 0400 	mov.w	r4, #0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	f7fb fa28 	bl	80001f0 <__aeabi_uldivmod>
 8004da0:	4603      	mov	r3, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e049      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da8:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	099b      	lsrs	r3, r3, #6
 8004dae:	f04f 0400 	mov.w	r4, #0
 8004db2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	ea03 0501 	and.w	r5, r3, r1
 8004dbe:	ea04 0602 	and.w	r6, r4, r2
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f04f 0400 	mov.w	r4, #0
 8004dce:	0154      	lsls	r4, r2, #5
 8004dd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dd4:	014b      	lsls	r3, r1, #5
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4622      	mov	r2, r4
 8004dda:	1b49      	subs	r1, r1, r5
 8004ddc:	eb62 0206 	sbc.w	r2, r2, r6
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f04f 0400 	mov.w	r4, #0
 8004de8:	0194      	lsls	r4, r2, #6
 8004dea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dee:	018b      	lsls	r3, r1, #6
 8004df0:	1a5b      	subs	r3, r3, r1
 8004df2:	eb64 0402 	sbc.w	r4, r4, r2
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	00e2      	lsls	r2, r4, #3
 8004e00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e04:	00d9      	lsls	r1, r3, #3
 8004e06:	460b      	mov	r3, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	195b      	adds	r3, r3, r5
 8004e0c:	eb44 0406 	adc.w	r4, r4, r6
 8004e10:	f04f 0100 	mov.w	r1, #0
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	02a2      	lsls	r2, r4, #10
 8004e1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e1e:	0299      	lsls	r1, r3, #10
 8004e20:	460b      	mov	r3, r1
 8004e22:	4614      	mov	r4, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	4621      	mov	r1, r4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f04f 0400 	mov.w	r4, #0
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4623      	mov	r3, r4
 8004e32:	f7fb f9dd 	bl	80001f0 <__aeabi_uldivmod>
 8004e36:	4603      	mov	r3, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e5a:	60bb      	str	r3, [r7, #8]
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	007a1200 	.word	0x007a1200

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4601      	mov	r1, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4a03      	ldr	r2, [pc, #12]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800cc54 	.word	0x0800cc54

08004eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eb8:	f7ff ffdc 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ebc:	4601      	mov	r1, r0
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	0b5b      	lsrs	r3, r3, #13
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	4a03      	ldr	r2, [pc, #12]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eca:	5cd3      	ldrb	r3, [r2, r3]
 8004ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800cc54 	.word	0x0800cc54

08004edc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	220f      	movs	r2, #15
 8004eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_GetClockConfig+0x5c>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCC_GetClockConfig+0x60>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	40023c00 	.word	0x40023c00

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d075      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f74:	4bad      	ldr	r3, [pc, #692]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc fc65 	bl	8001848 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f82:	f7fc fc61 	bl	8001848 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e18b      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f94:	4ba6      	ldr	r3, [pc, #664]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	019a      	lsls	r2, r3, #6
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	071b      	lsls	r3, r3, #28
 8004fb8:	499d      	ldr	r1, [pc, #628]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01f      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fcc:	4b98      	ldr	r3, [pc, #608]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd2:	0f1b      	lsrs	r3, r3, #28
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	019a      	lsls	r2, r3, #6
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	071b      	lsls	r3, r3, #28
 8004fec:	4990      	ldr	r1, [pc, #576]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ff4:	4b8e      	ldr	r3, [pc, #568]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffa:	f023 021f 	bic.w	r2, r3, #31
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	3b01      	subs	r3, #1
 8005004:	498a      	ldr	r1, [pc, #552]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	019a      	lsls	r2, r3, #6
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	071b      	lsls	r3, r3, #28
 800502c:	4980      	ldr	r1, [pc, #512]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005034:	4b7d      	ldr	r3, [pc, #500]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800503a:	f7fc fc05 	bl	8001848 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005042:	f7fc fc01 	bl	8001848 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e12b      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005054:	4b76      	ldr	r3, [pc, #472]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005074:	2b00      	cmp	r3, #0
 8005076:	d079      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005078:	4b6e      	ldr	r3, [pc, #440]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800507e:	f7fc fbe3 	bl	8001848 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005086:	f7fc fbdf 	bl	8001848 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e109      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005098:	4b65      	ldr	r3, [pc, #404]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a4:	d0ef      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d020      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b2:	4b5f      	ldr	r3, [pc, #380]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	0f1b      	lsrs	r3, r3, #28
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	019a      	lsls	r2, r3, #6
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	431a      	orrs	r2, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	071b      	lsls	r3, r3, #28
 80050d2:	4957      	ldr	r1, [pc, #348]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050da:	4b55      	ldr	r3, [pc, #340]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	4950      	ldr	r1, [pc, #320]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005100:	4b4b      	ldr	r3, [pc, #300]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	0e1b      	lsrs	r3, r3, #24
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	019a      	lsls	r2, r3, #6
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	071b      	lsls	r3, r3, #28
 8005120:	4943      	ldr	r1, [pc, #268]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005128:	4b41      	ldr	r3, [pc, #260]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800512a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	493e      	ldr	r1, [pc, #248]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800513e:	4b3d      	ldr	r3, [pc, #244]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005144:	f7fc fb80 	bl	8001848 <HAL_GetTick>
 8005148:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800514c:	f7fc fb7c 	bl	8001848 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0a6      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800515e:	4b34      	ldr	r3, [pc, #208]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800516a:	d1ef      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 808d 	beq.w	8005294 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	4b2c      	ldr	r3, [pc, #176]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	4a2b      	ldr	r2, [pc, #172]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005188:	6413      	str	r3, [r2, #64]	; 0x40
 800518a:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005196:	4b28      	ldr	r3, [pc, #160]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a27      	ldr	r2, [pc, #156]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800519c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051a2:	f7fc fb51 	bl	8001848 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051aa:	f7fc fb4d 	bl	8001848 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e077      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051bc:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d039      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d032      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e6:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051f0:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d11e      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800520e:	f7fc fb1b 	bl	8001848 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005214:	e014      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fc fb17 	bl	8001848 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	d90b      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e03f      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800522c:	42470068 	.word	0x42470068
 8005230:	40023800 	.word	0x40023800
 8005234:	42470070 	.word	0x42470070
 8005238:	40007000 	.word	0x40007000
 800523c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005240:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0e4      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005258:	d10d      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800525a:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	4911      	ldr	r1, [pc, #68]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005270:	4313      	orrs	r3, r2
 8005272:	608b      	str	r3, [r1, #8]
 8005274:	e005      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005276:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800527c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005280:	6093      	str	r3, [r2, #8]
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528e:	4909      	ldr	r1, [pc, #36]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005290:	4313      	orrs	r3, r2
 8005292:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80052a6:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80052a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	424711e0 	.word	0x424711e0

080052bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e025      	b.n	800531c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fc f90f 	bl	8001508 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f001 f83f 	bl	8006380 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	461a      	mov	r2, r3
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	f001 f8aa 	bl	8006466 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e056      	b.n	80053e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7fb ff95 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	ea42 0103 	orr.w	r1, r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0104 	and.w	r1, r3, #4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e01d      	b.n	800543a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fb ff7c 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 fa14 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d007      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b082      	sub	sp, #8
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d122      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d11b      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f06f 0202 	mvn.w	r2, #2
 80054b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9a5 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 80054d2:	e005      	b.n	80054e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f997 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9a8 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d122      	bne.n	800553a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d11b      	bne.n	800553a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0204 	mvn.w	r2, #4
 800550a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f97b 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005526:	e005      	b.n	8005534 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f96d 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f97e 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d122      	bne.n	800558e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b08      	cmp	r3, #8
 8005554:	d11b      	bne.n	800558e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0208 	mvn.w	r2, #8
 800555e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2204      	movs	r2, #4
 8005564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f951 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 800557a:	e005      	b.n	8005588 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f943 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f954 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b10      	cmp	r3, #16
 800559a:	d122      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d11b      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f06f 0210 	mvn.w	r2, #16
 80055b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2208      	movs	r2, #8
 80055b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f927 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 80055ce:	e005      	b.n	80055dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f919 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f92a 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10e      	bne.n	800560e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d107      	bne.n	800560e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0201 	mvn.w	r2, #1
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb fc0f 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d10e      	bne.n	800563a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b80      	cmp	r3, #128	; 0x80
 8005628:	d107      	bne.n	800563a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 facf 	bl	8005bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d10e      	bne.n	8005666 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d107      	bne.n	8005666 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8ef 	bl	8005844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b20      	cmp	r3, #32
 8005672:	d10e      	bne.n	8005692 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b20      	cmp	r3, #32
 8005680:	d107      	bne.n	8005692 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f06f 0220 	mvn.w	r2, #32
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fa99 	bl	8005bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_ConfigClockSource+0x18>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e0a6      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x166>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b40      	cmp	r3, #64	; 0x40
 80056e8:	d067      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x120>
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d80b      	bhi.n	8005706 <HAL_TIM_ConfigClockSource+0x6c>
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d073      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x140>
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d802      	bhi.n	80056fc <HAL_TIM_ConfigClockSource+0x62>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d06f      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056fa:	e078      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d06c      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x140>
 8005700:	2b30      	cmp	r3, #48	; 0x30
 8005702:	d06a      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005704:	e073      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005706:	2b70      	cmp	r3, #112	; 0x70
 8005708:	d00d      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x8c>
 800570a:	2b70      	cmp	r3, #112	; 0x70
 800570c:	d804      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x7e>
 800570e:	2b50      	cmp	r3, #80	; 0x50
 8005710:	d033      	beq.n	800577a <HAL_TIM_ConfigClockSource+0xe0>
 8005712:	2b60      	cmp	r3, #96	; 0x60
 8005714:	d041      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005716:	e06a      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571c:	d066      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x152>
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005722:	d017      	beq.n	8005754 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005724:	e063      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f000 f9a9 	bl	8005a8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005748:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	609a      	str	r2, [r3, #8]
      break;
 8005752:	e04c      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6899      	ldr	r1, [r3, #8]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f000 f992 	bl	8005a8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005776:	609a      	str	r2, [r3, #8]
      break;
 8005778:	e039      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	461a      	mov	r2, r3
 8005788:	f000 f906 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2150      	movs	r1, #80	; 0x50
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f95f 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005798:	e029      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 f925 	bl	80059f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2160      	movs	r1, #96	; 0x60
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f94f 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80057b8:	e019      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 f8e6 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2140      	movs	r1, #64	; 0x40
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f93f 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e009      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 f936 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80057ea:	e000      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a40      	ldr	r2, [pc, #256]	; (800596c <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00f      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2f      	ldr	r2, [pc, #188]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d02b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d027      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d023      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_Base_SetConfig+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_Base_SetConfig+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d017      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_Base_SetConfig+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_Base_SetConfig+0x130>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a25      	ldr	r2, [pc, #148]	; (800598c <TIM_Base_SetConfig+0x134>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a24      	ldr	r2, [pc, #144]	; (8005990 <TIM_Base_SetConfig+0x138>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a23      	ldr	r2, [pc, #140]	; (8005994 <TIM_Base_SetConfig+0x13c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40001800 	.word	0x40001800
 8005990:	40001c00 	.word	0x40001c00
 8005994:	40002000 	.word	0x40002000

08005998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 030a 	bic.w	r3, r3, #10
 80059d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e05a      	b.n	8005b9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d022      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d01d      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d018      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d10c      	bne.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40010400 	.word	0x40010400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40001800 	.word	0x40001800

08005bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e03f      	b.n	8005c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb fb9e 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	; 0x24
 8005c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f829 	bl	8005c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cca:	f023 030c 	bic.w	r3, r3, #12
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf6:	f040 818b 	bne.w	8006010 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4ac1      	ldr	r2, [pc, #772]	; (8006004 <UART_SetConfig+0x37c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d005      	beq.n	8005d10 <UART_SetConfig+0x88>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4abf      	ldr	r2, [pc, #764]	; (8006008 <UART_SetConfig+0x380>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f040 80bd 	bne.w	8005e8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d10:	f7ff f8d0 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 8005d14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	461d      	mov	r5, r3
 8005d1a:	f04f 0600 	mov.w	r6, #0
 8005d1e:	46a8      	mov	r8, r5
 8005d20:	46b1      	mov	r9, r6
 8005d22:	eb18 0308 	adds.w	r3, r8, r8
 8005d26:	eb49 0409 	adc.w	r4, r9, r9
 8005d2a:	4698      	mov	r8, r3
 8005d2c:	46a1      	mov	r9, r4
 8005d2e:	eb18 0805 	adds.w	r8, r8, r5
 8005d32:	eb49 0906 	adc.w	r9, r9, r6
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d4a:	4688      	mov	r8, r1
 8005d4c:	4691      	mov	r9, r2
 8005d4e:	eb18 0005 	adds.w	r0, r8, r5
 8005d52:	eb49 0106 	adc.w	r1, r9, r6
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	f04f 0600 	mov.w	r6, #0
 8005d60:	196b      	adds	r3, r5, r5
 8005d62:	eb46 0406 	adc.w	r4, r6, r6
 8005d66:	461a      	mov	r2, r3
 8005d68:	4623      	mov	r3, r4
 8005d6a:	f7fa fa41 	bl	80001f0 <__aeabi_uldivmod>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	461a      	mov	r2, r3
 8005d74:	4ba5      	ldr	r3, [pc, #660]	; (800600c <UART_SetConfig+0x384>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	461d      	mov	r5, r3
 8005d84:	f04f 0600 	mov.w	r6, #0
 8005d88:	46a9      	mov	r9, r5
 8005d8a:	46b2      	mov	sl, r6
 8005d8c:	eb19 0309 	adds.w	r3, r9, r9
 8005d90:	eb4a 040a 	adc.w	r4, sl, sl
 8005d94:	4699      	mov	r9, r3
 8005d96:	46a2      	mov	sl, r4
 8005d98:	eb19 0905 	adds.w	r9, r9, r5
 8005d9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db4:	4689      	mov	r9, r1
 8005db6:	4692      	mov	sl, r2
 8005db8:	eb19 0005 	adds.w	r0, r9, r5
 8005dbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	196b      	adds	r3, r5, r5
 8005dcc:	eb46 0406 	adc.w	r4, r6, r6
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	f7fa fa0c 	bl	80001f0 <__aeabi_uldivmod>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b8b      	ldr	r3, [pc, #556]	; (800600c <UART_SetConfig+0x384>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a86      	ldr	r2, [pc, #536]	; (800600c <UART_SetConfig+0x384>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e00:	4498      	add	r8, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	461d      	mov	r5, r3
 8005e06:	f04f 0600 	mov.w	r6, #0
 8005e0a:	46a9      	mov	r9, r5
 8005e0c:	46b2      	mov	sl, r6
 8005e0e:	eb19 0309 	adds.w	r3, r9, r9
 8005e12:	eb4a 040a 	adc.w	r4, sl, sl
 8005e16:	4699      	mov	r9, r3
 8005e18:	46a2      	mov	sl, r4
 8005e1a:	eb19 0905 	adds.w	r9, r9, r5
 8005e1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e22:	f04f 0100 	mov.w	r1, #0
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e36:	4689      	mov	r9, r1
 8005e38:	4692      	mov	sl, r2
 8005e3a:	eb19 0005 	adds.w	r0, r9, r5
 8005e3e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	461d      	mov	r5, r3
 8005e48:	f04f 0600 	mov.w	r6, #0
 8005e4c:	196b      	adds	r3, r5, r5
 8005e4e:	eb46 0406 	adc.w	r4, r6, r6
 8005e52:	461a      	mov	r2, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	f7fa f9cb 	bl	80001f0 <__aeabi_uldivmod>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b6a      	ldr	r3, [pc, #424]	; (800600c <UART_SetConfig+0x384>)
 8005e62:	fba3 1302 	umull	r1, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2164      	movs	r1, #100	; 0x64
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	3332      	adds	r3, #50	; 0x32
 8005e74:	4a65      	ldr	r2, [pc, #404]	; (800600c <UART_SetConfig+0x384>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 0207 	and.w	r2, r3, #7
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4442      	add	r2, r8
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	e26f      	b.n	800636a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fe ffff 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8005e8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	461d      	mov	r5, r3
 8005e94:	f04f 0600 	mov.w	r6, #0
 8005e98:	46a8      	mov	r8, r5
 8005e9a:	46b1      	mov	r9, r6
 8005e9c:	eb18 0308 	adds.w	r3, r8, r8
 8005ea0:	eb49 0409 	adc.w	r4, r9, r9
 8005ea4:	4698      	mov	r8, r3
 8005ea6:	46a1      	mov	r9, r4
 8005ea8:	eb18 0805 	adds.w	r8, r8, r5
 8005eac:	eb49 0906 	adc.w	r9, r9, r6
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ebc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ec0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ec4:	4688      	mov	r8, r1
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	eb18 0005 	adds.w	r0, r8, r5
 8005ecc:	eb49 0106 	adc.w	r1, r9, r6
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	f04f 0600 	mov.w	r6, #0
 8005eda:	196b      	adds	r3, r5, r5
 8005edc:	eb46 0406 	adc.w	r4, r6, r6
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	f7fa f984 	bl	80001f0 <__aeabi_uldivmod>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <UART_SetConfig+0x384>)
 8005ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	461d      	mov	r5, r3
 8005efe:	f04f 0600 	mov.w	r6, #0
 8005f02:	46a9      	mov	r9, r5
 8005f04:	46b2      	mov	sl, r6
 8005f06:	eb19 0309 	adds.w	r3, r9, r9
 8005f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0e:	4699      	mov	r9, r3
 8005f10:	46a2      	mov	sl, r4
 8005f12:	eb19 0905 	adds.w	r9, r9, r5
 8005f16:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4692      	mov	sl, r2
 8005f32:	eb19 0005 	adds.w	r0, r9, r5
 8005f36:	eb4a 0106 	adc.w	r1, sl, r6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	461d      	mov	r5, r3
 8005f40:	f04f 0600 	mov.w	r6, #0
 8005f44:	196b      	adds	r3, r5, r5
 8005f46:	eb46 0406 	adc.w	r4, r6, r6
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	f7fa f94f 	bl	80001f0 <__aeabi_uldivmod>
 8005f52:	4603      	mov	r3, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	461a      	mov	r2, r3
 8005f58:	4b2c      	ldr	r3, [pc, #176]	; (800600c <UART_SetConfig+0x384>)
 8005f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2164      	movs	r1, #100	; 0x64
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	3332      	adds	r3, #50	; 0x32
 8005f6c:	4a27      	ldr	r2, [pc, #156]	; (800600c <UART_SetConfig+0x384>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f7a:	4498      	add	r8, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	461d      	mov	r5, r3
 8005f80:	f04f 0600 	mov.w	r6, #0
 8005f84:	46a9      	mov	r9, r5
 8005f86:	46b2      	mov	sl, r6
 8005f88:	eb19 0309 	adds.w	r3, r9, r9
 8005f8c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f90:	4699      	mov	r9, r3
 8005f92:	46a2      	mov	sl, r4
 8005f94:	eb19 0905 	adds.w	r9, r9, r5
 8005f98:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	4692      	mov	sl, r2
 8005fb4:	eb19 0005 	adds.w	r0, r9, r5
 8005fb8:	eb4a 0106 	adc.w	r1, sl, r6
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	461d      	mov	r5, r3
 8005fc2:	f04f 0600 	mov.w	r6, #0
 8005fc6:	196b      	adds	r3, r5, r5
 8005fc8:	eb46 0406 	adc.w	r4, r6, r6
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	f7fa f90e 	bl	80001f0 <__aeabi_uldivmod>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <UART_SetConfig+0x384>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	; 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3332      	adds	r3, #50	; 0x32
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <UART_SetConfig+0x384>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4442      	add	r2, r8
 8006000:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006002:	e1b2      	b.n	800636a <UART_SetConfig+0x6e2>
 8006004:	40011000 	.word	0x40011000
 8006008:	40011400 	.word	0x40011400
 800600c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4ad7      	ldr	r2, [pc, #860]	; (8006374 <UART_SetConfig+0x6ec>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d005      	beq.n	8006026 <UART_SetConfig+0x39e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4ad6      	ldr	r2, [pc, #856]	; (8006378 <UART_SetConfig+0x6f0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	f040 80d1 	bne.w	80061c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006026:	f7fe ff45 	bl	8004eb4 <HAL_RCC_GetPCLK2Freq>
 800602a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	469a      	mov	sl, r3
 8006030:	f04f 0b00 	mov.w	fp, #0
 8006034:	46d0      	mov	r8, sl
 8006036:	46d9      	mov	r9, fp
 8006038:	eb18 0308 	adds.w	r3, r8, r8
 800603c:	eb49 0409 	adc.w	r4, r9, r9
 8006040:	4698      	mov	r8, r3
 8006042:	46a1      	mov	r9, r4
 8006044:	eb18 080a 	adds.w	r8, r8, sl
 8006048:	eb49 090b 	adc.w	r9, r9, fp
 800604c:	f04f 0100 	mov.w	r1, #0
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006058:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800605c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006060:	4688      	mov	r8, r1
 8006062:	4691      	mov	r9, r2
 8006064:	eb1a 0508 	adds.w	r5, sl, r8
 8006068:	eb4b 0609 	adc.w	r6, fp, r9
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4619      	mov	r1, r3
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	f04f 0400 	mov.w	r4, #0
 800607e:	0094      	lsls	r4, r2, #2
 8006080:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	461a      	mov	r2, r3
 8006088:	4623      	mov	r3, r4
 800608a:	4628      	mov	r0, r5
 800608c:	4631      	mov	r1, r6
 800608e:	f7fa f8af 	bl	80001f0 <__aeabi_uldivmod>
 8006092:	4603      	mov	r3, r0
 8006094:	460c      	mov	r4, r1
 8006096:	461a      	mov	r2, r3
 8006098:	4bb8      	ldr	r3, [pc, #736]	; (800637c <UART_SetConfig+0x6f4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	469b      	mov	fp, r3
 80060a8:	f04f 0c00 	mov.w	ip, #0
 80060ac:	46d9      	mov	r9, fp
 80060ae:	46e2      	mov	sl, ip
 80060b0:	eb19 0309 	adds.w	r3, r9, r9
 80060b4:	eb4a 040a 	adc.w	r4, sl, sl
 80060b8:	4699      	mov	r9, r3
 80060ba:	46a2      	mov	sl, r4
 80060bc:	eb19 090b 	adds.w	r9, r9, fp
 80060c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d8:	4689      	mov	r9, r1
 80060da:	4692      	mov	sl, r2
 80060dc:	eb1b 0509 	adds.w	r5, fp, r9
 80060e0:	eb4c 060a 	adc.w	r6, ip, sl
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4619      	mov	r1, r3
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f04f 0400 	mov.w	r4, #0
 80060f6:	0094      	lsls	r4, r2, #2
 80060f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060fc:	008b      	lsls	r3, r1, #2
 80060fe:	461a      	mov	r2, r3
 8006100:	4623      	mov	r3, r4
 8006102:	4628      	mov	r0, r5
 8006104:	4631      	mov	r1, r6
 8006106:	f7fa f873 	bl	80001f0 <__aeabi_uldivmod>
 800610a:	4603      	mov	r3, r0
 800610c:	460c      	mov	r4, r1
 800610e:	461a      	mov	r2, r3
 8006110:	4b9a      	ldr	r3, [pc, #616]	; (800637c <UART_SetConfig+0x6f4>)
 8006112:	fba3 1302 	umull	r1, r3, r3, r2
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	2164      	movs	r1, #100	; 0x64
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	3332      	adds	r3, #50	; 0x32
 8006124:	4a95      	ldr	r2, [pc, #596]	; (800637c <UART_SetConfig+0x6f4>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006130:	4498      	add	r8, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	469b      	mov	fp, r3
 8006136:	f04f 0c00 	mov.w	ip, #0
 800613a:	46d9      	mov	r9, fp
 800613c:	46e2      	mov	sl, ip
 800613e:	eb19 0309 	adds.w	r3, r9, r9
 8006142:	eb4a 040a 	adc.w	r4, sl, sl
 8006146:	4699      	mov	r9, r3
 8006148:	46a2      	mov	sl, r4
 800614a:	eb19 090b 	adds.w	r9, r9, fp
 800614e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006152:	f04f 0100 	mov.w	r1, #0
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006162:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006166:	4689      	mov	r9, r1
 8006168:	4692      	mov	sl, r2
 800616a:	eb1b 0509 	adds.w	r5, fp, r9
 800616e:	eb4c 060a 	adc.w	r6, ip, sl
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4619      	mov	r1, r3
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	f04f 0400 	mov.w	r4, #0
 8006184:	0094      	lsls	r4, r2, #2
 8006186:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800618a:	008b      	lsls	r3, r1, #2
 800618c:	461a      	mov	r2, r3
 800618e:	4623      	mov	r3, r4
 8006190:	4628      	mov	r0, r5
 8006192:	4631      	mov	r1, r6
 8006194:	f7fa f82c 	bl	80001f0 <__aeabi_uldivmod>
 8006198:	4603      	mov	r3, r0
 800619a:	460c      	mov	r4, r1
 800619c:	461a      	mov	r2, r3
 800619e:	4b77      	ldr	r3, [pc, #476]	; (800637c <UART_SetConfig+0x6f4>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	2164      	movs	r1, #100	; 0x64
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	3332      	adds	r3, #50	; 0x32
 80061b2:	4a72      	ldr	r2, [pc, #456]	; (800637c <UART_SetConfig+0x6f4>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4442      	add	r2, r8
 80061c4:	609a      	str	r2, [r3, #8]
 80061c6:	e0d0      	b.n	800636a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c8:	f7fe fe60 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 80061cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	469a      	mov	sl, r3
 80061d2:	f04f 0b00 	mov.w	fp, #0
 80061d6:	46d0      	mov	r8, sl
 80061d8:	46d9      	mov	r9, fp
 80061da:	eb18 0308 	adds.w	r3, r8, r8
 80061de:	eb49 0409 	adc.w	r4, r9, r9
 80061e2:	4698      	mov	r8, r3
 80061e4:	46a1      	mov	r9, r4
 80061e6:	eb18 080a 	adds.w	r8, r8, sl
 80061ea:	eb49 090b 	adc.w	r9, r9, fp
 80061ee:	f04f 0100 	mov.w	r1, #0
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006202:	4688      	mov	r8, r1
 8006204:	4691      	mov	r9, r2
 8006206:	eb1a 0508 	adds.w	r5, sl, r8
 800620a:	eb4b 0609 	adc.w	r6, fp, r9
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4619      	mov	r1, r3
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	f04f 0400 	mov.w	r4, #0
 8006220:	0094      	lsls	r4, r2, #2
 8006222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006226:	008b      	lsls	r3, r1, #2
 8006228:	461a      	mov	r2, r3
 800622a:	4623      	mov	r3, r4
 800622c:	4628      	mov	r0, r5
 800622e:	4631      	mov	r1, r6
 8006230:	f7f9 ffde 	bl	80001f0 <__aeabi_uldivmod>
 8006234:	4603      	mov	r3, r0
 8006236:	460c      	mov	r4, r1
 8006238:	461a      	mov	r2, r3
 800623a:	4b50      	ldr	r3, [pc, #320]	; (800637c <UART_SetConfig+0x6f4>)
 800623c:	fba3 2302 	umull	r2, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	469b      	mov	fp, r3
 800624a:	f04f 0c00 	mov.w	ip, #0
 800624e:	46d9      	mov	r9, fp
 8006250:	46e2      	mov	sl, ip
 8006252:	eb19 0309 	adds.w	r3, r9, r9
 8006256:	eb4a 040a 	adc.w	r4, sl, sl
 800625a:	4699      	mov	r9, r3
 800625c:	46a2      	mov	sl, r4
 800625e:	eb19 090b 	adds.w	r9, r9, fp
 8006262:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800627a:	4689      	mov	r9, r1
 800627c:	4692      	mov	sl, r2
 800627e:	eb1b 0509 	adds.w	r5, fp, r9
 8006282:	eb4c 060a 	adc.w	r6, ip, sl
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4619      	mov	r1, r3
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	f04f 0400 	mov.w	r4, #0
 8006298:	0094      	lsls	r4, r2, #2
 800629a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629e:	008b      	lsls	r3, r1, #2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4623      	mov	r3, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	4631      	mov	r1, r6
 80062a8:	f7f9 ffa2 	bl	80001f0 <__aeabi_uldivmod>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b32      	ldr	r3, [pc, #200]	; (800637c <UART_SetConfig+0x6f4>)
 80062b4:	fba3 1302 	umull	r1, r3, r3, r2
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	2164      	movs	r1, #100	; 0x64
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	3332      	adds	r3, #50	; 0x32
 80062c6:	4a2d      	ldr	r2, [pc, #180]	; (800637c <UART_SetConfig+0x6f4>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d2:	4498      	add	r8, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	469b      	mov	fp, r3
 80062d8:	f04f 0c00 	mov.w	ip, #0
 80062dc:	46d9      	mov	r9, fp
 80062de:	46e2      	mov	sl, ip
 80062e0:	eb19 0309 	adds.w	r3, r9, r9
 80062e4:	eb4a 040a 	adc.w	r4, sl, sl
 80062e8:	4699      	mov	r9, r3
 80062ea:	46a2      	mov	sl, r4
 80062ec:	eb19 090b 	adds.w	r9, r9, fp
 80062f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062f4:	f04f 0100 	mov.w	r1, #0
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006300:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006304:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006308:	4689      	mov	r9, r1
 800630a:	4692      	mov	sl, r2
 800630c:	eb1b 0509 	adds.w	r5, fp, r9
 8006310:	eb4c 060a 	adc.w	r6, ip, sl
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4619      	mov	r1, r3
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 0400 	mov.w	r4, #0
 8006326:	0094      	lsls	r4, r2, #2
 8006328:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800632c:	008b      	lsls	r3, r1, #2
 800632e:	461a      	mov	r2, r3
 8006330:	4623      	mov	r3, r4
 8006332:	4628      	mov	r0, r5
 8006334:	4631      	mov	r1, r6
 8006336:	f7f9 ff5b 	bl	80001f0 <__aeabi_uldivmod>
 800633a:	4603      	mov	r3, r0
 800633c:	460c      	mov	r4, r1
 800633e:	461a      	mov	r2, r3
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <UART_SetConfig+0x6f4>)
 8006342:	fba3 1302 	umull	r1, r3, r3, r2
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2164      	movs	r1, #100	; 0x64
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	3332      	adds	r3, #50	; 0x32
 8006354:	4a09      	ldr	r2, [pc, #36]	; (800637c <UART_SetConfig+0x6f4>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4442      	add	r2, r8
 8006366:	609a      	str	r2, [r3, #8]
}
 8006368:	e7ff      	b.n	800636a <UART_SetConfig+0x6e2>
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	40011000 	.word	0x40011000
 8006378:	40011400 	.word	0x40011400
 800637c:	51eb851f 	.word	0x51eb851f

08006380 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d029      	beq.n	80063ee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063aa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80063b4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80063ba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80063c0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80063c6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80063cc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80063d2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80063d8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80063de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	e034      	b.n	8006458 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006404:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800640a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800641e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006422:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800642c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006432:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006438:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800643e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006444:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4313      	orrs	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d02e      	beq.n	80064de <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800648c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	3b01      	subs	r3, #1
 800649a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800649c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80064a6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80064b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80064ba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80064c4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80064ce:	4313      	orrs	r3, r2
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	e03b      	b.n	8006556 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006500:	4313      	orrs	r3, r2
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006514:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	3b01      	subs	r3, #1
 8006522:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006524:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	3b01      	subs	r3, #1
 800652c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800652e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	3b01      	subs	r3, #1
 8006536:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006538:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	3b01      	subs	r3, #1
 8006540:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006542:	4313      	orrs	r3, r2
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006564:	b084      	sub	sp, #16
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	f107 001c 	add.w	r0, r7, #28
 8006572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	2b01      	cmp	r3, #1
 800657a:	d122      	bne.n	80065c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d105      	bne.n	80065b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f94a 	bl	8006850 <USB_CoreReset>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	e01a      	b.n	80065f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f93e 	bl	8006850 <USB_CoreReset>
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
 80065ea:	e005      	b.n	80065f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10b      	bne.n	8006616 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f043 0206 	orr.w	r2, r3, #6
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f043 0220 	orr.w	r2, r3, #32
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006616:	7bfb      	ldrb	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006622:	b004      	add	sp, #16
 8006624:	4770      	bx	lr

08006626 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f043 0201 	orr.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 0201 	bic.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d106      	bne.n	8006696 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	e00b      	b.n	80066ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e001      	b.n	80066ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e003      	b.n	80066b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80066ae:	2032      	movs	r0, #50	; 0x32
 80066b0:	f7fb f8d6 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	f043 0220 	orr.w	r2, r3, #32
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3301      	adds	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <USB_FlushTxFifo+0x48>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d901      	bls.n	80066ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e006      	b.n	80066fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d0f0      	beq.n	80066da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	00030d40 	.word	0x00030d40

0800670c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2210      	movs	r2, #16
 800671c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a09      	ldr	r2, [pc, #36]	; (800674c <USB_FlushRxFifo+0x40>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d901      	bls.n	8006730 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e006      	b.n	800673e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b10      	cmp	r3, #16
 800673a:	d0f0      	beq.n	800671e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	00030d40 	.word	0x00030d40

08006750 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	460b      	mov	r3, r1
 8006760:	71fb      	strb	r3, [r7, #7]
 8006762:	4613      	mov	r3, r2
 8006764:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800676e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d11a      	bne.n	80067ac <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006776:	88bb      	ldrh	r3, [r7, #4]
 8006778:	3303      	adds	r3, #3
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e00f      	b.n	80067a4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	031a      	lsls	r2, r3, #12
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	4413      	add	r3, r2
 800678c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006790:	461a      	mov	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3304      	adds	r3, #4
 800679c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d3eb      	bcc.n	8006784 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3724      	adds	r7, #36	; 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b089      	sub	sp, #36	; 0x24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	4613      	mov	r3, r2
 80067c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	3303      	adds	r3, #3
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e00b      	b.n	80067f6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3304      	adds	r3, #4
 80067ee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3ef      	bcc.n	80067de <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067fe:	69fb      	ldr	r3, [r7, #28]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3724      	adds	r7, #36	; 0x24
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0301 	and.w	r3, r3, #1
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <USB_CoreReset+0x64>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e01b      	b.n	80068a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	daf2      	bge.n	800685c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <USB_CoreReset+0x64>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d0f0      	beq.n	8006886 <USB_CoreReset+0x36>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	00030d40 	.word	0x00030d40

080068b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068b8:	b084      	sub	sp, #16
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	f107 001c 	add.w	r0, r7, #28
 80068c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068d4:	461a      	mov	r2, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10a      	bne.n	8006926 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800691e:	f043 0304 	orr.w	r3, r3, #4
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e014      	b.n	8006950 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	e009      	b.n	8006950 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800694a:	f023 0304 	bic.w	r3, r3, #4
 800694e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006950:	2110      	movs	r1, #16
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff feb4 	bl	80066c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fed7 	bl	800670c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e015      	b.n	8006990 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	461a      	mov	r2, r3
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3e5      	bcc.n	8006964 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006998:	2101      	movs	r1, #1
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8ac 	bl	8006af8 <USB_DriveVbus>

  HAL_Delay(200U);
 80069a0:	20c8      	movs	r0, #200	; 0xc8
 80069a2:	f7fa ff5d 	bl	8001860 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <USB_HostInit+0x164>)
 80069cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <USB_HostInit+0x168>)
 80069d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069d6:	e009      	b.n	80069ec <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2280      	movs	r2, #128	; 0x80
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a10      	ldr	r2, [pc, #64]	; (8006a24 <USB_HostInit+0x16c>)
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <USB_HostInit+0x170>)
 80069e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d105      	bne.n	80069fe <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f043 0210 	orr.w	r2, r3, #16
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <USB_HostInit+0x174>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a16:	b004      	add	sp, #16
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	01000200 	.word	0x01000200
 8006a20:	00e00300 	.word	0x00e00300
 8006a24:	00600080 	.word	0x00600080
 8006a28:	004000e0 	.word	0x004000e0
 8006a2c:	a3200008 	.word	0xa3200008

08006a30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d107      	bne.n	8006a82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a7e:	6053      	str	r3, [r2, #4]
 8006a80:	e009      	b.n	8006a96 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d106      	bne.n	8006a96 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a94:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ac4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ad4:	2064      	movs	r0, #100	; 0x64
 8006ad6:	f7fa fec3 	bl	8001860 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ae8:	200a      	movs	r0, #10
 8006aea:	f7fa feb9 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <USB_DriveVbus+0x44>
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d106      	bne.n	8006b3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d109      	bne.n	8006b5c <USB_DriveVbus+0x64>
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	0c5b      	lsrs	r3, r3, #17
 8006b88:	f003 0303 	and.w	r3, r3, #3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	b29b      	uxth	r3, r3
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	70fb      	strb	r3, [r7, #3]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70bb      	strb	r3, [r7, #2]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	461a      	mov	r2, r3
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d87e      	bhi.n	8006cf8 <USB_HC_Init+0x13c>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <USB_HC_Init+0x44>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c11 	.word	0x08006c11
 8006c04:	08006cbb 	.word	0x08006cbb
 8006c08:	08006c11 	.word	0x08006c11
 8006c0c:	08006c7d 	.word	0x08006c7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da10      	bge.n	8006c4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006c4c:	e057      	b.n	8006cfe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d051      	beq.n	8006cfe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c5a:	78fb      	ldrb	r3, [r7, #3]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c78:	60d3      	str	r3, [r2, #12]
      break;
 8006c7a:	e040      	b.n	8006cfe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	da34      	bge.n	8006d02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006cb8:	e023      	b.n	8006d02 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f240 2325 	movw	r3, #549	; 0x225
 8006ccc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da17      	bge.n	8006d06 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006cf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006cf6:	e006      	b.n	8006d06 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	e004      	b.n	8006d08 <USB_HC_Init+0x14c>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e002      	b.n	8006d08 <USB_HC_Init+0x14c>
      break;
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <USB_HC_Init+0x14c>
      break;
 8006d06:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	2101      	movs	r1, #1
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d22:	4313      	orrs	r3, r2
 8006d24:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da03      	bge.n	8006d42 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	e001      	b.n	8006d46 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d103      	bne.n	8006d56 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e001      	b.n	8006d5a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d5a:	787b      	ldrb	r3, [r7, #1]
 8006d5c:	059b      	lsls	r3, r3, #22
 8006d5e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d62:	78bb      	ldrb	r3, [r7, #2]
 8006d64:	02db      	lsls	r3, r3, #11
 8006d66:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d6a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d70:	049b      	lsls	r3, r3, #18
 8006d72:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d76:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d7e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	0159      	lsls	r1, r3, #5
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	440b      	add	r3, r1
 8006d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d90:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d96:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006d98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d10f      	bne.n	8006dc0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dbe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d028      	beq.n	8006e4c <USB_HC_StartXfer+0x7c>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	791b      	ldrb	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d124      	bne.n	8006e4c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <USB_HC_StartXfer+0x50>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	795b      	ldrb	r3, [r3, #5]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d107      	bne.n	8006e20 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	4619      	mov	r1, r3
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fa30 	bl	800727c <USB_DoPing>
      return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e114      	b.n	800704a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d112      	bne.n	8006e4c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e40:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e44:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d018      	beq.n	8006e86 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	8912      	ldrh	r2, [r2, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	8912      	ldrh	r2, [r2, #8]
 8006e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e68:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e6c:	8b7b      	ldrh	r3, [r7, #26]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d90b      	bls.n	8006e8a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006e72:	8b7b      	ldrh	r3, [r7, #26]
 8006e74:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	8912      	ldrh	r2, [r2, #8]
 8006e7c:	fb02 f203 	mul.w	r2, r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	611a      	str	r2, [r3, #16]
 8006e84:	e001      	b.n	8006e8a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006e86:	2301      	movs	r3, #1
 8006e88:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	78db      	ldrb	r3, [r3, #3]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	8912      	ldrh	r2, [r2, #8]
 8006e98:	fb02 f203 	mul.w	r2, r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eaa:	04d9      	lsls	r1, r3, #19
 8006eac:	4b69      	ldr	r3, [pc, #420]	; (8007054 <USB_HC_StartXfer+0x284>)
 8006eae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eb0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7a9b      	ldrb	r3, [r3, #10]
 8006eb6:	075b      	lsls	r3, r3, #29
 8006eb8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ebc:	69f9      	ldr	r1, [r7, #28]
 8006ebe:	0148      	lsls	r0, r1, #5
 8006ec0:	6a39      	ldr	r1, [r7, #32]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ec8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68d9      	ldr	r1, [r3, #12]
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	6a3a      	ldr	r2, [r7, #32]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	7e7b      	ldrb	r3, [r7, #25]
 8006f2e:	075b      	lsls	r3, r3, #29
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	0148      	lsls	r0, r1, #5
 8006f34:	6a39      	ldr	r1, [r7, #32]
 8006f36:	4401      	add	r1, r0
 8006f38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a42      	ldr	r2, [pc, #264]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f50:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f52:	4b41      	ldr	r3, [pc, #260]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f5a:	4a3f      	ldr	r2, [pc, #252]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f5c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	78db      	ldrb	r3, [r3, #3]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d006      	beq.n	8006f74 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f66:	4b3c      	ldr	r3, [pc, #240]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6e:	4a3a      	ldr	r2, [pc, #232]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e005      	b.n	8006f80 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f74:	4b38      	ldr	r3, [pc, #224]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f7c:	4a36      	ldr	r2, [pc, #216]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f7e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f80:	4b35      	ldr	r3, [pc, #212]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f88:	4a33      	ldr	r2, [pc, #204]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f8a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4b2f      	ldr	r3, [pc, #188]	; (8007058 <USB_HC_StartXfer+0x288>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e04f      	b.n	800704a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	78db      	ldrb	r3, [r3, #3]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d14a      	bne.n	8007048 <USB_HC_StartXfer+0x278>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d046      	beq.n	8007048 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	79db      	ldrb	r3, [r3, #7]
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d830      	bhi.n	8007024 <USB_HC_StartXfer+0x254>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <USB_HC_StartXfer+0x1f8>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	08006fd9 	.word	0x08006fd9
 8006fd4:	08006ffd 	.word	0x08006ffd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	3303      	adds	r3, #3
 8006fde:	089b      	lsrs	r3, r3, #2
 8006fe0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fe2:	8afa      	ldrh	r2, [r7, #22]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d91c      	bls.n	8007028 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ffa:	e015      	b.n	8007028 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	3303      	adds	r3, #3
 8007002:	089b      	lsrs	r3, r3, #2
 8007004:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007006:	8afa      	ldrh	r2, [r7, #22]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	b29b      	uxth	r3, r3
 8007012:	429a      	cmp	r2, r3
 8007014:	d90a      	bls.n	800702c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	619a      	str	r2, [r3, #24]
        }
        break;
 8007022:	e003      	b.n	800702c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007024:	bf00      	nop
 8007026:	e002      	b.n	800702e <USB_HC_StartXfer+0x25e>
        break;
 8007028:	bf00      	nop
 800702a:	e000      	b.n	800702e <USB_HC_StartXfer+0x25e>
        break;
 800702c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	68d9      	ldr	r1, [r3, #12]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785a      	ldrb	r2, [r3, #1]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	b298      	uxth	r0, r3
 800703c:	2300      	movs	r3, #0
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4603      	mov	r3, r0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f7ff fb84 	bl	8006750 <USB_WritePacket>
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3728      	adds	r7, #40	; 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	1ff80000 	.word	0x1ff80000
 8007058:	20000310 	.word	0x20000310

0800705c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	b29b      	uxth	r3, r3
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800707e:	b480      	push	{r7}
 8007080:	b087      	sub	sp, #28
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	0c9b      	lsrs	r3, r3, #18
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <USB_HC_Halt+0x3a>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d16c      	bne.n	8007192 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d143      	bne.n	800716c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007102:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007122:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	440a      	add	r2, r1
 800713a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800713e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007142:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3301      	adds	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007150:	d81d      	bhi.n	800718e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007168:	d0ec      	beq.n	8007144 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800716a:	e080      	b.n	800726e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	440a      	add	r2, r1
 8007182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800718a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800718c:	e06f      	b.n	800726e <USB_HC_Halt+0x1f0>
          break;
 800718e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007190:	e06d      	b.n	800726e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d143      	bne.n	800724a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007200:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	440a      	add	r2, r1
 8007218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007220:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	3301      	adds	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722e:	d81d      	bhi.n	800726c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007246:	d0ec      	beq.n	8007222 <USB_HC_Halt+0x1a4>
 8007248:	e011      	b.n	800726e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	4413      	add	r3, r2
 8007252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	440a      	add	r2, r1
 8007260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	e000      	b.n	800726e <USB_HC_Halt+0x1f0>
          break;
 800726c:	bf00      	nop
    }
  }

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007290:	2301      	movs	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	04da      	lsls	r2, r3, #19
 8007298:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <USB_DoPing+0x74>)
 800729a:	4013      	ands	r3, r2
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	461a      	mov	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	1ff80000 	.word	0x1ff80000

080072f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff f99f 	bl	8006648 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800730a:	2110      	movs	r1, #16
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff f9d7 	bl	80066c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff f9fa 	bl	800670c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	e01f      	b.n	800735e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007334:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800733c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007344:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007352:	461a      	mov	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3301      	adds	r3, #1
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d9dc      	bls.n	800731e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007364:	2300      	movs	r3, #0
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	e034      	b.n	80073d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007380:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007388:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007390:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	461a      	mov	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	3301      	adds	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b0:	d80c      	bhi.n	80073cc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c8:	d0ec      	beq.n	80073a4 <USB_StopHost+0xb0>
 80073ca:	e000      	b.n	80073ce <USB_StopHost+0xda>
        break;
 80073cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	3301      	adds	r3, #1
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d9c7      	bls.n	800736a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e0:	461a      	mov	r2, r3
 80073e2:	f04f 33ff 	mov.w	r3, #4294967295
 80073e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295
 80073ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff f918 	bl	8006626 <USB_EnableGlobalInt>

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b089      	sub	sp, #36	; 0x24
 8007404:	af04      	add	r7, sp, #16
 8007406:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007408:	2301      	movs	r3, #1
 800740a:	2202      	movs	r2, #2
 800740c:	2102      	movs	r1, #2
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fcba 	bl	8007d88 <USBH_FindInterface>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2bff      	cmp	r3, #255	; 0xff
 800741c:	d002      	beq.n	8007424 <USBH_CDC_InterfaceInit+0x24>
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d901      	bls.n	8007428 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007424:	2302      	movs	r3, #2
 8007426:	e13d      	b.n	80076a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc8f 	bl	8007d50 <USBH_SelectInterface>
 8007432:	4603      	mov	r3, r0
 8007434:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800743c:	2302      	movs	r3, #2
 800743e:	e131      	b.n	80076a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007446:	2050      	movs	r0, #80	; 0x50
 8007448:	f004 fec6 	bl	800c1d8 <malloc>
 800744c:	4603      	mov	r3, r0
 800744e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007460:	2302      	movs	r3, #2
 8007462:	e11f      	b.n	80076a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007464:	2250      	movs	r2, #80	; 0x50
 8007466:	2100      	movs	r1, #0
 8007468:	68b8      	ldr	r0, [r7, #8]
 800746a:	f004 fed0 	bl	800c20e <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	211a      	movs	r1, #26
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b25b      	sxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	da15      	bge.n	80074b2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	211a      	movs	r1, #26
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	4413      	add	r3, r2
 8007492:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	211a      	movs	r1, #26
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074ac:	881a      	ldrh	r2, [r3, #0]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 f894 	bl	80095e6 <USBH_AllocPipe>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	7819      	ldrb	r1, [r3, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	7858      	ldrb	r0, [r3, #1]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	8952      	ldrh	r2, [r2, #10]
 80074de:	9202      	str	r2, [sp, #8]
 80074e0:	2203      	movs	r2, #3
 80074e2:	9201      	str	r2, [sp, #4]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	4623      	mov	r3, r4
 80074e8:	4602      	mov	r2, r0
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f002 f84c 	bl	8009588 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f004 fdbd 	bl	800c078 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074fe:	2300      	movs	r3, #0
 8007500:	2200      	movs	r2, #0
 8007502:	210a      	movs	r1, #10
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc3f 	bl	8007d88 <USBH_FindInterface>
 800750a:	4603      	mov	r3, r0
 800750c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2bff      	cmp	r3, #255	; 0xff
 8007512:	d002      	beq.n	800751a <USBH_CDC_InterfaceInit+0x11a>
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d901      	bls.n	800751e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800751a:	2302      	movs	r3, #2
 800751c:	e0c2      	b.n	80076a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	211a      	movs	r1, #26
 8007524:	fb01 f303 	mul.w	r3, r1, r3
 8007528:	4413      	add	r3, r2
 800752a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b25b      	sxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	da16      	bge.n	8007564 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	211a      	movs	r1, #26
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	211a      	movs	r1, #26
 8007552:	fb01 f303 	mul.w	r3, r1, r3
 8007556:	4413      	add	r3, r2
 8007558:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800755c:	881a      	ldrh	r2, [r3, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	835a      	strh	r2, [r3, #26]
 8007562:	e015      	b.n	8007590 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	211a      	movs	r1, #26
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	211a      	movs	r1, #26
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800758a:	881a      	ldrh	r2, [r3, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	211a      	movs	r1, #26
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	4413      	add	r3, r2
 800759c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da16      	bge.n	80075d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	211a      	movs	r1, #26
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	211a      	movs	r1, #26
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075ce:	881a      	ldrh	r2, [r3, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	835a      	strh	r2, [r3, #26]
 80075d4:	e015      	b.n	8007602 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	211a      	movs	r1, #26
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	4413      	add	r3, r2
 80075e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	211a      	movs	r1, #26
 80075f2:	fb01 f303 	mul.w	r3, r1, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075fc:	881a      	ldrh	r2, [r3, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	7b9b      	ldrb	r3, [r3, #14]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 ffec 	bl	80095e6 <USBH_AllocPipe>
 800760e:	4603      	mov	r3, r0
 8007610:	461a      	mov	r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7bdb      	ldrb	r3, [r3, #15]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 ffe2 	bl	80095e6 <USBH_AllocPipe>
 8007622:	4603      	mov	r3, r0
 8007624:	461a      	mov	r2, r3
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	7b59      	ldrb	r1, [r3, #13]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	7b98      	ldrb	r0, [r3, #14]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	8b12      	ldrh	r2, [r2, #24]
 8007642:	9202      	str	r2, [sp, #8]
 8007644:	2202      	movs	r2, #2
 8007646:	9201      	str	r2, [sp, #4]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4623      	mov	r3, r4
 800764c:	4602      	mov	r2, r0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 ff9a 	bl	8009588 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	7b19      	ldrb	r1, [r3, #12]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	7bd8      	ldrb	r0, [r3, #15]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	8b52      	ldrh	r2, [r2, #26]
 800766c:	9202      	str	r2, [sp, #8]
 800766e:	2202      	movs	r2, #2
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4623      	mov	r3, r4
 8007676:	4602      	mov	r2, r0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 ff85 	bl	8009588 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	7b5b      	ldrb	r3, [r3, #13]
 800768a:	2200      	movs	r2, #0
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f004 fcf2 	bl	800c078 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	7b1b      	ldrb	r3, [r3, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f004 fceb 	bl	800c078 <USBH_LL_SetToggle>

  return USBH_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd90      	pop	{r4, r7, pc}

080076ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00e      	beq.n	80076e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 ff7a 	bl	80095c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 ffa5 	bl	8009628 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	7b1b      	ldrb	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00e      	beq.n	800770a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	7b1b      	ldrb	r3, [r3, #12]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 ff67 	bl	80095c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7b1b      	ldrb	r3, [r3, #12]
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 ff92 	bl	8009628 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	7b5b      	ldrb	r3, [r3, #13]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00e      	beq.n	8007730 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	7b5b      	ldrb	r3, [r3, #13]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 ff54 	bl	80095c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	7b5b      	ldrb	r3, [r3, #13]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 ff7f 	bl	8009628 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	4618      	mov	r0, r3
 8007746:	f004 fd4f 	bl	800c1e8 <free>
    phost->pActiveClass->pData = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007750:	2200      	movs	r2, #0
 8007752:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3340      	adds	r3, #64	; 0x40
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f8b1 	bl	80078de <GetLineCoding>
 800777c:	4603      	mov	r3, r0
 800777e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800778c:	2102      	movs	r1, #2
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007792:	7afb      	ldrb	r3, [r7, #11]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077a4:	2301      	movs	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d877      	bhi.n	80078b0 <USBH_CDC_Process+0x114>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <USBH_CDC_Process+0x2c>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077dd 	.word	0x080077dd
 80077cc:	080077e3 	.word	0x080077e3
 80077d0:	08007813 	.word	0x08007813
 80077d4:	08007887 	.word	0x08007887
 80077d8:	08007895 	.word	0x08007895
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
      break;
 80077e0:	e06d      	b.n	80078be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f897 	bl	800791c <SetLineCoding>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007800:	e058      	b.n	80078b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d055      	beq.n	80078b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2204      	movs	r2, #4
 800780c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007810:	e050      	b.n	80078b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	3340      	adds	r3, #64	; 0x40
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f860 	bl	80078de <GetLineCoding>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d126      	bne.n	8007876 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d13b      	bne.n	80078b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800784c:	429a      	cmp	r2, r3
 800784e:	d133      	bne.n	80078b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800785c:	429a      	cmp	r2, r3
 800785e:	d12b      	bne.n	80078b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007868:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800786a:	429a      	cmp	r2, r3
 800786c:	d124      	bne.n	80078b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f984 	bl	8007b7c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007874:	e020      	b.n	80078b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d01d      	beq.n	80078b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2204      	movs	r2, #4
 8007880:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007884:	e018      	b.n	80078b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f867 	bl	800795a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8f8 	bl	8007a82 <CDC_ProcessReception>
      break;
 8007892:	e014      	b.n	80078be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007894:	2100      	movs	r1, #0
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 f953 	bl	8008b42 <USBH_ClrFeature>
 800789c:	4603      	mov	r3, r0
 800789e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80078ae:	e005      	b.n	80078bc <USBH_CDC_Process+0x120>

    default:
      break;
 80078b0:	bf00      	nop
 80078b2:	e004      	b.n	80078be <USBH_CDC_Process+0x122>
      break;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <USBH_CDC_Process+0x122>
      break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <USBH_CDC_Process+0x122>
      break;
 80078bc:	bf00      	nop

  }

  return status;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	22a1      	movs	r2, #161	; 0xa1
 80078ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2221      	movs	r2, #33	; 0x21
 80078f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2207      	movs	r2, #7
 8007904:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2207      	movs	r2, #7
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 faf8 	bl	8008f02 <USBH_CtlReq>
 8007912:	4603      	mov	r3, r0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2221      	movs	r2, #33	; 0x21
 800792a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2207      	movs	r2, #7
 8007942:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2207      	movs	r2, #7
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fad9 	bl	8008f02 <USBH_CtlReq>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	af02      	add	r7, sp, #8
 8007960:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800796c:	2300      	movs	r3, #0
 800796e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007976:	2b01      	cmp	r3, #1
 8007978:	d002      	beq.n	8007980 <CDC_ProcessTransmission+0x26>
 800797a:	2b02      	cmp	r3, #2
 800797c:	d025      	beq.n	80079ca <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800797e:	e07c      	b.n	8007a7a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	8b12      	ldrh	r2, [r2, #24]
 8007988:	4293      	cmp	r3, r2
 800798a:	d90c      	bls.n	80079a6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	69d9      	ldr	r1, [r3, #28]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8b1a      	ldrh	r2, [r3, #24]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	7b58      	ldrb	r0, [r3, #13]
 8007998:	2301      	movs	r3, #1
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	4603      	mov	r3, r0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fdaf 	bl	8009502 <USBH_BulkSendData>
 80079a4:	e00c      	b.n	80079c0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	7b58      	ldrb	r0, [r3, #13]
 80079b4:	2301      	movs	r3, #1
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	4603      	mov	r3, r0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fda1 	bl	8009502 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079c8:	e057      	b.n	8007a7a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	7b5b      	ldrb	r3, [r3, #13]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f004 fb27 	bl	800c024 <USBH_LL_GetURBState>
 80079d6:	4603      	mov	r3, r0
 80079d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079da:	7afb      	ldrb	r3, [r7, #11]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d136      	bne.n	8007a4e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	8b12      	ldrh	r2, [r2, #24]
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d90e      	bls.n	8007a0a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	8b12      	ldrh	r2, [r2, #24]
 80079f4:	1a9a      	subs	r2, r3, r2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	8b12      	ldrh	r2, [r2, #24]
 8007a02:	441a      	add	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	61da      	str	r2, [r3, #28]
 8007a08:	e002      	b.n	8007a10 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007a20:	e006      	b.n	8007a30 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f892 	bl	8007b54 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2204      	movs	r2, #4
 8007a34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a44:	2200      	movs	r2, #0
 8007a46:	4619      	mov	r1, r3
 8007a48:	f001 feea 	bl	8009820 <osMessagePut>
      break;
 8007a4c:	e014      	b.n	8007a78 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d111      	bne.n	8007a78 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a70:	2200      	movs	r2, #0
 8007a72:	4619      	mov	r1, r3
 8007a74:	f001 fed4 	bl	8009820 <osMessagePut>
      break;
 8007a78:	bf00      	nop
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b086      	sub	sp, #24
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d002      	beq.n	8007aa8 <CDC_ProcessReception+0x26>
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d00e      	beq.n	8007ac4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007aa6:	e051      	b.n	8007b4c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	6a19      	ldr	r1, [r3, #32]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	8b5a      	ldrh	r2, [r3, #26]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	7b1b      	ldrb	r3, [r3, #12]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fd49 	bl	800954c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2204      	movs	r2, #4
 8007abe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ac2:	e043      	b.n	8007b4c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	7b1b      	ldrb	r3, [r3, #12]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f004 faaa 	bl	800c024 <USBH_LL_GetURBState>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ad4:	7cfb      	ldrb	r3, [r7, #19]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d137      	bne.n	8007b4a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	7b1b      	ldrb	r3, [r3, #12]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f004 fa0d 	bl	800bf00 <USBH_LL_GetLastXferSize>
 8007ae6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d016      	beq.n	8007b20 <CDC_ProcessReception+0x9e>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	8b5b      	ldrh	r3, [r3, #26]
 8007af6:	461a      	mov	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d910      	bls.n	8007b20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1ad2      	subs	r2, r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	441a      	add	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007b1e:	e006      	b.n	8007b2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f81d 	bl	8007b68 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2204      	movs	r2, #4
 8007b32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b42:	2200      	movs	r2, #0
 8007b44:	4619      	mov	r1, r3
 8007b46:	f001 fe6b 	bl	8009820 <osMessagePut>
      break;
 8007b4a:	bf00      	nop
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b90:	b5b0      	push	{r4, r5, r7, lr}
 8007b92:	b090      	sub	sp, #64	; 0x40
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e04d      	b.n	8007c44 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	79fa      	ldrb	r2, [r7, #7]
 8007bac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f847 	bl	8007c54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007bf4:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <USBH_Init+0xbc>)
 8007bf6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007bfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 fde1 	bl	80097ce <osMessageCreate>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <USBH_Init+0xc0>)
 8007c16:	f107 0414 	add.w	r4, r7, #20
 8007c1a:	461d      	mov	r5, r3
 8007c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007c28:	f107 0314 	add.w	r3, r7, #20
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fd6d 	bl	800970e <osThreadCreate>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f004 f8a3 	bl	800bd88 <USBH_LL_Init>

  return USBH_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3740      	adds	r7, #64	; 0x40
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4c:	0800cc04 	.word	0x0800cc04
 8007c50:	0800cc20 	.word	0x0800cc20

08007c54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e009      	b.n	8007c7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	33e0      	adds	r3, #224	; 0xe0
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b0e      	cmp	r3, #14
 8007c7e:	d9f2      	bls.n	8007c66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e009      	b.n	8007c9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	d3f1      	bcc.n	8007c86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2240      	movs	r2, #64	; 0x40
 8007cc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d016      	beq.n	8007d3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10e      	bne.n	8007d38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d20:	1c59      	adds	r1, r3, #1
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	33de      	adds	r3, #222	; 0xde
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
 8007d36:	e004      	b.n	8007d42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e001      	b.n	8007d42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d204      	bcs.n	8007d76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007d74:	e001      	b.n	8007d7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d76:	2302      	movs	r3, #2
 8007d78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	4608      	mov	r0, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	4603      	mov	r3, r0
 8007d98:	70fb      	strb	r3, [r7, #3]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70bb      	strb	r3, [r7, #2]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007db0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007db2:	e025      	b.n	8007e00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	221a      	movs	r2, #26
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	795b      	ldrb	r3, [r3, #5]
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d002      	beq.n	8007dd6 <USBH_FindInterface+0x4e>
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	2bff      	cmp	r3, #255	; 0xff
 8007dd4:	d111      	bne.n	8007dfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007dda:	78ba      	ldrb	r2, [r7, #2]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d002      	beq.n	8007de6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007de0:	78bb      	ldrb	r3, [r7, #2]
 8007de2:	2bff      	cmp	r3, #255	; 0xff
 8007de4:	d109      	bne.n	8007dfa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dea:	787a      	ldrb	r2, [r7, #1]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007df0:	787b      	ldrb	r3, [r7, #1]
 8007df2:	2bff      	cmp	r3, #255	; 0xff
 8007df4:	d101      	bne.n	8007dfa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	e006      	b.n	8007e08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d9d6      	bls.n	8007db4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e06:	23ff      	movs	r3, #255	; 0xff
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f003 fff9 	bl	800be14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007e22:	2101      	movs	r1, #1
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f004 f910 	bl	800c04a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af04      	add	r7, sp, #16
 8007e3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d102      	bne.n	8007e56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2203      	movs	r2, #3
 8007e54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b0b      	cmp	r3, #11
 8007e5e:	f200 823c 	bhi.w	80082da <USBH_Process+0x4a6>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBH_Process+0x34>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007ee7 	.word	0x08007ee7
 8007e70:	08007f6b 	.word	0x08007f6b
 8007e74:	08008259 	.word	0x08008259
 8007e78:	080082db 	.word	0x080082db
 8007e7c:	0800802b 	.word	0x0800802b
 8007e80:	080081e3 	.word	0x080081e3
 8007e84:	0800807d 	.word	0x0800807d
 8007e88:	080080b9 	.word	0x080080b9
 8007e8c:	080080f3 	.word	0x080080f3
 8007e90:	0800813b 	.word	0x0800813b
 8007e94:	08008241 	.word	0x08008241
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 821c 	beq.w	80082de <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007eac:	20c8      	movs	r0, #200	; 0xc8
 8007eae:	f004 f916 	bl	800c0de <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f004 f809 	bl	800beca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007edc:	2200      	movs	r2, #0
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f001 fc9e 	bl	8009820 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ee4:	e1fb      	b.n	80082de <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d107      	bne.n	8007f00 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	e025      	b.n	8007f4c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f0a:	d914      	bls.n	8007f36 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f12:	3301      	adds	r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d903      	bls.n	8007f2e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220d      	movs	r2, #13
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	e00e      	b.n	8007f4c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	e00a      	b.n	8007f4c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f3c:	f103 020a 	add.w	r2, r3, #10
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f46:	200a      	movs	r0, #10
 8007f48:	f004 f8c9 	bl	800c0de <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f60:	2200      	movs	r2, #0
 8007f62:	4619      	mov	r1, r3
 8007f64:	f001 fc5c 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f68:	e1c0      	b.n	80082ec <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f80:	2064      	movs	r0, #100	; 0x64
 8007f82:	f004 f8ac 	bl	800c0de <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f003 ff7a 	bl	800be80 <USBH_LL_GetSpeed>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	461a      	mov	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2205      	movs	r2, #5
 8007f9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fb21 	bl	80095e6 <USBH_AllocPipe>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007fac:	2180      	movs	r1, #128	; 0x80
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fb19 	bl	80095e6 <USBH_AllocPipe>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7919      	ldrb	r1, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fd0:	b292      	uxth	r2, r2
 8007fd2:	9202      	str	r2, [sp, #8]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	9201      	str	r2, [sp, #4]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fad2 	bl	8009588 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7959      	ldrb	r1, [r3, #5]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ff8:	b292      	uxth	r2, r2
 8007ffa:	9202      	str	r2, [sp, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4603      	mov	r3, r0
 8008004:	2200      	movs	r2, #0
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fabe 	bl	8009588 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008020:	2200      	movs	r2, #0
 8008022:	4619      	mov	r1, r3
 8008024:	f001 fbfc 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008028:	e160      	b.n	80082ec <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f964 	bl	80082f8 <USBH_HandleEnum>
 8008030:	4603      	mov	r3, r0
 8008032:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8152 	bne.w	80082e2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800804c:	2b01      	cmp	r3, #1
 800804e:	d103      	bne.n	8008058 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2208      	movs	r2, #8
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e002      	b.n	800805e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2207      	movs	r2, #7
 800805c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2205      	movs	r2, #5
 8008062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008072:	2200      	movs	r2, #0
 8008074:	4619      	mov	r1, r3
 8008076:	f001 fbd3 	bl	8009820 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800807a:	e132      	b.n	80082e2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 812f 	beq.w	80082e6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800808e:	2101      	movs	r1, #1
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2208      	movs	r2, #8
 8008098:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2205      	movs	r2, #5
 800809e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080ae:	2200      	movs	r2, #0
 80080b0:	4619      	mov	r1, r3
 80080b2:	f001 fbb5 	bl	8009820 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80080b6:	e116      	b.n	80082e6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80080be:	b29b      	uxth	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fcf6 	bl	8008ab4 <USBH_SetCfg>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d102      	bne.n	80080d4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2209      	movs	r2, #9
 80080d2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080e8:	2200      	movs	r2, #0
 80080ea:	4619      	mov	r1, r3
 80080ec:	f001 fb98 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080f0:	e0fc      	b.n	80082ec <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008100:	2101      	movs	r1, #1
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fcf9 	bl	8008afa <USBH_SetFeature>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	220a      	movs	r2, #10
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	e002      	b.n	800811c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	220a      	movs	r2, #10
 800811a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008130:	2200      	movs	r2, #0
 8008132:	4619      	mov	r1, r3
 8008134:	f001 fb74 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008138:	e0d8      	b.n	80082ec <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008140:	2b00      	cmp	r3, #0
 8008142:	d03f      	beq.n	80081c4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
 8008150:	e016      	b.n	8008180 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008152:	7bfa      	ldrb	r2, [r7, #15]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	32de      	adds	r2, #222	; 0xde
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	791a      	ldrb	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008164:	429a      	cmp	r2, r3
 8008166:	d108      	bne.n	800817a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008168:	7bfa      	ldrb	r2, [r7, #15]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32de      	adds	r2, #222	; 0xde
 800816e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008178:	e005      	b.n	8008186 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	3301      	adds	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0e5      	beq.n	8008152 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d016      	beq.n	80081be <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2206      	movs	r2, #6
 80081a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081ae:	2103      	movs	r1, #3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
 80081b4:	e006      	b.n	80081c4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	220d      	movs	r2, #13
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e002      	b.n	80081c4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	220d      	movs	r2, #13
 80081c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2205      	movs	r2, #5
 80081c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081d8:	2200      	movs	r2, #0
 80081da:	4619      	mov	r1, r3
 80081dc:	f001 fb20 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081e0:	e084      	b.n	80082ec <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d017      	beq.n	800821c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	220b      	movs	r2, #11
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e00a      	b.n	8008222 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d106      	bne.n	8008222 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	220d      	movs	r2, #13
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e002      	b.n	8008222 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	220d      	movs	r2, #13
 8008220:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2205      	movs	r2, #5
 8008226:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008236:	2200      	movs	r2, #0
 8008238:	4619      	mov	r1, r3
 800823a:	f001 faf1 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800823e:	e055      	b.n	80082ec <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d04f      	beq.n	80082ea <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
      }
      break;
 8008256:	e048      	b.n	80082ea <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff fcf7 	bl	8007c54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008294:	2105      	movs	r1, #5
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d107      	bne.n	80082b6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fdb0 	bl	8007e14 <USBH_Start>
 80082b4:	e002      	b.n	80082bc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f003 fdac 	bl	800be14 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082d0:	2200      	movs	r2, #0
 80082d2:	4619      	mov	r1, r3
 80082d4:	f001 faa4 	bl	8009820 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082d8:	e008      	b.n	80082ec <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80082da:	bf00      	nop
 80082dc:	e006      	b.n	80082ec <USBH_Process+0x4b8>
      break;
 80082de:	bf00      	nop
 80082e0:	e004      	b.n	80082ec <USBH_Process+0x4b8>
      break;
 80082e2:	bf00      	nop
 80082e4:	e002      	b.n	80082ec <USBH_Process+0x4b8>
    break;
 80082e6:	bf00      	nop
 80082e8:	e000      	b.n	80082ec <USBH_Process+0x4b8>
      break;
 80082ea:	bf00      	nop
  }
  return USBH_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop

080082f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af04      	add	r7, sp, #16
 80082fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008300:	2301      	movs	r3, #1
 8008302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008304:	2301      	movs	r3, #1
 8008306:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	2b07      	cmp	r3, #7
 800830e:	f200 8208 	bhi.w	8008722 <USBH_HandleEnum+0x42a>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <USBH_HandleEnum+0x20>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008339 	.word	0x08008339
 800831c:	080083f7 	.word	0x080083f7
 8008320:	08008461 	.word	0x08008461
 8008324:	080084ef 	.word	0x080084ef
 8008328:	08008559 	.word	0x08008559
 800832c:	080085c9 	.word	0x080085c9
 8008330:	08008665 	.word	0x08008665
 8008334:	080086e3 	.word	0x080086e3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008338:	2108      	movs	r1, #8
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 faea 	bl	8008914 <USBH_Get_DevDesc>
 8008340:	4603      	mov	r3, r0
 8008342:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d130      	bne.n	80083ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7919      	ldrb	r1, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800836e:	b292      	uxth	r2, r2
 8008370:	9202      	str	r2, [sp, #8]
 8008372:	2200      	movs	r2, #0
 8008374:	9201      	str	r2, [sp, #4]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f903 	bl	8009588 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7959      	ldrb	r1, [r3, #5]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008396:	b292      	uxth	r2, r2
 8008398:	9202      	str	r2, [sp, #8]
 800839a:	2200      	movs	r2, #0
 800839c:	9201      	str	r2, [sp, #4]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	4603      	mov	r3, r0
 80083a2:	2200      	movs	r2, #0
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 f8ef 	bl	8009588 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083aa:	e1bc      	b.n	8008726 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	f040 81b9 	bne.w	8008726 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ba:	3301      	adds	r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d903      	bls.n	80083d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	220d      	movs	r2, #13
 80083d2:	701a      	strb	r2, [r3, #0]
      break;
 80083d4:	e1a7      	b.n	8008726 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	795b      	ldrb	r3, [r3, #5]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f923 	bl	8009628 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 f91d 	bl	8009628 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
      break;
 80083f4:	e197      	b.n	8008726 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80083f6:	2112      	movs	r1, #18
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa8b 	bl	8008914 <USBH_Get_DevDesc>
 80083fe:	4603      	mov	r3, r0
 8008400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800840e:	e18c      	b.n	800872a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b03      	cmp	r3, #3
 8008414:	f040 8189 	bne.w	800872a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800841e:	3301      	adds	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800842e:	2b03      	cmp	r3, #3
 8008430:	d903      	bls.n	800843a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	220d      	movs	r2, #13
 8008436:	701a      	strb	r2, [r3, #0]
      break;
 8008438:	e177      	b.n	800872a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	795b      	ldrb	r3, [r3, #5]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f001 f8f1 	bl	8009628 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 f8eb 	bl	8009628 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
      break;
 800845e:	e164      	b.n	800872a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008460:	2101      	movs	r1, #1
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb02 	bl	8008a6c <USBH_SetAddress>
 8008468:	4603      	mov	r3, r0
 800846a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d132      	bne.n	80084d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008472:	2002      	movs	r0, #2
 8008474:	f003 fe33 	bl	800c0de <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2203      	movs	r2, #3
 8008484:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	7919      	ldrb	r1, [r3, #4]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800849a:	b292      	uxth	r2, r2
 800849c:	9202      	str	r2, [sp, #8]
 800849e:	2200      	movs	r2, #0
 80084a0:	9201      	str	r2, [sp, #4]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	2280      	movs	r2, #128	; 0x80
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 f86d 	bl	8009588 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7959      	ldrb	r1, [r3, #5]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084c2:	b292      	uxth	r2, r2
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	2200      	movs	r2, #0
 80084c8:	9201      	str	r2, [sp, #4]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4603      	mov	r3, r0
 80084ce:	2200      	movs	r2, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 f859 	bl	8009588 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80084d6:	e12a      	b.n	800872e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b03      	cmp	r3, #3
 80084dc:	f040 8127 	bne.w	800872e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	220d      	movs	r2, #13
 80084e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	705a      	strb	r2, [r3, #1]
      break;
 80084ec:	e11f      	b.n	800872e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80084ee:	2109      	movs	r1, #9
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa37 	bl	8008964 <USBH_Get_CfgDesc>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2204      	movs	r2, #4
 8008504:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008506:	e114      	b.n	8008732 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	2b03      	cmp	r3, #3
 800850c:	f040 8111 	bne.w	8008732 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008516:	3301      	adds	r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008526:	2b03      	cmp	r3, #3
 8008528:	d903      	bls.n	8008532 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	220d      	movs	r2, #13
 800852e:	701a      	strb	r2, [r3, #0]
      break;
 8008530:	e0ff      	b.n	8008732 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	795b      	ldrb	r3, [r3, #5]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 f875 	bl	8009628 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	791b      	ldrb	r3, [r3, #4]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f86f 	bl	8009628 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
      break;
 8008556:	e0ec      	b.n	8008732 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f9ff 	bl	8008964 <USBH_Get_CfgDesc>
 8008566:	4603      	mov	r3, r0
 8008568:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2205      	movs	r2, #5
 8008574:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008576:	e0de      	b.n	8008736 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b03      	cmp	r3, #3
 800857c:	f040 80db 	bne.w	8008736 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008586:	3301      	adds	r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008596:	2b03      	cmp	r3, #3
 8008598:	d903      	bls.n	80085a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	220d      	movs	r2, #13
 800859e:	701a      	strb	r2, [r3, #0]
      break;
 80085a0:	e0c9      	b.n	8008736 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	795b      	ldrb	r3, [r3, #5]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f83d 	bl	8009628 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	791b      	ldrb	r3, [r3, #4]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f837 	bl	8009628 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
      break;
 80085c6:	e0b6      	b.n	8008736 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d036      	beq.n	8008640 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085de:	23ff      	movs	r3, #255	; 0xff
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f9e3 	bl	80089ac <USBH_Get_StringDesc>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d111      	bne.n	8008614 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2206      	movs	r2, #6
 80085f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2205      	movs	r2, #5
 80085fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800860a:	2200      	movs	r2, #0
 800860c:	4619      	mov	r1, r3
 800860e:	f001 f907 	bl	8009820 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008612:	e092      	b.n	800873a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b03      	cmp	r3, #3
 8008618:	f040 808f 	bne.w	800873a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2206      	movs	r2, #6
 8008620:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2205      	movs	r2, #5
 8008626:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008636:	2200      	movs	r2, #0
 8008638:	4619      	mov	r1, r3
 800863a:	f001 f8f1 	bl	8009820 <osMessagePut>
      break;
 800863e:	e07c      	b.n	800873a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2206      	movs	r2, #6
 8008644:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2205      	movs	r2, #5
 800864a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800865a:	2200      	movs	r2, #0
 800865c:	4619      	mov	r1, r3
 800865e:	f001 f8df 	bl	8009820 <osMessagePut>
      break;
 8008662:	e06a      	b.n	800873a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800866a:	2b00      	cmp	r3, #0
 800866c:	d027      	beq.n	80086be <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800867a:	23ff      	movs	r3, #255	; 0xff
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f995 	bl	80089ac <USBH_Get_StringDesc>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2207      	movs	r2, #7
 8008690:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008692:	e054      	b.n	800873e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d151      	bne.n	800873e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2207      	movs	r2, #7
 800869e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2205      	movs	r2, #5
 80086a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086b4:	2200      	movs	r2, #0
 80086b6:	4619      	mov	r1, r3
 80086b8:	f001 f8b2 	bl	8009820 <osMessagePut>
      break;
 80086bc:	e03f      	b.n	800873e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2207      	movs	r2, #7
 80086c2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2205      	movs	r2, #5
 80086c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086d8:	2200      	movs	r2, #0
 80086da:	4619      	mov	r1, r3
 80086dc:	f001 f8a0 	bl	8009820 <osMessagePut>
      break;
 80086e0:	e02d      	b.n	800873e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d017      	beq.n	800871c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086f8:	23ff      	movs	r3, #255	; 0xff
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f956 	bl	80089ac <USBH_Get_StringDesc>
 8008700:	4603      	mov	r3, r0
 8008702:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800870e:	e018      	b.n	8008742 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b03      	cmp	r3, #3
 8008714:	d115      	bne.n	8008742 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
      break;
 800871a:	e012      	b.n	8008742 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
      break;
 8008720:	e00f      	b.n	8008742 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008722:	bf00      	nop
 8008724:	e00e      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 8008726:	bf00      	nop
 8008728:	e00c      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 800872a:	bf00      	nop
 800872c:	e00a      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 800872e:	bf00      	nop
 8008730:	e008      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 8008732:	bf00      	nop
 8008734:	e006      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 8008736:	bf00      	nop
 8008738:	e004      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <USBH_HandleEnum+0x44c>
      break;
 8008742:	bf00      	nop
  }
  return Status;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop

08008750 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f804 	bl	8008792 <USBH_HandleSof>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b0b      	cmp	r3, #11
 80087a2:	d10a      	bne.n	80087ba <USBH_HandleSof+0x28>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	4798      	blx	r3
  }
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087e6:	2200      	movs	r2, #0
 80087e8:	4619      	mov	r1, r3
 80087ea:	f001 f819 	bl	8009820 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80087ee:	bf00      	nop
}
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008806:	bf00      	nop
}
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008846:	2200      	movs	r2, #0
 8008848:	4619      	mov	r1, r3
 800884a:	f000 ffe9 	bl	8009820 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f003 fae6 	bl	800be4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	791b      	ldrb	r3, [r3, #4]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fecf 	bl	8009628 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	795b      	ldrb	r3, [r3, #5]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fec9 	bl	8009628 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088aa:	2200      	movs	r2, #0
 80088ac:	4619      	mov	r1, r3
 80088ae:	f000 ffb7 	bl	8009820 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80088ca:	f107 030c 	add.w	r3, r7, #12
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 ffe4 	bl	80098a0 <osMessageGet>
    if (event.status == osEventMessage)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b10      	cmp	r3, #16
 80088dc:	d1f2      	bne.n	80088c4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7ff faa8 	bl	8007e34 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80088e4:	e7ee      	b.n	80088c4 <USBH_Process_OS+0x8>

080088e6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008902:	2200      	movs	r2, #0
 8008904:	4619      	mov	r1, r3
 8008906:	f000 ff8b 	bl	8009820 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	b29b      	uxth	r3, r3
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008932:	2100      	movs	r1, #0
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f864 	bl	8008a02 <USBH_GetDescriptor>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f203 3026 	addw	r0, r3, #806	; 0x326
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	b292      	uxth	r2, r2
 8008954:	4619      	mov	r1, r3
 8008956:	f000 f918 	bl	8008b8a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af02      	add	r7, sp, #8
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	331c      	adds	r3, #28
 8008974:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008976:	887b      	ldrh	r3, [r7, #2]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008980:	2100      	movs	r1, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f83d 	bl	8008a02 <USBH_GetDescriptor>
 8008988:	4603      	mov	r3, r0
 800898a:	72fb      	strb	r3, [r7, #11]
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d107      	bne.n	80089a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008998:	887a      	ldrh	r2, [r7, #2]
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f964 	bl	8008c6a <USBH_ParseCfgDesc>
  }

  return status;
 80089a2:	7afb      	ldrb	r3, [r7, #11]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	461a      	mov	r2, r3
 80089b8:	460b      	mov	r3, r1
 80089ba:	72fb      	strb	r3, [r7, #11]
 80089bc:	4613      	mov	r3, r2
 80089be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80089c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80089d0:	893b      	ldrh	r3, [r7, #8]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	460b      	mov	r3, r1
 80089d6:	2100      	movs	r1, #0
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f812 	bl	8008a02 <USBH_GetDescriptor>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d107      	bne.n	80089f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089ee:	893a      	ldrh	r2, [r7, #8]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fa37 	bl	8008e66 <USBH_ParseStringDesc>
  }

  return status;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	607b      	str	r3, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	72fb      	strb	r3, [r7, #11]
 8008a10:	4613      	mov	r3, r2
 8008a12:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	789b      	ldrb	r3, [r3, #2]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d11c      	bne.n	8008a56 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2206      	movs	r2, #6
 8008a2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	893a      	ldrh	r2, [r7, #8]
 8008a32:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008a34:	893b      	ldrh	r3, [r7, #8]
 8008a36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a3e:	d104      	bne.n	8008a4a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f240 4209 	movw	r2, #1033	; 0x409
 8008a46:	829a      	strh	r2, [r3, #20]
 8008a48:	e002      	b.n	8008a50 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8b3a      	ldrh	r2, [r7, #24]
 8008a54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008a56:	8b3b      	ldrh	r3, [r7, #24]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fa50 	bl	8008f02 <USBH_CtlReq>
 8008a62:	4603      	mov	r3, r0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	789b      	ldrb	r3, [r3, #2]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d10f      	bne.n	8008aa0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2205      	movs	r2, #5
 8008a8a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fa2c 	bl	8008f02 <USBH_CtlReq>
 8008aaa:	4603      	mov	r3, r0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	789b      	ldrb	r3, [r3, #2]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d10e      	bne.n	8008ae6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2209      	movs	r2, #9
 8008ad2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	887a      	ldrh	r2, [r7, #2]
 8008ad8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa09 	bl	8008f02 <USBH_CtlReq>
 8008af0:	4603      	mov	r3, r0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	789b      	ldrb	r3, [r3, #2]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d10f      	bne.n	8008b2e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2203      	movs	r2, #3
 8008b18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2100      	movs	r1, #0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f9e5 	bl	8008f02 <USBH_CtlReq>
 8008b38:	4603      	mov	r3, r0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	789b      	ldrb	r3, [r3, #2]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d10f      	bne.n	8008b76 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008b76:	2200      	movs	r2, #0
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9c1 	bl	8008f02 <USBH_CtlReq>
 8008b80:	4603      	mov	r3, r0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	4613      	mov	r3, r2
 8008b96:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	785a      	ldrb	r2, [r3, #1]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	3302      	adds	r3, #2
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	3303      	adds	r3, #3
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	791a      	ldrb	r2, [r3, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	795a      	ldrb	r2, [r3, #5]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	799a      	ldrb	r2, [r3, #6]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	79da      	ldrb	r2, [r3, #7]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d939      	bls.n	8008c5e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	3308      	adds	r3, #8
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3309      	adds	r3, #9
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	330a      	adds	r3, #10
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	330b      	adds	r3, #11
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	330c      	adds	r3, #12
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	330d      	adds	r3, #13
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	7b9a      	ldrb	r2, [r3, #14]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	7bda      	ldrb	r2, [r3, #15]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	7c1a      	ldrb	r2, [r3, #16]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	7c5a      	ldrb	r2, [r3, #17]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	745a      	strb	r2, [r3, #17]
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b08a      	sub	sp, #40	; 0x28
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	4613      	mov	r3, r2
 8008c76:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	785a      	ldrb	r2, [r3, #1]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	3303      	adds	r3, #3
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	791a      	ldrb	r2, [r3, #4]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	795a      	ldrb	r2, [r3, #5]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	799a      	ldrb	r2, [r3, #6]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	79da      	ldrb	r2, [r3, #7]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	7a1a      	ldrb	r2, [r3, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008ce0:	88fb      	ldrh	r3, [r7, #6]
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	d95f      	bls.n	8008da6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008ce6:	2309      	movs	r3, #9
 8008ce8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008cee:	e051      	b.n	8008d94 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cf0:	f107 0316 	add.w	r3, r7, #22
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cf8:	f000 f8e8 	bl	8008ecc <USBH_GetNextDesc>
 8008cfc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d146      	bne.n	8008d94 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d0a:	221a      	movs	r2, #26
 8008d0c:	fb02 f303 	mul.w	r3, r2, r3
 8008d10:	3308      	adds	r3, #8
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	3302      	adds	r3, #2
 8008d18:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d1c:	69f8      	ldr	r0, [r7, #28]
 8008d1e:	f000 f846 	bl	8008dae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d2c:	e022      	b.n	8008d74 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d2e:	f107 0316 	add.w	r3, r7, #22
 8008d32:	4619      	mov	r1, r3
 8008d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d36:	f000 f8c9 	bl	8008ecc <USBH_GetNextDesc>
 8008d3a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	d117      	bne.n	8008d74 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d4c:	3201      	adds	r2, #1
 8008d4e:	00d2      	lsls	r2, r2, #3
 8008d50:	211a      	movs	r1, #26
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	3308      	adds	r3, #8
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	3304      	adds	r3, #4
 8008d60:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d64:	69b8      	ldr	r0, [r7, #24]
 8008d66:	f000 f851 	bl	8008e0c <USBH_ParseEPDesc>
            ep_ix++;
 8008d6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	791b      	ldrb	r3, [r3, #4]
 8008d78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d204      	bcs.n	8008d8a <USBH_ParseCfgDesc+0x120>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	885a      	ldrh	r2, [r3, #2]
 8008d84:	8afb      	ldrh	r3, [r7, #22]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d8d1      	bhi.n	8008d2e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d804      	bhi.n	8008da6 <USBH_ParseCfgDesc+0x13c>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	885a      	ldrh	r2, [r3, #2]
 8008da0:	8afb      	ldrh	r3, [r7, #22]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d8a4      	bhi.n	8008cf0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008da6:	bf00      	nop
 8008da8:	3728      	adds	r7, #40	; 0x28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	785a      	ldrb	r2, [r3, #1]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	789a      	ldrb	r2, [r3, #2]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	78da      	ldrb	r2, [r3, #3]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	791a      	ldrb	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	795a      	ldrb	r2, [r3, #5]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	799a      	ldrb	r2, [r3, #6]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	79da      	ldrb	r2, [r3, #7]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	7a1a      	ldrb	r2, [r3, #8]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	721a      	strb	r2, [r3, #8]
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781a      	ldrb	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	785a      	ldrb	r2, [r3, #1]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	789a      	ldrb	r2, [r3, #2]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	78da      	ldrb	r2, [r3, #3]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	3305      	adds	r3, #5
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	799a      	ldrb	r2, [r3, #6]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	719a      	strb	r2, [r3, #6]
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b087      	sub	sp, #28
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	4613      	mov	r3, r2
 8008e72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d120      	bne.n	8008ec0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	1e9a      	subs	r2, r3, #2
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	4293      	cmp	r3, r2
 8008e88:	bf28      	it	cs
 8008e8a:	4613      	movcs	r3, r2
 8008e8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3302      	adds	r3, #2
 8008e92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e94:	2300      	movs	r3, #0
 8008e96:	82fb      	strh	r3, [r7, #22]
 8008e98:	e00b      	b.n	8008eb2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e9a:	8afb      	ldrh	r3, [r7, #22]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008eac:	8afb      	ldrh	r3, [r7, #22]
 8008eae:	3302      	adds	r3, #2
 8008eb0:	82fb      	strh	r3, [r7, #22]
 8008eb2:	8afa      	ldrh	r2, [r7, #22]
 8008eb4:	8abb      	ldrh	r3, [r7, #20]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d3ef      	bcc.n	8008e9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	881a      	ldrh	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b086      	sub	sp, #24
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008f10:	2301      	movs	r3, #1
 8008f12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	789b      	ldrb	r3, [r3, #2]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d002      	beq.n	8008f22 <USBH_CtlReq+0x20>
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d01d      	beq.n	8008f5c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008f20:	e043      	b.n	8008faa <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2202      	movs	r2, #2
 8008f38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2203      	movs	r2, #3
 8008f42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f52:	2200      	movs	r2, #0
 8008f54:	4619      	mov	r1, r3
 8008f56:	f000 fc63 	bl	8009820 <osMessagePut>
      break;
 8008f5a:	e026      	b.n	8008faa <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 f829 	bl	8008fb4 <USBH_HandleControl>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <USBH_CtlReq+0x70>
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d106      	bne.n	8008f80 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	761a      	strb	r2, [r3, #24]
 8008f7e:	e005      	b.n	8008f8c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d102      	bne.n	8008f8c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2203      	movs	r2, #3
 8008f90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f000 fc3c 	bl	8009820 <osMessagePut>
      break;
 8008fa8:	bf00      	nop
  }
  return status;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af02      	add	r7, sp, #8
 8008fba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7e1b      	ldrb	r3, [r3, #24]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	2b0a      	cmp	r3, #10
 8008fcc:	f200 822b 	bhi.w	8009426 <USBH_HandleControl+0x472>
 8008fd0:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <USBH_HandleControl+0x24>)
 8008fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd6:	bf00      	nop
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	0800901f 	.word	0x0800901f
 8008fe0:	080090c1 	.word	0x080090c1
 8008fe4:	080090e7 	.word	0x080090e7
 8008fe8:	08009173 	.word	0x08009173
 8008fec:	0800919f 	.word	0x0800919f
 8008ff0:	08009261 	.word	0x08009261
 8008ff4:	08009283 	.word	0x08009283
 8008ff8:	08009315 	.word	0x08009315
 8008ffc:	0800933d 	.word	0x0800933d
 8009000:	080093cf 	.word	0x080093cf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f103 0110 	add.w	r1, r3, #16
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	461a      	mov	r2, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa19 	bl	8009448 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	761a      	strb	r2, [r3, #24]
      break;
 800901c:	e20e      	b.n	800943c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	795b      	ldrb	r3, [r3, #5]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f002 fffd 	bl	800c024 <USBH_LL_GetURBState>
 800902a:	4603      	mov	r3, r0
 800902c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d12c      	bne.n	800908e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7c1b      	ldrb	r3, [r3, #16]
 8009038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800903c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8adb      	ldrh	r3, [r3, #22]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009046:	7b7b      	ldrb	r3, [r7, #13]
 8009048:	2b80      	cmp	r3, #128	; 0x80
 800904a:	d103      	bne.n	8009054 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2203      	movs	r2, #3
 8009050:	761a      	strb	r2, [r3, #24]
 8009052:	e00d      	b.n	8009070 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2205      	movs	r2, #5
 8009058:	761a      	strb	r2, [r3, #24]
 800905a:	e009      	b.n	8009070 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800905c:	7b7b      	ldrb	r3, [r7, #13]
 800905e:	2b80      	cmp	r3, #128	; 0x80
 8009060:	d103      	bne.n	800906a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2209      	movs	r2, #9
 8009066:	761a      	strb	r2, [r3, #24]
 8009068:	e002      	b.n	8009070 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2207      	movs	r2, #7
 800906e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2203      	movs	r2, #3
 8009074:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009084:	2200      	movs	r2, #0
 8009086:	4619      	mov	r1, r3
 8009088:	f000 fbca 	bl	8009820 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800908c:	e1cd      	b.n	800942a <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800908e:	7bbb      	ldrb	r3, [r7, #14]
 8009090:	2b04      	cmp	r3, #4
 8009092:	d003      	beq.n	800909c <USBH_HandleControl+0xe8>
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b02      	cmp	r3, #2
 8009098:	f040 81c7 	bne.w	800942a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	220b      	movs	r2, #11
 80090a0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2203      	movs	r2, #3
 80090a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090b6:	2200      	movs	r2, #0
 80090b8:	4619      	mov	r1, r3
 80090ba:	f000 fbb1 	bl	8009820 <osMessagePut>
      break;
 80090be:	e1b4      	b.n	800942a <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6899      	ldr	r1, [r3, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	899a      	ldrh	r2, [r3, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	791b      	ldrb	r3, [r3, #4]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9f4 	bl	80094c6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2204      	movs	r2, #4
 80090e2:	761a      	strb	r2, [r3, #24]
      break;
 80090e4:	e1aa      	b.n	800943c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	791b      	ldrb	r3, [r3, #4]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f002 ff99 	bl	800c024 <USBH_LL_GetURBState>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d110      	bne.n	800911e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2209      	movs	r2, #9
 8009100:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2203      	movs	r2, #3
 8009106:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009116:	2200      	movs	r2, #0
 8009118:	4619      	mov	r1, r3
 800911a:	f000 fb81 	bl	8009820 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b05      	cmp	r3, #5
 8009122:	d110      	bne.n	8009146 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009124:	2303      	movs	r3, #3
 8009126:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2203      	movs	r2, #3
 800912c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800913c:	2200      	movs	r2, #0
 800913e:	4619      	mov	r1, r3
 8009140:	f000 fb6e 	bl	8009820 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009144:	e173      	b.n	800942e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b04      	cmp	r3, #4
 800914a:	f040 8170 	bne.w	800942e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220b      	movs	r2, #11
 8009152:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2203      	movs	r2, #3
 8009158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	f000 fb58 	bl	8009820 <osMessagePut>
      break;
 8009170:	e15d      	b.n	800942e <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6899      	ldr	r1, [r3, #8]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	899a      	ldrh	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7958      	ldrb	r0, [r3, #5]
 800917e:	2301      	movs	r3, #1
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4603      	mov	r3, r0
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f979 	bl	800947c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009190:	b29a      	uxth	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2206      	movs	r2, #6
 800919a:	761a      	strb	r2, [r3, #24]
      break;
 800919c:	e14e      	b.n	800943c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	795b      	ldrb	r3, [r3, #5]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 ff3d 	bl	800c024 <USBH_LL_GetURBState>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d111      	bne.n	80091d8 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2207      	movs	r2, #7
 80091b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2203      	movs	r2, #3
 80091be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091ce:	2200      	movs	r2, #0
 80091d0:	4619      	mov	r1, r3
 80091d2:	f000 fb25 	bl	8009820 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80091d6:	e12c      	b.n	8009432 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d113      	bne.n	8009206 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	220c      	movs	r2, #12
 80091e2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2203      	movs	r2, #3
 80091ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091fc:	2200      	movs	r2, #0
 80091fe:	4619      	mov	r1, r3
 8009200:	f000 fb0e 	bl	8009820 <osMessagePut>
      break;
 8009204:	e115      	b.n	8009432 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d111      	bne.n	8009230 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2205      	movs	r2, #5
 8009210:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2203      	movs	r2, #3
 8009216:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009226:	2200      	movs	r2, #0
 8009228:	4619      	mov	r1, r3
 800922a:	f000 faf9 	bl	8009820 <osMessagePut>
      break;
 800922e:	e100      	b.n	8009432 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	2b04      	cmp	r3, #4
 8009234:	f040 80fd 	bne.w	8009432 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	220b      	movs	r2, #11
 800923c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800923e:	2302      	movs	r3, #2
 8009240:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2203      	movs	r2, #3
 8009246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009256:	2200      	movs	r2, #0
 8009258:	4619      	mov	r1, r3
 800925a:	f000 fae1 	bl	8009820 <osMessagePut>
      break;
 800925e:	e0e8      	b.n	8009432 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f92c 	bl	80094c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2208      	movs	r2, #8
 800927e:	761a      	strb	r2, [r3, #24]

      break;
 8009280:	e0dc      	b.n	800943c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	791b      	ldrb	r3, [r3, #4]
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f002 fecb 	bl	800c024 <USBH_LL_GetURBState>
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d113      	bne.n	80092c0 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	220d      	movs	r2, #13
 800929c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2203      	movs	r2, #3
 80092a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092b6:	2200      	movs	r2, #0
 80092b8:	4619      	mov	r1, r3
 80092ba:	f000 fab1 	bl	8009820 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092be:	e0ba      	b.n	8009436 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d111      	bne.n	80092ea <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	220b      	movs	r2, #11
 80092ca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2203      	movs	r2, #3
 80092d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092e0:	2200      	movs	r2, #0
 80092e2:	4619      	mov	r1, r3
 80092e4:	f000 fa9c 	bl	8009820 <osMessagePut>
      break;
 80092e8:	e0a5      	b.n	8009436 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	f040 80a2 	bne.w	8009436 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80092f2:	2303      	movs	r3, #3
 80092f4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2203      	movs	r2, #3
 80092fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800930a:	2200      	movs	r2, #0
 800930c:	4619      	mov	r1, r3
 800930e:	f000 fa87 	bl	8009820 <osMessagePut>
      break;
 8009312:	e090      	b.n	8009436 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	795a      	ldrb	r2, [r3, #5]
 8009318:	2301      	movs	r3, #1
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4613      	mov	r3, r2
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f8aa 	bl	800947c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	220a      	movs	r2, #10
 8009338:	761a      	strb	r2, [r3, #24]
      break;
 800933a:	e07f      	b.n	800943c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	795b      	ldrb	r3, [r3, #5]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f002 fe6e 	bl	800c024 <USBH_LL_GetURBState>
 8009348:	4603      	mov	r3, r0
 800934a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d113      	bne.n	800937a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	220d      	movs	r2, #13
 800935a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2203      	movs	r2, #3
 8009360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009370:	2200      	movs	r2, #0
 8009372:	4619      	mov	r1, r3
 8009374:	f000 fa54 	bl	8009820 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009378:	e05f      	b.n	800943a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d111      	bne.n	80093a4 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2209      	movs	r2, #9
 8009384:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2203      	movs	r2, #3
 800938a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800939a:	2200      	movs	r2, #0
 800939c:	4619      	mov	r1, r3
 800939e:	f000 fa3f 	bl	8009820 <osMessagePut>
      break;
 80093a2:	e04a      	b.n	800943a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d147      	bne.n	800943a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	220b      	movs	r2, #11
 80093ae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2203      	movs	r2, #3
 80093b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093c4:	2200      	movs	r2, #0
 80093c6:	4619      	mov	r1, r3
 80093c8:	f000 fa2a 	bl	8009820 <osMessagePut>
      break;
 80093cc:	e035      	b.n	800943a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7e5b      	ldrb	r3, [r3, #25]
 80093d2:	3301      	adds	r3, #1
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	765a      	strb	r2, [r3, #25]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7e5b      	ldrb	r3, [r3, #25]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d806      	bhi.n	80093f0 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80093ee:	e025      	b.n	800943c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093f6:	2106      	movs	r1, #6
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	795b      	ldrb	r3, [r3, #5]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f90d 	bl	8009628 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	791b      	ldrb	r3, [r3, #4]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f907 	bl	8009628 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009420:	2302      	movs	r3, #2
 8009422:	73fb      	strb	r3, [r7, #15]
      break;
 8009424:	e00a      	b.n	800943c <USBH_HandleControl+0x488>

    default:
      break;
 8009426:	bf00      	nop
 8009428:	e008      	b.n	800943c <USBH_HandleControl+0x488>
      break;
 800942a:	bf00      	nop
 800942c:	e006      	b.n	800943c <USBH_HandleControl+0x488>
      break;
 800942e:	bf00      	nop
 8009430:	e004      	b.n	800943c <USBH_HandleControl+0x488>
      break;
 8009432:	bf00      	nop
 8009434:	e002      	b.n	800943c <USBH_HandleControl+0x488>
      break;
 8009436:	bf00      	nop
 8009438:	e000      	b.n	800943c <USBH_HandleControl+0x488>
      break;
 800943a:	bf00      	nop
  }

  return status;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af04      	add	r7, sp, #16
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009456:	79f9      	ldrb	r1, [r7, #7]
 8009458:	2300      	movs	r3, #0
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	2308      	movs	r3, #8
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	2300      	movs	r3, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	2200      	movs	r2, #0
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f002 fda8 	bl	800bfc2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af04      	add	r7, sp, #16
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4611      	mov	r1, r2
 8009488:	461a      	mov	r2, r3
 800948a:	460b      	mov	r3, r1
 800948c:	80fb      	strh	r3, [r7, #6]
 800948e:	4613      	mov	r3, r2
 8009490:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80094a0:	7979      	ldrb	r1, [r7, #5]
 80094a2:	7e3b      	ldrb	r3, [r7, #24]
 80094a4:	9303      	str	r3, [sp, #12]
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	2301      	movs	r3, #1
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	2300      	movs	r3, #0
 80094b4:	2200      	movs	r2, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f002 fd83 	bl	800bfc2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b088      	sub	sp, #32
 80094ca:	af04      	add	r7, sp, #16
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	4611      	mov	r1, r2
 80094d2:	461a      	mov	r2, r3
 80094d4:	460b      	mov	r3, r1
 80094d6:	80fb      	strh	r3, [r7, #6]
 80094d8:	4613      	mov	r3, r2
 80094da:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80094dc:	7979      	ldrb	r1, [r7, #5]
 80094de:	2300      	movs	r3, #0
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	88fb      	ldrh	r3, [r7, #6]
 80094e4:	9302      	str	r3, [sp, #8]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	2301      	movs	r3, #1
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	2201      	movs	r2, #1
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f002 fd65 	bl	800bfc2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80094f8:	2300      	movs	r3, #0

}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b088      	sub	sp, #32
 8009506:	af04      	add	r7, sp, #16
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	4611      	mov	r1, r2
 800950e:	461a      	mov	r2, r3
 8009510:	460b      	mov	r3, r1
 8009512:	80fb      	strh	r3, [r7, #6]
 8009514:	4613      	mov	r3, r2
 8009516:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009526:	7979      	ldrb	r1, [r7, #5]
 8009528:	7e3b      	ldrb	r3, [r7, #24]
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	9301      	str	r3, [sp, #4]
 8009534:	2301      	movs	r3, #1
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2302      	movs	r3, #2
 800953a:	2200      	movs	r2, #0
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f002 fd40 	bl	800bfc2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af04      	add	r7, sp, #16
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	460b      	mov	r3, r1
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	4613      	mov	r3, r2
 8009560:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009562:	7979      	ldrb	r1, [r7, #5]
 8009564:	2300      	movs	r3, #0
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	2301      	movs	r3, #1
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2302      	movs	r3, #2
 8009576:	2201      	movs	r2, #1
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f002 fd22 	bl	800bfc2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af04      	add	r7, sp, #16
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	461a      	mov	r2, r3
 8009596:	4603      	mov	r3, r0
 8009598:	70fb      	strb	r3, [r7, #3]
 800959a:	460b      	mov	r3, r1
 800959c:	70bb      	strb	r3, [r7, #2]
 800959e:	4613      	mov	r3, r2
 80095a0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80095a2:	7878      	ldrb	r0, [r7, #1]
 80095a4:	78ba      	ldrb	r2, [r7, #2]
 80095a6:	78f9      	ldrb	r1, [r7, #3]
 80095a8:	8b3b      	ldrh	r3, [r7, #24]
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	7d3b      	ldrb	r3, [r7, #20]
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	7c3b      	ldrb	r3, [r7, #16]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4603      	mov	r3, r0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 fcb5 	bl	800bf26 <USBH_LL_OpenPipe>

  return USBH_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f002 fcd4 	bl	800bf84 <USBH_LL_ClosePipe>

  return USBH_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f836 	bl	8009664 <USBH_GetFreePipe>
 80095f8:	4603      	mov	r3, r0
 80095fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80095fc:	89fb      	ldrh	r3, [r7, #14]
 80095fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009602:	4293      	cmp	r3, r2
 8009604:	d00a      	beq.n	800961c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	89fb      	ldrh	r3, [r7, #14]
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	33e0      	adds	r3, #224	; 0xe0
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800961c:	89fb      	ldrh	r3, [r7, #14]
 800961e:	b2db      	uxtb	r3, r3
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	2b0a      	cmp	r3, #10
 8009638:	d80d      	bhi.n	8009656 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	33e0      	adds	r3, #224	; 0xe0
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	33e0      	adds	r3, #224	; 0xe0
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	e00f      	b.n	8009696 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	33e0      	adds	r3, #224	; 0xe0
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	b29b      	uxth	r3, r3
 800968e:	e007      	b.n	80096a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	3301      	adds	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	2b0a      	cmp	r3, #10
 800969a:	d9ec      	bls.n	8009676 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800969c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80096ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096be:	2b84      	cmp	r3, #132	; 0x84
 80096c0:	d005      	beq.n	80096ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80096c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	3303      	adds	r3, #3
 80096cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80096ce:	68fb      	ldr	r3, [r7, #12]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096e2:	f3ef 8305 	mrs	r3, IPSR
 80096e6:	607b      	str	r3, [r7, #4]
  return(result);
 80096e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bf14      	ite	ne
 80096ee:	2301      	movne	r3, #1
 80096f0:	2300      	moveq	r3, #0
 80096f2:	b2db      	uxtb	r3, r3
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009704:	f001 f8f4 	bl	800a8f0 <vTaskStartScheduler>
  
  return osOK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	bd80      	pop	{r7, pc}

0800970e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800970e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009710:	b089      	sub	sp, #36	; 0x24
 8009712:	af04      	add	r7, sp, #16
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d020      	beq.n	8009762 <osThreadCreate+0x54>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01c      	beq.n	8009762 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685c      	ldr	r4, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681d      	ldr	r5, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691e      	ldr	r6, [r3, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff ffb6 	bl	80096ac <makeFreeRtosPriority>
 8009740:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800974a:	9202      	str	r2, [sp, #8]
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	9100      	str	r1, [sp, #0]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	4632      	mov	r2, r6
 8009754:	4629      	mov	r1, r5
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fefb 	bl	800a552 <xTaskCreateStatic>
 800975c:	4603      	mov	r3, r0
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	e01c      	b.n	800979c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685c      	ldr	r4, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800976e:	b29e      	uxth	r6, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff ff98 	bl	80096ac <makeFreeRtosPriority>
 800977c:	4602      	mov	r2, r0
 800977e:	f107 030c 	add.w	r3, r7, #12
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	9200      	str	r2, [sp, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	4632      	mov	r2, r6
 800978a:	4629      	mov	r1, r5
 800978c:	4620      	mov	r0, r4
 800978e:	f000 ff3a 	bl	800a606 <xTaskCreate>
 8009792:	4603      	mov	r3, r0
 8009794:	2b01      	cmp	r3, #1
 8009796:	d001      	beq.n	800979c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	e000      	b.n	800979e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <osDelay+0x16>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	e000      	b.n	80097be <osDelay+0x18>
 80097bc:	2301      	movs	r3, #1
 80097be:	4618      	mov	r0, r3
 80097c0:	f001 f862 	bl	800a888 <vTaskDelay>
  
  return osOK;
 80097c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80097ce:	b590      	push	{r4, r7, lr}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af02      	add	r7, sp, #8
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d012      	beq.n	8009806 <osMessageCreate+0x38>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00e      	beq.n	8009806 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6859      	ldr	r1, [r3, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68dc      	ldr	r4, [r3, #12]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4623      	mov	r3, r4
 80097fe:	f000 f9df 	bl	8009bc0 <xQueueGenericCreateStatic>
 8009802:	4603      	mov	r3, r0
 8009804:	e008      	b.n	8009818 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	4619      	mov	r1, r3
 8009812:	f000 fa48 	bl	8009ca6 <xQueueGenericCreate>
 8009816:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	bd90      	pop	{r4, r7, pc}

08009820 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <osMessagePut+0x1e>
    ticks = 1;
 800983a:	2301      	movs	r3, #1
 800983c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800983e:	f7ff ff4d 	bl	80096dc <inHandlerMode>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d018      	beq.n	800987a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009848:	f107 0210 	add.w	r2, r7, #16
 800984c:	f107 0108 	add.w	r1, r7, #8
 8009850:	2300      	movs	r3, #0
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fb80 	bl	8009f58 <xQueueGenericSendFromISR>
 8009858:	4603      	mov	r3, r0
 800985a:	2b01      	cmp	r3, #1
 800985c:	d001      	beq.n	8009862 <osMessagePut+0x42>
      return osErrorOS;
 800985e:	23ff      	movs	r3, #255	; 0xff
 8009860:	e018      	b.n	8009894 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d014      	beq.n	8009892 <osMessagePut+0x72>
 8009868:	4b0c      	ldr	r3, [pc, #48]	; (800989c <osMessagePut+0x7c>)
 800986a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	e00b      	b.n	8009892 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800987a:	f107 0108 	add.w	r1, r7, #8
 800987e:	2300      	movs	r3, #0
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 fa6e 	bl	8009d64 <xQueueGenericSend>
 8009888:	4603      	mov	r3, r0
 800988a:	2b01      	cmp	r3, #1
 800988c:	d001      	beq.n	8009892 <osMessagePut+0x72>
      return osErrorOS;
 800988e:	23ff      	movs	r3, #255	; 0xff
 8009890:	e000      	b.n	8009894 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	e000ed04 	.word	0xe000ed04

080098a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b08b      	sub	sp, #44	; 0x2c
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80098ba:	2380      	movs	r3, #128	; 0x80
 80098bc:	617b      	str	r3, [r7, #20]
    return event;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	461c      	mov	r4, r3
 80098c2:	f107 0314 	add.w	r3, r7, #20
 80098c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098ce:	e054      	b.n	800997a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80098d0:	2300      	movs	r3, #0
 80098d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098de:	d103      	bne.n	80098e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	627b      	str	r3, [r7, #36]	; 0x24
 80098e6:	e009      	b.n	80098fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <osMessageGet+0x5c>
      ticks = 1;
 80098f8:	2301      	movs	r3, #1
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80098fc:	f7ff feee 	bl	80096dc <inHandlerMode>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d01c      	beq.n	8009940 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009906:	f107 0220 	add.w	r2, r7, #32
 800990a:	f107 0314 	add.w	r3, r7, #20
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	68b8      	ldr	r0, [r7, #8]
 8009914:	f000 fc90 	bl	800a238 <xQueueReceiveFromISR>
 8009918:	4603      	mov	r3, r0
 800991a:	2b01      	cmp	r3, #1
 800991c:	d102      	bne.n	8009924 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800991e:	2310      	movs	r3, #16
 8009920:	617b      	str	r3, [r7, #20]
 8009922:	e001      	b.n	8009928 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d01d      	beq.n	800996a <osMessageGet+0xca>
 800992e:	4b15      	ldr	r3, [pc, #84]	; (8009984 <osMessageGet+0xe4>)
 8009930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	e014      	b.n	800996a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	3304      	adds	r3, #4
 8009946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009948:	4619      	mov	r1, r3
 800994a:	68b8      	ldr	r0, [r7, #8]
 800994c:	f000 fb98 	bl	800a080 <xQueueReceive>
 8009950:	4603      	mov	r3, r0
 8009952:	2b01      	cmp	r3, #1
 8009954:	d102      	bne.n	800995c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009956:	2310      	movs	r3, #16
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	e006      	b.n	800996a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <osMessageGet+0xc6>
 8009962:	2300      	movs	r3, #0
 8009964:	e000      	b.n	8009968 <osMessageGet+0xc8>
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	461c      	mov	r4, r3
 800996e:	f107 0314 	add.w	r3, r7, #20
 8009972:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	372c      	adds	r7, #44	; 0x2c
 800997e:	46bd      	mov	sp, r7
 8009980:	bd90      	pop	{r4, r7, pc}
 8009982:	bf00      	nop
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f103 0208 	add.w	r2, r3, #8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f103 0208 	add.w	r2, r3, #8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f103 0208 	add.w	r2, r3, #8
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099e2:	b480      	push	{r7}
 80099e4:	b085      	sub	sp, #20
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	601a      	str	r2, [r3, #0]
}
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a40:	d103      	bne.n	8009a4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	e00c      	b.n	8009a64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	e002      	b.n	8009a58 <vListInsert+0x2e>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d2f6      	bcs.n	8009a52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	601a      	str	r2, [r3, #0]
}
 8009a90:	bf00      	nop
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	6892      	ldr	r2, [r2, #8]
 8009ab2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6852      	ldr	r2, [r2, #4]
 8009abc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d103      	bne.n	8009ad0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	1e5a      	subs	r2, r3, #1
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	60bb      	str	r3, [r7, #8]
 8009b16:	e7fe      	b.n	8009b16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009b18:	f001 fd38 	bl	800b58c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	441a      	add	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b4e:	fb01 f303 	mul.w	r3, r1, r3
 8009b52:	441a      	add	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	22ff      	movs	r2, #255	; 0xff
 8009b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	22ff      	movs	r2, #255	; 0xff
 8009b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d114      	bne.n	8009b98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01a      	beq.n	8009bac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3310      	adds	r3, #16
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 f91c 	bl	800adb8 <xTaskRemoveFromEventList>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d012      	beq.n	8009bac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b86:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <xQueueGenericReset+0xcc>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	e009      	b.n	8009bac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3310      	adds	r3, #16
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fef3 	bl	8009988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3324      	adds	r3, #36	; 0x24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff feee 	bl	8009988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009bac:	f001 fd1c 	bl	800b5e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009bb0:	2301      	movs	r3, #1
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	; 0x38
 8009bc4:	af02      	add	r7, sp, #8
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d109      	bne.n	8009be8 <xQueueGenericCreateStatic+0x28>
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009be6:	e7fe      	b.n	8009be6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <xQueueGenericCreateStatic+0x42>
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8009c00:	e7fe      	b.n	8009c00 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <xQueueGenericCreateStatic+0x4e>
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <xQueueGenericCreateStatic+0x52>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <xQueueGenericCreateStatic+0x54>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d109      	bne.n	8009c2c <xQueueGenericCreateStatic+0x6c>
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	623b      	str	r3, [r7, #32]
 8009c2a:	e7fe      	b.n	8009c2a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <xQueueGenericCreateStatic+0x78>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <xQueueGenericCreateStatic+0x7c>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <xQueueGenericCreateStatic+0x7e>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <xQueueGenericCreateStatic+0x96>
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	e7fe      	b.n	8009c54 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c56:	2348      	movs	r3, #72	; 0x48
 8009c58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b48      	cmp	r3, #72	; 0x48
 8009c5e:	d009      	beq.n	8009c74 <xQueueGenericCreateStatic+0xb4>
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	e7fe      	b.n	8009c72 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00d      	beq.n	8009c9c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c88:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4613      	mov	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	68b9      	ldr	r1, [r7, #8]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f844 	bl	8009d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3730      	adds	r7, #48	; 0x30
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b08a      	sub	sp, #40	; 0x28
 8009caa:	af02      	add	r7, sp, #8
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <xQueueGenericCreate+0x28>
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	e7fe      	b.n	8009ccc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61fb      	str	r3, [r7, #28]
 8009cd8:	e004      	b.n	8009ce4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	fb02 f303 	mul.w	r3, r2, r3
 8009ce2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	3348      	adds	r3, #72	; 0x48
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 fd69 	bl	800b7c0 <pvPortMalloc>
 8009cee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d011      	beq.n	8009d1a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	3348      	adds	r3, #72	; 0x48
 8009cfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d08:	79fa      	ldrb	r2, [r7, #7]
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f805 	bl	8009d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3720      	adds	r7, #32
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e002      	b.n	8009d46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d52:	2101      	movs	r1, #1
 8009d54:	69b8      	ldr	r0, [r7, #24]
 8009d56:	f7ff fecb 	bl	8009af0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08e      	sub	sp, #56	; 0x38
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d72:	2300      	movs	r3, #0
 8009d74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d109      	bne.n	8009d94 <xQueueGenericSend+0x30>
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d92:	e7fe      	b.n	8009d92 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <xQueueGenericSend+0x3e>
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <xQueueGenericSend+0x42>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <xQueueGenericSend+0x44>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d109      	bne.n	8009dc0 <xQueueGenericSend+0x5c>
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dbe:	e7fe      	b.n	8009dbe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d103      	bne.n	8009dce <xQueueGenericSend+0x6a>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d101      	bne.n	8009dd2 <xQueueGenericSend+0x6e>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e000      	b.n	8009dd4 <xQueueGenericSend+0x70>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <xQueueGenericSend+0x88>
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	623b      	str	r3, [r7, #32]
 8009dea:	e7fe      	b.n	8009dea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dec:	f001 f99c 	bl	800b128 <xTaskGetSchedulerState>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <xQueueGenericSend+0x98>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <xQueueGenericSend+0x9c>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e000      	b.n	8009e02 <xQueueGenericSend+0x9e>
 8009e00:	2300      	movs	r3, #0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d109      	bne.n	8009e1a <xQueueGenericSend+0xb6>
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	61fb      	str	r3, [r7, #28]
 8009e18:	e7fe      	b.n	8009e18 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e1a:	f001 fbb7 	bl	800b58c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d302      	bcc.n	8009e30 <xQueueGenericSend+0xcc>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d129      	bne.n	8009e84 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e36:	f000 fa7c 	bl	800a332 <prvCopyDataToQueue>
 8009e3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d010      	beq.n	8009e66 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	3324      	adds	r3, #36	; 0x24
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 ffb5 	bl	800adb8 <xTaskRemoveFromEventList>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d013      	beq.n	8009e7c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e54:	4b3f      	ldr	r3, [pc, #252]	; (8009f54 <xQueueGenericSend+0x1f0>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	e00a      	b.n	8009e7c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d007      	beq.n	8009e7c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e6c:	4b39      	ldr	r3, [pc, #228]	; (8009f54 <xQueueGenericSend+0x1f0>)
 8009e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e7c:	f001 fbb4 	bl	800b5e8 <vPortExitCritical>
				return pdPASS;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e063      	b.n	8009f4c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d103      	bne.n	8009e92 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e8a:	f001 fbad 	bl	800b5e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e05c      	b.n	8009f4c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d106      	bne.n	8009ea6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e98:	f107 0314 	add.w	r3, r7, #20
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 ffed 	bl	800ae7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ea6:	f001 fb9f 	bl	800b5e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eaa:	f000 fd7f 	bl	800a9ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eae:	f001 fb6d 	bl	800b58c <vPortEnterCritical>
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebe:	d103      	bne.n	8009ec8 <xQueueGenericSend+0x164>
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ece:	b25b      	sxtb	r3, r3
 8009ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed4:	d103      	bne.n	8009ede <xQueueGenericSend+0x17a>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ede:	f001 fb83 	bl	800b5e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ee2:	1d3a      	adds	r2, r7, #4
 8009ee4:	f107 0314 	add.w	r3, r7, #20
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 ffdc 	bl	800aea8 <xTaskCheckForTimeOut>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d124      	bne.n	8009f40 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef8:	f000 fb13 	bl	800a522 <prvIsQueueFull>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d018      	beq.n	8009f34 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	3310      	adds	r3, #16
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 ff30 	bl	800ad70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f12:	f000 fa9e 	bl	800a452 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f16:	f000 fd57 	bl	800a9c8 <xTaskResumeAll>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f47f af7c 	bne.w	8009e1a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <xQueueGenericSend+0x1f0>)
 8009f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	e772      	b.n	8009e1a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f36:	f000 fa8c 	bl	800a452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f3a:	f000 fd45 	bl	800a9c8 <xTaskResumeAll>
 8009f3e:	e76c      	b.n	8009e1a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f42:	f000 fa86 	bl	800a452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f46:	f000 fd3f 	bl	800a9c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3738      	adds	r7, #56	; 0x38
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	e000ed04 	.word	0xe000ed04

08009f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08e      	sub	sp, #56	; 0x38
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d109      	bne.n	8009f84 <xQueueGenericSendFromISR+0x2c>
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
 8009f82:	e7fe      	b.n	8009f82 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d103      	bne.n	8009f92 <xQueueGenericSendFromISR+0x3a>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <xQueueGenericSendFromISR+0x3e>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <xQueueGenericSendFromISR+0x40>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d109      	bne.n	8009fb0 <xQueueGenericSendFromISR+0x58>
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	623b      	str	r3, [r7, #32]
 8009fae:	e7fe      	b.n	8009fae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d103      	bne.n	8009fbe <xQueueGenericSendFromISR+0x66>
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d101      	bne.n	8009fc2 <xQueueGenericSendFromISR+0x6a>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueGenericSendFromISR+0x6c>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d109      	bne.n	8009fdc <xQueueGenericSendFromISR+0x84>
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	e7fe      	b.n	8009fda <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fdc:	f001 fbb2 	bl	800b744 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	61ba      	str	r2, [r7, #24]
 8009ff6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a004:	429a      	cmp	r2, r3
 800a006:	d302      	bcc.n	800a00e <xQueueGenericSendFromISR+0xb6>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d12c      	bne.n	800a068 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a01e:	f000 f988 	bl	800a332 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a022:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02a:	d112      	bne.n	800a052 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d016      	beq.n	800a062 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	3324      	adds	r3, #36	; 0x24
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 febd 	bl	800adb8 <xTaskRemoveFromEventList>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00e      	beq.n	800a062 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00b      	beq.n	800a062 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	e007      	b.n	800a062 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a056:	3301      	adds	r3, #1
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	b25a      	sxtb	r2, r3
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a062:	2301      	movs	r3, #1
 800a064:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a066:	e001      	b.n	800a06c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	637b      	str	r3, [r7, #52]	; 0x34
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3738      	adds	r7, #56	; 0x38
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08c      	sub	sp, #48	; 0x30
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a08c:	2300      	movs	r3, #0
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <xQueueReceive+0x2e>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	623b      	str	r3, [r7, #32]
 800a0ac:	e7fe      	b.n	800a0ac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <xQueueReceive+0x3c>
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <xQueueReceive+0x40>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e000      	b.n	800a0c2 <xQueueReceive+0x42>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d109      	bne.n	800a0da <xQueueReceive+0x5a>
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	61fb      	str	r3, [r7, #28]
 800a0d8:	e7fe      	b.n	800a0d8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0da:	f001 f825 	bl	800b128 <xTaskGetSchedulerState>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <xQueueReceive+0x6a>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <xQueueReceive+0x6e>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e000      	b.n	800a0f0 <xQueueReceive+0x70>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <xQueueReceive+0x88>
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	61bb      	str	r3, [r7, #24]
 800a106:	e7fe      	b.n	800a106 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a108:	f001 fa40 	bl	800b58c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01f      	beq.n	800a158 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a11c:	f000 f973 	bl	800a406 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	1e5a      	subs	r2, r3, #1
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00f      	beq.n	800a150 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a132:	3310      	adds	r3, #16
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fe3f 	bl	800adb8 <xTaskRemoveFromEventList>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d007      	beq.n	800a150 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a140:	4b3c      	ldr	r3, [pc, #240]	; (800a234 <xQueueReceive+0x1b4>)
 800a142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a150:	f001 fa4a 	bl	800b5e8 <vPortExitCritical>
				return pdPASS;
 800a154:	2301      	movs	r3, #1
 800a156:	e069      	b.n	800a22c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d103      	bne.n	800a166 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a15e:	f001 fa43 	bl	800b5e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a162:	2300      	movs	r3, #0
 800a164:	e062      	b.n	800a22c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a16c:	f107 0310 	add.w	r3, r7, #16
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fe83 	bl	800ae7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a176:	2301      	movs	r3, #1
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a17a:	f001 fa35 	bl	800b5e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a17e:	f000 fc15 	bl	800a9ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a182:	f001 fa03 	bl	800b58c <vPortEnterCritical>
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a18c:	b25b      	sxtb	r3, r3
 800a18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a192:	d103      	bne.n	800a19c <xQueueReceive+0x11c>
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1a2:	b25b      	sxtb	r3, r3
 800a1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a8:	d103      	bne.n	800a1b2 <xQueueReceive+0x132>
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1b2:	f001 fa19 	bl	800b5e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1b6:	1d3a      	adds	r2, r7, #4
 800a1b8:	f107 0310 	add.w	r3, r7, #16
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fe72 	bl	800aea8 <xTaskCheckForTimeOut>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d123      	bne.n	800a212 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1cc:	f000 f993 	bl	800a4f6 <prvIsQueueEmpty>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d017      	beq.n	800a206 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	3324      	adds	r3, #36	; 0x24
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	4611      	mov	r1, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fdc6 	bl	800ad70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e6:	f000 f934 	bl	800a452 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1ea:	f000 fbed 	bl	800a9c8 <xTaskResumeAll>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d189      	bne.n	800a108 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a1f4:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <xQueueReceive+0x1b4>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	e780      	b.n	800a108 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a208:	f000 f923 	bl	800a452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a20c:	f000 fbdc 	bl	800a9c8 <xTaskResumeAll>
 800a210:	e77a      	b.n	800a108 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a214:	f000 f91d 	bl	800a452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a218:	f000 fbd6 	bl	800a9c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a21c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21e:	f000 f96a 	bl	800a4f6 <prvIsQueueEmpty>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	f43f af6f 	beq.w	800a108 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a22a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3730      	adds	r7, #48	; 0x30
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	; 0x38
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d109      	bne.n	800a262 <xQueueReceiveFromISR+0x2a>
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	623b      	str	r3, [r7, #32]
 800a260:	e7fe      	b.n	800a260 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d103      	bne.n	800a270 <xQueueReceiveFromISR+0x38>
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <xQueueReceiveFromISR+0x3c>
 800a270:	2301      	movs	r3, #1
 800a272:	e000      	b.n	800a276 <xQueueReceiveFromISR+0x3e>
 800a274:	2300      	movs	r3, #0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d109      	bne.n	800a28e <xQueueReceiveFromISR+0x56>
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e7fe      	b.n	800a28c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a28e:	f001 fa59 	bl	800b744 <vPortValidateInterruptPriority>
	__asm volatile
 800a292:	f3ef 8211 	mrs	r2, BASEPRI
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	61ba      	str	r2, [r7, #24]
 800a2a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a2aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02f      	beq.n	800a31a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2c8:	f000 f89d 	bl	800a406 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	1e5a      	subs	r2, r3, #1
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a2d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2dc:	d112      	bne.n	800a304 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d016      	beq.n	800a314 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	3310      	adds	r3, #16
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 fd64 	bl	800adb8 <xTaskRemoveFromEventList>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00e      	beq.n	800a314 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	e007      	b.n	800a314 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a308:	3301      	adds	r3, #1
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	b25a      	sxtb	r2, r3
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	637b      	str	r3, [r7, #52]	; 0x34
 800a318:	e001      	b.n	800a31e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	637b      	str	r3, [r7, #52]	; 0x34
 800a31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a320:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3738      	adds	r7, #56	; 0x38
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b086      	sub	sp, #24
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10d      	bne.n	800a36c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d14d      	bne.n	800a3f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 ff01 	bl	800b164 <xTaskPriorityDisinherit>
 800a362:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	609a      	str	r2, [r3, #8]
 800a36a:	e043      	b.n	800a3f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d119      	bne.n	800a3a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6858      	ldr	r0, [r3, #4]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	461a      	mov	r2, r3
 800a37c:	68b9      	ldr	r1, [r7, #8]
 800a37e:	f001 ff3b 	bl	800c1f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	441a      	add	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d32b      	bcc.n	800a3f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	605a      	str	r2, [r3, #4]
 800a3a4:	e026      	b.n	800a3f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	68d8      	ldr	r0, [r3, #12]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	68b9      	ldr	r1, [r7, #8]
 800a3b2:	f001 ff21 	bl	800c1f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	425b      	negs	r3, r3
 800a3c0:	441a      	add	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d207      	bcs.n	800a3e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689a      	ldr	r2, [r3, #8]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	425b      	negs	r3, r3
 800a3dc:	441a      	add	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d105      	bne.n	800a3f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a3fc:	697b      	ldr	r3, [r7, #20]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	2b00      	cmp	r3, #0
 800a416:	d018      	beq.n	800a44a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	441a      	add	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d303      	bcc.n	800a43a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68d9      	ldr	r1, [r3, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	461a      	mov	r2, r3
 800a444:	6838      	ldr	r0, [r7, #0]
 800a446:	f001 fed7 	bl	800c1f8 <memcpy>
	}
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a45a:	f001 f897 	bl	800b58c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a464:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a466:	e011      	b.n	800a48c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d012      	beq.n	800a496 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	3324      	adds	r3, #36	; 0x24
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fc9f 	bl	800adb8 <xTaskRemoveFromEventList>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a480:	f000 fd72 	bl	800af68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	3b01      	subs	r3, #1
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a490:	2b00      	cmp	r3, #0
 800a492:	dce9      	bgt.n	800a468 <prvUnlockQueue+0x16>
 800a494:	e000      	b.n	800a498 <prvUnlockQueue+0x46>
					break;
 800a496:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	22ff      	movs	r2, #255	; 0xff
 800a49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4a0:	f001 f8a2 	bl	800b5e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4a4:	f001 f872 	bl	800b58c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4b0:	e011      	b.n	800a4d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d012      	beq.n	800a4e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3310      	adds	r3, #16
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fc7a 	bl	800adb8 <xTaskRemoveFromEventList>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4ca:	f000 fd4d 	bl	800af68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dce9      	bgt.n	800a4b2 <prvUnlockQueue+0x60>
 800a4de:	e000      	b.n	800a4e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	22ff      	movs	r2, #255	; 0xff
 800a4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4ea:	f001 f87d 	bl	800b5e8 <vPortExitCritical>
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4fe:	f001 f845 	bl	800b58c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e001      	b.n	800a514 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a514:	f001 f868 	bl	800b5e8 <vPortExitCritical>

	return xReturn;
 800a518:	68fb      	ldr	r3, [r7, #12]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a52a:	f001 f82f 	bl	800b58c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a536:	429a      	cmp	r2, r3
 800a538:	d102      	bne.n	800a540 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	e001      	b.n	800a544 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a544:	f001 f850 	bl	800b5e8 <vPortExitCritical>

	return xReturn;
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a552:	b580      	push	{r7, lr}
 800a554:	b08e      	sub	sp, #56	; 0x38
 800a556:	af04      	add	r7, sp, #16
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a562:	2b00      	cmp	r3, #0
 800a564:	d109      	bne.n	800a57a <xTaskCreateStatic+0x28>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	e7fe      	b.n	800a578 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d109      	bne.n	800a594 <xTaskCreateStatic+0x42>
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61fb      	str	r3, [r7, #28]
 800a592:	e7fe      	b.n	800a592 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a594:	2358      	movs	r3, #88	; 0x58
 800a596:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2b58      	cmp	r3, #88	; 0x58
 800a59c:	d009      	beq.n	800a5b2 <xTaskCreateStatic+0x60>
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	61bb      	str	r3, [r7, #24]
 800a5b0:	e7fe      	b.n	800a5b0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01e      	beq.n	800a5f8 <xTaskCreateStatic+0xa6>
 800a5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01b      	beq.n	800a5f8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	9302      	str	r3, [sp, #8]
 800a5da:	f107 0314 	add.w	r3, r7, #20
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 f850 	bl	800a690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5f2:	f000 f8df 	bl	800a7b4 <prvAddNewTaskToReadyList>
 800a5f6:	e001      	b.n	800a5fc <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5fc:	697b      	ldr	r3, [r7, #20]
	}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3728      	adds	r7, #40	; 0x28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a606:	b580      	push	{r7, lr}
 800a608:	b08c      	sub	sp, #48	; 0x30
 800a60a:	af04      	add	r7, sp, #16
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	603b      	str	r3, [r7, #0]
 800a612:	4613      	mov	r3, r2
 800a614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f001 f8d0 	bl	800b7c0 <pvPortMalloc>
 800a620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00e      	beq.n	800a646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a628:	2058      	movs	r0, #88	; 0x58
 800a62a:	f001 f8c9 	bl	800b7c0 <pvPortMalloc>
 800a62e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d003      	beq.n	800a63e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	631a      	str	r2, [r3, #48]	; 0x30
 800a63c:	e005      	b.n	800a64a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a63e:	6978      	ldr	r0, [r7, #20]
 800a640:	f001 f984 	bl	800b94c <vPortFree>
 800a644:	e001      	b.n	800a64a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d017      	beq.n	800a680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a658:	88fa      	ldrh	r2, [r7, #6]
 800a65a:	2300      	movs	r3, #0
 800a65c:	9303      	str	r3, [sp, #12]
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	9302      	str	r3, [sp, #8]
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f80e 	bl	800a690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a674:	69f8      	ldr	r0, [r7, #28]
 800a676:	f000 f89d 	bl	800a7b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a67a:	2301      	movs	r3, #1
 800a67c:	61bb      	str	r3, [r7, #24]
 800a67e:	e002      	b.n	800a686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a680:	f04f 33ff 	mov.w	r3, #4294967295
 800a684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a686:	69bb      	ldr	r3, [r7, #24]
	}
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b088      	sub	sp, #32
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	21a5      	movs	r1, #165	; 0xa5
 800a6aa:	f001 fdb0 	bl	800c20e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	f023 0307 	bic.w	r3, r3, #7
 800a6c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d009      	beq.n	800a6e6 <prvInitialiseNewTask+0x56>
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e7fe      	b.n	800a6e4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01f      	beq.n	800a72c <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	61fb      	str	r3, [r7, #28]
 800a6f0:	e012      	b.n	800a718 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	7819      	ldrb	r1, [r3, #0]
 800a6fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	3334      	adds	r3, #52	; 0x34
 800a702:	460a      	mov	r2, r1
 800a704:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	4413      	add	r3, r2
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d006      	beq.n	800a720 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	3301      	adds	r3, #1
 800a716:	61fb      	str	r3, [r7, #28]
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	2b0f      	cmp	r3, #15
 800a71c:	d9e9      	bls.n	800a6f2 <prvInitialiseNewTask+0x62>
 800a71e:	e000      	b.n	800a722 <prvInitialiseNewTask+0x92>
			{
				break;
 800a720:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a72a:	e003      	b.n	800a734 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	2b06      	cmp	r3, #6
 800a738:	d901      	bls.n	800a73e <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a73a:	2306      	movs	r3, #6
 800a73c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a742:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a748:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	2200      	movs	r2, #0
 800a74e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a752:	3304      	adds	r3, #4
 800a754:	4618      	mov	r0, r3
 800a756:	f7ff f937 	bl	80099c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	3318      	adds	r3, #24
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff f932 	bl	80099c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a768:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	f1c3 0207 	rsb	r2, r3, #7
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a778:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	2200      	movs	r2, #0
 800a77e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a782:	2200      	movs	r2, #0
 800a784:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	69b8      	ldr	r0, [r7, #24]
 800a794:	f000 fdd0 	bl	800b338 <pxPortInitialiseStack>
 800a798:	4602      	mov	r2, r0
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7aa:	bf00      	nop
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7bc:	f000 fee6 	bl	800b58c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7c0:	4b2a      	ldr	r3, [pc, #168]	; (800a86c <prvAddNewTaskToReadyList+0xb8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	4a29      	ldr	r2, [pc, #164]	; (800a86c <prvAddNewTaskToReadyList+0xb8>)
 800a7c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7ca:	4b29      	ldr	r3, [pc, #164]	; (800a870 <prvAddNewTaskToReadyList+0xbc>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7d2:	4a27      	ldr	r2, [pc, #156]	; (800a870 <prvAddNewTaskToReadyList+0xbc>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7d8:	4b24      	ldr	r3, [pc, #144]	; (800a86c <prvAddNewTaskToReadyList+0xb8>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d110      	bne.n	800a802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7e0:	f000 fbe8 	bl	800afb4 <prvInitialiseTaskLists>
 800a7e4:	e00d      	b.n	800a802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7e6:	4b23      	ldr	r3, [pc, #140]	; (800a874 <prvAddNewTaskToReadyList+0xc0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d109      	bne.n	800a802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7ee:	4b20      	ldr	r3, [pc, #128]	; (800a870 <prvAddNewTaskToReadyList+0xbc>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d802      	bhi.n	800a802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7fc:	4a1c      	ldr	r2, [pc, #112]	; (800a870 <prvAddNewTaskToReadyList+0xbc>)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a802:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <prvAddNewTaskToReadyList+0xc4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	4a1b      	ldr	r2, [pc, #108]	; (800a878 <prvAddNewTaskToReadyList+0xc4>)
 800a80a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	2201      	movs	r2, #1
 800a812:	409a      	lsls	r2, r3
 800a814:	4b19      	ldr	r3, [pc, #100]	; (800a87c <prvAddNewTaskToReadyList+0xc8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4313      	orrs	r3, r2
 800a81a:	4a18      	ldr	r2, [pc, #96]	; (800a87c <prvAddNewTaskToReadyList+0xc8>)
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4a15      	ldr	r2, [pc, #84]	; (800a880 <prvAddNewTaskToReadyList+0xcc>)
 800a82c:	441a      	add	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3304      	adds	r3, #4
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7ff f8d4 	bl	80099e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a83a:	f000 fed5 	bl	800b5e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a83e:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <prvAddNewTaskToReadyList+0xc0>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00e      	beq.n	800a864 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a846:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <prvAddNewTaskToReadyList+0xbc>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	429a      	cmp	r2, r3
 800a852:	d207      	bcs.n	800a864 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a854:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <prvAddNewTaskToReadyList+0xd0>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000414 	.word	0x20000414
 800a870:	20000314 	.word	0x20000314
 800a874:	20000420 	.word	0x20000420
 800a878:	20000430 	.word	0x20000430
 800a87c:	2000041c 	.word	0x2000041c
 800a880:	20000318 	.word	0x20000318
 800a884:	e000ed04 	.word	0xe000ed04

0800a888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d016      	beq.n	800a8c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a89a:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <vTaskDelay+0x60>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <vTaskDelay+0x2e>
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	60bb      	str	r3, [r7, #8]
 800a8b4:	e7fe      	b.n	800a8b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a8b6:	f000 f879 	bl	800a9ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fcd5 	bl	800b26c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8c2:	f000 f881 	bl	800a9c8 <xTaskResumeAll>
 800a8c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d107      	bne.n	800a8de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a8ce:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <vTaskDelay+0x64>)
 800a8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	2000043c 	.word	0x2000043c
 800a8ec:	e000ed04 	.word	0xe000ed04

0800a8f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08a      	sub	sp, #40	; 0x28
 800a8f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8fe:	463a      	mov	r2, r7
 800a900:	1d39      	adds	r1, r7, #4
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	4618      	mov	r0, r3
 800a908:	f7f5 fe0c 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	9202      	str	r2, [sp, #8]
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	2300      	movs	r3, #0
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	2300      	movs	r3, #0
 800a91c:	460a      	mov	r2, r1
 800a91e:	491d      	ldr	r1, [pc, #116]	; (800a994 <vTaskStartScheduler+0xa4>)
 800a920:	481d      	ldr	r0, [pc, #116]	; (800a998 <vTaskStartScheduler+0xa8>)
 800a922:	f7ff fe16 	bl	800a552 <xTaskCreateStatic>
 800a926:	4602      	mov	r2, r0
 800a928:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <vTaskStartScheduler+0xac>)
 800a92a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a92c:	4b1b      	ldr	r3, [pc, #108]	; (800a99c <vTaskStartScheduler+0xac>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a934:	2301      	movs	r3, #1
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e001      	b.n	800a93e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d115      	bne.n	800a970 <vTaskStartScheduler+0x80>
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a956:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <vTaskStartScheduler+0xb0>)
 800a958:	f04f 32ff 	mov.w	r2, #4294967295
 800a95c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a95e:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <vTaskStartScheduler+0xb4>)
 800a960:	2201      	movs	r2, #1
 800a962:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a964:	4b10      	ldr	r3, [pc, #64]	; (800a9a8 <vTaskStartScheduler+0xb8>)
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a96a:	f000 fd71 	bl	800b450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a96e:	e00d      	b.n	800a98c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d109      	bne.n	800a98c <vTaskStartScheduler+0x9c>
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	e7fe      	b.n	800a98a <vTaskStartScheduler+0x9a>
}
 800a98c:	bf00      	nop
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	0800cc3c 	.word	0x0800cc3c
 800a998:	0800af81 	.word	0x0800af81
 800a99c:	20000438 	.word	0x20000438
 800a9a0:	20000434 	.word	0x20000434
 800a9a4:	20000420 	.word	0x20000420
 800a9a8:	20000418 	.word	0x20000418

0800a9ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a9b0:	4b04      	ldr	r3, [pc, #16]	; (800a9c4 <vTaskSuspendAll+0x18>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	4a03      	ldr	r2, [pc, #12]	; (800a9c4 <vTaskSuspendAll+0x18>)
 800a9b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a9ba:	bf00      	nop
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	2000043c 	.word	0x2000043c

0800a9c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9d6:	4b41      	ldr	r3, [pc, #260]	; (800aadc <xTaskResumeAll+0x114>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d109      	bne.n	800a9f2 <xTaskResumeAll+0x2a>
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	e7fe      	b.n	800a9f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9f2:	f000 fdcb 	bl	800b58c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9f6:	4b39      	ldr	r3, [pc, #228]	; (800aadc <xTaskResumeAll+0x114>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	4a37      	ldr	r2, [pc, #220]	; (800aadc <xTaskResumeAll+0x114>)
 800a9fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa00:	4b36      	ldr	r3, [pc, #216]	; (800aadc <xTaskResumeAll+0x114>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d161      	bne.n	800aacc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa08:	4b35      	ldr	r3, [pc, #212]	; (800aae0 <xTaskResumeAll+0x118>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d05d      	beq.n	800aacc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa10:	e02e      	b.n	800aa70 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa12:	4b34      	ldr	r3, [pc, #208]	; (800aae4 <xTaskResumeAll+0x11c>)
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3318      	adds	r3, #24
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff f83c 	bl	8009a9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff f837 	bl	8009a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	2201      	movs	r2, #1
 800aa34:	409a      	lsls	r2, r3
 800aa36:	4b2c      	ldr	r3, [pc, #176]	; (800aae8 <xTaskResumeAll+0x120>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <xTaskResumeAll+0x120>)
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	4613      	mov	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4a27      	ldr	r2, [pc, #156]	; (800aaec <xTaskResumeAll+0x124>)
 800aa4e:	441a      	add	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3304      	adds	r3, #4
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7fe ffc3 	bl	80099e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa60:	4b23      	ldr	r3, [pc, #140]	; (800aaf0 <xTaskResumeAll+0x128>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d302      	bcc.n	800aa70 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800aa6a:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <xTaskResumeAll+0x12c>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa70:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <xTaskResumeAll+0x11c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1cc      	bne.n	800aa12 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa7e:	f000 fb33 	bl	800b0e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa82:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <xTaskResumeAll+0x130>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d010      	beq.n	800aab0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa8e:	f000 f837 	bl	800ab00 <xTaskIncrementTick>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800aa98:	4b16      	ldr	r3, [pc, #88]	; (800aaf4 <xTaskResumeAll+0x12c>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1f1      	bne.n	800aa8e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800aaaa:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <xTaskResumeAll+0x130>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aab0:	4b10      	ldr	r3, [pc, #64]	; (800aaf4 <xTaskResumeAll+0x12c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <xTaskResumeAll+0x134>)
 800aabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aacc:	f000 fd8c 	bl	800b5e8 <vPortExitCritical>

	return xAlreadyYielded;
 800aad0:	68bb      	ldr	r3, [r7, #8]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	2000043c 	.word	0x2000043c
 800aae0:	20000414 	.word	0x20000414
 800aae4:	200003d4 	.word	0x200003d4
 800aae8:	2000041c 	.word	0x2000041c
 800aaec:	20000318 	.word	0x20000318
 800aaf0:	20000314 	.word	0x20000314
 800aaf4:	20000428 	.word	0x20000428
 800aaf8:	20000424 	.word	0x20000424
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab0a:	4b4e      	ldr	r3, [pc, #312]	; (800ac44 <xTaskIncrementTick+0x144>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f040 8087 	bne.w	800ac22 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab14:	4b4c      	ldr	r3, [pc, #304]	; (800ac48 <xTaskIncrementTick+0x148>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab1c:	4a4a      	ldr	r2, [pc, #296]	; (800ac48 <xTaskIncrementTick+0x148>)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d11f      	bne.n	800ab68 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab28:	4b48      	ldr	r3, [pc, #288]	; (800ac4c <xTaskIncrementTick+0x14c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <xTaskIncrementTick+0x46>
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	e7fe      	b.n	800ab44 <xTaskIncrementTick+0x44>
 800ab46:	4b41      	ldr	r3, [pc, #260]	; (800ac4c <xTaskIncrementTick+0x14c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	4b40      	ldr	r3, [pc, #256]	; (800ac50 <xTaskIncrementTick+0x150>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a3e      	ldr	r2, [pc, #248]	; (800ac4c <xTaskIncrementTick+0x14c>)
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	4a3e      	ldr	r2, [pc, #248]	; (800ac50 <xTaskIncrementTick+0x150>)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6013      	str	r3, [r2, #0]
 800ab5a:	4b3e      	ldr	r3, [pc, #248]	; (800ac54 <xTaskIncrementTick+0x154>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	4a3c      	ldr	r2, [pc, #240]	; (800ac54 <xTaskIncrementTick+0x154>)
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	f000 fac0 	bl	800b0e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab68:	4b3b      	ldr	r3, [pc, #236]	; (800ac58 <xTaskIncrementTick+0x158>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d348      	bcc.n	800ac04 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab72:	4b36      	ldr	r3, [pc, #216]	; (800ac4c <xTaskIncrementTick+0x14c>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab7c:	4b36      	ldr	r3, [pc, #216]	; (800ac58 <xTaskIncrementTick+0x158>)
 800ab7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab82:	601a      	str	r2, [r3, #0]
					break;
 800ab84:	e03e      	b.n	800ac04 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab86:	4b31      	ldr	r3, [pc, #196]	; (800ac4c <xTaskIncrementTick+0x14c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d203      	bcs.n	800aba6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab9e:	4a2e      	ldr	r2, [pc, #184]	; (800ac58 <xTaskIncrementTick+0x158>)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aba4:	e02e      	b.n	800ac04 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	3304      	adds	r3, #4
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe ff76 	bl	8009a9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d004      	beq.n	800abc2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	3318      	adds	r3, #24
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe ff6d 	bl	8009a9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc6:	2201      	movs	r2, #1
 800abc8:	409a      	lsls	r2, r3
 800abca:	4b24      	ldr	r3, [pc, #144]	; (800ac5c <xTaskIncrementTick+0x15c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4313      	orrs	r3, r2
 800abd0:	4a22      	ldr	r2, [pc, #136]	; (800ac5c <xTaskIncrementTick+0x15c>)
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4a1f      	ldr	r2, [pc, #124]	; (800ac60 <xTaskIncrementTick+0x160>)
 800abe2:	441a      	add	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	3304      	adds	r3, #4
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f7fe fef9 	bl	80099e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf4:	4b1b      	ldr	r3, [pc, #108]	; (800ac64 <xTaskIncrementTick+0x164>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d3b9      	bcc.n	800ab72 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800abfe:	2301      	movs	r3, #1
 800ac00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac02:	e7b6      	b.n	800ab72 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac04:	4b17      	ldr	r3, [pc, #92]	; (800ac64 <xTaskIncrementTick+0x164>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	4915      	ldr	r1, [pc, #84]	; (800ac60 <xTaskIncrementTick+0x160>)
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d907      	bls.n	800ac2c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e004      	b.n	800ac2c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac22:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <xTaskIncrementTick+0x168>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3301      	adds	r3, #1
 800ac28:	4a0f      	ldr	r2, [pc, #60]	; (800ac68 <xTaskIncrementTick+0x168>)
 800ac2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac2c:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <xTaskIncrementTick+0x16c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800ac34:	2301      	movs	r3, #1
 800ac36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac38:	697b      	ldr	r3, [r7, #20]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	2000043c 	.word	0x2000043c
 800ac48:	20000418 	.word	0x20000418
 800ac4c:	200003cc 	.word	0x200003cc
 800ac50:	200003d0 	.word	0x200003d0
 800ac54:	2000042c 	.word	0x2000042c
 800ac58:	20000434 	.word	0x20000434
 800ac5c:	2000041c 	.word	0x2000041c
 800ac60:	20000318 	.word	0x20000318
 800ac64:	20000314 	.word	0x20000314
 800ac68:	20000424 	.word	0x20000424
 800ac6c:	20000428 	.word	0x20000428

0800ac70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac76:	4b39      	ldr	r3, [pc, #228]	; (800ad5c <vTaskSwitchContext+0xec>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac7e:	4b38      	ldr	r3, [pc, #224]	; (800ad60 <vTaskSwitchContext+0xf0>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac84:	e065      	b.n	800ad52 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800ac86:	4b36      	ldr	r3, [pc, #216]	; (800ad60 <vTaskSwitchContext+0xf0>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ac8c:	4b35      	ldr	r3, [pc, #212]	; (800ad64 <vTaskSwitchContext+0xf4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	61fb      	str	r3, [r7, #28]
 800ac94:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ac98:	61bb      	str	r3, [r7, #24]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d111      	bne.n	800acc8 <vTaskSwitchContext+0x58>
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	3304      	adds	r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	429a      	cmp	r2, r3
 800acae:	d10b      	bne.n	800acc8 <vTaskSwitchContext+0x58>
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	3308      	adds	r3, #8
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d105      	bne.n	800acc8 <vTaskSwitchContext+0x58>
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	330c      	adds	r3, #12
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d008      	beq.n	800acda <vTaskSwitchContext+0x6a>
 800acc8:	4b26      	ldr	r3, [pc, #152]	; (800ad64 <vTaskSwitchContext+0xf4>)
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	4b25      	ldr	r3, [pc, #148]	; (800ad64 <vTaskSwitchContext+0xf4>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	3334      	adds	r3, #52	; 0x34
 800acd2:	4619      	mov	r1, r3
 800acd4:	4610      	mov	r0, r2
 800acd6:	f7f5 fc12 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acda:	4b23      	ldr	r3, [pc, #140]	; (800ad68 <vTaskSwitchContext+0xf8>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	fab3 f383 	clz	r3, r3
 800ace6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ace8:	7afb      	ldrb	r3, [r7, #11]
 800acea:	f1c3 031f 	rsb	r3, r3, #31
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	491e      	ldr	r1, [pc, #120]	; (800ad6c <vTaskSwitchContext+0xfc>)
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d109      	bne.n	800ad18 <vTaskSwitchContext+0xa8>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	607b      	str	r3, [r7, #4]
 800ad16:	e7fe      	b.n	800ad16 <vTaskSwitchContext+0xa6>
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4a12      	ldr	r2, [pc, #72]	; (800ad6c <vTaskSwitchContext+0xfc>)
 800ad24:	4413      	add	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	605a      	str	r2, [r3, #4]
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	3308      	adds	r3, #8
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d104      	bne.n	800ad48 <vTaskSwitchContext+0xd8>
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	605a      	str	r2, [r3, #4]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	4a05      	ldr	r2, [pc, #20]	; (800ad64 <vTaskSwitchContext+0xf4>)
 800ad50:	6013      	str	r3, [r2, #0]
}
 800ad52:	bf00      	nop
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	2000043c 	.word	0x2000043c
 800ad60:	20000428 	.word	0x20000428
 800ad64:	20000314 	.word	0x20000314
 800ad68:	2000041c 	.word	0x2000041c
 800ad6c:	20000318 	.word	0x20000318

0800ad70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d109      	bne.n	800ad94 <vTaskPlaceOnEventList+0x24>
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e7fe      	b.n	800ad92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad94:	4b07      	ldr	r3, [pc, #28]	; (800adb4 <vTaskPlaceOnEventList+0x44>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3318      	adds	r3, #24
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe fe44 	bl	8009a2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ada2:	2101      	movs	r1, #1
 800ada4:	6838      	ldr	r0, [r7, #0]
 800ada6:	f000 fa61 	bl	800b26c <prvAddCurrentTaskToDelayedList>
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000314 	.word	0x20000314

0800adb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <xTaskRemoveFromEventList+0x2a>
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e7fe      	b.n	800ade0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	3318      	adds	r3, #24
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fe58 	bl	8009a9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adec:	4b1d      	ldr	r3, [pc, #116]	; (800ae64 <xTaskRemoveFromEventList+0xac>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d11c      	bne.n	800ae2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fe4f 	bl	8009a9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	2201      	movs	r2, #1
 800ae04:	409a      	lsls	r2, r3
 800ae06:	4b18      	ldr	r3, [pc, #96]	; (800ae68 <xTaskRemoveFromEventList+0xb0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	4a16      	ldr	r2, [pc, #88]	; (800ae68 <xTaskRemoveFromEventList+0xb0>)
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4a13      	ldr	r2, [pc, #76]	; (800ae6c <xTaskRemoveFromEventList+0xb4>)
 800ae1e:	441a      	add	r2, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	3304      	adds	r3, #4
 800ae24:	4619      	mov	r1, r3
 800ae26:	4610      	mov	r0, r2
 800ae28:	f7fe fddb 	bl	80099e2 <vListInsertEnd>
 800ae2c:	e005      	b.n	800ae3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	3318      	adds	r3, #24
 800ae32:	4619      	mov	r1, r3
 800ae34:	480e      	ldr	r0, [pc, #56]	; (800ae70 <xTaskRemoveFromEventList+0xb8>)
 800ae36:	f7fe fdd4 	bl	80099e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3e:	4b0d      	ldr	r3, [pc, #52]	; (800ae74 <xTaskRemoveFromEventList+0xbc>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d905      	bls.n	800ae54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <xTaskRemoveFromEventList+0xc0>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	e001      	b.n	800ae58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae58:	697b      	ldr	r3, [r7, #20]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3718      	adds	r7, #24
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	2000043c 	.word	0x2000043c
 800ae68:	2000041c 	.word	0x2000041c
 800ae6c:	20000318 	.word	0x20000318
 800ae70:	200003d4 	.word	0x200003d4
 800ae74:	20000314 	.word	0x20000314
 800ae78:	20000428 	.word	0x20000428

0800ae7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae84:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <vTaskInternalSetTimeOutState+0x24>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <vTaskInternalSetTimeOutState+0x28>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	605a      	str	r2, [r3, #4]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	2000042c 	.word	0x2000042c
 800aea4:	20000418 	.word	0x20000418

0800aea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d109      	bne.n	800aecc <xTaskCheckForTimeOut+0x24>
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	613b      	str	r3, [r7, #16]
 800aeca:	e7fe      	b.n	800aeca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d109      	bne.n	800aee6 <xTaskCheckForTimeOut+0x3e>
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e7fe      	b.n	800aee4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800aee6:	f000 fb51 	bl	800b58c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeea:	4b1d      	ldr	r3, [pc, #116]	; (800af60 <xTaskCheckForTimeOut+0xb8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af02:	d102      	bne.n	800af0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af04:	2300      	movs	r3, #0
 800af06:	61fb      	str	r3, [r7, #28]
 800af08:	e023      	b.n	800af52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	4b15      	ldr	r3, [pc, #84]	; (800af64 <xTaskCheckForTimeOut+0xbc>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d007      	beq.n	800af26 <xTaskCheckForTimeOut+0x7e>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	69ba      	ldr	r2, [r7, #24]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d302      	bcc.n	800af26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af20:	2301      	movs	r3, #1
 800af22:	61fb      	str	r3, [r7, #28]
 800af24:	e015      	b.n	800af52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d20b      	bcs.n	800af48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	1ad2      	subs	r2, r2, r3
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff ff9d 	bl	800ae7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af42:	2300      	movs	r3, #0
 800af44:	61fb      	str	r3, [r7, #28]
 800af46:	e004      	b.n	800af52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af4e:	2301      	movs	r3, #1
 800af50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af52:	f000 fb49 	bl	800b5e8 <vPortExitCritical>

	return xReturn;
 800af56:	69fb      	ldr	r3, [r7, #28]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3720      	adds	r7, #32
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000418 	.word	0x20000418
 800af64:	2000042c 	.word	0x2000042c

0800af68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af6c:	4b03      	ldr	r3, [pc, #12]	; (800af7c <vTaskMissedYield+0x14>)
 800af6e:	2201      	movs	r2, #1
 800af70:	601a      	str	r2, [r3, #0]
}
 800af72:	bf00      	nop
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	20000428 	.word	0x20000428

0800af80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af88:	f000 f854 	bl	800b034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af8c:	4b07      	ldr	r3, [pc, #28]	; (800afac <prvIdleTask+0x2c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d907      	bls.n	800afa4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800af94:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <prvIdleTask+0x30>)
 800af96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800afa4:	f7f5 faa4 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800afa8:	e7ee      	b.n	800af88 <prvIdleTask+0x8>
 800afaa:	bf00      	nop
 800afac:	20000318 	.word	0x20000318
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afba:	2300      	movs	r3, #0
 800afbc:	607b      	str	r3, [r7, #4]
 800afbe:	e00c      	b.n	800afda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4a12      	ldr	r2, [pc, #72]	; (800b014 <prvInitialiseTaskLists+0x60>)
 800afcc:	4413      	add	r3, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fcda 	bl	8009988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3301      	adds	r3, #1
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b06      	cmp	r3, #6
 800afde:	d9ef      	bls.n	800afc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afe0:	480d      	ldr	r0, [pc, #52]	; (800b018 <prvInitialiseTaskLists+0x64>)
 800afe2:	f7fe fcd1 	bl	8009988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afe6:	480d      	ldr	r0, [pc, #52]	; (800b01c <prvInitialiseTaskLists+0x68>)
 800afe8:	f7fe fcce 	bl	8009988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afec:	480c      	ldr	r0, [pc, #48]	; (800b020 <prvInitialiseTaskLists+0x6c>)
 800afee:	f7fe fccb 	bl	8009988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aff2:	480c      	ldr	r0, [pc, #48]	; (800b024 <prvInitialiseTaskLists+0x70>)
 800aff4:	f7fe fcc8 	bl	8009988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aff8:	480b      	ldr	r0, [pc, #44]	; (800b028 <prvInitialiseTaskLists+0x74>)
 800affa:	f7fe fcc5 	bl	8009988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <prvInitialiseTaskLists+0x78>)
 800b000:	4a05      	ldr	r2, [pc, #20]	; (800b018 <prvInitialiseTaskLists+0x64>)
 800b002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b004:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <prvInitialiseTaskLists+0x7c>)
 800b006:	4a05      	ldr	r2, [pc, #20]	; (800b01c <prvInitialiseTaskLists+0x68>)
 800b008:	601a      	str	r2, [r3, #0]
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20000318 	.word	0x20000318
 800b018:	200003a4 	.word	0x200003a4
 800b01c:	200003b8 	.word	0x200003b8
 800b020:	200003d4 	.word	0x200003d4
 800b024:	200003e8 	.word	0x200003e8
 800b028:	20000400 	.word	0x20000400
 800b02c:	200003cc 	.word	0x200003cc
 800b030:	200003d0 	.word	0x200003d0

0800b034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b03a:	e019      	b.n	800b070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b03c:	f000 faa6 	bl	800b58c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b040:	4b0f      	ldr	r3, [pc, #60]	; (800b080 <prvCheckTasksWaitingTermination+0x4c>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fd25 	bl	8009a9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b052:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <prvCheckTasksWaitingTermination+0x50>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3b01      	subs	r3, #1
 800b058:	4a0a      	ldr	r2, [pc, #40]	; (800b084 <prvCheckTasksWaitingTermination+0x50>)
 800b05a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b05c:	4b0a      	ldr	r3, [pc, #40]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3b01      	subs	r3, #1
 800b062:	4a09      	ldr	r2, [pc, #36]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b066:	f000 fabf 	bl	800b5e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f80e 	bl	800b08c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <prvCheckTasksWaitingTermination+0x54>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e1      	bne.n	800b03c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	200003e8 	.word	0x200003e8
 800b084:	20000414 	.word	0x20000414
 800b088:	200003fc 	.word	0x200003fc

0800b08c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d108      	bne.n	800b0b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fc52 	bl	800b94c <vPortFree>
				vPortFree( pxTCB );
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fc4f 	bl	800b94c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0ae:	e017      	b.n	800b0e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d103      	bne.n	800b0c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fc46 	bl	800b94c <vPortFree>
	}
 800b0c0:	e00e      	b.n	800b0e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d009      	beq.n	800b0e0 <prvDeleteTCB+0x54>
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	e7fe      	b.n	800b0de <prvDeleteTCB+0x52>
	}
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ee:	4b0c      	ldr	r3, [pc, #48]	; (800b120 <prvResetNextTaskUnblockTime+0x38>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <prvResetNextTaskUnblockTime+0x3c>)
 800b0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b100:	e008      	b.n	800b114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b102:	4b07      	ldr	r3, [pc, #28]	; (800b120 <prvResetNextTaskUnblockTime+0x38>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4a04      	ldr	r2, [pc, #16]	; (800b124 <prvResetNextTaskUnblockTime+0x3c>)
 800b112:	6013      	str	r3, [r2, #0]
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	200003cc 	.word	0x200003cc
 800b124:	20000434 	.word	0x20000434

0800b128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <xTaskGetSchedulerState+0x34>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b136:	2301      	movs	r3, #1
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	e008      	b.n	800b14e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13c:	4b08      	ldr	r3, [pc, #32]	; (800b160 <xTaskGetSchedulerState+0x38>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d102      	bne.n	800b14a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b144:	2302      	movs	r3, #2
 800b146:	607b      	str	r3, [r7, #4]
 800b148:	e001      	b.n	800b14e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b14e:	687b      	ldr	r3, [r7, #4]
	}
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	20000420 	.word	0x20000420
 800b160:	2000043c 	.word	0x2000043c

0800b164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d06c      	beq.n	800b254 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b17a:	4b39      	ldr	r3, [pc, #228]	; (800b260 <xTaskPriorityDisinherit+0xfc>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	429a      	cmp	r2, r3
 800b182:	d009      	beq.n	800b198 <xTaskPriorityDisinherit+0x34>
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	e7fe      	b.n	800b196 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d109      	bne.n	800b1b4 <xTaskPriorityDisinherit+0x50>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60bb      	str	r3, [r7, #8]
 800b1b2:	e7fe      	b.n	800b1b2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1b8:	1e5a      	subs	r2, r3, #1
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d044      	beq.n	800b254 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d140      	bne.n	800b254 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fc60 	bl	8009a9c <uxListRemove>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d115      	bne.n	800b20e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e6:	491f      	ldr	r1, [pc, #124]	; (800b264 <xTaskPriorityDisinherit+0x100>)
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <xTaskPriorityDisinherit+0xaa>
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b202:	43da      	mvns	r2, r3
 800b204:	4b18      	ldr	r3, [pc, #96]	; (800b268 <xTaskPriorityDisinherit+0x104>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4013      	ands	r3, r2
 800b20a:	4a17      	ldr	r2, [pc, #92]	; (800b268 <xTaskPriorityDisinherit+0x104>)
 800b20c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	f1c3 0207 	rsb	r2, r3, #7
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	2201      	movs	r2, #1
 800b228:	409a      	lsls	r2, r3
 800b22a:	4b0f      	ldr	r3, [pc, #60]	; (800b268 <xTaskPriorityDisinherit+0x104>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4313      	orrs	r3, r2
 800b230:	4a0d      	ldr	r2, [pc, #52]	; (800b268 <xTaskPriorityDisinherit+0x104>)
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b238:	4613      	mov	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4a08      	ldr	r2, [pc, #32]	; (800b264 <xTaskPriorityDisinherit+0x100>)
 800b242:	441a      	add	r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	3304      	adds	r3, #4
 800b248:	4619      	mov	r1, r3
 800b24a:	4610      	mov	r0, r2
 800b24c:	f7fe fbc9 	bl	80099e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b254:	697b      	ldr	r3, [r7, #20]
	}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000314 	.word	0x20000314
 800b264:	20000318 	.word	0x20000318
 800b268:	2000041c 	.word	0x2000041c

0800b26c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b276:	4b29      	ldr	r3, [pc, #164]	; (800b31c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b27c:	4b28      	ldr	r3, [pc, #160]	; (800b320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3304      	adds	r3, #4
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fc0a 	bl	8009a9c <uxListRemove>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	2201      	movs	r2, #1
 800b296:	fa02 f303 	lsl.w	r3, r2, r3
 800b29a:	43da      	mvns	r2, r3
 800b29c:	4b21      	ldr	r3, [pc, #132]	; (800b324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	4a20      	ldr	r2, [pc, #128]	; (800b324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ac:	d10a      	bne.n	800b2c4 <prvAddCurrentTaskToDelayedList+0x58>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d007      	beq.n	800b2c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b4:	4b1a      	ldr	r3, [pc, #104]	; (800b320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	481a      	ldr	r0, [pc, #104]	; (800b328 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b2be:	f7fe fb90 	bl	80099e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2c2:	e026      	b.n	800b312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2cc:	4b14      	ldr	r3, [pc, #80]	; (800b320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d209      	bcs.n	800b2f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2dc:	4b13      	ldr	r3, [pc, #76]	; (800b32c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	4b0f      	ldr	r3, [pc, #60]	; (800b320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	f7fe fb9e 	bl	8009a2a <vListInsert>
}
 800b2ee:	e010      	b.n	800b312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2f0:	4b0f      	ldr	r3, [pc, #60]	; (800b330 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	f7fe fb94 	bl	8009a2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b302:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d202      	bcs.n	800b312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b30c:	4a09      	ldr	r2, [pc, #36]	; (800b334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6013      	str	r3, [r2, #0]
}
 800b312:	bf00      	nop
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20000418 	.word	0x20000418
 800b320:	20000314 	.word	0x20000314
 800b324:	2000041c 	.word	0x2000041c
 800b328:	20000400 	.word	0x20000400
 800b32c:	200003d0 	.word	0x200003d0
 800b330:	200003cc 	.word	0x200003cc
 800b334:	20000434 	.word	0x20000434

0800b338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3b04      	subs	r3, #4
 800b348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3b04      	subs	r3, #4
 800b356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f023 0201 	bic.w	r2, r3, #1
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3b04      	subs	r3, #4
 800b366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b368:	4a0c      	ldr	r2, [pc, #48]	; (800b39c <pxPortInitialiseStack+0x64>)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3b14      	subs	r3, #20
 800b372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3b04      	subs	r3, #4
 800b37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f06f 0202 	mvn.w	r2, #2
 800b386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3b20      	subs	r3, #32
 800b38c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b38e:	68fb      	ldr	r3, [r7, #12]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	0800b3a1 	.word	0x0800b3a1

0800b3a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3aa:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <prvTaskExitError+0x50>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b2:	d009      	beq.n	800b3c8 <prvTaskExitError+0x28>
 800b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	60fb      	str	r3, [r7, #12]
 800b3c6:	e7fe      	b.n	800b3c6 <prvTaskExitError+0x26>
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3da:	bf00      	nop
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0fc      	beq.n	800b3dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	2000002c 	.word	0x2000002c
	...

0800b400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <pxCurrentTCBConst2>)
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	6808      	ldr	r0, [r1, #0]
 800b406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40a:	f380 8809 	msr	PSP, r0
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f04f 0000 	mov.w	r0, #0
 800b416:	f380 8811 	msr	BASEPRI, r0
 800b41a:	4770      	bx	lr
 800b41c:	f3af 8000 	nop.w

0800b420 <pxCurrentTCBConst2>:
 800b420:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop

0800b428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b428:	4808      	ldr	r0, [pc, #32]	; (800b44c <prvPortStartFirstTask+0x24>)
 800b42a:	6800      	ldr	r0, [r0, #0]
 800b42c:	6800      	ldr	r0, [r0, #0]
 800b42e:	f380 8808 	msr	MSP, r0
 800b432:	f04f 0000 	mov.w	r0, #0
 800b436:	f380 8814 	msr	CONTROL, r0
 800b43a:	b662      	cpsie	i
 800b43c:	b661      	cpsie	f
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	df00      	svc	0
 800b448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b44a:	bf00      	nop
 800b44c:	e000ed08 	.word	0xe000ed08

0800b450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b456:	4b44      	ldr	r3, [pc, #272]	; (800b568 <xPortStartScheduler+0x118>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a44      	ldr	r2, [pc, #272]	; (800b56c <xPortStartScheduler+0x11c>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d109      	bne.n	800b474 <xPortStartScheduler+0x24>
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	613b      	str	r3, [r7, #16]
 800b472:	e7fe      	b.n	800b472 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b474:	4b3c      	ldr	r3, [pc, #240]	; (800b568 <xPortStartScheduler+0x118>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a3d      	ldr	r2, [pc, #244]	; (800b570 <xPortStartScheduler+0x120>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d109      	bne.n	800b492 <xPortStartScheduler+0x42>
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e7fe      	b.n	800b490 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b492:	4b38      	ldr	r3, [pc, #224]	; (800b574 <xPortStartScheduler+0x124>)
 800b494:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	22ff      	movs	r2, #255	; 0xff
 800b4a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4ac:	78fb      	ldrb	r3, [r7, #3]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	4b30      	ldr	r3, [pc, #192]	; (800b578 <xPortStartScheduler+0x128>)
 800b4b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4ba:	4b30      	ldr	r3, [pc, #192]	; (800b57c <xPortStartScheduler+0x12c>)
 800b4bc:	2207      	movs	r2, #7
 800b4be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4c0:	e009      	b.n	800b4d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b4c2:	4b2e      	ldr	r3, [pc, #184]	; (800b57c <xPortStartScheduler+0x12c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	4a2c      	ldr	r2, [pc, #176]	; (800b57c <xPortStartScheduler+0x12c>)
 800b4ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b80      	cmp	r3, #128	; 0x80
 800b4e0:	d0ef      	beq.n	800b4c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4e2:	4b26      	ldr	r3, [pc, #152]	; (800b57c <xPortStartScheduler+0x12c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f1c3 0307 	rsb	r3, r3, #7
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d009      	beq.n	800b502 <xPortStartScheduler+0xb2>
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	60bb      	str	r3, [r7, #8]
 800b500:	e7fe      	b.n	800b500 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b502:	4b1e      	ldr	r3, [pc, #120]	; (800b57c <xPortStartScheduler+0x12c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	021b      	lsls	r3, r3, #8
 800b508:	4a1c      	ldr	r2, [pc, #112]	; (800b57c <xPortStartScheduler+0x12c>)
 800b50a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b50c:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <xPortStartScheduler+0x12c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b514:	4a19      	ldr	r2, [pc, #100]	; (800b57c <xPortStartScheduler+0x12c>)
 800b516:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b520:	4b17      	ldr	r3, [pc, #92]	; (800b580 <xPortStartScheduler+0x130>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a16      	ldr	r2, [pc, #88]	; (800b580 <xPortStartScheduler+0x130>)
 800b526:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b52a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b52c:	4b14      	ldr	r3, [pc, #80]	; (800b580 <xPortStartScheduler+0x130>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a13      	ldr	r2, [pc, #76]	; (800b580 <xPortStartScheduler+0x130>)
 800b532:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b536:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b538:	f000 f8d6 	bl	800b6e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b53c:	4b11      	ldr	r3, [pc, #68]	; (800b584 <xPortStartScheduler+0x134>)
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b542:	f000 f8f5 	bl	800b730 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b546:	4b10      	ldr	r3, [pc, #64]	; (800b588 <xPortStartScheduler+0x138>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a0f      	ldr	r2, [pc, #60]	; (800b588 <xPortStartScheduler+0x138>)
 800b54c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b550:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b552:	f7ff ff69 	bl	800b428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b556:	f7ff fb8b 	bl	800ac70 <vTaskSwitchContext>
	prvTaskExitError();
 800b55a:	f7ff ff21 	bl	800b3a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	e000ed00 	.word	0xe000ed00
 800b56c:	410fc271 	.word	0x410fc271
 800b570:	410fc270 	.word	0x410fc270
 800b574:	e000e400 	.word	0xe000e400
 800b578:	20000440 	.word	0x20000440
 800b57c:	20000444 	.word	0x20000444
 800b580:	e000ed20 	.word	0xe000ed20
 800b584:	2000002c 	.word	0x2000002c
 800b588:	e000ef34 	.word	0xe000ef34

0800b58c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5a4:	4b0e      	ldr	r3, [pc, #56]	; (800b5e0 <vPortEnterCritical+0x54>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	4a0d      	ldr	r2, [pc, #52]	; (800b5e0 <vPortEnterCritical+0x54>)
 800b5ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5ae:	4b0c      	ldr	r3, [pc, #48]	; (800b5e0 <vPortEnterCritical+0x54>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d10e      	bne.n	800b5d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <vPortEnterCritical+0x58>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d009      	beq.n	800b5d4 <vPortEnterCritical+0x48>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	603b      	str	r3, [r7, #0]
 800b5d2:	e7fe      	b.n	800b5d2 <vPortEnterCritical+0x46>
	}
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	2000002c 	.word	0x2000002c
 800b5e4:	e000ed04 	.word	0xe000ed04

0800b5e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5ee:	4b11      	ldr	r3, [pc, #68]	; (800b634 <vPortExitCritical+0x4c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d109      	bne.n	800b60a <vPortExitCritical+0x22>
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	607b      	str	r3, [r7, #4]
 800b608:	e7fe      	b.n	800b608 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b60a:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <vPortExitCritical+0x4c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3b01      	subs	r3, #1
 800b610:	4a08      	ldr	r2, [pc, #32]	; (800b634 <vPortExitCritical+0x4c>)
 800b612:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b614:	4b07      	ldr	r3, [pc, #28]	; (800b634 <vPortExitCritical+0x4c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d104      	bne.n	800b626 <vPortExitCritical+0x3e>
 800b61c:	2300      	movs	r3, #0
 800b61e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	2000002c 	.word	0x2000002c
	...

0800b640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b640:	f3ef 8009 	mrs	r0, PSP
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4b15      	ldr	r3, [pc, #84]	; (800b6a0 <pxCurrentTCBConst>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	f01e 0f10 	tst.w	lr, #16
 800b650:	bf08      	it	eq
 800b652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65a:	6010      	str	r0, [r2, #0]
 800b65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b660:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b664:	f380 8811 	msr	BASEPRI, r0
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f7ff fafe 	bl	800ac70 <vTaskSwitchContext>
 800b674:	f04f 0000 	mov.w	r0, #0
 800b678:	f380 8811 	msr	BASEPRI, r0
 800b67c:	bc09      	pop	{r0, r3}
 800b67e:	6819      	ldr	r1, [r3, #0]
 800b680:	6808      	ldr	r0, [r1, #0]
 800b682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b686:	f01e 0f10 	tst.w	lr, #16
 800b68a:	bf08      	it	eq
 800b68c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b690:	f380 8809 	msr	PSP, r0
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst>:
 800b6a0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6c0:	f7ff fa1e 	bl	800ab00 <xTaskIncrementTick>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6ca:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <SysTick_Handler+0x3c>)
 800b6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	e000ed04 	.word	0xe000ed04

0800b6e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6ec:	4b0b      	ldr	r3, [pc, #44]	; (800b71c <vPortSetupTimerInterrupt+0x34>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6f2:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <vPortSetupTimerInterrupt+0x38>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <vPortSetupTimerInterrupt+0x3c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a0a      	ldr	r2, [pc, #40]	; (800b728 <vPortSetupTimerInterrupt+0x40>)
 800b6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b702:	099b      	lsrs	r3, r3, #6
 800b704:	4a09      	ldr	r2, [pc, #36]	; (800b72c <vPortSetupTimerInterrupt+0x44>)
 800b706:	3b01      	subs	r3, #1
 800b708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b70a:	4b04      	ldr	r3, [pc, #16]	; (800b71c <vPortSetupTimerInterrupt+0x34>)
 800b70c:	2207      	movs	r2, #7
 800b70e:	601a      	str	r2, [r3, #0]
}
 800b710:	bf00      	nop
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	e000e010 	.word	0xe000e010
 800b720:	e000e018 	.word	0xe000e018
 800b724:	20000000 	.word	0x20000000
 800b728:	10624dd3 	.word	0x10624dd3
 800b72c:	e000e014 	.word	0xe000e014

0800b730 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b730:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b740 <vPortEnableVFP+0x10>
 800b734:	6801      	ldr	r1, [r0, #0]
 800b736:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b73a:	6001      	str	r1, [r0, #0]
 800b73c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b73e:	bf00      	nop
 800b740:	e000ed88 	.word	0xe000ed88

0800b744 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b74a:	f3ef 8305 	mrs	r3, IPSR
 800b74e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b0f      	cmp	r3, #15
 800b754:	d913      	bls.n	800b77e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b756:	4a16      	ldr	r2, [pc, #88]	; (800b7b0 <vPortValidateInterruptPriority+0x6c>)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b760:	4b14      	ldr	r3, [pc, #80]	; (800b7b4 <vPortValidateInterruptPriority+0x70>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	7afa      	ldrb	r2, [r7, #11]
 800b766:	429a      	cmp	r2, r3
 800b768:	d209      	bcs.n	800b77e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	607b      	str	r3, [r7, #4]
 800b77c:	e7fe      	b.n	800b77c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b77e:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <vPortValidateInterruptPriority+0x74>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b786:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <vPortValidateInterruptPriority+0x78>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d909      	bls.n	800b7a2 <vPortValidateInterruptPriority+0x5e>
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	603b      	str	r3, [r7, #0]
 800b7a0:	e7fe      	b.n	800b7a0 <vPortValidateInterruptPriority+0x5c>
	}
 800b7a2:	bf00      	nop
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000e3f0 	.word	0xe000e3f0
 800b7b4:	20000440 	.word	0x20000440
 800b7b8:	e000ed0c 	.word	0xe000ed0c
 800b7bc:	20000444 	.word	0x20000444

0800b7c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	; 0x28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7cc:	f7ff f8ee 	bl	800a9ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7d0:	4b59      	ldr	r3, [pc, #356]	; (800b938 <pvPortMalloc+0x178>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7d8:	f000 f910 	bl	800b9fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7dc:	4b57      	ldr	r3, [pc, #348]	; (800b93c <pvPortMalloc+0x17c>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f040 808c 	bne.w	800b902 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01c      	beq.n	800b82a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f003 0307 	and.w	r3, r3, #7
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d013      	beq.n	800b82a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f023 0307 	bic.w	r3, r3, #7
 800b808:	3308      	adds	r3, #8
 800b80a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f003 0307 	and.w	r3, r3, #7
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <pvPortMalloc+0x6a>
 800b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	e7fe      	b.n	800b828 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d068      	beq.n	800b902 <pvPortMalloc+0x142>
 800b830:	4b43      	ldr	r3, [pc, #268]	; (800b940 <pvPortMalloc+0x180>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	429a      	cmp	r2, r3
 800b838:	d863      	bhi.n	800b902 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b83a:	4b42      	ldr	r3, [pc, #264]	; (800b944 <pvPortMalloc+0x184>)
 800b83c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b83e:	4b41      	ldr	r3, [pc, #260]	; (800b944 <pvPortMalloc+0x184>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b844:	e004      	b.n	800b850 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	429a      	cmp	r2, r3
 800b858:	d903      	bls.n	800b862 <pvPortMalloc+0xa2>
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1f1      	bne.n	800b846 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b862:	4b35      	ldr	r3, [pc, #212]	; (800b938 <pvPortMalloc+0x178>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b868:	429a      	cmp	r2, r3
 800b86a:	d04a      	beq.n	800b902 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2208      	movs	r2, #8
 800b872:	4413      	add	r3, r2
 800b874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	685a      	ldr	r2, [r3, #4]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	1ad2      	subs	r2, r2, r3
 800b886:	2308      	movs	r3, #8
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d91e      	bls.n	800b8cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4413      	add	r3, r2
 800b894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	f003 0307 	and.w	r3, r3, #7
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d009      	beq.n	800b8b4 <pvPortMalloc+0xf4>
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	613b      	str	r3, [r7, #16]
 800b8b2:	e7fe      	b.n	800b8b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	1ad2      	subs	r2, r2, r3
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8c6:	69b8      	ldr	r0, [r7, #24]
 800b8c8:	f000 f8fa 	bl	800bac0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8cc:	4b1c      	ldr	r3, [pc, #112]	; (800b940 <pvPortMalloc+0x180>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	4a1a      	ldr	r2, [pc, #104]	; (800b940 <pvPortMalloc+0x180>)
 800b8d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8da:	4b19      	ldr	r3, [pc, #100]	; (800b940 <pvPortMalloc+0x180>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <pvPortMalloc+0x188>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d203      	bcs.n	800b8ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8e6:	4b16      	ldr	r3, [pc, #88]	; (800b940 <pvPortMalloc+0x180>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a17      	ldr	r2, [pc, #92]	; (800b948 <pvPortMalloc+0x188>)
 800b8ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	4b12      	ldr	r3, [pc, #72]	; (800b93c <pvPortMalloc+0x17c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	431a      	orrs	r2, r3
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	2200      	movs	r2, #0
 800b900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b902:	f7ff f861 	bl	800a9c8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b90c:	f7f4 fe02 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	f003 0307 	and.w	r3, r3, #7
 800b916:	2b00      	cmp	r3, #0
 800b918:	d009      	beq.n	800b92e <pvPortMalloc+0x16e>
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e7fe      	b.n	800b92c <pvPortMalloc+0x16c>
	return pvReturn;
 800b92e:	69fb      	ldr	r3, [r7, #28]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3728      	adds	r7, #40	; 0x28
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20008450 	.word	0x20008450
 800b93c:	2000845c 	.word	0x2000845c
 800b940:	20008454 	.word	0x20008454
 800b944:	20008448 	.word	0x20008448
 800b948:	20008458 	.word	0x20008458

0800b94c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d046      	beq.n	800b9ec <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b95e:	2308      	movs	r3, #8
 800b960:	425b      	negs	r3, r3
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	4413      	add	r3, r2
 800b966:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	4b20      	ldr	r3, [pc, #128]	; (800b9f4 <vPortFree+0xa8>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4013      	ands	r3, r2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d109      	bne.n	800b98e <vPortFree+0x42>
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	e7fe      	b.n	800b98c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d009      	beq.n	800b9aa <vPortFree+0x5e>
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60bb      	str	r3, [r7, #8]
 800b9a8:	e7fe      	b.n	800b9a8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <vPortFree+0xa8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d019      	beq.n	800b9ec <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d115      	bne.n	800b9ec <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <vPortFree+0xa8>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	43db      	mvns	r3, r3
 800b9ca:	401a      	ands	r2, r3
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9d0:	f7fe ffec 	bl	800a9ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	4b07      	ldr	r3, [pc, #28]	; (800b9f8 <vPortFree+0xac>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4413      	add	r3, r2
 800b9de:	4a06      	ldr	r2, [pc, #24]	; (800b9f8 <vPortFree+0xac>)
 800b9e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9e2:	6938      	ldr	r0, [r7, #16]
 800b9e4:	f000 f86c 	bl	800bac0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b9e8:	f7fe ffee 	bl	800a9c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9ec:	bf00      	nop
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	2000845c 	.word	0x2000845c
 800b9f8:	20008454 	.word	0x20008454

0800b9fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba08:	4b27      	ldr	r3, [pc, #156]	; (800baa8 <prvHeapInit+0xac>)
 800ba0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00c      	beq.n	800ba30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3307      	adds	r3, #7
 800ba1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f023 0307 	bic.w	r3, r3, #7
 800ba22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	4a1f      	ldr	r2, [pc, #124]	; (800baa8 <prvHeapInit+0xac>)
 800ba2c:	4413      	add	r3, r2
 800ba2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba34:	4a1d      	ldr	r2, [pc, #116]	; (800baac <prvHeapInit+0xb0>)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba3a:	4b1c      	ldr	r3, [pc, #112]	; (800baac <prvHeapInit+0xb0>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	4413      	add	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba48:	2208      	movs	r2, #8
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f023 0307 	bic.w	r3, r3, #7
 800ba56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4a15      	ldr	r2, [pc, #84]	; (800bab0 <prvHeapInit+0xb4>)
 800ba5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba5e:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <prvHeapInit+0xb4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba66:	4b12      	ldr	r3, [pc, #72]	; (800bab0 <prvHeapInit+0xb4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	1ad2      	subs	r2, r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <prvHeapInit+0xb4>)
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	4a0a      	ldr	r2, [pc, #40]	; (800bab4 <prvHeapInit+0xb8>)
 800ba8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a09      	ldr	r2, [pc, #36]	; (800bab8 <prvHeapInit+0xbc>)
 800ba92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba94:	4b09      	ldr	r3, [pc, #36]	; (800babc <prvHeapInit+0xc0>)
 800ba96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba9a:	601a      	str	r2, [r3, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	20000448 	.word	0x20000448
 800baac:	20008448 	.word	0x20008448
 800bab0:	20008450 	.word	0x20008450
 800bab4:	20008458 	.word	0x20008458
 800bab8:	20008454 	.word	0x20008454
 800babc:	2000845c 	.word	0x2000845c

0800bac0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bac8:	4b28      	ldr	r3, [pc, #160]	; (800bb6c <prvInsertBlockIntoFreeList+0xac>)
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	e002      	b.n	800bad4 <prvInsertBlockIntoFreeList+0x14>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	429a      	cmp	r2, r3
 800badc:	d8f7      	bhi.n	800bace <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	4413      	add	r3, r2
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d108      	bne.n	800bb02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	441a      	add	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d118      	bne.n	800bb48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <prvInsertBlockIntoFreeList+0xb0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d00d      	beq.n	800bb3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	441a      	add	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	e008      	b.n	800bb50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb3e:	4b0c      	ldr	r3, [pc, #48]	; (800bb70 <prvInsertBlockIntoFreeList+0xb0>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e003      	b.n	800bb50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d002      	beq.n	800bb5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb5e:	bf00      	nop
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	20008448 	.word	0x20008448
 800bb70:	20008450 	.word	0x20008450

0800bb74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	490e      	ldr	r1, [pc, #56]	; (800bbb4 <MX_USB_HOST_Init+0x40>)
 800bb7c:	480e      	ldr	r0, [pc, #56]	; (800bbb8 <MX_USB_HOST_Init+0x44>)
 800bb7e:	f7fc f807 	bl	8007b90 <USBH_Init>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb88:	f7f5 f97f 	bl	8000e8a <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800bb8c:	490b      	ldr	r1, [pc, #44]	; (800bbbc <MX_USB_HOST_Init+0x48>)
 800bb8e:	480a      	ldr	r0, [pc, #40]	; (800bbb8 <MX_USB_HOST_Init+0x44>)
 800bb90:	f7fc f8b4 	bl	8007cfc <USBH_RegisterClass>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb9a:	f7f5 f976 	bl	8000e8a <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800bb9e:	4806      	ldr	r0, [pc, #24]	; (800bbb8 <MX_USB_HOST_Init+0x44>)
 800bba0:	f7fc f938 	bl	8007e14 <USBH_Start>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bbaa:	f7f5 f96e 	bl	8000e8a <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bbae:	bf00      	nop
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	0800bbc1 	.word	0x0800bbc1
 800bbb8:	2000870c 	.word	0x2000870c
 800bbbc:	2000000c 	.word	0x2000000c

0800bbc0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	2b04      	cmp	r3, #4
 800bbd2:	d819      	bhi.n	800bc08 <USBH_UserProcess+0x48>
 800bbd4:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <USBH_UserProcess+0x1c>)
 800bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbda:	bf00      	nop
 800bbdc:	0800bc09 	.word	0x0800bc09
 800bbe0:	0800bbf9 	.word	0x0800bbf9
 800bbe4:	0800bc09 	.word	0x0800bc09
 800bbe8:	0800bc01 	.word	0x0800bc01
 800bbec:	0800bbf1 	.word	0x0800bbf1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bbf0:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <USBH_UserProcess+0x58>)
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	701a      	strb	r2, [r3, #0]
  break;
 800bbf6:	e008      	b.n	800bc0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bbf8:	4b07      	ldr	r3, [pc, #28]	; (800bc18 <USBH_UserProcess+0x58>)
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	701a      	strb	r2, [r3, #0]
  break;
 800bbfe:	e004      	b.n	800bc0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bc00:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <USBH_UserProcess+0x58>)
 800bc02:	2201      	movs	r2, #1
 800bc04:	701a      	strb	r2, [r3, #0]
  break;
 800bc06:	e000      	b.n	800bc0a <USBH_UserProcess+0x4a>

  default:
  break;
 800bc08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20008460 	.word	0x20008460

0800bc1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	; 0x28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc24:	f107 0314 	add.w	r3, r7, #20
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	605a      	str	r2, [r3, #4]
 800bc2e:	609a      	str	r2, [r3, #8]
 800bc30:	60da      	str	r2, [r3, #12]
 800bc32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a24      	ldr	r2, [pc, #144]	; (800bccc <HAL_HCD_MspInit+0xb0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d141      	bne.n	800bcc2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc3e:	2300      	movs	r3, #0
 800bc40:	613b      	str	r3, [r7, #16]
 800bc42:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <HAL_HCD_MspInit+0xb4>)
 800bc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc46:	4a22      	ldr	r2, [pc, #136]	; (800bcd0 <HAL_HCD_MspInit+0xb4>)
 800bc48:	f043 0302 	orr.w	r3, r3, #2
 800bc4c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc4e:	4b20      	ldr	r3, [pc, #128]	; (800bcd0 <HAL_HCD_MspInit+0xb4>)
 800bc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc52:	f003 0302 	and.w	r3, r3, #2
 800bc56:	613b      	str	r3, [r7, #16]
 800bc58:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800bc5a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800bc5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc60:	2302      	movs	r3, #2
 800bc62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bc6c:	230c      	movs	r3, #12
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc70:	f107 0314 	add.w	r3, r7, #20
 800bc74:	4619      	mov	r1, r3
 800bc76:	4817      	ldr	r0, [pc, #92]	; (800bcd4 <HAL_HCD_MspInit+0xb8>)
 800bc78:	f7f6 f8fe 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800bc7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc82:	2300      	movs	r3, #0
 800bc84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800bc8a:	f107 0314 	add.w	r3, r7, #20
 800bc8e:	4619      	mov	r1, r3
 800bc90:	4810      	ldr	r0, [pc, #64]	; (800bcd4 <HAL_HCD_MspInit+0xb8>)
 800bc92:	f7f6 f8f1 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	; (800bcd0 <HAL_HCD_MspInit+0xb4>)
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9e:	4a0c      	ldr	r2, [pc, #48]	; (800bcd0 <HAL_HCD_MspInit+0xb4>)
 800bca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bca4:	6313      	str	r3, [r2, #48]	; 0x30
 800bca6:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <HAL_HCD_MspInit+0xb4>)
 800bca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2105      	movs	r1, #5
 800bcb6:	204d      	movs	r0, #77	; 0x4d
 800bcb8:	f7f5 feac 	bl	8001a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bcbc:	204d      	movs	r0, #77	; 0x4d
 800bcbe:	f7f5 fec5 	bl	8001a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bcc2:	bf00      	nop
 800bcc4:	3728      	adds	r7, #40	; 0x28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	40040000 	.word	0x40040000
 800bcd0:	40023800 	.word	0x40023800
 800bcd4:	40020400 	.word	0x40020400

0800bcd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fc fd41 	bl	800876e <USBH_LL_IncTimer>
}
 800bcec:	bf00      	nop
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc fd85 	bl	8008812 <USBH_LL_Connect>
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fc fd9a 	bl	8008858 <USBH_LL_Disconnect>
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70fb      	strb	r3, [r7, #3]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fc fdcf 	bl	80088e6 <USBH_LL_NotifyURBChange>
#endif
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fc fd2f 	bl	80087c2 <USBH_LL_PortEnabled>
}
 800bd64:	bf00      	nop
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fc fd3b 	bl	80087f6 <USBH_LL_PortDisabled>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d132      	bne.n	800be00 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800bd9a:	4a1c      	ldr	r2, [pc, #112]	; (800be0c <USBH_LL_Init+0x84>)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a19      	ldr	r2, [pc, #100]	; (800be0c <USBH_LL_Init+0x84>)
 800bda6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bdaa:	4b18      	ldr	r3, [pc, #96]	; (800be0c <USBH_LL_Init+0x84>)
 800bdac:	4a18      	ldr	r2, [pc, #96]	; (800be10 <USBH_LL_Init+0x88>)
 800bdae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800bdb0:	4b16      	ldr	r3, [pc, #88]	; (800be0c <USBH_LL_Init+0x84>)
 800bdb2:	220c      	movs	r2, #12
 800bdb4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800bdb6:	4b15      	ldr	r3, [pc, #84]	; (800be0c <USBH_LL_Init+0x84>)
 800bdb8:	2201      	movs	r2, #1
 800bdba:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bdbc:	4b13      	ldr	r3, [pc, #76]	; (800be0c <USBH_LL_Init+0x84>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bdc2:	4b12      	ldr	r3, [pc, #72]	; (800be0c <USBH_LL_Init+0x84>)
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bdc8:	4b10      	ldr	r3, [pc, #64]	; (800be0c <USBH_LL_Init+0x84>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bdce:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <USBH_LL_Init+0x84>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bdd4:	4b0d      	ldr	r3, [pc, #52]	; (800be0c <USBH_LL_Init+0x84>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <USBH_LL_Init+0x84>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800bde0:	480a      	ldr	r0, [pc, #40]	; (800be0c <USBH_LL_Init+0x84>)
 800bde2:	f7f6 fa0c 	bl	80021fe <HAL_HCD_Init>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800bdec:	f7f5 f84d 	bl	8000e8a <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800bdf0:	4806      	ldr	r0, [pc, #24]	; (800be0c <USBH_LL_Init+0x84>)
 800bdf2:	f7f6 fe0f 	bl	8002a14 <HAL_HCD_GetCurrentFrame>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7fc fca8 	bl	8008750 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20008af0 	.word	0x20008af0
 800be10:	40040000 	.word	0x40040000

0800be14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f6 fd7a 	bl	8002924 <HAL_HCD_Start>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f95c 	bl	800c0f4 <USBH_Get_USB_Status>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be40:	7bbb      	ldrb	r3, [r7, #14]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be60:	4618      	mov	r0, r3
 800be62:	f7f6 fd82 	bl	800296a <HAL_HCD_Stop>
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 f941 	bl	800c0f4 <USBH_Get_USB_Status>
 800be72:	4603      	mov	r3, r0
 800be74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be76:	7bbb      	ldrb	r3, [r7, #14]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be88:	2301      	movs	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be92:	4618      	mov	r0, r3
 800be94:	f7f6 fdcc 	bl	8002a30 <HAL_HCD_GetCurrentSpeed>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d007      	beq.n	800beae <USBH_LL_GetSpeed+0x2e>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d302      	bcc.n	800bea8 <USBH_LL_GetSpeed+0x28>
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d006      	beq.n	800beb4 <USBH_LL_GetSpeed+0x34>
 800bea6:	e008      	b.n	800beba <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
    break;
 800beac:	e008      	b.n	800bec0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800beae:	2301      	movs	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
    break;
 800beb2:	e005      	b.n	800bec0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800beb4:	2302      	movs	r3, #2
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	e002      	b.n	800bec0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800beba:	2301      	movs	r3, #1
 800bebc:	73fb      	strb	r3, [r7, #15]
    break;
 800bebe:	bf00      	nop
  }
  return  speed;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7f6 fd5f 	bl	80029a4 <HAL_HCD_ResetPort>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800beea:	7bfb      	ldrb	r3, [r7, #15]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f901 	bl	800c0f4 <USBH_Get_USB_Status>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf12:	78fa      	ldrb	r2, [r7, #3]
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7f6 fd67 	bl	80029ea <HAL_HCD_HC_GetXferCount>
 800bf1c:	4603      	mov	r3, r0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf26:	b590      	push	{r4, r7, lr}
 800bf28:	b089      	sub	sp, #36	; 0x24
 800bf2a:	af04      	add	r7, sp, #16
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	461a      	mov	r2, r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	70fb      	strb	r3, [r7, #3]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70bb      	strb	r3, [r7, #2]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bf4e:	787c      	ldrb	r4, [r7, #1]
 800bf50:	78ba      	ldrb	r2, [r7, #2]
 800bf52:	78f9      	ldrb	r1, [r7, #3]
 800bf54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf56:	9302      	str	r3, [sp, #8]
 800bf58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	4623      	mov	r3, r4
 800bf66:	f7f6 f9ac 	bl	80022c2 <HAL_HCD_HC_Init>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 f8bf 	bl	800c0f4 <USBH_Get_USB_Status>
 800bf76:	4603      	mov	r3, r0
 800bf78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd90      	pop	{r4, r7, pc}

0800bf84 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf9e:	78fa      	ldrb	r2, [r7, #3]
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f6 fa25 	bl	80023f2 <HAL_HCD_HC_Halt>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f8a0 	bl	800c0f4 <USBH_Get_USB_Status>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b089      	sub	sp, #36	; 0x24
 800bfc6:	af04      	add	r7, sp, #16
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4611      	mov	r1, r2
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	70fb      	strb	r3, [r7, #3]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70bb      	strb	r3, [r7, #2]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bfea:	787c      	ldrb	r4, [r7, #1]
 800bfec:	78ba      	ldrb	r2, [r7, #2]
 800bfee:	78f9      	ldrb	r1, [r7, #3]
 800bff0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bff8:	9302      	str	r3, [sp, #8]
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	4623      	mov	r3, r4
 800c006:	f7f6 fa17 	bl	8002438 <HAL_HCD_HC_SubmitRequest>
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f86f 	bl	800c0f4 <USBH_Get_USB_Status>
 800c016:	4603      	mov	r3, r0
 800c018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	bd90      	pop	{r4, r7, pc}

0800c024 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c036:	78fa      	ldrb	r2, [r7, #3]
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f6 fcc0 	bl	80029c0 <HAL_HCD_HC_GetURBState>
 800c040:	4603      	mov	r3, r0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	460b      	mov	r3, r1
 800c054:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d103      	bne.n	800c068 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 f872 	bl	800c14c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c068:	20c8      	movs	r0, #200	; 0xc8
 800c06a:	f7f5 fbf9 	bl	8001860 <HAL_Delay>
  return USBH_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
 800c084:	4613      	mov	r3, r2
 800c086:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c08e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	68f9      	ldr	r1, [r7, #12]
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	440b      	add	r3, r1
 800c09e:	333b      	adds	r3, #59	; 0x3b
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c0a6:	78fa      	ldrb	r2, [r7, #3]
 800c0a8:	68f9      	ldr	r1, [r7, #12]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	440b      	add	r3, r1
 800c0b4:	3350      	adds	r3, #80	; 0x50
 800c0b6:	78ba      	ldrb	r2, [r7, #2]
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	e009      	b.n	800c0d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c0bc:	78fa      	ldrb	r2, [r7, #3]
 800c0be:	68f9      	ldr	r1, [r7, #12]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	440b      	add	r3, r1
 800c0ca:	3351      	adds	r3, #81	; 0x51
 800c0cc:	78ba      	ldrb	r2, [r7, #2]
 800c0ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7f5 fbba 	bl	8001860 <HAL_Delay>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	2b03      	cmp	r3, #3
 800c106:	d817      	bhi.n	800c138 <USBH_Get_USB_Status+0x44>
 800c108:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <USBH_Get_USB_Status+0x1c>)
 800c10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10e:	bf00      	nop
 800c110:	0800c121 	.word	0x0800c121
 800c114:	0800c127 	.word	0x0800c127
 800c118:	0800c12d 	.word	0x0800c12d
 800c11c:	0800c133 	.word	0x0800c133
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
    break;
 800c124:	e00b      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c126:	2302      	movs	r3, #2
 800c128:	73fb      	strb	r3, [r7, #15]
    break;
 800c12a:	e008      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c12c:	2301      	movs	r3, #1
 800c12e:	73fb      	strb	r3, [r7, #15]
    break;
 800c130:	e005      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c132:	2302      	movs	r3, #2
 800c134:	73fb      	strb	r3, [r7, #15]
    break;
 800c136:	e002      	b.n	800c13e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c138:	2302      	movs	r3, #2
 800c13a:	73fb      	strb	r3, [r7, #15]
    break;
 800c13c:	bf00      	nop
  }
  return usb_status;
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d102      	bne.n	800c166 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
 800c164:	e001      	b.n	800c16a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	461a      	mov	r2, r3
 800c16e:	2110      	movs	r1, #16
 800c170:	4803      	ldr	r0, [pc, #12]	; (800c180 <MX_DriverVbusHS+0x34>)
 800c172:	f7f6 f82b 	bl	80021cc <HAL_GPIO_WritePin>
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	40020800 	.word	0x40020800

0800c184 <__errno>:
 800c184:	4b01      	ldr	r3, [pc, #4]	; (800c18c <__errno+0x8>)
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	20000030 	.word	0x20000030

0800c190 <__libc_init_array>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	4e0d      	ldr	r6, [pc, #52]	; (800c1c8 <__libc_init_array+0x38>)
 800c194:	4c0d      	ldr	r4, [pc, #52]	; (800c1cc <__libc_init_array+0x3c>)
 800c196:	1ba4      	subs	r4, r4, r6
 800c198:	10a4      	asrs	r4, r4, #2
 800c19a:	2500      	movs	r5, #0
 800c19c:	42a5      	cmp	r5, r4
 800c19e:	d109      	bne.n	800c1b4 <__libc_init_array+0x24>
 800c1a0:	4e0b      	ldr	r6, [pc, #44]	; (800c1d0 <__libc_init_array+0x40>)
 800c1a2:	4c0c      	ldr	r4, [pc, #48]	; (800c1d4 <__libc_init_array+0x44>)
 800c1a4:	f000 fca4 	bl	800caf0 <_init>
 800c1a8:	1ba4      	subs	r4, r4, r6
 800c1aa:	10a4      	asrs	r4, r4, #2
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	42a5      	cmp	r5, r4
 800c1b0:	d105      	bne.n	800c1be <__libc_init_array+0x2e>
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}
 800c1b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1b8:	4798      	blx	r3
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	e7ee      	b.n	800c19c <__libc_init_array+0xc>
 800c1be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1c2:	4798      	blx	r3
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	e7f2      	b.n	800c1ae <__libc_init_array+0x1e>
 800c1c8:	0800ccc8 	.word	0x0800ccc8
 800c1cc:	0800ccc8 	.word	0x0800ccc8
 800c1d0:	0800ccc8 	.word	0x0800ccc8
 800c1d4:	0800cccc 	.word	0x0800cccc

0800c1d8 <malloc>:
 800c1d8:	4b02      	ldr	r3, [pc, #8]	; (800c1e4 <malloc+0xc>)
 800c1da:	4601      	mov	r1, r0
 800c1dc:	6818      	ldr	r0, [r3, #0]
 800c1de:	f000 b86d 	b.w	800c2bc <_malloc_r>
 800c1e2:	bf00      	nop
 800c1e4:	20000030 	.word	0x20000030

0800c1e8 <free>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <free+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f000 b817 	b.w	800c220 <_free_r>
 800c1f2:	bf00      	nop
 800c1f4:	20000030 	.word	0x20000030

0800c1f8 <memcpy>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	1e43      	subs	r3, r0, #1
 800c1fc:	440a      	add	r2, r1
 800c1fe:	4291      	cmp	r1, r2
 800c200:	d100      	bne.n	800c204 <memcpy+0xc>
 800c202:	bd10      	pop	{r4, pc}
 800c204:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c20c:	e7f7      	b.n	800c1fe <memcpy+0x6>

0800c20e <memset>:
 800c20e:	4402      	add	r2, r0
 800c210:	4603      	mov	r3, r0
 800c212:	4293      	cmp	r3, r2
 800c214:	d100      	bne.n	800c218 <memset+0xa>
 800c216:	4770      	bx	lr
 800c218:	f803 1b01 	strb.w	r1, [r3], #1
 800c21c:	e7f9      	b.n	800c212 <memset+0x4>
	...

0800c220 <_free_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4605      	mov	r5, r0
 800c224:	2900      	cmp	r1, #0
 800c226:	d045      	beq.n	800c2b4 <_free_r+0x94>
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f0c      	subs	r4, r1, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfb8      	it	lt
 800c232:	18e4      	addlt	r4, r4, r3
 800c234:	f000 fbae 	bl	800c994 <__malloc_lock>
 800c238:	4a1f      	ldr	r2, [pc, #124]	; (800c2b8 <_free_r+0x98>)
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	4610      	mov	r0, r2
 800c23e:	b933      	cbnz	r3, 800c24e <_free_r+0x2e>
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	6014      	str	r4, [r2, #0]
 800c244:	4628      	mov	r0, r5
 800c246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24a:	f000 bba4 	b.w	800c996 <__malloc_unlock>
 800c24e:	42a3      	cmp	r3, r4
 800c250:	d90c      	bls.n	800c26c <_free_r+0x4c>
 800c252:	6821      	ldr	r1, [r4, #0]
 800c254:	1862      	adds	r2, r4, r1
 800c256:	4293      	cmp	r3, r2
 800c258:	bf04      	itt	eq
 800c25a:	681a      	ldreq	r2, [r3, #0]
 800c25c:	685b      	ldreq	r3, [r3, #4]
 800c25e:	6063      	str	r3, [r4, #4]
 800c260:	bf04      	itt	eq
 800c262:	1852      	addeq	r2, r2, r1
 800c264:	6022      	streq	r2, [r4, #0]
 800c266:	6004      	str	r4, [r0, #0]
 800c268:	e7ec      	b.n	800c244 <_free_r+0x24>
 800c26a:	4613      	mov	r3, r2
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	b10a      	cbz	r2, 800c274 <_free_r+0x54>
 800c270:	42a2      	cmp	r2, r4
 800c272:	d9fa      	bls.n	800c26a <_free_r+0x4a>
 800c274:	6819      	ldr	r1, [r3, #0]
 800c276:	1858      	adds	r0, r3, r1
 800c278:	42a0      	cmp	r0, r4
 800c27a:	d10b      	bne.n	800c294 <_free_r+0x74>
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	4401      	add	r1, r0
 800c280:	1858      	adds	r0, r3, r1
 800c282:	4282      	cmp	r2, r0
 800c284:	6019      	str	r1, [r3, #0]
 800c286:	d1dd      	bne.n	800c244 <_free_r+0x24>
 800c288:	6810      	ldr	r0, [r2, #0]
 800c28a:	6852      	ldr	r2, [r2, #4]
 800c28c:	605a      	str	r2, [r3, #4]
 800c28e:	4401      	add	r1, r0
 800c290:	6019      	str	r1, [r3, #0]
 800c292:	e7d7      	b.n	800c244 <_free_r+0x24>
 800c294:	d902      	bls.n	800c29c <_free_r+0x7c>
 800c296:	230c      	movs	r3, #12
 800c298:	602b      	str	r3, [r5, #0]
 800c29a:	e7d3      	b.n	800c244 <_free_r+0x24>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	1821      	adds	r1, r4, r0
 800c2a0:	428a      	cmp	r2, r1
 800c2a2:	bf04      	itt	eq
 800c2a4:	6811      	ldreq	r1, [r2, #0]
 800c2a6:	6852      	ldreq	r2, [r2, #4]
 800c2a8:	6062      	str	r2, [r4, #4]
 800c2aa:	bf04      	itt	eq
 800c2ac:	1809      	addeq	r1, r1, r0
 800c2ae:	6021      	streq	r1, [r4, #0]
 800c2b0:	605c      	str	r4, [r3, #4]
 800c2b2:	e7c7      	b.n	800c244 <_free_r+0x24>
 800c2b4:	bd38      	pop	{r3, r4, r5, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20008464 	.word	0x20008464

0800c2bc <_malloc_r>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	1ccd      	adds	r5, r1, #3
 800c2c0:	f025 0503 	bic.w	r5, r5, #3
 800c2c4:	3508      	adds	r5, #8
 800c2c6:	2d0c      	cmp	r5, #12
 800c2c8:	bf38      	it	cc
 800c2ca:	250c      	movcc	r5, #12
 800c2cc:	2d00      	cmp	r5, #0
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	db01      	blt.n	800c2d6 <_malloc_r+0x1a>
 800c2d2:	42a9      	cmp	r1, r5
 800c2d4:	d903      	bls.n	800c2de <_malloc_r+0x22>
 800c2d6:	230c      	movs	r3, #12
 800c2d8:	6033      	str	r3, [r6, #0]
 800c2da:	2000      	movs	r0, #0
 800c2dc:	bd70      	pop	{r4, r5, r6, pc}
 800c2de:	f000 fb59 	bl	800c994 <__malloc_lock>
 800c2e2:	4a21      	ldr	r2, [pc, #132]	; (800c368 <_malloc_r+0xac>)
 800c2e4:	6814      	ldr	r4, [r2, #0]
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	b991      	cbnz	r1, 800c310 <_malloc_r+0x54>
 800c2ea:	4c20      	ldr	r4, [pc, #128]	; (800c36c <_malloc_r+0xb0>)
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	b91b      	cbnz	r3, 800c2f8 <_malloc_r+0x3c>
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f000 f8a1 	bl	800c438 <_sbrk_r>
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f000 f89c 	bl	800c438 <_sbrk_r>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d124      	bne.n	800c34e <_malloc_r+0x92>
 800c304:	230c      	movs	r3, #12
 800c306:	6033      	str	r3, [r6, #0]
 800c308:	4630      	mov	r0, r6
 800c30a:	f000 fb44 	bl	800c996 <__malloc_unlock>
 800c30e:	e7e4      	b.n	800c2da <_malloc_r+0x1e>
 800c310:	680b      	ldr	r3, [r1, #0]
 800c312:	1b5b      	subs	r3, r3, r5
 800c314:	d418      	bmi.n	800c348 <_malloc_r+0x8c>
 800c316:	2b0b      	cmp	r3, #11
 800c318:	d90f      	bls.n	800c33a <_malloc_r+0x7e>
 800c31a:	600b      	str	r3, [r1, #0]
 800c31c:	50cd      	str	r5, [r1, r3]
 800c31e:	18cc      	adds	r4, r1, r3
 800c320:	4630      	mov	r0, r6
 800c322:	f000 fb38 	bl	800c996 <__malloc_unlock>
 800c326:	f104 000b 	add.w	r0, r4, #11
 800c32a:	1d23      	adds	r3, r4, #4
 800c32c:	f020 0007 	bic.w	r0, r0, #7
 800c330:	1ac3      	subs	r3, r0, r3
 800c332:	d0d3      	beq.n	800c2dc <_malloc_r+0x20>
 800c334:	425a      	negs	r2, r3
 800c336:	50e2      	str	r2, [r4, r3]
 800c338:	e7d0      	b.n	800c2dc <_malloc_r+0x20>
 800c33a:	428c      	cmp	r4, r1
 800c33c:	684b      	ldr	r3, [r1, #4]
 800c33e:	bf16      	itet	ne
 800c340:	6063      	strne	r3, [r4, #4]
 800c342:	6013      	streq	r3, [r2, #0]
 800c344:	460c      	movne	r4, r1
 800c346:	e7eb      	b.n	800c320 <_malloc_r+0x64>
 800c348:	460c      	mov	r4, r1
 800c34a:	6849      	ldr	r1, [r1, #4]
 800c34c:	e7cc      	b.n	800c2e8 <_malloc_r+0x2c>
 800c34e:	1cc4      	adds	r4, r0, #3
 800c350:	f024 0403 	bic.w	r4, r4, #3
 800c354:	42a0      	cmp	r0, r4
 800c356:	d005      	beq.n	800c364 <_malloc_r+0xa8>
 800c358:	1a21      	subs	r1, r4, r0
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 f86c 	bl	800c438 <_sbrk_r>
 800c360:	3001      	adds	r0, #1
 800c362:	d0cf      	beq.n	800c304 <_malloc_r+0x48>
 800c364:	6025      	str	r5, [r4, #0]
 800c366:	e7db      	b.n	800c320 <_malloc_r+0x64>
 800c368:	20008464 	.word	0x20008464
 800c36c:	20008468 	.word	0x20008468

0800c370 <_puts_r>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	460e      	mov	r6, r1
 800c374:	4605      	mov	r5, r0
 800c376:	b118      	cbz	r0, 800c380 <_puts_r+0x10>
 800c378:	6983      	ldr	r3, [r0, #24]
 800c37a:	b90b      	cbnz	r3, 800c380 <_puts_r+0x10>
 800c37c:	f000 fa1c 	bl	800c7b8 <__sinit>
 800c380:	69ab      	ldr	r3, [r5, #24]
 800c382:	68ac      	ldr	r4, [r5, #8]
 800c384:	b913      	cbnz	r3, 800c38c <_puts_r+0x1c>
 800c386:	4628      	mov	r0, r5
 800c388:	f000 fa16 	bl	800c7b8 <__sinit>
 800c38c:	4b23      	ldr	r3, [pc, #140]	; (800c41c <_puts_r+0xac>)
 800c38e:	429c      	cmp	r4, r3
 800c390:	d117      	bne.n	800c3c2 <_puts_r+0x52>
 800c392:	686c      	ldr	r4, [r5, #4]
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	071b      	lsls	r3, r3, #28
 800c398:	d51d      	bpl.n	800c3d6 <_puts_r+0x66>
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	b1db      	cbz	r3, 800c3d6 <_puts_r+0x66>
 800c39e:	3e01      	subs	r6, #1
 800c3a0:	68a3      	ldr	r3, [r4, #8]
 800c3a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	60a3      	str	r3, [r4, #8]
 800c3aa:	b9e9      	cbnz	r1, 800c3e8 <_puts_r+0x78>
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da2e      	bge.n	800c40e <_puts_r+0x9e>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	210a      	movs	r1, #10
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f000 f84f 	bl	800c458 <__swbuf_r>
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d011      	beq.n	800c3e2 <_puts_r+0x72>
 800c3be:	200a      	movs	r0, #10
 800c3c0:	e011      	b.n	800c3e6 <_puts_r+0x76>
 800c3c2:	4b17      	ldr	r3, [pc, #92]	; (800c420 <_puts_r+0xb0>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d101      	bne.n	800c3cc <_puts_r+0x5c>
 800c3c8:	68ac      	ldr	r4, [r5, #8]
 800c3ca:	e7e3      	b.n	800c394 <_puts_r+0x24>
 800c3cc:	4b15      	ldr	r3, [pc, #84]	; (800c424 <_puts_r+0xb4>)
 800c3ce:	429c      	cmp	r4, r3
 800c3d0:	bf08      	it	eq
 800c3d2:	68ec      	ldreq	r4, [r5, #12]
 800c3d4:	e7de      	b.n	800c394 <_puts_r+0x24>
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f000 f88f 	bl	800c4fc <__swsetup_r>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d0dd      	beq.n	800c39e <_puts_r+0x2e>
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	da04      	bge.n	800c3f6 <_puts_r+0x86>
 800c3ec:	69a2      	ldr	r2, [r4, #24]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	dc06      	bgt.n	800c400 <_puts_r+0x90>
 800c3f2:	290a      	cmp	r1, #10
 800c3f4:	d004      	beq.n	800c400 <_puts_r+0x90>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	6022      	str	r2, [r4, #0]
 800c3fc:	7019      	strb	r1, [r3, #0]
 800c3fe:	e7cf      	b.n	800c3a0 <_puts_r+0x30>
 800c400:	4622      	mov	r2, r4
 800c402:	4628      	mov	r0, r5
 800c404:	f000 f828 	bl	800c458 <__swbuf_r>
 800c408:	3001      	adds	r0, #1
 800c40a:	d1c9      	bne.n	800c3a0 <_puts_r+0x30>
 800c40c:	e7e9      	b.n	800c3e2 <_puts_r+0x72>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	200a      	movs	r0, #10
 800c412:	1c5a      	adds	r2, r3, #1
 800c414:	6022      	str	r2, [r4, #0]
 800c416:	7018      	strb	r0, [r3, #0]
 800c418:	e7e5      	b.n	800c3e6 <_puts_r+0x76>
 800c41a:	bf00      	nop
 800c41c:	0800cc80 	.word	0x0800cc80
 800c420:	0800cca0 	.word	0x0800cca0
 800c424:	0800cc60 	.word	0x0800cc60

0800c428 <puts>:
 800c428:	4b02      	ldr	r3, [pc, #8]	; (800c434 <puts+0xc>)
 800c42a:	4601      	mov	r1, r0
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	f7ff bf9f 	b.w	800c370 <_puts_r>
 800c432:	bf00      	nop
 800c434:	20000030 	.word	0x20000030

0800c438 <_sbrk_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4c06      	ldr	r4, [pc, #24]	; (800c454 <_sbrk_r+0x1c>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4605      	mov	r5, r0
 800c440:	4608      	mov	r0, r1
 800c442:	6023      	str	r3, [r4, #0]
 800c444:	f7f5 f954 	bl	80016f0 <_sbrk>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_sbrk_r+0x1a>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_sbrk_r+0x1a>
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20008db4 	.word	0x20008db4

0800c458 <__swbuf_r>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	460e      	mov	r6, r1
 800c45c:	4614      	mov	r4, r2
 800c45e:	4605      	mov	r5, r0
 800c460:	b118      	cbz	r0, 800c46a <__swbuf_r+0x12>
 800c462:	6983      	ldr	r3, [r0, #24]
 800c464:	b90b      	cbnz	r3, 800c46a <__swbuf_r+0x12>
 800c466:	f000 f9a7 	bl	800c7b8 <__sinit>
 800c46a:	4b21      	ldr	r3, [pc, #132]	; (800c4f0 <__swbuf_r+0x98>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	d12a      	bne.n	800c4c6 <__swbuf_r+0x6e>
 800c470:	686c      	ldr	r4, [r5, #4]
 800c472:	69a3      	ldr	r3, [r4, #24]
 800c474:	60a3      	str	r3, [r4, #8]
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	071a      	lsls	r2, r3, #28
 800c47a:	d52e      	bpl.n	800c4da <__swbuf_r+0x82>
 800c47c:	6923      	ldr	r3, [r4, #16]
 800c47e:	b363      	cbz	r3, 800c4da <__swbuf_r+0x82>
 800c480:	6923      	ldr	r3, [r4, #16]
 800c482:	6820      	ldr	r0, [r4, #0]
 800c484:	1ac0      	subs	r0, r0, r3
 800c486:	6963      	ldr	r3, [r4, #20]
 800c488:	b2f6      	uxtb	r6, r6
 800c48a:	4283      	cmp	r3, r0
 800c48c:	4637      	mov	r7, r6
 800c48e:	dc04      	bgt.n	800c49a <__swbuf_r+0x42>
 800c490:	4621      	mov	r1, r4
 800c492:	4628      	mov	r0, r5
 800c494:	f000 f926 	bl	800c6e4 <_fflush_r>
 800c498:	bb28      	cbnz	r0, 800c4e6 <__swbuf_r+0x8e>
 800c49a:	68a3      	ldr	r3, [r4, #8]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	60a3      	str	r3, [r4, #8]
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	1c5a      	adds	r2, r3, #1
 800c4a4:	6022      	str	r2, [r4, #0]
 800c4a6:	701e      	strb	r6, [r3, #0]
 800c4a8:	6963      	ldr	r3, [r4, #20]
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	4283      	cmp	r3, r0
 800c4ae:	d004      	beq.n	800c4ba <__swbuf_r+0x62>
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	07db      	lsls	r3, r3, #31
 800c4b4:	d519      	bpl.n	800c4ea <__swbuf_r+0x92>
 800c4b6:	2e0a      	cmp	r6, #10
 800c4b8:	d117      	bne.n	800c4ea <__swbuf_r+0x92>
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f000 f911 	bl	800c6e4 <_fflush_r>
 800c4c2:	b190      	cbz	r0, 800c4ea <__swbuf_r+0x92>
 800c4c4:	e00f      	b.n	800c4e6 <__swbuf_r+0x8e>
 800c4c6:	4b0b      	ldr	r3, [pc, #44]	; (800c4f4 <__swbuf_r+0x9c>)
 800c4c8:	429c      	cmp	r4, r3
 800c4ca:	d101      	bne.n	800c4d0 <__swbuf_r+0x78>
 800c4cc:	68ac      	ldr	r4, [r5, #8]
 800c4ce:	e7d0      	b.n	800c472 <__swbuf_r+0x1a>
 800c4d0:	4b09      	ldr	r3, [pc, #36]	; (800c4f8 <__swbuf_r+0xa0>)
 800c4d2:	429c      	cmp	r4, r3
 800c4d4:	bf08      	it	eq
 800c4d6:	68ec      	ldreq	r4, [r5, #12]
 800c4d8:	e7cb      	b.n	800c472 <__swbuf_r+0x1a>
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 f80d 	bl	800c4fc <__swsetup_r>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d0cc      	beq.n	800c480 <__swbuf_r+0x28>
 800c4e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800cc80 	.word	0x0800cc80
 800c4f4:	0800cca0 	.word	0x0800cca0
 800c4f8:	0800cc60 	.word	0x0800cc60

0800c4fc <__swsetup_r>:
 800c4fc:	4b32      	ldr	r3, [pc, #200]	; (800c5c8 <__swsetup_r+0xcc>)
 800c4fe:	b570      	push	{r4, r5, r6, lr}
 800c500:	681d      	ldr	r5, [r3, #0]
 800c502:	4606      	mov	r6, r0
 800c504:	460c      	mov	r4, r1
 800c506:	b125      	cbz	r5, 800c512 <__swsetup_r+0x16>
 800c508:	69ab      	ldr	r3, [r5, #24]
 800c50a:	b913      	cbnz	r3, 800c512 <__swsetup_r+0x16>
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 f953 	bl	800c7b8 <__sinit>
 800c512:	4b2e      	ldr	r3, [pc, #184]	; (800c5cc <__swsetup_r+0xd0>)
 800c514:	429c      	cmp	r4, r3
 800c516:	d10f      	bne.n	800c538 <__swsetup_r+0x3c>
 800c518:	686c      	ldr	r4, [r5, #4]
 800c51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c51e:	b29a      	uxth	r2, r3
 800c520:	0715      	lsls	r5, r2, #28
 800c522:	d42c      	bmi.n	800c57e <__swsetup_r+0x82>
 800c524:	06d0      	lsls	r0, r2, #27
 800c526:	d411      	bmi.n	800c54c <__swsetup_r+0x50>
 800c528:	2209      	movs	r2, #9
 800c52a:	6032      	str	r2, [r6, #0]
 800c52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	f04f 30ff 	mov.w	r0, #4294967295
 800c536:	e03e      	b.n	800c5b6 <__swsetup_r+0xba>
 800c538:	4b25      	ldr	r3, [pc, #148]	; (800c5d0 <__swsetup_r+0xd4>)
 800c53a:	429c      	cmp	r4, r3
 800c53c:	d101      	bne.n	800c542 <__swsetup_r+0x46>
 800c53e:	68ac      	ldr	r4, [r5, #8]
 800c540:	e7eb      	b.n	800c51a <__swsetup_r+0x1e>
 800c542:	4b24      	ldr	r3, [pc, #144]	; (800c5d4 <__swsetup_r+0xd8>)
 800c544:	429c      	cmp	r4, r3
 800c546:	bf08      	it	eq
 800c548:	68ec      	ldreq	r4, [r5, #12]
 800c54a:	e7e6      	b.n	800c51a <__swsetup_r+0x1e>
 800c54c:	0751      	lsls	r1, r2, #29
 800c54e:	d512      	bpl.n	800c576 <__swsetup_r+0x7a>
 800c550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c552:	b141      	cbz	r1, 800c566 <__swsetup_r+0x6a>
 800c554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c558:	4299      	cmp	r1, r3
 800c55a:	d002      	beq.n	800c562 <__swsetup_r+0x66>
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff fe5f 	bl	800c220 <_free_r>
 800c562:	2300      	movs	r3, #0
 800c564:	6363      	str	r3, [r4, #52]	; 0x34
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c56c:	81a3      	strh	r3, [r4, #12]
 800c56e:	2300      	movs	r3, #0
 800c570:	6063      	str	r3, [r4, #4]
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	f043 0308 	orr.w	r3, r3, #8
 800c57c:	81a3      	strh	r3, [r4, #12]
 800c57e:	6923      	ldr	r3, [r4, #16]
 800c580:	b94b      	cbnz	r3, 800c596 <__swsetup_r+0x9a>
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c58c:	d003      	beq.n	800c596 <__swsetup_r+0x9a>
 800c58e:	4621      	mov	r1, r4
 800c590:	4630      	mov	r0, r6
 800c592:	f000 f9bf 	bl	800c914 <__smakebuf_r>
 800c596:	89a2      	ldrh	r2, [r4, #12]
 800c598:	f012 0301 	ands.w	r3, r2, #1
 800c59c:	d00c      	beq.n	800c5b8 <__swsetup_r+0xbc>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60a3      	str	r3, [r4, #8]
 800c5a2:	6963      	ldr	r3, [r4, #20]
 800c5a4:	425b      	negs	r3, r3
 800c5a6:	61a3      	str	r3, [r4, #24]
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	b953      	cbnz	r3, 800c5c2 <__swsetup_r+0xc6>
 800c5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c5b4:	d1ba      	bne.n	800c52c <__swsetup_r+0x30>
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	0792      	lsls	r2, r2, #30
 800c5ba:	bf58      	it	pl
 800c5bc:	6963      	ldrpl	r3, [r4, #20]
 800c5be:	60a3      	str	r3, [r4, #8]
 800c5c0:	e7f2      	b.n	800c5a8 <__swsetup_r+0xac>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e7f7      	b.n	800c5b6 <__swsetup_r+0xba>
 800c5c6:	bf00      	nop
 800c5c8:	20000030 	.word	0x20000030
 800c5cc:	0800cc80 	.word	0x0800cc80
 800c5d0:	0800cca0 	.word	0x0800cca0
 800c5d4:	0800cc60 	.word	0x0800cc60

0800c5d8 <__sflush_r>:
 800c5d8:	898a      	ldrh	r2, [r1, #12]
 800c5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5de:	4605      	mov	r5, r0
 800c5e0:	0710      	lsls	r0, r2, #28
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	d458      	bmi.n	800c698 <__sflush_r+0xc0>
 800c5e6:	684b      	ldr	r3, [r1, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dc05      	bgt.n	800c5f8 <__sflush_r+0x20>
 800c5ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	dc02      	bgt.n	800c5f8 <__sflush_r+0x20>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5fa:	2e00      	cmp	r6, #0
 800c5fc:	d0f9      	beq.n	800c5f2 <__sflush_r+0x1a>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c604:	682f      	ldr	r7, [r5, #0]
 800c606:	6a21      	ldr	r1, [r4, #32]
 800c608:	602b      	str	r3, [r5, #0]
 800c60a:	d032      	beq.n	800c672 <__sflush_r+0x9a>
 800c60c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	075a      	lsls	r2, r3, #29
 800c612:	d505      	bpl.n	800c620 <__sflush_r+0x48>
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	1ac0      	subs	r0, r0, r3
 800c618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c61a:	b10b      	cbz	r3, 800c620 <__sflush_r+0x48>
 800c61c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c61e:	1ac0      	subs	r0, r0, r3
 800c620:	2300      	movs	r3, #0
 800c622:	4602      	mov	r2, r0
 800c624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c626:	6a21      	ldr	r1, [r4, #32]
 800c628:	4628      	mov	r0, r5
 800c62a:	47b0      	blx	r6
 800c62c:	1c43      	adds	r3, r0, #1
 800c62e:	89a3      	ldrh	r3, [r4, #12]
 800c630:	d106      	bne.n	800c640 <__sflush_r+0x68>
 800c632:	6829      	ldr	r1, [r5, #0]
 800c634:	291d      	cmp	r1, #29
 800c636:	d848      	bhi.n	800c6ca <__sflush_r+0xf2>
 800c638:	4a29      	ldr	r2, [pc, #164]	; (800c6e0 <__sflush_r+0x108>)
 800c63a:	40ca      	lsrs	r2, r1
 800c63c:	07d6      	lsls	r6, r2, #31
 800c63e:	d544      	bpl.n	800c6ca <__sflush_r+0xf2>
 800c640:	2200      	movs	r2, #0
 800c642:	6062      	str	r2, [r4, #4]
 800c644:	04d9      	lsls	r1, r3, #19
 800c646:	6922      	ldr	r2, [r4, #16]
 800c648:	6022      	str	r2, [r4, #0]
 800c64a:	d504      	bpl.n	800c656 <__sflush_r+0x7e>
 800c64c:	1c42      	adds	r2, r0, #1
 800c64e:	d101      	bne.n	800c654 <__sflush_r+0x7c>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b903      	cbnz	r3, 800c656 <__sflush_r+0x7e>
 800c654:	6560      	str	r0, [r4, #84]	; 0x54
 800c656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c658:	602f      	str	r7, [r5, #0]
 800c65a:	2900      	cmp	r1, #0
 800c65c:	d0c9      	beq.n	800c5f2 <__sflush_r+0x1a>
 800c65e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c662:	4299      	cmp	r1, r3
 800c664:	d002      	beq.n	800c66c <__sflush_r+0x94>
 800c666:	4628      	mov	r0, r5
 800c668:	f7ff fdda 	bl	800c220 <_free_r>
 800c66c:	2000      	movs	r0, #0
 800c66e:	6360      	str	r0, [r4, #52]	; 0x34
 800c670:	e7c0      	b.n	800c5f4 <__sflush_r+0x1c>
 800c672:	2301      	movs	r3, #1
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	1c41      	adds	r1, r0, #1
 800c67a:	d1c8      	bne.n	800c60e <__sflush_r+0x36>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0c5      	beq.n	800c60e <__sflush_r+0x36>
 800c682:	2b1d      	cmp	r3, #29
 800c684:	d001      	beq.n	800c68a <__sflush_r+0xb2>
 800c686:	2b16      	cmp	r3, #22
 800c688:	d101      	bne.n	800c68e <__sflush_r+0xb6>
 800c68a:	602f      	str	r7, [r5, #0]
 800c68c:	e7b1      	b.n	800c5f2 <__sflush_r+0x1a>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	e7ad      	b.n	800c5f4 <__sflush_r+0x1c>
 800c698:	690f      	ldr	r7, [r1, #16]
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	d0a9      	beq.n	800c5f2 <__sflush_r+0x1a>
 800c69e:	0793      	lsls	r3, r2, #30
 800c6a0:	680e      	ldr	r6, [r1, #0]
 800c6a2:	bf08      	it	eq
 800c6a4:	694b      	ldreq	r3, [r1, #20]
 800c6a6:	600f      	str	r7, [r1, #0]
 800c6a8:	bf18      	it	ne
 800c6aa:	2300      	movne	r3, #0
 800c6ac:	eba6 0807 	sub.w	r8, r6, r7
 800c6b0:	608b      	str	r3, [r1, #8]
 800c6b2:	f1b8 0f00 	cmp.w	r8, #0
 800c6b6:	dd9c      	ble.n	800c5f2 <__sflush_r+0x1a>
 800c6b8:	4643      	mov	r3, r8
 800c6ba:	463a      	mov	r2, r7
 800c6bc:	6a21      	ldr	r1, [r4, #32]
 800c6be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b0      	blx	r6
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	dc06      	bgt.n	800c6d6 <__sflush_r+0xfe>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ce:	81a3      	strh	r3, [r4, #12]
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	e78e      	b.n	800c5f4 <__sflush_r+0x1c>
 800c6d6:	4407      	add	r7, r0
 800c6d8:	eba8 0800 	sub.w	r8, r8, r0
 800c6dc:	e7e9      	b.n	800c6b2 <__sflush_r+0xda>
 800c6de:	bf00      	nop
 800c6e0:	20400001 	.word	0x20400001

0800c6e4 <_fflush_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	690b      	ldr	r3, [r1, #16]
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	b1db      	cbz	r3, 800c726 <_fflush_r+0x42>
 800c6ee:	b118      	cbz	r0, 800c6f8 <_fflush_r+0x14>
 800c6f0:	6983      	ldr	r3, [r0, #24]
 800c6f2:	b90b      	cbnz	r3, 800c6f8 <_fflush_r+0x14>
 800c6f4:	f000 f860 	bl	800c7b8 <__sinit>
 800c6f8:	4b0c      	ldr	r3, [pc, #48]	; (800c72c <_fflush_r+0x48>)
 800c6fa:	429c      	cmp	r4, r3
 800c6fc:	d109      	bne.n	800c712 <_fflush_r+0x2e>
 800c6fe:	686c      	ldr	r4, [r5, #4]
 800c700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c704:	b17b      	cbz	r3, 800c726 <_fflush_r+0x42>
 800c706:	4621      	mov	r1, r4
 800c708:	4628      	mov	r0, r5
 800c70a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c70e:	f7ff bf63 	b.w	800c5d8 <__sflush_r>
 800c712:	4b07      	ldr	r3, [pc, #28]	; (800c730 <_fflush_r+0x4c>)
 800c714:	429c      	cmp	r4, r3
 800c716:	d101      	bne.n	800c71c <_fflush_r+0x38>
 800c718:	68ac      	ldr	r4, [r5, #8]
 800c71a:	e7f1      	b.n	800c700 <_fflush_r+0x1c>
 800c71c:	4b05      	ldr	r3, [pc, #20]	; (800c734 <_fflush_r+0x50>)
 800c71e:	429c      	cmp	r4, r3
 800c720:	bf08      	it	eq
 800c722:	68ec      	ldreq	r4, [r5, #12]
 800c724:	e7ec      	b.n	800c700 <_fflush_r+0x1c>
 800c726:	2000      	movs	r0, #0
 800c728:	bd38      	pop	{r3, r4, r5, pc}
 800c72a:	bf00      	nop
 800c72c:	0800cc80 	.word	0x0800cc80
 800c730:	0800cca0 	.word	0x0800cca0
 800c734:	0800cc60 	.word	0x0800cc60

0800c738 <std>:
 800c738:	2300      	movs	r3, #0
 800c73a:	b510      	push	{r4, lr}
 800c73c:	4604      	mov	r4, r0
 800c73e:	e9c0 3300 	strd	r3, r3, [r0]
 800c742:	6083      	str	r3, [r0, #8]
 800c744:	8181      	strh	r1, [r0, #12]
 800c746:	6643      	str	r3, [r0, #100]	; 0x64
 800c748:	81c2      	strh	r2, [r0, #14]
 800c74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c74e:	6183      	str	r3, [r0, #24]
 800c750:	4619      	mov	r1, r3
 800c752:	2208      	movs	r2, #8
 800c754:	305c      	adds	r0, #92	; 0x5c
 800c756:	f7ff fd5a 	bl	800c20e <memset>
 800c75a:	4b05      	ldr	r3, [pc, #20]	; (800c770 <std+0x38>)
 800c75c:	6263      	str	r3, [r4, #36]	; 0x24
 800c75e:	4b05      	ldr	r3, [pc, #20]	; (800c774 <std+0x3c>)
 800c760:	62a3      	str	r3, [r4, #40]	; 0x28
 800c762:	4b05      	ldr	r3, [pc, #20]	; (800c778 <std+0x40>)
 800c764:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c766:	4b05      	ldr	r3, [pc, #20]	; (800c77c <std+0x44>)
 800c768:	6224      	str	r4, [r4, #32]
 800c76a:	6323      	str	r3, [r4, #48]	; 0x30
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	bf00      	nop
 800c770:	0800c999 	.word	0x0800c999
 800c774:	0800c9bb 	.word	0x0800c9bb
 800c778:	0800c9f3 	.word	0x0800c9f3
 800c77c:	0800ca17 	.word	0x0800ca17

0800c780 <_cleanup_r>:
 800c780:	4901      	ldr	r1, [pc, #4]	; (800c788 <_cleanup_r+0x8>)
 800c782:	f000 b885 	b.w	800c890 <_fwalk_reent>
 800c786:	bf00      	nop
 800c788:	0800c6e5 	.word	0x0800c6e5

0800c78c <__sfmoreglue>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	1e4a      	subs	r2, r1, #1
 800c790:	2568      	movs	r5, #104	; 0x68
 800c792:	4355      	muls	r5, r2
 800c794:	460e      	mov	r6, r1
 800c796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c79a:	f7ff fd8f 	bl	800c2bc <_malloc_r>
 800c79e:	4604      	mov	r4, r0
 800c7a0:	b140      	cbz	r0, 800c7b4 <__sfmoreglue+0x28>
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	e9c0 1600 	strd	r1, r6, [r0]
 800c7a8:	300c      	adds	r0, #12
 800c7aa:	60a0      	str	r0, [r4, #8]
 800c7ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7b0:	f7ff fd2d 	bl	800c20e <memset>
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	bd70      	pop	{r4, r5, r6, pc}

0800c7b8 <__sinit>:
 800c7b8:	6983      	ldr	r3, [r0, #24]
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	4604      	mov	r4, r0
 800c7be:	bb33      	cbnz	r3, 800c80e <__sinit+0x56>
 800c7c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c7c4:	6503      	str	r3, [r0, #80]	; 0x50
 800c7c6:	4b12      	ldr	r3, [pc, #72]	; (800c810 <__sinit+0x58>)
 800c7c8:	4a12      	ldr	r2, [pc, #72]	; (800c814 <__sinit+0x5c>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	6282      	str	r2, [r0, #40]	; 0x28
 800c7ce:	4298      	cmp	r0, r3
 800c7d0:	bf04      	itt	eq
 800c7d2:	2301      	moveq	r3, #1
 800c7d4:	6183      	streq	r3, [r0, #24]
 800c7d6:	f000 f81f 	bl	800c818 <__sfp>
 800c7da:	6060      	str	r0, [r4, #4]
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f000 f81b 	bl	800c818 <__sfp>
 800c7e2:	60a0      	str	r0, [r4, #8]
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f000 f817 	bl	800c818 <__sfp>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	60e0      	str	r0, [r4, #12]
 800c7ee:	2104      	movs	r1, #4
 800c7f0:	6860      	ldr	r0, [r4, #4]
 800c7f2:	f7ff ffa1 	bl	800c738 <std>
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	2109      	movs	r1, #9
 800c7fa:	68a0      	ldr	r0, [r4, #8]
 800c7fc:	f7ff ff9c 	bl	800c738 <std>
 800c800:	2202      	movs	r2, #2
 800c802:	2112      	movs	r1, #18
 800c804:	68e0      	ldr	r0, [r4, #12]
 800c806:	f7ff ff97 	bl	800c738 <std>
 800c80a:	2301      	movs	r3, #1
 800c80c:	61a3      	str	r3, [r4, #24]
 800c80e:	bd10      	pop	{r4, pc}
 800c810:	0800cc5c 	.word	0x0800cc5c
 800c814:	0800c781 	.word	0x0800c781

0800c818 <__sfp>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	4b1b      	ldr	r3, [pc, #108]	; (800c888 <__sfp+0x70>)
 800c81c:	681e      	ldr	r6, [r3, #0]
 800c81e:	69b3      	ldr	r3, [r6, #24]
 800c820:	4607      	mov	r7, r0
 800c822:	b913      	cbnz	r3, 800c82a <__sfp+0x12>
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff ffc7 	bl	800c7b8 <__sinit>
 800c82a:	3648      	adds	r6, #72	; 0x48
 800c82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c830:	3b01      	subs	r3, #1
 800c832:	d503      	bpl.n	800c83c <__sfp+0x24>
 800c834:	6833      	ldr	r3, [r6, #0]
 800c836:	b133      	cbz	r3, 800c846 <__sfp+0x2e>
 800c838:	6836      	ldr	r6, [r6, #0]
 800c83a:	e7f7      	b.n	800c82c <__sfp+0x14>
 800c83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c840:	b16d      	cbz	r5, 800c85e <__sfp+0x46>
 800c842:	3468      	adds	r4, #104	; 0x68
 800c844:	e7f4      	b.n	800c830 <__sfp+0x18>
 800c846:	2104      	movs	r1, #4
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ff9f 	bl	800c78c <__sfmoreglue>
 800c84e:	6030      	str	r0, [r6, #0]
 800c850:	2800      	cmp	r0, #0
 800c852:	d1f1      	bne.n	800c838 <__sfp+0x20>
 800c854:	230c      	movs	r3, #12
 800c856:	603b      	str	r3, [r7, #0]
 800c858:	4604      	mov	r4, r0
 800c85a:	4620      	mov	r0, r4
 800c85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c85e:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <__sfp+0x74>)
 800c860:	6665      	str	r5, [r4, #100]	; 0x64
 800c862:	e9c4 5500 	strd	r5, r5, [r4]
 800c866:	60a5      	str	r5, [r4, #8]
 800c868:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c86c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c870:	2208      	movs	r2, #8
 800c872:	4629      	mov	r1, r5
 800c874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c878:	f7ff fcc9 	bl	800c20e <memset>
 800c87c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c884:	e7e9      	b.n	800c85a <__sfp+0x42>
 800c886:	bf00      	nop
 800c888:	0800cc5c 	.word	0x0800cc5c
 800c88c:	ffff0001 	.word	0xffff0001

0800c890 <_fwalk_reent>:
 800c890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c894:	4680      	mov	r8, r0
 800c896:	4689      	mov	r9, r1
 800c898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c89c:	2600      	movs	r6, #0
 800c89e:	b914      	cbnz	r4, 800c8a6 <_fwalk_reent+0x16>
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c8aa:	3f01      	subs	r7, #1
 800c8ac:	d501      	bpl.n	800c8b2 <_fwalk_reent+0x22>
 800c8ae:	6824      	ldr	r4, [r4, #0]
 800c8b0:	e7f5      	b.n	800c89e <_fwalk_reent+0xe>
 800c8b2:	89ab      	ldrh	r3, [r5, #12]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d907      	bls.n	800c8c8 <_fwalk_reent+0x38>
 800c8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	d003      	beq.n	800c8c8 <_fwalk_reent+0x38>
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	47c8      	blx	r9
 800c8c6:	4306      	orrs	r6, r0
 800c8c8:	3568      	adds	r5, #104	; 0x68
 800c8ca:	e7ee      	b.n	800c8aa <_fwalk_reent+0x1a>

0800c8cc <__swhatbuf_r>:
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	460e      	mov	r6, r1
 800c8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d4:	2900      	cmp	r1, #0
 800c8d6:	b096      	sub	sp, #88	; 0x58
 800c8d8:	4614      	mov	r4, r2
 800c8da:	461d      	mov	r5, r3
 800c8dc:	da07      	bge.n	800c8ee <__swhatbuf_r+0x22>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	89b3      	ldrh	r3, [r6, #12]
 800c8e4:	061a      	lsls	r2, r3, #24
 800c8e6:	d410      	bmi.n	800c90a <__swhatbuf_r+0x3e>
 800c8e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ec:	e00e      	b.n	800c90c <__swhatbuf_r+0x40>
 800c8ee:	466a      	mov	r2, sp
 800c8f0:	f000 f8b8 	bl	800ca64 <_fstat_r>
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	dbf2      	blt.n	800c8de <__swhatbuf_r+0x12>
 800c8f8:	9a01      	ldr	r2, [sp, #4]
 800c8fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c902:	425a      	negs	r2, r3
 800c904:	415a      	adcs	r2, r3
 800c906:	602a      	str	r2, [r5, #0]
 800c908:	e7ee      	b.n	800c8e8 <__swhatbuf_r+0x1c>
 800c90a:	2340      	movs	r3, #64	; 0x40
 800c90c:	2000      	movs	r0, #0
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	b016      	add	sp, #88	; 0x58
 800c912:	bd70      	pop	{r4, r5, r6, pc}

0800c914 <__smakebuf_r>:
 800c914:	898b      	ldrh	r3, [r1, #12]
 800c916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c918:	079d      	lsls	r5, r3, #30
 800c91a:	4606      	mov	r6, r0
 800c91c:	460c      	mov	r4, r1
 800c91e:	d507      	bpl.n	800c930 <__smakebuf_r+0x1c>
 800c920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	6123      	str	r3, [r4, #16]
 800c928:	2301      	movs	r3, #1
 800c92a:	6163      	str	r3, [r4, #20]
 800c92c:	b002      	add	sp, #8
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	ab01      	add	r3, sp, #4
 800c932:	466a      	mov	r2, sp
 800c934:	f7ff ffca 	bl	800c8cc <__swhatbuf_r>
 800c938:	9900      	ldr	r1, [sp, #0]
 800c93a:	4605      	mov	r5, r0
 800c93c:	4630      	mov	r0, r6
 800c93e:	f7ff fcbd 	bl	800c2bc <_malloc_r>
 800c942:	b948      	cbnz	r0, 800c958 <__smakebuf_r+0x44>
 800c944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c948:	059a      	lsls	r2, r3, #22
 800c94a:	d4ef      	bmi.n	800c92c <__smakebuf_r+0x18>
 800c94c:	f023 0303 	bic.w	r3, r3, #3
 800c950:	f043 0302 	orr.w	r3, r3, #2
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	e7e3      	b.n	800c920 <__smakebuf_r+0xc>
 800c958:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <__smakebuf_r+0x7c>)
 800c95a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	6020      	str	r0, [r4, #0]
 800c960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c964:	81a3      	strh	r3, [r4, #12]
 800c966:	9b00      	ldr	r3, [sp, #0]
 800c968:	6163      	str	r3, [r4, #20]
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	6120      	str	r0, [r4, #16]
 800c96e:	b15b      	cbz	r3, 800c988 <__smakebuf_r+0x74>
 800c970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c974:	4630      	mov	r0, r6
 800c976:	f000 f887 	bl	800ca88 <_isatty_r>
 800c97a:	b128      	cbz	r0, 800c988 <__smakebuf_r+0x74>
 800c97c:	89a3      	ldrh	r3, [r4, #12]
 800c97e:	f023 0303 	bic.w	r3, r3, #3
 800c982:	f043 0301 	orr.w	r3, r3, #1
 800c986:	81a3      	strh	r3, [r4, #12]
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	431d      	orrs	r5, r3
 800c98c:	81a5      	strh	r5, [r4, #12]
 800c98e:	e7cd      	b.n	800c92c <__smakebuf_r+0x18>
 800c990:	0800c781 	.word	0x0800c781

0800c994 <__malloc_lock>:
 800c994:	4770      	bx	lr

0800c996 <__malloc_unlock>:
 800c996:	4770      	bx	lr

0800c998 <__sread>:
 800c998:	b510      	push	{r4, lr}
 800c99a:	460c      	mov	r4, r1
 800c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a0:	f000 f894 	bl	800cacc <_read_r>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	bfab      	itete	ge
 800c9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c9ac:	181b      	addge	r3, r3, r0
 800c9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9b2:	bfac      	ite	ge
 800c9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9b6:	81a3      	strhlt	r3, [r4, #12]
 800c9b8:	bd10      	pop	{r4, pc}

0800c9ba <__swrite>:
 800c9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9be:	461f      	mov	r7, r3
 800c9c0:	898b      	ldrh	r3, [r1, #12]
 800c9c2:	05db      	lsls	r3, r3, #23
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	4616      	mov	r6, r2
 800c9ca:	d505      	bpl.n	800c9d8 <__swrite+0x1e>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d4:	f000 f868 	bl	800caa8 <_lseek_r>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	463b      	mov	r3, r7
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ee:	f000 b817 	b.w	800ca20 <_write_r>

0800c9f2 <__sseek>:
 800c9f2:	b510      	push	{r4, lr}
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fa:	f000 f855 	bl	800caa8 <_lseek_r>
 800c9fe:	1c43      	adds	r3, r0, #1
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	bf15      	itete	ne
 800ca04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca0e:	81a3      	strheq	r3, [r4, #12]
 800ca10:	bf18      	it	ne
 800ca12:	81a3      	strhne	r3, [r4, #12]
 800ca14:	bd10      	pop	{r4, pc}

0800ca16 <__sclose>:
 800ca16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca1a:	f000 b813 	b.w	800ca44 <_close_r>
	...

0800ca20 <_write_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4c07      	ldr	r4, [pc, #28]	; (800ca40 <_write_r+0x20>)
 800ca24:	4605      	mov	r5, r0
 800ca26:	4608      	mov	r0, r1
 800ca28:	4611      	mov	r1, r2
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6022      	str	r2, [r4, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f7f4 fa0e 	bl	8000e50 <_write>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_write_r+0x1e>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_write_r+0x1e>
 800ca3c:	602b      	str	r3, [r5, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20008db4 	.word	0x20008db4

0800ca44 <_close_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4c06      	ldr	r4, [pc, #24]	; (800ca60 <_close_r+0x1c>)
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	6023      	str	r3, [r4, #0]
 800ca50:	f7f4 fe19 	bl	8001686 <_close>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d102      	bne.n	800ca5e <_close_r+0x1a>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	b103      	cbz	r3, 800ca5e <_close_r+0x1a>
 800ca5c:	602b      	str	r3, [r5, #0]
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	20008db4 	.word	0x20008db4

0800ca64 <_fstat_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4c07      	ldr	r4, [pc, #28]	; (800ca84 <_fstat_r+0x20>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	f7f4 fe14 	bl	800169e <_fstat>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d102      	bne.n	800ca80 <_fstat_r+0x1c>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	b103      	cbz	r3, 800ca80 <_fstat_r+0x1c>
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	bf00      	nop
 800ca84:	20008db4 	.word	0x20008db4

0800ca88 <_isatty_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	4c06      	ldr	r4, [pc, #24]	; (800caa4 <_isatty_r+0x1c>)
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4605      	mov	r5, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	6023      	str	r3, [r4, #0]
 800ca94:	f7f4 fe13 	bl	80016be <_isatty>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_isatty_r+0x1a>
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_isatty_r+0x1a>
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20008db4 	.word	0x20008db4

0800caa8 <_lseek_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4c07      	ldr	r4, [pc, #28]	; (800cac8 <_lseek_r+0x20>)
 800caac:	4605      	mov	r5, r0
 800caae:	4608      	mov	r0, r1
 800cab0:	4611      	mov	r1, r2
 800cab2:	2200      	movs	r2, #0
 800cab4:	6022      	str	r2, [r4, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	f7f4 fe0c 	bl	80016d4 <_lseek>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_lseek_r+0x1e>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_lseek_r+0x1e>
 800cac4:	602b      	str	r3, [r5, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	20008db4 	.word	0x20008db4

0800cacc <_read_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4c07      	ldr	r4, [pc, #28]	; (800caec <_read_r+0x20>)
 800cad0:	4605      	mov	r5, r0
 800cad2:	4608      	mov	r0, r1
 800cad4:	4611      	mov	r1, r2
 800cad6:	2200      	movs	r2, #0
 800cad8:	6022      	str	r2, [r4, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	f7f4 fdb6 	bl	800164c <_read>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_read_r+0x1e>
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	b103      	cbz	r3, 800caea <_read_r+0x1e>
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	20008db4 	.word	0x20008db4

0800caf0 <_init>:
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf2:	bf00      	nop
 800caf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf6:	bc08      	pop	{r3}
 800caf8:	469e      	mov	lr, r3
 800cafa:	4770      	bx	lr

0800cafc <_fini>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	bf00      	nop
 800cb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb02:	bc08      	pop	{r3}
 800cb04:	469e      	mov	lr, r3
 800cb06:	4770      	bx	lr
