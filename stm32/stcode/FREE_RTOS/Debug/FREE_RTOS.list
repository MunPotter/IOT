
FREE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  20000074  08004240  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010dc  08004240  000210dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e37  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a81  00000000  00000000  00031ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  00034958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00035a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001962b  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d14a  00000000  00000000  0004ffab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009323f  00000000  00000000  0005d0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be0  00000000  00000000  000f03b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004054 	.word	0x08004054

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004054 	.word	0x08004054

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000190:	f003 0301 	and.w	r3, r3, #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	d013      	beq.n	80001c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000198:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800019c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d00b      	beq.n	80001c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001a8:	e000      	b.n	80001ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80001aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f9      	beq.n	80001aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	b2d2      	uxtb	r2, r2
 80001be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001c0:	687b      	ldr	r3, [r7, #4]
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	370c      	adds	r7, #12
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b5b0      	push	{r4, r5, r7, lr}
 80001ce:	b08e      	sub	sp, #56	; 0x38
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb59 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f851 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8bd 	bl	8000358 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001de:	f000 f891 	bl	8000304 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 80001e2:	4b1e      	ldr	r3, [pc, #120]	; (800025c <main+0x90>)
 80001e4:	f107 041c 	add.w	r4, r7, #28
 80001e8:	461d      	mov	r5, r3
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001f6:	f107 031c 	add.w	r3, r7, #28
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fe6f 	bl	8001ee0 <osThreadCreate>
 8000202:	4602      	mov	r2, r0
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x94>)
 8000206:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <main+0x98>)
 800020a:	463c      	mov	r4, r7
 800020c:	461d      	mov	r5, r3
 800020e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800021a:	463b      	mov	r3, r7
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fe5e 	bl	8001ee0 <osThreadCreate>
 8000224:	4602      	mov	r2, r0
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <main+0x9c>)
 8000228:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800022a:	f001 fe52 	bl	8001ed2 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 800022e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000232:	480e      	ldr	r0, [pc, #56]	; (800026c <main+0xa0>)
 8000234:	f000 fdce 	bl	8000dd4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000238:	2064      	movs	r0, #100	; 0x64
 800023a:	f000 fb57 	bl	80008ec <HAL_Delay>
	  nLoop++;
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <main+0xa4>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <main+0xa4>)
 8000246:	6013      	str	r3, [r2, #0]
	  printf("I am in ");
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <main+0xa8>)
 800024a:	f003 f815 	bl	8003278 <iprintf>
	  printf("Loop  == %d \n\r", nLoop);
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <main+0xa4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4619      	mov	r1, r3
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <main+0xac>)
 8000256:	f003 f80f 	bl	8003278 <iprintf>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 800025a:	e7e8      	b.n	800022e <main+0x62>
 800025c:	08004094 	.word	0x08004094
 8000260:	20001044 	.word	0x20001044
 8000264:	080040bc 	.word	0x080040bc
 8000268:	20001088 	.word	0x20001088
 800026c:	40011000 	.word	0x40011000
 8000270:	200002e4 	.word	0x200002e4
 8000274:	0800406c 	.word	0x0800406c
 8000278:	08004078 	.word	0x08004078

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 ffec 	bl	8003268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002ba:	2300      	movs	r3, #0
 80002bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fda0 	bl	8000e08 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ce:	f000 f92e 	bl	800052e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 f80c 	bl	8001308 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002f6:	f000 f91a 	bl	800052e <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_USART1_UART_Init+0x50>)
 800030c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800032a:	220c      	movs	r2, #12
 800032c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800033c:	f001 fbfa 	bl	8001b34 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000346:	f000 f8f2 	bl	800052e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20001048 	.word	0x20001048
 8000354:	40013800 	.word	0x40013800

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <MX_GPIO_Init+0xa8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a23      	ldr	r2, [pc, #140]	; (8000400 <MX_GPIO_Init+0xa8>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <MX_GPIO_Init+0xa8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <MX_GPIO_Init+0xa8>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a17      	ldr	r2, [pc, #92]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_GPIO_Init+0xac>)
 80003d4:	f000 fce6 	bl	8000da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_GPIO_Init+0xac>)
 80003f2:	f000 fb7d 	bl	8000af0 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000

08000408 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	480a      	ldr	r0, [pc, #40]	; (8000440 <StartDefaultTask+0x38>)
 8000416:	f000 fcdd 	bl	8000dd4 <HAL_GPIO_TogglePin>
	  nLoop++;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <StartDefaultTask+0x3c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3301      	adds	r3, #1
 8000420:	4a08      	ldr	r2, [pc, #32]	; (8000444 <StartDefaultTask+0x3c>)
 8000422:	6013      	str	r3, [r2, #0]
	  printf("I am in ");
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <StartDefaultTask+0x40>)
 8000426:	f002 ff27 	bl	8003278 <iprintf>
	  printf("task1  == %d \n\r", nLoop);
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <StartDefaultTask+0x3c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	4806      	ldr	r0, [pc, #24]	; (800044c <StartDefaultTask+0x44>)
 8000432:	f002 ff21 	bl	8003278 <iprintf>
    osDelay(500);
 8000436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800043a:	f001 fd9d 	bl	8001f78 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 800043e:	e7e7      	b.n	8000410 <StartDefaultTask+0x8>
 8000440:	40011000 	.word	0x40011000
 8000444:	200002e4 	.word	0x200002e4
 8000448:	0800406c 	.word	0x0800406c
 800044c:	080040d8 	.word	0x080040d8

08000450 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 8000458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045c:	480a      	ldr	r0, [pc, #40]	; (8000488 <StartTask02+0x38>)
 800045e:	f000 fcb9 	bl	8000dd4 <HAL_GPIO_TogglePin>
	  mLoop++;
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <StartTask02+0x3c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	3301      	adds	r3, #1
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <StartTask02+0x3c>)
 800046a:	6013      	str	r3, [r2, #0]
	  printf("I am in ");
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <StartTask02+0x40>)
 800046e:	f002 ff03 	bl	8003278 <iprintf>
	  printf("task2  == %d \n\r", mLoop);
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <StartTask02+0x3c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4619      	mov	r1, r3
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <StartTask02+0x44>)
 800047a:	f002 fefd 	bl	8003278 <iprintf>
    osDelay(500);
 800047e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000482:	f001 fd79 	bl	8001f78 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 8000486:	e7e7      	b.n	8000458 <StartTask02+0x8>
 8000488:	40011000 	.word	0x40011000
 800048c:	200002e8 	.word	0x200002e8
 8000490:	0800406c 	.word	0x0800406c
 8000494:	080040e8 	.word	0x080040e8

08000498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d101      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004aa:	f000 fa03 	bl	80008b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40012c00 	.word	0x40012c00

080004bc <__io_putchar>:


//asynchronous UART transmit function
int __io_putchar(int ch)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 80004ca:	f107 010c 	add.w	r1, r7, #12
 80004ce:	230a      	movs	r3, #10
 80004d0:	2201      	movs	r2, #1
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <__io_putchar+0x28>)
 80004d4:	f001 fb7b 	bl	8001bce <HAL_UART_Transmit>
 return ch;
 80004d8:	687b      	ldr	r3, [r7, #4]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20001048 	.word	0x20001048

080004e8 <_write>:


//writing msg to com

int _write(int file,char *ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e010      	b.n	800051c <_write+0x34>
 {
 __io_putchar(*ptr++);
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	60ba      	str	r2, [r7, #8]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ffda 	bl	80004bc <__io_putchar>
 ITM_SendChar(*ptr++);
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	60ba      	str	r2, [r7, #8]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe35 	bl	8000180 <ITM_SendChar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbea      	blt.n	80004fa <_write+0x12>

 }
return len;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a14      	ldr	r2, [pc, #80]	; (8000598 <HAL_MspInit+0x5c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_MspInit+0x5c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_MspInit+0x5c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x5c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_MspInit+0x60>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_MspInit+0x60>)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <HAL_UART_MspInit+0x8c>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d131      	bne.n	8000624 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_UART_MspInit+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_UART_MspInit+0x90>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_UART_MspInit+0x90>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_UART_MspInit+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_UART_MspInit+0x90>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_UART_MspInit+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <HAL_UART_MspInit+0x94>)
 8000606:	f000 fa73 	bl	8000af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <HAL_UART_MspInit+0x94>)
 8000620:	f000 fa66 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40013800 	.word	0x40013800
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800

08000638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	2019      	movs	r0, #25
 800064e:	f000 fa24 	bl	8000a9a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000652:	2019      	movs	r0, #25
 8000654:	f000 fa3d 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <HAL_InitTick+0x9c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <HAL_InitTick+0x9c>)
 800065e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_InitTick+0x9c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000670:	f107 0210 	add.w	r2, r7, #16
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ffc2 	bl	8001604 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000680:	f000 ffac 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8000684:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <HAL_InitTick+0xa0>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	0c9b      	lsrs	r3, r3, #18
 8000690:	3b01      	subs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_InitTick+0xa4>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <HAL_InitTick+0xa8>)
 8000698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_InitTick+0xa4>)
 800069c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_InitTick+0xa4>)
 80006a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_InitTick+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_InitTick+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <HAL_InitTick+0xa4>)
 80006b6:	f000 fff3 	bl	80016a0 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <HAL_InitTick+0xa4>)
 80006c2:	f001 f845 	bl	8001750 <HAL_TIM_Base_Start_IT>
 80006c6:	4603      	mov	r3, r0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3730      	adds	r7, #48	; 0x30
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	431bde83 	.word	0x431bde83
 80006dc:	2000108c 	.word	0x2000108c
 80006e0:	40012c00 	.word	0x40012c00

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <HardFault_Handler+0x4>

080006f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <MemManage_Handler+0x4>

080006fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <BusFault_Handler+0x4>

08000702 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <UsageFault_Handler+0x4>

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <TIM1_UP_IRQHandler+0x10>)
 800071a:	f001 f86b 	bl	80017f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000108c 	.word	0x2000108c

08000728 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	e00a      	b.n	8000750 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800073a:	f3af 8000 	nop.w
 800073e:	4601      	mov	r1, r0
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	b2ca      	uxtb	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	dbf0      	blt.n	800073a <_read+0x12>
	}

return len;
 8000758:	687b      	ldr	r3, [r7, #4]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
	return -1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000788:	605a      	str	r2, [r3, #4]
	return 0;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <_isatty>:

int _isatty(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	return 0;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	; (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f002 fd0e 	bl	8003214 <__errno>
 80007f8:	4602      	mov	r2, r0
 80007fa:	230c      	movs	r3, #12
 80007fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20005000 	.word	0x20005000
 8000824:	00000400 	.word	0x00000400
 8000828:	200002ec 	.word	0x200002ec
 800082c:	200010e0 	.word	0x200010e0

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800083c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800083e:	e003      	b.n	8000848 <LoopCopyDataInit>

08000840 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000842:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000844:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000846:	3104      	adds	r1, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000848:	480a      	ldr	r0, [pc, #40]	; (8000874 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800084c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800084e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000850:	d3f6      	bcc.n	8000840 <CopyDataInit>
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000854:	e002      	b.n	800085c <LoopFillZerobss>

08000856 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000858:	f842 3b04 	str.w	r3, [r2], #4

0800085c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800085e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000860:	d3f9      	bcc.n	8000856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000862:	f7ff ffe5 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 fcdb 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fcaf 	bl	80001cc <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r3, =_sidata
 8000870:	080041cc 	.word	0x080041cc
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000878:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800087c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000880:	200010dc 	.word	0x200010dc

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f8f3 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff feca 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fe4a 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_IncTick+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000008 	.word	0x20000008
 80008d4:	200010d4 	.word	0x200010d4

080008d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTick+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	200010d4 	.word	0x200010d4

080008ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f4:	f7ff fff0 	bl	80008d8 <HAL_GetTick>
 80008f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d005      	beq.n	8000912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_Delay+0x40>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000912:	bf00      	nop
 8000914:	f7ff ffe0 	bl	80008d8 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	d8f7      	bhi.n	8000914 <HAL_Delay+0x28>
  {
  }
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008

08000930 <__NVIC_SetPriorityGrouping>:
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_EnableIRQ>:
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db0b      	blt.n	80009be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 021f 	and.w	r2, r3, #31
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <__NVIC_EnableIRQ+0x34>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	2001      	movs	r0, #1
 80009b6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff4f 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff64 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ffb2 	bl	8000a20 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff81 	bl	80009cc <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff57 	bl	8000994 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	e127      	b.n	8000d54 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b04:	2201      	movs	r2, #1
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f040 8116 	bne.w	8000d4e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d034      	beq.n	8000b94 <HAL_GPIO_Init+0xa4>
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d80d      	bhi.n	8000b4a <HAL_GPIO_Init+0x5a>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d02b      	beq.n	8000b8a <HAL_GPIO_Init+0x9a>
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d804      	bhi.n	8000b40 <HAL_GPIO_Init+0x50>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d031      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d01c      	beq.n	8000b78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3e:	e048      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d043      	beq.n	8000bcc <HAL_GPIO_Init+0xdc>
 8000b44:	2b11      	cmp	r3, #17
 8000b46:	d01b      	beq.n	8000b80 <HAL_GPIO_Init+0x90>
          break;
 8000b48:	e043      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b4a:	4a89      	ldr	r2, [pc, #548]	; (8000d70 <HAL_GPIO_Init+0x280>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d026      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
 8000b50:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <HAL_GPIO_Init+0x280>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d806      	bhi.n	8000b64 <HAL_GPIO_Init+0x74>
 8000b56:	4a87      	ldr	r2, [pc, #540]	; (8000d74 <HAL_GPIO_Init+0x284>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d020      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
 8000b5c:	4a86      	ldr	r2, [pc, #536]	; (8000d78 <HAL_GPIO_Init+0x288>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d01d      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
          break;
 8000b62:	e036      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b64:	4a85      	ldr	r2, [pc, #532]	; (8000d7c <HAL_GPIO_Init+0x28c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d019      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
 8000b6a:	4a85      	ldr	r2, [pc, #532]	; (8000d80 <HAL_GPIO_Init+0x290>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d016      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
 8000b70:	4a84      	ldr	r2, [pc, #528]	; (8000d84 <HAL_GPIO_Init+0x294>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0xae>
          break;
 8000b76:	e02c      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e028      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	3304      	adds	r3, #4
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e023      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e01e      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	330c      	adds	r3, #12
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e019      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	623b      	str	r3, [r7, #32]
          break;
 8000baa:	e012      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d105      	bne.n	8000bc0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	611a      	str	r2, [r3, #16]
          break;
 8000bbe:	e008      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	615a      	str	r2, [r3, #20]
          break;
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	2bff      	cmp	r3, #255	; 0xff
 8000bd6:	d801      	bhi.n	8000bdc <HAL_GPIO_Init+0xec>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	e001      	b.n	8000be0 <HAL_GPIO_Init+0xf0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3304      	adds	r3, #4
 8000be0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	2bff      	cmp	r3, #255	; 0xff
 8000be6:	d802      	bhi.n	8000bee <HAL_GPIO_Init+0xfe>
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	e002      	b.n	8000bf4 <HAL_GPIO_Init+0x104>
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	401a      	ands	r2, r3
 8000c06:	6a39      	ldr	r1, [r7, #32]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 8096 	beq.w	8000d4e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4b59      	ldr	r3, [pc, #356]	; (8000d88 <HAL_GPIO_Init+0x298>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a58      	ldr	r2, [pc, #352]	; (8000d88 <HAL_GPIO_Init+0x298>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <HAL_GPIO_Init+0x298>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c3a:	4a54      	ldr	r2, [pc, #336]	; (8000d8c <HAL_GPIO_Init+0x29c>)
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a4b      	ldr	r2, [pc, #300]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d013      	beq.n	8000c8e <HAL_GPIO_Init+0x19e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4a      	ldr	r2, [pc, #296]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00d      	beq.n	8000c8a <HAL_GPIO_Init+0x19a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a49      	ldr	r2, [pc, #292]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x196>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a48      	ldr	r2, [pc, #288]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_GPIO_Init+0x192>
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x1a0>
 8000c82:	2304      	movs	r3, #4
 8000c84:	e004      	b.n	8000c90 <HAL_GPIO_Init+0x1a0>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x1a0>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x1a0>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c92:	f002 0203 	and.w	r2, r2, #3
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	4093      	lsls	r3, r2
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca0:	493a      	ldr	r1, [pc, #232]	; (8000d8c <HAL_GPIO_Init+0x29c>)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cba:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4938      	ldr	r1, [pc, #224]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	600b      	str	r3, [r1, #0]
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc8:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4933      	ldr	r1, [pc, #204]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	492e      	ldr	r1, [pc, #184]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4929      	ldr	r1, [pc, #164]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d006      	beq.n	8000d18 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	4924      	ldr	r1, [pc, #144]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	608b      	str	r3, [r1, #8]
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	491f      	ldr	r1, [pc, #124]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d006      	beq.n	8000d40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	491a      	ldr	r1, [pc, #104]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60cb      	str	r3, [r1, #12]
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	4915      	ldr	r1, [pc, #84]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	3301      	adds	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f47f aed0 	bne.w	8000b04 <HAL_GPIO_Init+0x14>
  }
}
 8000d64:	bf00      	nop
 8000d66:	372c      	adds	r7, #44	; 0x2c
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	10210000 	.word	0x10210000
 8000d74:	10110000 	.word	0x10110000
 8000d78:	10120000 	.word	0x10120000
 8000d7c:	10310000 	.word	0x10310000
 8000d80:	10320000 	.word	0x10320000
 8000d84:	10220000 	.word	0x10220000
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40011400 	.word	0x40011400
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
 8000db0:	4613      	mov	r3, r2
 8000db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db4:	787b      	ldrb	r3, [r7, #1]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc0:	e003      	b.n	8000dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	041a      	lsls	r2, r3, #16
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	611a      	str	r2, [r3, #16]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4013      	ands	r3, r2
 8000dec:	041a      	lsls	r2, r3, #16
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43d9      	mvns	r1, r3
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	400b      	ands	r3, r1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	611a      	str	r2, [r3, #16]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e26c      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 8087 	beq.w	8000f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e28:	4b92      	ldr	r3, [pc, #584]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d00c      	beq.n	8000e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e34:	4b8f      	ldr	r3, [pc, #572]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d112      	bne.n	8000e66 <HAL_RCC_OscConfig+0x5e>
 8000e40:	4b8c      	ldr	r3, [pc, #560]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4c:	d10b      	bne.n	8000e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4e:	4b89      	ldr	r3, [pc, #548]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d06c      	beq.n	8000f34 <HAL_RCC_OscConfig+0x12c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d168      	bne.n	8000f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e246      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6e:	d106      	bne.n	8000e7e <HAL_RCC_OscConfig+0x76>
 8000e70:	4b80      	ldr	r3, [pc, #512]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a7f      	ldr	r2, [pc, #508]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e02e      	b.n	8000edc <HAL_RCC_OscConfig+0xd4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x98>
 8000e86:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7a      	ldr	r2, [pc, #488]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b78      	ldr	r3, [pc, #480]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a77      	ldr	r2, [pc, #476]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e01d      	b.n	8000edc <HAL_RCC_OscConfig+0xd4>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0xbc>
 8000eaa:	4b72      	ldr	r3, [pc, #456]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a71      	ldr	r2, [pc, #452]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b6f      	ldr	r3, [pc, #444]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6e      	ldr	r2, [pc, #440]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0xd4>
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a6a      	ldr	r2, [pc, #424]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b68      	ldr	r3, [pc, #416]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a67      	ldr	r2, [pc, #412]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fcf8 	bl	80008d8 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fcf4 	bl	80008d8 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	; 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e1fa      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0xe4>
 8000f0a:	e014      	b.n	8000f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fce4 	bl	80008d8 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fce0 	bl	80008d8 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e1e6      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x10c>
 8000f32:	e000      	b.n	8000f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d063      	beq.n	800100a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f42:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00b      	beq.n	8000f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f4e:	4b49      	ldr	r3, [pc, #292]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d11c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x18c>
 8000f5a:	4b46      	ldr	r3, [pc, #280]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d116      	bne.n	8000f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d005      	beq.n	8000f7e <HAL_RCC_OscConfig+0x176>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d001      	beq.n	8000f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e1ba      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4939      	ldr	r1, [pc, #228]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	e03a      	b.n	800100a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d020      	beq.n	8000fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fc99 	bl	80008d8 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff fc95 	bl	80008d8 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e19b      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4927      	ldr	r1, [pc, #156]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fc78 	bl	80008d8 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc74 	bl	80008d8 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e17a      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d03a      	beq.n	800108c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d019      	beq.n	8001052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_RCC_OscConfig+0x274>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001024:	f7ff fc58 	bl	80008d8 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102c:	f7ff fc54 	bl	80008d8 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e15a      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_RCC_OscConfig+0x26c>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fb0a 	bl	8001664 <RCC_Delay>
 8001050:	e01c      	b.n	800108c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_RCC_OscConfig+0x274>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fc3e 	bl	80008d8 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105e:	e00f      	b.n	8001080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001060:	f7ff fc3a 	bl	80008d8 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d908      	bls.n	8001080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e140      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	42420000 	.word	0x42420000
 800107c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001080:	4b9e      	ldr	r3, [pc, #632]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e9      	bne.n	8001060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80a6 	beq.w	80011e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	4b97      	ldr	r3, [pc, #604]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10d      	bne.n	80010c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b94      	ldr	r3, [pc, #592]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a93      	ldr	r2, [pc, #588]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b91      	ldr	r3, [pc, #580]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	4b8e      	ldr	r3, [pc, #568]	; (8001300 <HAL_RCC_OscConfig+0x4f8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d2:	4b8b      	ldr	r3, [pc, #556]	; (8001300 <HAL_RCC_OscConfig+0x4f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a8a      	ldr	r2, [pc, #552]	; (8001300 <HAL_RCC_OscConfig+0x4f8>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010de:	f7ff fbfb 	bl	80008d8 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e6:	f7ff fbf7 	bl	80008d8 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b64      	cmp	r3, #100	; 0x64
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e0fd      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f8:	4b81      	ldr	r3, [pc, #516]	; (8001300 <HAL_RCC_OscConfig+0x4f8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d106      	bne.n	800111a <HAL_RCC_OscConfig+0x312>
 800110c:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a7a      	ldr	r2, [pc, #488]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6213      	str	r3, [r2, #32]
 8001118:	e02d      	b.n	8001176 <HAL_RCC_OscConfig+0x36e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x334>
 8001122:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a75      	ldr	r2, [pc, #468]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	6213      	str	r3, [r2, #32]
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a72      	ldr	r2, [pc, #456]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	e01c      	b.n	8001176 <HAL_RCC_OscConfig+0x36e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d10c      	bne.n	800115e <HAL_RCC_OscConfig+0x356>
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a6c      	ldr	r2, [pc, #432]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6213      	str	r3, [r2, #32]
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a69      	ldr	r2, [pc, #420]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6213      	str	r3, [r2, #32]
 800115c:	e00b      	b.n	8001176 <HAL_RCC_OscConfig+0x36e>
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4a66      	ldr	r2, [pc, #408]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	6213      	str	r3, [r2, #32]
 800116a:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a63      	ldr	r2, [pc, #396]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f023 0304 	bic.w	r3, r3, #4
 8001174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d015      	beq.n	80011aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbab 	bl	80008d8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fba7 	bl	80008d8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e0ab      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119c:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0ee      	beq.n	8001186 <HAL_RCC_OscConfig+0x37e>
 80011a8:	e014      	b.n	80011d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fb95 	bl	80008d8 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fb91 	bl	80008d8 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e095      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ee      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d105      	bne.n	80011e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011da:	4b48      	ldr	r3, [pc, #288]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8081 	beq.w	80012f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f0:	4b42      	ldr	r3, [pc, #264]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d061      	beq.n	80012c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d146      	bne.n	8001292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <HAL_RCC_OscConfig+0x4fc>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fb65 	bl	80008d8 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001212:	f7ff fb61 	bl	80008d8 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e067      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f0      	bne.n	8001212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d108      	bne.n	800124c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	492d      	ldr	r1, [pc, #180]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a19      	ldr	r1, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	430b      	orrs	r3, r1
 800125e:	4927      	ldr	r1, [pc, #156]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_OscConfig+0x4fc>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fb35 	bl	80008d8 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001272:	f7ff fb31 	bl	80008d8 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e037      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x46a>
 8001290:	e02f      	b.n	80012f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_RCC_OscConfig+0x4fc>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fb1e 	bl	80008d8 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff fb1a 	bl	80008d8 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e020      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x498>
 80012be:	e018      	b.n	80012f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e013      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	40007000 	.word	0x40007000
 8001304:	42420060 	.word	0x42420060

08001308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0d0      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800131c:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d910      	bls.n	800134c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 0207 	bic.w	r2, r3, #7
 8001332:	4965      	ldr	r1, [pc, #404]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0b8      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d020      	beq.n	800139a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001364:	4b59      	ldr	r3, [pc, #356]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a58      	ldr	r2, [pc, #352]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800136e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a52      	ldr	r2, [pc, #328]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001386:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001388:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	494d      	ldr	r1, [pc, #308]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d040      	beq.n	8001428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d107      	bne.n	80013be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d115      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e07f      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d107      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d109      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e073      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06b      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f023 0203 	bic.w	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4936      	ldr	r1, [pc, #216]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f8:	f7ff fa6e 	bl	80008d8 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001400:	f7ff fa6a 	bl	80008d8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	; 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e053      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 020c 	and.w	r2, r3, #12
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	429a      	cmp	r2, r3
 8001426:	d1eb      	bne.n	8001400 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d210      	bcs.n	8001458 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 0207 	bic.w	r2, r3, #7
 800143e:	4922      	ldr	r1, [pc, #136]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e032      	b.n	80014be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4916      	ldr	r1, [pc, #88]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	490e      	ldr	r1, [pc, #56]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001496:	f000 f821 	bl	80014dc <HAL_RCC_GetSysClockFreq>
 800149a:	4601      	mov	r1, r0
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	fa21 f303 	lsr.w	r3, r1, r3
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_RCC_ClockConfig+0x1cc>)
 80014b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_ClockConfig+0x1d0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f8be 	bl	8000638 <HAL_InitTick>

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	08004114 	.word	0x08004114
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014dc:	b490      	push	{r4, r7}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e4:	1d3c      	adds	r4, r7, #4
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b04      	cmp	r3, #4
 8001514:	d002      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x40>
 8001516:	2b08      	cmp	r3, #8
 8001518:	d003      	beq.n	8001522 <HAL_RCC_GetSysClockFreq+0x46>
 800151a:	e02d      	b.n	8001578 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_RCC_GetSysClockFreq+0xbc>)
 800151e:	623b      	str	r3, [r7, #32]
      break;
 8001520:	e02d      	b.n	800157e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	0c9b      	lsrs	r3, r3, #18
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800152e:	4413      	add	r3, r2
 8001530:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001534:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	0c5b      	lsrs	r3, r3, #17
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800154e:	4413      	add	r3, r2
 8001550:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001554:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_RCC_GetSysClockFreq+0xbc>)
 800155a:	fb02 f203 	mul.w	r2, r2, r3
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	e004      	b.n	8001572 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_RCC_GetSysClockFreq+0xc0>)
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	623b      	str	r3, [r7, #32]
      break;
 8001576:	e002      	b.n	800157e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_RCC_GetSysClockFreq+0xbc>)
 800157a:	623b      	str	r3, [r7, #32]
      break;
 800157c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800157e:	6a3b      	ldr	r3, [r7, #32]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bc90      	pop	{r4, r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	080040f8 	.word	0x080040f8
 8001590:	08004108 	.word	0x08004108
 8001594:	40021000 	.word	0x40021000
 8001598:	007a1200 	.word	0x007a1200
 800159c:	003d0900 	.word	0x003d0900

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000000 	.word	0x20000000

080015b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015b8:	f7ff fff2 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015bc:	4601      	mov	r1, r0
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08004124 	.word	0x08004124

080015dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015e4:	4601      	mov	r1, r0
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	0adb      	lsrs	r3, r3, #11
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	08004124 	.word	0x08004124

08001604 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	220f      	movs	r2, #15
 8001612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_RCC_GetClockConfig+0x58>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_RCC_GetClockConfig+0x58>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_GetClockConfig+0x58>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_RCC_GetClockConfig+0x58>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_GetClockConfig+0x5c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0207 	and.w	r2, r3, #7
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40022000 	.word	0x40022000

08001664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <RCC_Delay+0x34>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <RCC_Delay+0x38>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0a5b      	lsrs	r3, r3, #9
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001680:	bf00      	nop
  }
  while (Delay --);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	60fa      	str	r2, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f9      	bne.n	8001680 <RCC_Delay+0x1c>
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000000 	.word	0x20000000
 800169c:	10624dd3 	.word	0x10624dd3

080016a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e041      	b.n	8001736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f839 	bl	800173e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3304      	adds	r3, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f000 f9b4 	bl	8001a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d001      	beq.n	8001768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e03a      	b.n	80017de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_TIM_Base_Start_IT+0x98>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00e      	beq.n	80017a8 <HAL_TIM_Base_Start_IT+0x58>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001792:	d009      	beq.n	80017a8 <HAL_TIM_Base_Start_IT+0x58>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_TIM_Base_Start_IT+0x9c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d004      	beq.n	80017a8 <HAL_TIM_Base_Start_IT+0x58>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d010      	beq.n	80017dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ca:	e007      	b.n	80017dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40000800 	.word	0x40000800

080017f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d122      	bne.n	8001850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b02      	cmp	r3, #2
 8001816:	d11b      	bne.n	8001850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0202 	mvn.w	r2, #2
 8001820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f8ed 	bl	8001a16 <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f8e0 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f8ef 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b04      	cmp	r3, #4
 800185c:	d122      	bne.n	80018a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b04      	cmp	r3, #4
 800186a:	d11b      	bne.n	80018a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0204 	mvn.w	r2, #4
 8001874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f8c3 	bl	8001a16 <HAL_TIM_IC_CaptureCallback>
 8001890:	e005      	b.n	800189e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8b6 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f8c5 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d122      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d11b      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0208 	mvn.w	r2, #8
 80018c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2204      	movs	r2, #4
 80018ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f899 	bl	8001a16 <HAL_TIM_IC_CaptureCallback>
 80018e4:	e005      	b.n	80018f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f88c 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f89b 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b10      	cmp	r3, #16
 8001904:	d122      	bne.n	800194c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b10      	cmp	r3, #16
 8001912:	d11b      	bne.n	800194c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0210 	mvn.w	r2, #16
 800191c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2208      	movs	r2, #8
 8001922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f86f 	bl	8001a16 <HAL_TIM_IC_CaptureCallback>
 8001938:	e005      	b.n	8001946 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f862 	bl	8001a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f871 	bl	8001a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10e      	bne.n	8001978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d107      	bne.n	8001978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0201 	mvn.w	r2, #1
 8001970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fd90 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	2b80      	cmp	r3, #128	; 0x80
 8001984:	d10e      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001990:	2b80      	cmp	r3, #128	; 0x80
 8001992:	d107      	bne.n	80019a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800199c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f8bf 	bl	8001b22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d10e      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019bc:	2b40      	cmp	r3, #64	; 0x40
 80019be:	d107      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f835 	bl	8001a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0320 	and.w	r3, r3, #32
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d10e      	bne.n	80019fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d107      	bne.n	80019fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0220 	mvn.w	r2, #32
 80019f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f88a 	bl	8001b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <TIM_Base_SetConfig+0xb8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00b      	beq.n	8001a7c <TIM_Base_SetConfig+0x30>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6a:	d007      	beq.n	8001a7c <TIM_Base_SetConfig+0x30>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <TIM_Base_SetConfig+0xbc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d003      	beq.n	8001a7c <TIM_Base_SetConfig+0x30>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <TIM_Base_SetConfig+0xc0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d108      	bne.n	8001a8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <TIM_Base_SetConfig+0xb8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00b      	beq.n	8001aae <TIM_Base_SetConfig+0x62>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d007      	beq.n	8001aae <TIM_Base_SetConfig+0x62>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <TIM_Base_SetConfig+0xbc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d003      	beq.n	8001aae <TIM_Base_SetConfig+0x62>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <TIM_Base_SetConfig+0xc0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d108      	bne.n	8001ac0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <TIM_Base_SetConfig+0xb8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d103      	bne.n	8001af4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	615a      	str	r2, [r3, #20]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40012c00 	.word	0x40012c00
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40000800 	.word	0x40000800

08001b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e03f      	b.n	8001bc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fd20 	bl	80005a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f905 	bl	8001d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b08a      	sub	sp, #40	; 0x28
 8001bd2:	af02      	add	r7, sp, #8
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d17c      	bne.n	8001ce8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_UART_Transmit+0x2c>
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e075      	b.n	8001cea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_UART_Transmit+0x3e>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e06e      	b.n	8001cea <HAL_UART_Transmit+0x11c>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2221      	movs	r2, #33	; 0x21
 8001c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c22:	f7fe fe59 	bl	80008d8 <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3c:	d108      	bne.n	8001c50 <HAL_UART_Transmit+0x82>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d104      	bne.n	8001c50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	e003      	b.n	8001c58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c60:	e02a      	b.n	8001cb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f840 	bl	8001cf2 <UART_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e036      	b.n	8001cea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	3302      	adds	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	e007      	b.n	8001caa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1cf      	bne.n	8001c62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f810 	bl	8001cf2 <UART_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e006      	b.n	8001cea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d02:	e02c      	b.n	8001d5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0a:	d028      	beq.n	8001d5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d12:	f7fe fde1 	bl	80008d8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d21d      	bcs.n	8001d5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e00f      	b.n	8001d7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4013      	ands	r3, r2
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d0c3      	beq.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dc2:	f023 030c 	bic.w	r3, r3, #12
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2c      	ldr	r2, [pc, #176]	; (8001e9c <UART_SetConfig+0x114>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d103      	bne.n	8001df8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001df0:	f7ff fbf4 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	e002      	b.n	8001dfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001df8:	f7ff fbdc 	bl	80015b4 <HAL_RCC_GetPCLK1Freq>
 8001dfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <UART_SetConfig+0x118>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	0119      	lsls	r1, r3, #4
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009a      	lsls	r2, r3, #2
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <UART_SetConfig+0x118>)
 8001e36:	fba3 0302 	umull	r0, r3, r3, r2
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2064      	movs	r0, #100	; 0x64
 8001e3e:	fb00 f303 	mul.w	r3, r0, r3
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	3332      	adds	r3, #50	; 0x32
 8001e48:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <UART_SetConfig+0x118>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	4419      	add	r1, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009a      	lsls	r2, r3, #2
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <UART_SetConfig+0x118>)
 8001e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2064      	movs	r0, #100	; 0x64
 8001e76:	fb00 f303 	mul.w	r3, r0, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	3332      	adds	r3, #50	; 0x32
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <UART_SetConfig+0x118>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	440a      	add	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	51eb851f 	.word	0x51eb851f

08001ea4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb6:	2b84      	cmp	r3, #132	; 0x84
 8001eb8:	d005      	beq.n	8001ec6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001eba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001ed6:	f000 facd 	bl	8002474 <vTaskStartScheduler>
  
  return osOK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <osThreadCreate+0x54>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685c      	ldr	r4, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681d      	ldr	r5, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691e      	ldr	r6, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ffc9 	bl	8001ea4 <makeFreeRtosPriority>
 8001f12:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f1c:	9202      	str	r2, [sp, #8]
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	9100      	str	r1, [sp, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	4632      	mov	r2, r6
 8001f26:	4629      	mov	r1, r5
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f000 f8e8 	bl	80020fe <xTaskCreateStatic>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e01c      	b.n	8001f6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685c      	ldr	r4, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f40:	b29e      	uxth	r6, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ffab 	bl	8001ea4 <makeFreeRtosPriority>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4632      	mov	r2, r6
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f000 f926 	bl	80021b0 <xTaskCreate>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <osDelay+0x16>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	e000      	b.n	8001f90 <osDelay+0x18>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fa3b 	bl	800240c <vTaskDelay>
  
  return osOK;
 8001f96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 0208 	add.w	r2, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f103 0208 	add.w	r2, r3, #8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f103 0208 	add.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002052:	d103      	bne.n	800205c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e00c      	b.n	8002076 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3308      	adds	r3, #8
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e002      	b.n	800206a <vListInsert+0x2e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d2f6      	bcs.n	8002064 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6892      	ldr	r2, [r2, #8]
 80020c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6852      	ldr	r2, [r2, #4]
 80020cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d103      	bne.n	80020e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b08e      	sub	sp, #56	; 0x38
 8002102:	af04      	add	r7, sp, #16
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	e7fe      	b.n	8002124 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <xTaskCreateStatic+0x42>
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e7fe      	b.n	800213e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002140:	2354      	movs	r3, #84	; 0x54
 8002142:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b54      	cmp	r3, #84	; 0x54
 8002148:	d009      	beq.n	800215e <xTaskCreateStatic+0x60>
 800214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214e:	f383 8811 	msr	BASEPRI, r3
 8002152:	f3bf 8f6f 	isb	sy
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e7fe      	b.n	800215c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01e      	beq.n	80021a2 <xTaskCreateStatic+0xa4>
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01b      	beq.n	80021a2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002172:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800217c:	2300      	movs	r3, #0
 800217e:	9303      	str	r3, [sp, #12]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f850 	bl	800223a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800219a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800219c:	f000 f8cc 	bl	8002338 <prvAddNewTaskToReadyList>
 80021a0:	e001      	b.n	80021a6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80021a6:	697b      	ldr	r3, [r7, #20]
	}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fe51 	bl	8002e6c <pvPortMalloc>
 80021ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00e      	beq.n	80021f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021d2:	2054      	movs	r0, #84	; 0x54
 80021d4:	f000 fe4a 	bl	8002e6c <pvPortMalloc>
 80021d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
 80021e6:	e005      	b.n	80021f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80021e8:	6978      	ldr	r0, [r7, #20]
 80021ea:	f000 ff01 	bl	8002ff0 <vPortFree>
 80021ee:	e001      	b.n	80021f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	2300      	movs	r3, #0
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f80e 	bl	800223a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800221e:	69f8      	ldr	r0, [r7, #28]
 8002220:	f000 f88a 	bl	8002338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	e002      	b.n	8002230 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002230:	69bb      	ldr	r3, [r7, #24]
	}
 8002232:	4618      	mov	r0, r3
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b088      	sub	sp, #32
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002252:	3b01      	subs	r3, #1
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f023 0307 	bic.w	r3, r3, #7
 8002260:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	2b00      	cmp	r3, #0
 800226a:	d009      	beq.n	8002280 <prvInitialiseNewTask+0x46>
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e7fe      	b.n	800227e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e012      	b.n	80022ac <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	7819      	ldrb	r1, [r3, #0]
 800228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	3334      	adds	r3, #52	; 0x34
 8002296:	460a      	mov	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d9e9      	bls.n	8002286 <prvInitialiseNewTask+0x4c>
 80022b2:	e000      	b.n	80022b6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80022b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d901      	bls.n	80022c8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022c4:	2306      	movs	r3, #6
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	2200      	movs	r2, #0
 80022d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	3304      	adds	r3, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe7d 	bl	8001fde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	3318      	adds	r3, #24
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fe78 	bl	8001fde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	f1c3 0207 	rsb	r2, r3, #7
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	2200      	movs	r2, #0
 8002308:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f000 fc06 	bl	8002b28 <pxPortInitialiseStack>
 800231c:	4602      	mov	r2, r0
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002340:	f000 fcda 	bl	8002cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <prvAddNewTaskToReadyList+0xb8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <prvAddNewTaskToReadyList+0xb8>)
 800234c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <prvAddNewTaskToReadyList+0xbc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002356:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <prvAddNewTaskToReadyList+0xbc>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <prvAddNewTaskToReadyList+0xb8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d110      	bne.n	8002386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002364:	f000 fabc 	bl	80028e0 <prvInitialiseTaskLists>
 8002368:	e00d      	b.n	8002386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <prvAddNewTaskToReadyList+0xc0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <prvAddNewTaskToReadyList+0xbc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	429a      	cmp	r2, r3
 800237e:	d802      	bhi.n	8002386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002380:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <prvAddNewTaskToReadyList+0xbc>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <prvAddNewTaskToReadyList+0xc4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <prvAddNewTaskToReadyList+0xc4>)
 800238e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2201      	movs	r2, #1
 8002396:	409a      	lsls	r2, r3
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <prvAddNewTaskToReadyList+0xc8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <prvAddNewTaskToReadyList+0xc8>)
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4a15      	ldr	r2, [pc, #84]	; (8002404 <prvAddNewTaskToReadyList+0xcc>)
 80023b0:	441a      	add	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fe1c 	bl	8001ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023be:	f000 fcc9 	bl	8002d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <prvAddNewTaskToReadyList+0xc0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <prvAddNewTaskToReadyList+0xbc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <prvAddNewTaskToReadyList+0xd0>)
 80023da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200003f0 	.word	0x200003f0
 80023f4:	200002f0 	.word	0x200002f0
 80023f8:	200003fc 	.word	0x200003fc
 80023fc:	2000040c 	.word	0x2000040c
 8002400:	200003f8 	.word	0x200003f8
 8002404:	200002f4 	.word	0x200002f4
 8002408:	e000ed04 	.word	0xe000ed04

0800240c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <vTaskDelay+0x60>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <vTaskDelay+0x2e>
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	e7fe      	b.n	8002438 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800243a:	f000 f879 	bl	8002530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800243e:	2100      	movs	r1, #0
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fb0b 	bl	8002a5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002446:	f000 f881 	bl	800254c <xTaskResumeAll>
 800244a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d107      	bne.n	8002462 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <vTaskDelay+0x64>)
 8002454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000418 	.word	0x20000418
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002482:	463a      	mov	r2, r7
 8002484:	1d39      	adds	r1, r7, #4
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd fe60 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002490:	6839      	ldr	r1, [r7, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	9202      	str	r2, [sp, #8]
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	460a      	mov	r2, r1
 80024a2:	491d      	ldr	r1, [pc, #116]	; (8002518 <vTaskStartScheduler+0xa4>)
 80024a4:	481d      	ldr	r0, [pc, #116]	; (800251c <vTaskStartScheduler+0xa8>)
 80024a6:	f7ff fe2a 	bl	80020fe <xTaskCreateStatic>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <vTaskStartScheduler+0xac>)
 80024ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <vTaskStartScheduler+0xac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80024b8:	2301      	movs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e001      	b.n	80024c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d115      	bne.n	80024f4 <vTaskStartScheduler+0x80>
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <vTaskStartScheduler+0xb0>)
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <vTaskStartScheduler+0xb4>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <vTaskStartScheduler+0xb8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024ee:	f000 fb93 	bl	8002c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024f2:	e00d      	b.n	8002510 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d109      	bne.n	8002510 <vTaskStartScheduler+0x9c>
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e7fe      	b.n	800250e <vTaskStartScheduler+0x9a>
}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	0800410c 	.word	0x0800410c
 800251c:	080028b1 	.word	0x080028b1
 8002520:	20000414 	.word	0x20000414
 8002524:	20000410 	.word	0x20000410
 8002528:	200003fc 	.word	0x200003fc
 800252c:	200003f4 	.word	0x200003f4

08002530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <vTaskSuspendAll+0x18>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a03      	ldr	r2, [pc, #12]	; (8002548 <vTaskSuspendAll+0x18>)
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000418 	.word	0x20000418

0800254c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <xTaskResumeAll+0x114>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <xTaskResumeAll+0x2a>
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	e7fe      	b.n	8002574 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002576:	f000 fbbf 	bl	8002cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <xTaskResumeAll+0x114>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	4a37      	ldr	r2, [pc, #220]	; (8002660 <xTaskResumeAll+0x114>)
 8002582:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <xTaskResumeAll+0x114>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d161      	bne.n	8002650 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <xTaskResumeAll+0x118>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05d      	beq.n	8002650 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002594:	e02e      	b.n	80025f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <xTaskResumeAll+0x11c>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3318      	adds	r3, #24
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fd82 	bl	80020ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd7d 	bl	80020ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <xTaskResumeAll+0x120>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	4a2a      	ldr	r2, [pc, #168]	; (800266c <xTaskResumeAll+0x120>)
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <xTaskResumeAll+0x124>)
 80025d2:	441a      	add	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f7ff fd0b 	bl	8001ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <xTaskResumeAll+0x128>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <xTaskResumeAll+0x12c>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <xTaskResumeAll+0x11c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1cc      	bne.n	8002596 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002602:	f000 fa07 	bl	8002a14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <xTaskResumeAll+0x130>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002612:	f000 f837 	bl	8002684 <xTaskIncrementTick>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <xTaskResumeAll+0x12c>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3b01      	subs	r3, #1
 8002626:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f1      	bne.n	8002612 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <xTaskResumeAll+0x130>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <xTaskResumeAll+0x12c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800263c:	2301      	movs	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <xTaskResumeAll+0x134>)
 8002642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002650:	f000 fb80 	bl	8002d54 <vPortExitCritical>

	return xAlreadyYielded;
 8002654:	68bb      	ldr	r3, [r7, #8]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000418 	.word	0x20000418
 8002664:	200003f0 	.word	0x200003f0
 8002668:	200003b0 	.word	0x200003b0
 800266c:	200003f8 	.word	0x200003f8
 8002670:	200002f4 	.word	0x200002f4
 8002674:	200002f0 	.word	0x200002f0
 8002678:	20000404 	.word	0x20000404
 800267c:	20000400 	.word	0x20000400
 8002680:	e000ed04 	.word	0xe000ed04

08002684 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <xTaskIncrementTick+0x14c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 808c 	bne.w	80027b0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002698:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <xTaskIncrementTick+0x150>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <xTaskIncrementTick+0x150>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11f      	bne.n	80026ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80026ac:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <xTaskIncrementTick+0x154>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <xTaskIncrementTick+0x46>
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	e7fe      	b.n	80026c8 <xTaskIncrementTick+0x44>
 80026ca:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <xTaskIncrementTick+0x154>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <xTaskIncrementTick+0x158>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a40      	ldr	r2, [pc, #256]	; (80027d8 <xTaskIncrementTick+0x154>)
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4a40      	ldr	r2, [pc, #256]	; (80027dc <xTaskIncrementTick+0x158>)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <xTaskIncrementTick+0x15c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a3e      	ldr	r2, [pc, #248]	; (80027e0 <xTaskIncrementTick+0x15c>)
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	f000 f994 	bl	8002a14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026ec:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <xTaskIncrementTick+0x160>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d34d      	bcc.n	8002792 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <xTaskIncrementTick+0x154>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <xTaskIncrementTick+0x80>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <xTaskIncrementTick+0x82>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <xTaskIncrementTick+0x160>)
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	601a      	str	r2, [r3, #0]
					break;
 8002712:	e03e      	b.n	8002792 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <xTaskIncrementTick+0x154>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d203      	bcs.n	8002734 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <xTaskIncrementTick+0x160>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
						break;
 8002732:	e02e      	b.n	8002792 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3304      	adds	r3, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fcb7 	bl	80020ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3318      	adds	r3, #24
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fcae 	bl	80020ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2201      	movs	r2, #1
 8002756:	409a      	lsls	r2, r3
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <xTaskIncrementTick+0x164>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <xTaskIncrementTick+0x164>)
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <xTaskIncrementTick+0x168>)
 8002770:	441a      	add	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3304      	adds	r3, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f7ff fc3c 	bl	8001ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <xTaskIncrementTick+0x16c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d3b4      	bcc.n	80026f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002790:	e7b1      	b.n	80026f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <xTaskIncrementTick+0x16c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	4914      	ldr	r1, [pc, #80]	; (80027ec <xTaskIncrementTick+0x168>)
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d907      	bls.n	80027ba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e004      	b.n	80027ba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <xTaskIncrementTick+0x170>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <xTaskIncrementTick+0x170>)
 80027b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <xTaskIncrementTick+0x174>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80027c6:	697b      	ldr	r3, [r7, #20]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000418 	.word	0x20000418
 80027d4:	200003f4 	.word	0x200003f4
 80027d8:	200003a8 	.word	0x200003a8
 80027dc:	200003ac 	.word	0x200003ac
 80027e0:	20000408 	.word	0x20000408
 80027e4:	20000410 	.word	0x20000410
 80027e8:	200003f8 	.word	0x200003f8
 80027ec:	200002f4 	.word	0x200002f4
 80027f0:	200002f0 	.word	0x200002f0
 80027f4:	20000400 	.word	0x20000400
 80027f8:	20000404 	.word	0x20000404

080027fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <vTaskSwitchContext+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <vTaskSwitchContext+0xa4>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002810:	e03e      	b.n	8002890 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <vTaskSwitchContext+0xa4>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <vTaskSwitchContext+0xa8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	f1c3 031f 	rsb	r3, r3, #31
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	491e      	ldr	r1, [pc, #120]	; (80028a8 <vTaskSwitchContext+0xac>)
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e7fe      	b.n	8002854 <vTaskSwitchContext+0x58>
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <vTaskSwitchContext+0xac>)
 8002862:	4413      	add	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	3308      	adds	r3, #8
 8002878:	429a      	cmp	r2, r3
 800287a:	d104      	bne.n	8002886 <vTaskSwitchContext+0x8a>
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <vTaskSwitchContext+0xb0>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000418 	.word	0x20000418
 80028a0:	20000404 	.word	0x20000404
 80028a4:	200003f8 	.word	0x200003f8
 80028a8:	200002f4 	.word	0x200002f4
 80028ac:	200002f0 	.word	0x200002f0

080028b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80028b8:	f000 f852 	bl	8002960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <prvIdleTask+0x28>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d9f9      	bls.n	80028b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <prvIdleTask+0x2c>)
 80028c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80028d4:	e7f0      	b.n	80028b8 <prvIdleTask+0x8>
 80028d6:	bf00      	nop
 80028d8:	200002f4 	.word	0x200002f4
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	e00c      	b.n	8002906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <prvInitialiseTaskLists+0x60>)
 80028f8:	4413      	add	r3, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fb50 	bl	8001fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d9ef      	bls.n	80028ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <prvInitialiseTaskLists+0x64>)
 800290e:	f7ff fb47 	bl	8001fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002912:	480d      	ldr	r0, [pc, #52]	; (8002948 <prvInitialiseTaskLists+0x68>)
 8002914:	f7ff fb44 	bl	8001fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002918:	480c      	ldr	r0, [pc, #48]	; (800294c <prvInitialiseTaskLists+0x6c>)
 800291a:	f7ff fb41 	bl	8001fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800291e:	480c      	ldr	r0, [pc, #48]	; (8002950 <prvInitialiseTaskLists+0x70>)
 8002920:	f7ff fb3e 	bl	8001fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <prvInitialiseTaskLists+0x74>)
 8002926:	f7ff fb3b 	bl	8001fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <prvInitialiseTaskLists+0x78>)
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <prvInitialiseTaskLists+0x64>)
 800292e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <prvInitialiseTaskLists+0x7c>)
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <prvInitialiseTaskLists+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200002f4 	.word	0x200002f4
 8002944:	20000380 	.word	0x20000380
 8002948:	20000394 	.word	0x20000394
 800294c:	200003b0 	.word	0x200003b0
 8002950:	200003c4 	.word	0x200003c4
 8002954:	200003dc 	.word	0x200003dc
 8002958:	200003a8 	.word	0x200003a8
 800295c:	200003ac 	.word	0x200003ac

08002960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002966:	e019      	b.n	800299c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002968:	f000 f9c6 	bl	8002cf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <prvCheckTasksWaitingTermination+0x4c>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fb97 	bl	80020ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <prvCheckTasksWaitingTermination+0x50>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3b01      	subs	r3, #1
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <prvCheckTasksWaitingTermination+0x50>)
 8002986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <prvCheckTasksWaitingTermination+0x54>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <prvCheckTasksWaitingTermination+0x54>)
 8002990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002992:	f000 f9df 	bl	8002d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f80e 	bl	80029b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <prvCheckTasksWaitingTermination+0x54>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e1      	bne.n	8002968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200003c4 	.word	0x200003c4
 80029b0:	200003f0 	.word	0x200003f0
 80029b4:	200003d8 	.word	0x200003d8

080029b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fb0e 	bl	8002ff0 <vPortFree>
				vPortFree( pxTCB );
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb0b 	bl	8002ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80029da:	e017      	b.n	8002a0c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d103      	bne.n	80029ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fb02 	bl	8002ff0 <vPortFree>
	}
 80029ec:	e00e      	b.n	8002a0c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d009      	beq.n	8002a0c <prvDeleteTCB+0x54>
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e7fe      	b.n	8002a0a <prvDeleteTCB+0x52>
	}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <prvResetNextTaskUnblockTime+0x40>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <prvResetNextTaskUnblockTime+0x14>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <prvResetNextTaskUnblockTime+0x16>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <prvResetNextTaskUnblockTime+0x44>)
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002a36:	e008      	b.n	8002a4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <prvResetNextTaskUnblockTime+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <prvResetNextTaskUnblockTime+0x44>)
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	200003a8 	.word	0x200003a8
 8002a58:	20000410 	.word	0x20000410

08002a5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fb1a 	bl	80020ac <uxListRemove>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10b      	bne.n	8002a96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2201      	movs	r2, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4013      	ands	r3, r2
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d10a      	bne.n	8002ab4 <prvAddCurrentTaskToDelayedList+0x58>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481a      	ldr	r0, [pc, #104]	; (8002b18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002aae:	f7ff faa2 	bl	8001ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ab2:	e026      	b.n	8002b02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d209      	bcs.n	8002ae0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f7ff faaf 	bl	800203c <vListInsert>
}
 8002ade:	e010      	b.n	8002b02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f7ff faa5 	bl	800203c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d202      	bcs.n	8002b02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6013      	str	r3, [r2, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200003f4 	.word	0x200003f4
 8002b10:	200002f0 	.word	0x200002f0
 8002b14:	200003f8 	.word	0x200003f8
 8002b18:	200003dc 	.word	0x200003dc
 8002b1c:	200003ac 	.word	0x200003ac
 8002b20:	200003a8 	.word	0x200003a8
 8002b24:	20000410 	.word	0x20000410

08002b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b04      	subs	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b04      	subs	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f023 0201 	bic.w	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3b04      	subs	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b58:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <pxPortInitialiseStack+0x54>)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3b14      	subs	r3, #20
 8002b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3b20      	subs	r3, #32
 8002b6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b70:	68fb      	ldr	r3, [r7, #12]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	08002b81 	.word	0x08002b81

08002b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <prvTaskExitError+0x4c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d009      	beq.n	8002ba8 <prvTaskExitError+0x28>
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e7fe      	b.n	8002ba6 <prvTaskExitError+0x26>
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002bba:	bf00      	nop
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0fc      	beq.n	8002bbc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	2000000c 	.word	0x2000000c

08002bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <pxCurrentTCBConst2>)
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	6808      	ldr	r0, [r1, #0]
 8002bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bda:	f380 8809 	msr	PSP, r0
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f380 8811 	msr	BASEPRI, r0
 8002bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8002bee:	4770      	bx	lr

08002bf0 <pxCurrentTCBConst2>:
 8002bf0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop

08002bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002bf8:	4806      	ldr	r0, [pc, #24]	; (8002c14 <prvPortStartFirstTask+0x1c>)
 8002bfa:	6800      	ldr	r0, [r0, #0]
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	f380 8808 	msr	MSP, r0
 8002c02:	b662      	cpsie	i
 8002c04:	b661      	cpsie	f
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	df00      	svc	0
 8002c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002c12:	bf00      	nop
 8002c14:	e000ed08 	.word	0xe000ed08

08002c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <xPortStartScheduler+0xcc>)
 8002c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	; 0xff
 8002c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <xPortStartScheduler+0xd0>)
 8002c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c4c:	e009      	b.n	8002c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	4a25      	ldr	r2, [pc, #148]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d0ef      	beq.n	8002c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d009      	beq.n	8002c8e <xPortStartScheduler+0x76>
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	e7fe      	b.n	8002c8c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	4a15      	ldr	r2, [pc, #84]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <xPortStartScheduler+0xd4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca0:	4a12      	ldr	r2, [pc, #72]	; (8002cec <xPortStartScheduler+0xd4>)
 8002ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <xPortStartScheduler+0xd8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <xPortStartScheduler+0xd8>)
 8002cb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <xPortStartScheduler+0xd8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <xPortStartScheduler+0xd8>)
 8002cbe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002cc4:	f000 f8b0 	bl	8002e28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <xPortStartScheduler+0xdc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002cce:	f7ff ff93 	bl	8002bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002cd2:	f7ff fd93 	bl	80027fc <vTaskSwitchContext>
	prvTaskExitError();
 8002cd6:	f7ff ff53 	bl	8002b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	e000e400 	.word	0xe000e400
 8002ce8:	2000041c 	.word	0x2000041c
 8002cec:	20000420 	.word	0x20000420
 8002cf0:	e000ed20 	.word	0xe000ed20
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <vPortEnterCritical+0x54>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <vPortEnterCritical+0x54>)
 8002d18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <vPortEnterCritical+0x54>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10e      	bne.n	8002d40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <vPortEnterCritical+0x58>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <vPortEnterCritical+0x48>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	e7fe      	b.n	8002d3e <vPortEnterCritical+0x46>
	}
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	2000000c 	.word	0x2000000c
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <vPortExitCritical+0x48>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <vPortExitCritical+0x22>
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	e7fe      	b.n	8002d74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <vPortExitCritical+0x48>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <vPortExitCritical+0x48>)
 8002d7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <vPortExitCritical+0x48>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <vPortExitCritical+0x3e>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	2000000c 	.word	0x2000000c

08002da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002da0:	f3ef 8009 	mrs	r0, PSP
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <pxCurrentTCBConst>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002db0:	6010      	str	r0, [r2, #0]
 8002db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002db6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002dba:	f380 8811 	msr	BASEPRI, r0
 8002dbe:	f7ff fd1d 	bl	80027fc <vTaskSwitchContext>
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	6808      	ldr	r0, [r1, #0]
 8002dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002dd6:	f380 8809 	msr	PSP, r0
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	4770      	bx	lr

08002de0 <pxCurrentTCBConst>:
 8002de0:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop

08002de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e00:	f7ff fc40 	bl	8002684 <xTaskIncrementTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <SysTick_Handler+0x3c>)
 8002e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	2300      	movs	r3, #0
 8002e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <vPortSetupTimerInterrupt+0x30>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <vPortSetupTimerInterrupt+0x34>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <vPortSetupTimerInterrupt+0x38>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <vPortSetupTimerInterrupt+0x3c>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <vPortSetupTimerInterrupt+0x40>)
 8002e46:	3b01      	subs	r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e4a:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <vPortSetupTimerInterrupt+0x30>)
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	e000e010 	.word	0xe000e010
 8002e5c:	e000e018 	.word	0xe000e018
 8002e60:	20000000 	.word	0x20000000
 8002e64:	10624dd3 	.word	0x10624dd3
 8002e68:	e000e014 	.word	0xe000e014

08002e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e78:	f7ff fb5a 	bl	8002530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e7c:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <pvPortMalloc+0x170>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e84:	f000 f90c 	bl	80030a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e88:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <pvPortMalloc+0x174>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 808c 	bne.w	8002fae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01c      	beq.n	8002ed6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d013      	beq.n	8002ed6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f023 0307 	bic.w	r3, r3, #7
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <pvPortMalloc+0x6a>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e7fe      	b.n	8002ed4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d068      	beq.n	8002fae <pvPortMalloc+0x142>
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <pvPortMalloc+0x178>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d863      	bhi.n	8002fae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ee6:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <pvPortMalloc+0x17c>)
 8002ee8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <pvPortMalloc+0x17c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ef0:	e004      	b.n	8002efc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d903      	bls.n	8002f0e <pvPortMalloc+0xa2>
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f1      	bne.n	8002ef2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f0e:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <pvPortMalloc+0x170>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d04a      	beq.n	8002fae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	4413      	add	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	2308      	movs	r3, #8
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d91e      	bls.n	8002f78 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <pvPortMalloc+0xf4>
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e7fe      	b.n	8002f5e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad2      	subs	r2, r2, r3
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f72:	69b8      	ldr	r0, [r7, #24]
 8002f74:	f000 f8f6 	bl	8003164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <pvPortMalloc+0x178>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <pvPortMalloc+0x178>)
 8002f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <pvPortMalloc+0x178>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <pvPortMalloc+0x180>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d203      	bcs.n	8002f9a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <pvPortMalloc+0x178>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a15      	ldr	r2, [pc, #84]	; (8002fec <pvPortMalloc+0x180>)
 8002f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <pvPortMalloc+0x174>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002fae:	f7ff facd 	bl	800254c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <pvPortMalloc+0x164>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e7fe      	b.n	8002fce <pvPortMalloc+0x162>
	return pvReturn;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000102c 	.word	0x2000102c
 8002fe0:	20001038 	.word	0x20001038
 8002fe4:	20001030 	.word	0x20001030
 8002fe8:	20001024 	.word	0x20001024
 8002fec:	20001034 	.word	0x20001034

08002ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d046      	beq.n	8003090 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003002:	2308      	movs	r3, #8
 8003004:	425b      	negs	r3, r3
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4413      	add	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <vPortFree+0xa8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <vPortFree+0x42>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e7fe      	b.n	8003030 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <vPortFree+0x5e>
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e7fe      	b.n	800304c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <vPortFree+0xa8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d019      	beq.n	8003090 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d115      	bne.n	8003090 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <vPortFree+0xa8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003074:	f7ff fa5c 	bl	8002530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <vPortFree+0xac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4413      	add	r3, r2
 8003082:	4a06      	ldr	r2, [pc, #24]	; (800309c <vPortFree+0xac>)
 8003084:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003086:	6938      	ldr	r0, [r7, #16]
 8003088:	f000 f86c 	bl	8003164 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800308c:	f7ff fa5e 	bl	800254c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20001038 	.word	0x20001038
 800309c:	20001030 	.word	0x20001030

080030a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80030ac:	4b27      	ldr	r3, [pc, #156]	; (800314c <prvHeapInit+0xac>)
 80030ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3307      	adds	r3, #7
 80030be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0307 	bic.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <prvHeapInit+0xac>)
 80030d0:	4413      	add	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <prvHeapInit+0xb0>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <prvHeapInit+0xb0>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030ec:	2208      	movs	r2, #8
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a15      	ldr	r2, [pc, #84]	; (8003154 <prvHeapInit+0xb4>)
 8003100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <prvHeapInit+0xb4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <prvHeapInit+0xb4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <prvHeapInit+0xb4>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <prvHeapInit+0xb8>)
 800312e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <prvHeapInit+0xbc>)
 8003136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <prvHeapInit+0xc0>)
 800313a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800313e:	601a      	str	r2, [r3, #0]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000424 	.word	0x20000424
 8003150:	20001024 	.word	0x20001024
 8003154:	2000102c 	.word	0x2000102c
 8003158:	20001034 	.word	0x20001034
 800315c:	20001030 	.word	0x20001030
 8003160:	20001038 	.word	0x20001038

08003164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <prvInsertBlockIntoFreeList+0xa8>)
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e002      	b.n	8003178 <prvInsertBlockIntoFreeList+0x14>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d8f7      	bhi.n	8003172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	d108      	bne.n	80031a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	441a      	add	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d118      	bne.n	80031ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <prvInsertBlockIntoFreeList+0xac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d00d      	beq.n	80031e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e008      	b.n	80031f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <prvInsertBlockIntoFreeList+0xac>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e003      	b.n	80031f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d002      	beq.n	8003202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	20001024 	.word	0x20001024
 8003210:	2000102c 	.word	0x2000102c

08003214 <__errno>:
 8003214:	4b01      	ldr	r3, [pc, #4]	; (800321c <__errno+0x8>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000010 	.word	0x20000010

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2500      	movs	r5, #0
 8003224:	4e0c      	ldr	r6, [pc, #48]	; (8003258 <__libc_init_array+0x38>)
 8003226:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003228:	1ba4      	subs	r4, r4, r6
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	42a5      	cmp	r5, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	f000 ff10 	bl	8004054 <_init>
 8003234:	2500      	movs	r5, #0
 8003236:	4e0a      	ldr	r6, [pc, #40]	; (8003260 <__libc_init_array+0x40>)
 8003238:	4c0a      	ldr	r4, [pc, #40]	; (8003264 <__libc_init_array+0x44>)
 800323a:	1ba4      	subs	r4, r4, r6
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	42a5      	cmp	r5, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003248:	4798      	blx	r3
 800324a:	3501      	adds	r5, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003252:	4798      	blx	r3
 8003254:	3501      	adds	r5, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	080041c4 	.word	0x080041c4
 800325c:	080041c4 	.word	0x080041c4
 8003260:	080041c4 	.word	0x080041c4
 8003264:	080041c8 	.word	0x080041c8

08003268 <memset>:
 8003268:	4603      	mov	r3, r0
 800326a:	4402      	add	r2, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <iprintf>:
 8003278:	b40f      	push	{r0, r1, r2, r3}
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <iprintf+0x2c>)
 800327c:	b513      	push	{r0, r1, r4, lr}
 800327e:	681c      	ldr	r4, [r3, #0]
 8003280:	b124      	cbz	r4, 800328c <iprintf+0x14>
 8003282:	69a3      	ldr	r3, [r4, #24]
 8003284:	b913      	cbnz	r3, 800328c <iprintf+0x14>
 8003286:	4620      	mov	r0, r4
 8003288:	f000 f84e 	bl	8003328 <__sinit>
 800328c:	ab05      	add	r3, sp, #20
 800328e:	9a04      	ldr	r2, [sp, #16]
 8003290:	68a1      	ldr	r1, [r4, #8]
 8003292:	4620      	mov	r0, r4
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f000 f953 	bl	8003540 <_vfiprintf_r>
 800329a:	b002      	add	sp, #8
 800329c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a0:	b004      	add	sp, #16
 80032a2:	4770      	bx	lr
 80032a4:	20000010 	.word	0x20000010

080032a8 <std>:
 80032a8:	2300      	movs	r3, #0
 80032aa:	b510      	push	{r4, lr}
 80032ac:	4604      	mov	r4, r0
 80032ae:	e9c0 3300 	strd	r3, r3, [r0]
 80032b2:	6083      	str	r3, [r0, #8]
 80032b4:	8181      	strh	r1, [r0, #12]
 80032b6:	6643      	str	r3, [r0, #100]	; 0x64
 80032b8:	81c2      	strh	r2, [r0, #14]
 80032ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032be:	6183      	str	r3, [r0, #24]
 80032c0:	4619      	mov	r1, r3
 80032c2:	2208      	movs	r2, #8
 80032c4:	305c      	adds	r0, #92	; 0x5c
 80032c6:	f7ff ffcf 	bl	8003268 <memset>
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <std+0x38>)
 80032cc:	6224      	str	r4, [r4, #32]
 80032ce:	6263      	str	r3, [r4, #36]	; 0x24
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <std+0x3c>)
 80032d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <std+0x40>)
 80032d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <std+0x44>)
 80032da:	6323      	str	r3, [r4, #48]	; 0x30
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	bf00      	nop
 80032e0:	08003a9d 	.word	0x08003a9d
 80032e4:	08003abf 	.word	0x08003abf
 80032e8:	08003af7 	.word	0x08003af7
 80032ec:	08003b1b 	.word	0x08003b1b

080032f0 <_cleanup_r>:
 80032f0:	4901      	ldr	r1, [pc, #4]	; (80032f8 <_cleanup_r+0x8>)
 80032f2:	f000 b885 	b.w	8003400 <_fwalk_reent>
 80032f6:	bf00      	nop
 80032f8:	08003df5 	.word	0x08003df5

080032fc <__sfmoreglue>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	2568      	movs	r5, #104	; 0x68
 8003300:	1e4a      	subs	r2, r1, #1
 8003302:	4355      	muls	r5, r2
 8003304:	460e      	mov	r6, r1
 8003306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800330a:	f000 f897 	bl	800343c <_malloc_r>
 800330e:	4604      	mov	r4, r0
 8003310:	b140      	cbz	r0, 8003324 <__sfmoreglue+0x28>
 8003312:	2100      	movs	r1, #0
 8003314:	e9c0 1600 	strd	r1, r6, [r0]
 8003318:	300c      	adds	r0, #12
 800331a:	60a0      	str	r0, [r4, #8]
 800331c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003320:	f7ff ffa2 	bl	8003268 <memset>
 8003324:	4620      	mov	r0, r4
 8003326:	bd70      	pop	{r4, r5, r6, pc}

08003328 <__sinit>:
 8003328:	6983      	ldr	r3, [r0, #24]
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
 800332e:	bb33      	cbnz	r3, 800337e <__sinit+0x56>
 8003330:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003334:	6503      	str	r3, [r0, #80]	; 0x50
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <__sinit+0x58>)
 8003338:	4a12      	ldr	r2, [pc, #72]	; (8003384 <__sinit+0x5c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6282      	str	r2, [r0, #40]	; 0x28
 800333e:	4298      	cmp	r0, r3
 8003340:	bf04      	itt	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	6183      	streq	r3, [r0, #24]
 8003346:	f000 f81f 	bl	8003388 <__sfp>
 800334a:	6060      	str	r0, [r4, #4]
 800334c:	4620      	mov	r0, r4
 800334e:	f000 f81b 	bl	8003388 <__sfp>
 8003352:	60a0      	str	r0, [r4, #8]
 8003354:	4620      	mov	r0, r4
 8003356:	f000 f817 	bl	8003388 <__sfp>
 800335a:	2200      	movs	r2, #0
 800335c:	60e0      	str	r0, [r4, #12]
 800335e:	2104      	movs	r1, #4
 8003360:	6860      	ldr	r0, [r4, #4]
 8003362:	f7ff ffa1 	bl	80032a8 <std>
 8003366:	2201      	movs	r2, #1
 8003368:	2109      	movs	r1, #9
 800336a:	68a0      	ldr	r0, [r4, #8]
 800336c:	f7ff ff9c 	bl	80032a8 <std>
 8003370:	2202      	movs	r2, #2
 8003372:	2112      	movs	r1, #18
 8003374:	68e0      	ldr	r0, [r4, #12]
 8003376:	f7ff ff97 	bl	80032a8 <std>
 800337a:	2301      	movs	r3, #1
 800337c:	61a3      	str	r3, [r4, #24]
 800337e:	bd10      	pop	{r4, pc}
 8003380:	0800412c 	.word	0x0800412c
 8003384:	080032f1 	.word	0x080032f1

08003388 <__sfp>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <__sfp+0x70>)
 800338c:	4607      	mov	r7, r0
 800338e:	681e      	ldr	r6, [r3, #0]
 8003390:	69b3      	ldr	r3, [r6, #24]
 8003392:	b913      	cbnz	r3, 800339a <__sfp+0x12>
 8003394:	4630      	mov	r0, r6
 8003396:	f7ff ffc7 	bl	8003328 <__sinit>
 800339a:	3648      	adds	r6, #72	; 0x48
 800339c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	d503      	bpl.n	80033ac <__sfp+0x24>
 80033a4:	6833      	ldr	r3, [r6, #0]
 80033a6:	b133      	cbz	r3, 80033b6 <__sfp+0x2e>
 80033a8:	6836      	ldr	r6, [r6, #0]
 80033aa:	e7f7      	b.n	800339c <__sfp+0x14>
 80033ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033b0:	b16d      	cbz	r5, 80033ce <__sfp+0x46>
 80033b2:	3468      	adds	r4, #104	; 0x68
 80033b4:	e7f4      	b.n	80033a0 <__sfp+0x18>
 80033b6:	2104      	movs	r1, #4
 80033b8:	4638      	mov	r0, r7
 80033ba:	f7ff ff9f 	bl	80032fc <__sfmoreglue>
 80033be:	6030      	str	r0, [r6, #0]
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d1f1      	bne.n	80033a8 <__sfp+0x20>
 80033c4:	230c      	movs	r3, #12
 80033c6:	4604      	mov	r4, r0
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4620      	mov	r0, r4
 80033cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <__sfp+0x74>)
 80033d0:	6665      	str	r5, [r4, #100]	; 0x64
 80033d2:	e9c4 5500 	strd	r5, r5, [r4]
 80033d6:	60a5      	str	r5, [r4, #8]
 80033d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80033dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80033e0:	2208      	movs	r2, #8
 80033e2:	4629      	mov	r1, r5
 80033e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033e8:	f7ff ff3e 	bl	8003268 <memset>
 80033ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033f4:	e7e9      	b.n	80033ca <__sfp+0x42>
 80033f6:	bf00      	nop
 80033f8:	0800412c 	.word	0x0800412c
 80033fc:	ffff0001 	.word	0xffff0001

08003400 <_fwalk_reent>:
 8003400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003404:	4680      	mov	r8, r0
 8003406:	4689      	mov	r9, r1
 8003408:	2600      	movs	r6, #0
 800340a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800340e:	b914      	cbnz	r4, 8003416 <_fwalk_reent+0x16>
 8003410:	4630      	mov	r0, r6
 8003412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003416:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800341a:	3f01      	subs	r7, #1
 800341c:	d501      	bpl.n	8003422 <_fwalk_reent+0x22>
 800341e:	6824      	ldr	r4, [r4, #0]
 8003420:	e7f5      	b.n	800340e <_fwalk_reent+0xe>
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d907      	bls.n	8003438 <_fwalk_reent+0x38>
 8003428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800342c:	3301      	adds	r3, #1
 800342e:	d003      	beq.n	8003438 <_fwalk_reent+0x38>
 8003430:	4629      	mov	r1, r5
 8003432:	4640      	mov	r0, r8
 8003434:	47c8      	blx	r9
 8003436:	4306      	orrs	r6, r0
 8003438:	3568      	adds	r5, #104	; 0x68
 800343a:	e7ee      	b.n	800341a <_fwalk_reent+0x1a>

0800343c <_malloc_r>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	1ccd      	adds	r5, r1, #3
 8003440:	f025 0503 	bic.w	r5, r5, #3
 8003444:	3508      	adds	r5, #8
 8003446:	2d0c      	cmp	r5, #12
 8003448:	bf38      	it	cc
 800344a:	250c      	movcc	r5, #12
 800344c:	2d00      	cmp	r5, #0
 800344e:	4606      	mov	r6, r0
 8003450:	db01      	blt.n	8003456 <_malloc_r+0x1a>
 8003452:	42a9      	cmp	r1, r5
 8003454:	d903      	bls.n	800345e <_malloc_r+0x22>
 8003456:	230c      	movs	r3, #12
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	2000      	movs	r0, #0
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	f000 fd77 	bl	8003f50 <__malloc_lock>
 8003462:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <_malloc_r+0xac>)
 8003464:	6814      	ldr	r4, [r2, #0]
 8003466:	4621      	mov	r1, r4
 8003468:	b991      	cbnz	r1, 8003490 <_malloc_r+0x54>
 800346a:	4c20      	ldr	r4, [pc, #128]	; (80034ec <_malloc_r+0xb0>)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	b91b      	cbnz	r3, 8003478 <_malloc_r+0x3c>
 8003470:	4630      	mov	r0, r6
 8003472:	f000 fb03 	bl	8003a7c <_sbrk_r>
 8003476:	6020      	str	r0, [r4, #0]
 8003478:	4629      	mov	r1, r5
 800347a:	4630      	mov	r0, r6
 800347c:	f000 fafe 	bl	8003a7c <_sbrk_r>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d124      	bne.n	80034ce <_malloc_r+0x92>
 8003484:	230c      	movs	r3, #12
 8003486:	4630      	mov	r0, r6
 8003488:	6033      	str	r3, [r6, #0]
 800348a:	f000 fd62 	bl	8003f52 <__malloc_unlock>
 800348e:	e7e4      	b.n	800345a <_malloc_r+0x1e>
 8003490:	680b      	ldr	r3, [r1, #0]
 8003492:	1b5b      	subs	r3, r3, r5
 8003494:	d418      	bmi.n	80034c8 <_malloc_r+0x8c>
 8003496:	2b0b      	cmp	r3, #11
 8003498:	d90f      	bls.n	80034ba <_malloc_r+0x7e>
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	18cc      	adds	r4, r1, r3
 800349e:	50cd      	str	r5, [r1, r3]
 80034a0:	4630      	mov	r0, r6
 80034a2:	f000 fd56 	bl	8003f52 <__malloc_unlock>
 80034a6:	f104 000b 	add.w	r0, r4, #11
 80034aa:	1d23      	adds	r3, r4, #4
 80034ac:	f020 0007 	bic.w	r0, r0, #7
 80034b0:	1ac3      	subs	r3, r0, r3
 80034b2:	d0d3      	beq.n	800345c <_malloc_r+0x20>
 80034b4:	425a      	negs	r2, r3
 80034b6:	50e2      	str	r2, [r4, r3]
 80034b8:	e7d0      	b.n	800345c <_malloc_r+0x20>
 80034ba:	684b      	ldr	r3, [r1, #4]
 80034bc:	428c      	cmp	r4, r1
 80034be:	bf16      	itet	ne
 80034c0:	6063      	strne	r3, [r4, #4]
 80034c2:	6013      	streq	r3, [r2, #0]
 80034c4:	460c      	movne	r4, r1
 80034c6:	e7eb      	b.n	80034a0 <_malloc_r+0x64>
 80034c8:	460c      	mov	r4, r1
 80034ca:	6849      	ldr	r1, [r1, #4]
 80034cc:	e7cc      	b.n	8003468 <_malloc_r+0x2c>
 80034ce:	1cc4      	adds	r4, r0, #3
 80034d0:	f024 0403 	bic.w	r4, r4, #3
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d005      	beq.n	80034e4 <_malloc_r+0xa8>
 80034d8:	1a21      	subs	r1, r4, r0
 80034da:	4630      	mov	r0, r6
 80034dc:	f000 face 	bl	8003a7c <_sbrk_r>
 80034e0:	3001      	adds	r0, #1
 80034e2:	d0cf      	beq.n	8003484 <_malloc_r+0x48>
 80034e4:	6025      	str	r5, [r4, #0]
 80034e6:	e7db      	b.n	80034a0 <_malloc_r+0x64>
 80034e8:	2000103c 	.word	0x2000103c
 80034ec:	20001040 	.word	0x20001040

080034f0 <__sfputc_r>:
 80034f0:	6893      	ldr	r3, [r2, #8]
 80034f2:	b410      	push	{r4}
 80034f4:	3b01      	subs	r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	6093      	str	r3, [r2, #8]
 80034fa:	da07      	bge.n	800350c <__sfputc_r+0x1c>
 80034fc:	6994      	ldr	r4, [r2, #24]
 80034fe:	42a3      	cmp	r3, r4
 8003500:	db01      	blt.n	8003506 <__sfputc_r+0x16>
 8003502:	290a      	cmp	r1, #10
 8003504:	d102      	bne.n	800350c <__sfputc_r+0x1c>
 8003506:	bc10      	pop	{r4}
 8003508:	f000 bb0c 	b.w	8003b24 <__swbuf_r>
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	1c58      	adds	r0, r3, #1
 8003510:	6010      	str	r0, [r2, #0]
 8003512:	7019      	strb	r1, [r3, #0]
 8003514:	4608      	mov	r0, r1
 8003516:	bc10      	pop	{r4}
 8003518:	4770      	bx	lr

0800351a <__sfputs_r>:
 800351a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351c:	4606      	mov	r6, r0
 800351e:	460f      	mov	r7, r1
 8003520:	4614      	mov	r4, r2
 8003522:	18d5      	adds	r5, r2, r3
 8003524:	42ac      	cmp	r4, r5
 8003526:	d101      	bne.n	800352c <__sfputs_r+0x12>
 8003528:	2000      	movs	r0, #0
 800352a:	e007      	b.n	800353c <__sfputs_r+0x22>
 800352c:	463a      	mov	r2, r7
 800352e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff ffdc 	bl	80034f0 <__sfputc_r>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d1f3      	bne.n	8003524 <__sfputs_r+0xa>
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003540 <_vfiprintf_r>:
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	460c      	mov	r4, r1
 8003546:	b09d      	sub	sp, #116	; 0x74
 8003548:	4617      	mov	r7, r2
 800354a:	461d      	mov	r5, r3
 800354c:	4606      	mov	r6, r0
 800354e:	b118      	cbz	r0, 8003558 <_vfiprintf_r+0x18>
 8003550:	6983      	ldr	r3, [r0, #24]
 8003552:	b90b      	cbnz	r3, 8003558 <_vfiprintf_r+0x18>
 8003554:	f7ff fee8 	bl	8003328 <__sinit>
 8003558:	4b7c      	ldr	r3, [pc, #496]	; (800374c <_vfiprintf_r+0x20c>)
 800355a:	429c      	cmp	r4, r3
 800355c:	d158      	bne.n	8003610 <_vfiprintf_r+0xd0>
 800355e:	6874      	ldr	r4, [r6, #4]
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	0718      	lsls	r0, r3, #28
 8003564:	d55e      	bpl.n	8003624 <_vfiprintf_r+0xe4>
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05b      	beq.n	8003624 <_vfiprintf_r+0xe4>
 800356c:	2300      	movs	r3, #0
 800356e:	9309      	str	r3, [sp, #36]	; 0x24
 8003570:	2320      	movs	r3, #32
 8003572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003576:	2330      	movs	r3, #48	; 0x30
 8003578:	f04f 0b01 	mov.w	fp, #1
 800357c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003580:	9503      	str	r5, [sp, #12]
 8003582:	46b8      	mov	r8, r7
 8003584:	4645      	mov	r5, r8
 8003586:	f815 3b01 	ldrb.w	r3, [r5], #1
 800358a:	b10b      	cbz	r3, 8003590 <_vfiprintf_r+0x50>
 800358c:	2b25      	cmp	r3, #37	; 0x25
 800358e:	d154      	bne.n	800363a <_vfiprintf_r+0xfa>
 8003590:	ebb8 0a07 	subs.w	sl, r8, r7
 8003594:	d00b      	beq.n	80035ae <_vfiprintf_r+0x6e>
 8003596:	4653      	mov	r3, sl
 8003598:	463a      	mov	r2, r7
 800359a:	4621      	mov	r1, r4
 800359c:	4630      	mov	r0, r6
 800359e:	f7ff ffbc 	bl	800351a <__sfputs_r>
 80035a2:	3001      	adds	r0, #1
 80035a4:	f000 80c2 	beq.w	800372c <_vfiprintf_r+0x1ec>
 80035a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035aa:	4453      	add	r3, sl
 80035ac:	9309      	str	r3, [sp, #36]	; 0x24
 80035ae:	f898 3000 	ldrb.w	r3, [r8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80ba 	beq.w	800372c <_vfiprintf_r+0x1ec>
 80035b8:	2300      	movs	r3, #0
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295
 80035be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035c2:	9304      	str	r3, [sp, #16]
 80035c4:	9307      	str	r3, [sp, #28]
 80035c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ca:	931a      	str	r3, [sp, #104]	; 0x68
 80035cc:	46a8      	mov	r8, r5
 80035ce:	2205      	movs	r2, #5
 80035d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80035d4:	485e      	ldr	r0, [pc, #376]	; (8003750 <_vfiprintf_r+0x210>)
 80035d6:	f000 fcad 	bl	8003f34 <memchr>
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	bb78      	cbnz	r0, 800363e <_vfiprintf_r+0xfe>
 80035de:	06d9      	lsls	r1, r3, #27
 80035e0:	bf44      	itt	mi
 80035e2:	2220      	movmi	r2, #32
 80035e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035e8:	071a      	lsls	r2, r3, #28
 80035ea:	bf44      	itt	mi
 80035ec:	222b      	movmi	r2, #43	; 0x2b
 80035ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80035f2:	782a      	ldrb	r2, [r5, #0]
 80035f4:	2a2a      	cmp	r2, #42	; 0x2a
 80035f6:	d02a      	beq.n	800364e <_vfiprintf_r+0x10e>
 80035f8:	46a8      	mov	r8, r5
 80035fa:	2000      	movs	r0, #0
 80035fc:	250a      	movs	r5, #10
 80035fe:	9a07      	ldr	r2, [sp, #28]
 8003600:	4641      	mov	r1, r8
 8003602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003606:	3b30      	subs	r3, #48	; 0x30
 8003608:	2b09      	cmp	r3, #9
 800360a:	d969      	bls.n	80036e0 <_vfiprintf_r+0x1a0>
 800360c:	b360      	cbz	r0, 8003668 <_vfiprintf_r+0x128>
 800360e:	e024      	b.n	800365a <_vfiprintf_r+0x11a>
 8003610:	4b50      	ldr	r3, [pc, #320]	; (8003754 <_vfiprintf_r+0x214>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d101      	bne.n	800361a <_vfiprintf_r+0xda>
 8003616:	68b4      	ldr	r4, [r6, #8]
 8003618:	e7a2      	b.n	8003560 <_vfiprintf_r+0x20>
 800361a:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <_vfiprintf_r+0x218>)
 800361c:	429c      	cmp	r4, r3
 800361e:	bf08      	it	eq
 8003620:	68f4      	ldreq	r4, [r6, #12]
 8003622:	e79d      	b.n	8003560 <_vfiprintf_r+0x20>
 8003624:	4621      	mov	r1, r4
 8003626:	4630      	mov	r0, r6
 8003628:	f000 fae0 	bl	8003bec <__swsetup_r>
 800362c:	2800      	cmp	r0, #0
 800362e:	d09d      	beq.n	800356c <_vfiprintf_r+0x2c>
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	b01d      	add	sp, #116	; 0x74
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	46a8      	mov	r8, r5
 800363c:	e7a2      	b.n	8003584 <_vfiprintf_r+0x44>
 800363e:	4a44      	ldr	r2, [pc, #272]	; (8003750 <_vfiprintf_r+0x210>)
 8003640:	4645      	mov	r5, r8
 8003642:	1a80      	subs	r0, r0, r2
 8003644:	fa0b f000 	lsl.w	r0, fp, r0
 8003648:	4318      	orrs	r0, r3
 800364a:	9004      	str	r0, [sp, #16]
 800364c:	e7be      	b.n	80035cc <_vfiprintf_r+0x8c>
 800364e:	9a03      	ldr	r2, [sp, #12]
 8003650:	1d11      	adds	r1, r2, #4
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	9103      	str	r1, [sp, #12]
 8003656:	2a00      	cmp	r2, #0
 8003658:	db01      	blt.n	800365e <_vfiprintf_r+0x11e>
 800365a:	9207      	str	r2, [sp, #28]
 800365c:	e004      	b.n	8003668 <_vfiprintf_r+0x128>
 800365e:	4252      	negs	r2, r2
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	9207      	str	r2, [sp, #28]
 8003666:	9304      	str	r3, [sp, #16]
 8003668:	f898 3000 	ldrb.w	r3, [r8]
 800366c:	2b2e      	cmp	r3, #46	; 0x2e
 800366e:	d10e      	bne.n	800368e <_vfiprintf_r+0x14e>
 8003670:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003674:	2b2a      	cmp	r3, #42	; 0x2a
 8003676:	d138      	bne.n	80036ea <_vfiprintf_r+0x1aa>
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	f108 0802 	add.w	r8, r8, #2
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	9203      	str	r2, [sp, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	bfb8      	it	lt
 8003688:	f04f 33ff 	movlt.w	r3, #4294967295
 800368c:	9305      	str	r3, [sp, #20]
 800368e:	4d33      	ldr	r5, [pc, #204]	; (800375c <_vfiprintf_r+0x21c>)
 8003690:	2203      	movs	r2, #3
 8003692:	f898 1000 	ldrb.w	r1, [r8]
 8003696:	4628      	mov	r0, r5
 8003698:	f000 fc4c 	bl	8003f34 <memchr>
 800369c:	b140      	cbz	r0, 80036b0 <_vfiprintf_r+0x170>
 800369e:	2340      	movs	r3, #64	; 0x40
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	fa03 f000 	lsl.w	r0, r3, r0
 80036a6:	9b04      	ldr	r3, [sp, #16]
 80036a8:	f108 0801 	add.w	r8, r8, #1
 80036ac:	4303      	orrs	r3, r0
 80036ae:	9304      	str	r3, [sp, #16]
 80036b0:	f898 1000 	ldrb.w	r1, [r8]
 80036b4:	2206      	movs	r2, #6
 80036b6:	482a      	ldr	r0, [pc, #168]	; (8003760 <_vfiprintf_r+0x220>)
 80036b8:	f108 0701 	add.w	r7, r8, #1
 80036bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036c0:	f000 fc38 	bl	8003f34 <memchr>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d037      	beq.n	8003738 <_vfiprintf_r+0x1f8>
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <_vfiprintf_r+0x224>)
 80036ca:	bb1b      	cbnz	r3, 8003714 <_vfiprintf_r+0x1d4>
 80036cc:	9b03      	ldr	r3, [sp, #12]
 80036ce:	3307      	adds	r3, #7
 80036d0:	f023 0307 	bic.w	r3, r3, #7
 80036d4:	3308      	adds	r3, #8
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036da:	444b      	add	r3, r9
 80036dc:	9309      	str	r3, [sp, #36]	; 0x24
 80036de:	e750      	b.n	8003582 <_vfiprintf_r+0x42>
 80036e0:	fb05 3202 	mla	r2, r5, r2, r3
 80036e4:	2001      	movs	r0, #1
 80036e6:	4688      	mov	r8, r1
 80036e8:	e78a      	b.n	8003600 <_vfiprintf_r+0xc0>
 80036ea:	2300      	movs	r3, #0
 80036ec:	250a      	movs	r5, #10
 80036ee:	4619      	mov	r1, r3
 80036f0:	f108 0801 	add.w	r8, r8, #1
 80036f4:	9305      	str	r3, [sp, #20]
 80036f6:	4640      	mov	r0, r8
 80036f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036fc:	3a30      	subs	r2, #48	; 0x30
 80036fe:	2a09      	cmp	r2, #9
 8003700:	d903      	bls.n	800370a <_vfiprintf_r+0x1ca>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0c3      	beq.n	800368e <_vfiprintf_r+0x14e>
 8003706:	9105      	str	r1, [sp, #20]
 8003708:	e7c1      	b.n	800368e <_vfiprintf_r+0x14e>
 800370a:	fb05 2101 	mla	r1, r5, r1, r2
 800370e:	2301      	movs	r3, #1
 8003710:	4680      	mov	r8, r0
 8003712:	e7f0      	b.n	80036f6 <_vfiprintf_r+0x1b6>
 8003714:	ab03      	add	r3, sp, #12
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4622      	mov	r2, r4
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <_vfiprintf_r+0x228>)
 800371c:	a904      	add	r1, sp, #16
 800371e:	4630      	mov	r0, r6
 8003720:	f3af 8000 	nop.w
 8003724:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003728:	4681      	mov	r9, r0
 800372a:	d1d5      	bne.n	80036d8 <_vfiprintf_r+0x198>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	065b      	lsls	r3, r3, #25
 8003730:	f53f af7e 	bmi.w	8003630 <_vfiprintf_r+0xf0>
 8003734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003736:	e77d      	b.n	8003634 <_vfiprintf_r+0xf4>
 8003738:	ab03      	add	r3, sp, #12
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4622      	mov	r2, r4
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <_vfiprintf_r+0x228>)
 8003740:	a904      	add	r1, sp, #16
 8003742:	4630      	mov	r0, r6
 8003744:	f000 f888 	bl	8003858 <_printf_i>
 8003748:	e7ec      	b.n	8003724 <_vfiprintf_r+0x1e4>
 800374a:	bf00      	nop
 800374c:	08004150 	.word	0x08004150
 8003750:	08004190 	.word	0x08004190
 8003754:	08004170 	.word	0x08004170
 8003758:	08004130 	.word	0x08004130
 800375c:	08004196 	.word	0x08004196
 8003760:	0800419a 	.word	0x0800419a
 8003764:	00000000 	.word	0x00000000
 8003768:	0800351b 	.word	0x0800351b

0800376c <_printf_common>:
 800376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	4691      	mov	r9, r2
 8003772:	461f      	mov	r7, r3
 8003774:	688a      	ldr	r2, [r1, #8]
 8003776:	690b      	ldr	r3, [r1, #16]
 8003778:	4606      	mov	r6, r0
 800377a:	4293      	cmp	r3, r2
 800377c:	bfb8      	it	lt
 800377e:	4613      	movlt	r3, r2
 8003780:	f8c9 3000 	str.w	r3, [r9]
 8003784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003788:	460c      	mov	r4, r1
 800378a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800378e:	b112      	cbz	r2, 8003796 <_printf_common+0x2a>
 8003790:	3301      	adds	r3, #1
 8003792:	f8c9 3000 	str.w	r3, [r9]
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	0699      	lsls	r1, r3, #26
 800379a:	bf42      	ittt	mi
 800379c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037a0:	3302      	addmi	r3, #2
 80037a2:	f8c9 3000 	strmi.w	r3, [r9]
 80037a6:	6825      	ldr	r5, [r4, #0]
 80037a8:	f015 0506 	ands.w	r5, r5, #6
 80037ac:	d107      	bne.n	80037be <_printf_common+0x52>
 80037ae:	f104 0a19 	add.w	sl, r4, #25
 80037b2:	68e3      	ldr	r3, [r4, #12]
 80037b4:	f8d9 2000 	ldr.w	r2, [r9]
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	42ab      	cmp	r3, r5
 80037bc:	dc29      	bgt.n	8003812 <_printf_common+0xa6>
 80037be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	3300      	adds	r3, #0
 80037c6:	bf18      	it	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	0692      	lsls	r2, r2, #26
 80037cc:	d42e      	bmi.n	800382c <_printf_common+0xc0>
 80037ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d2:	4639      	mov	r1, r7
 80037d4:	4630      	mov	r0, r6
 80037d6:	47c0      	blx	r8
 80037d8:	3001      	adds	r0, #1
 80037da:	d021      	beq.n	8003820 <_printf_common+0xb4>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	68e5      	ldr	r5, [r4, #12]
 80037e0:	f003 0306 	and.w	r3, r3, #6
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	bf18      	it	ne
 80037e8:	2500      	movne	r5, #0
 80037ea:	f8d9 2000 	ldr.w	r2, [r9]
 80037ee:	f04f 0900 	mov.w	r9, #0
 80037f2:	bf08      	it	eq
 80037f4:	1aad      	subeq	r5, r5, r2
 80037f6:	68a3      	ldr	r3, [r4, #8]
 80037f8:	6922      	ldr	r2, [r4, #16]
 80037fa:	bf08      	it	eq
 80037fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003800:	4293      	cmp	r3, r2
 8003802:	bfc4      	itt	gt
 8003804:	1a9b      	subgt	r3, r3, r2
 8003806:	18ed      	addgt	r5, r5, r3
 8003808:	341a      	adds	r4, #26
 800380a:	454d      	cmp	r5, r9
 800380c:	d11a      	bne.n	8003844 <_printf_common+0xd8>
 800380e:	2000      	movs	r0, #0
 8003810:	e008      	b.n	8003824 <_printf_common+0xb8>
 8003812:	2301      	movs	r3, #1
 8003814:	4652      	mov	r2, sl
 8003816:	4639      	mov	r1, r7
 8003818:	4630      	mov	r0, r6
 800381a:	47c0      	blx	r8
 800381c:	3001      	adds	r0, #1
 800381e:	d103      	bne.n	8003828 <_printf_common+0xbc>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	3501      	adds	r5, #1
 800382a:	e7c2      	b.n	80037b2 <_printf_common+0x46>
 800382c:	2030      	movs	r0, #48	; 0x30
 800382e:	18e1      	adds	r1, r4, r3
 8003830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800383a:	4422      	add	r2, r4
 800383c:	3302      	adds	r3, #2
 800383e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003842:	e7c4      	b.n	80037ce <_printf_common+0x62>
 8003844:	2301      	movs	r3, #1
 8003846:	4622      	mov	r2, r4
 8003848:	4639      	mov	r1, r7
 800384a:	4630      	mov	r0, r6
 800384c:	47c0      	blx	r8
 800384e:	3001      	adds	r0, #1
 8003850:	d0e6      	beq.n	8003820 <_printf_common+0xb4>
 8003852:	f109 0901 	add.w	r9, r9, #1
 8003856:	e7d8      	b.n	800380a <_printf_common+0x9e>

08003858 <_printf_i>:
 8003858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800385c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003860:	460c      	mov	r4, r1
 8003862:	7e09      	ldrb	r1, [r1, #24]
 8003864:	b085      	sub	sp, #20
 8003866:	296e      	cmp	r1, #110	; 0x6e
 8003868:	4617      	mov	r7, r2
 800386a:	4606      	mov	r6, r0
 800386c:	4698      	mov	r8, r3
 800386e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003870:	f000 80b3 	beq.w	80039da <_printf_i+0x182>
 8003874:	d822      	bhi.n	80038bc <_printf_i+0x64>
 8003876:	2963      	cmp	r1, #99	; 0x63
 8003878:	d036      	beq.n	80038e8 <_printf_i+0x90>
 800387a:	d80a      	bhi.n	8003892 <_printf_i+0x3a>
 800387c:	2900      	cmp	r1, #0
 800387e:	f000 80b9 	beq.w	80039f4 <_printf_i+0x19c>
 8003882:	2958      	cmp	r1, #88	; 0x58
 8003884:	f000 8083 	beq.w	800398e <_printf_i+0x136>
 8003888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003890:	e032      	b.n	80038f8 <_printf_i+0xa0>
 8003892:	2964      	cmp	r1, #100	; 0x64
 8003894:	d001      	beq.n	800389a <_printf_i+0x42>
 8003896:	2969      	cmp	r1, #105	; 0x69
 8003898:	d1f6      	bne.n	8003888 <_printf_i+0x30>
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	6813      	ldr	r3, [r2, #0]
 800389e:	0605      	lsls	r5, r0, #24
 80038a0:	f103 0104 	add.w	r1, r3, #4
 80038a4:	d52a      	bpl.n	80038fc <_printf_i+0xa4>
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6011      	str	r1, [r2, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da03      	bge.n	80038b6 <_printf_i+0x5e>
 80038ae:	222d      	movs	r2, #45	; 0x2d
 80038b0:	425b      	negs	r3, r3
 80038b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038b6:	486f      	ldr	r0, [pc, #444]	; (8003a74 <_printf_i+0x21c>)
 80038b8:	220a      	movs	r2, #10
 80038ba:	e039      	b.n	8003930 <_printf_i+0xd8>
 80038bc:	2973      	cmp	r1, #115	; 0x73
 80038be:	f000 809d 	beq.w	80039fc <_printf_i+0x1a4>
 80038c2:	d808      	bhi.n	80038d6 <_printf_i+0x7e>
 80038c4:	296f      	cmp	r1, #111	; 0x6f
 80038c6:	d020      	beq.n	800390a <_printf_i+0xb2>
 80038c8:	2970      	cmp	r1, #112	; 0x70
 80038ca:	d1dd      	bne.n	8003888 <_printf_i+0x30>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f043 0320 	orr.w	r3, r3, #32
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	e003      	b.n	80038de <_printf_i+0x86>
 80038d6:	2975      	cmp	r1, #117	; 0x75
 80038d8:	d017      	beq.n	800390a <_printf_i+0xb2>
 80038da:	2978      	cmp	r1, #120	; 0x78
 80038dc:	d1d4      	bne.n	8003888 <_printf_i+0x30>
 80038de:	2378      	movs	r3, #120	; 0x78
 80038e0:	4865      	ldr	r0, [pc, #404]	; (8003a78 <_printf_i+0x220>)
 80038e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038e6:	e055      	b.n	8003994 <_printf_i+0x13c>
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ee:	1d19      	adds	r1, r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6011      	str	r1, [r2, #0]
 80038f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038f8:	2301      	movs	r3, #1
 80038fa:	e08c      	b.n	8003a16 <_printf_i+0x1be>
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003902:	6011      	str	r1, [r2, #0]
 8003904:	bf18      	it	ne
 8003906:	b21b      	sxthne	r3, r3
 8003908:	e7cf      	b.n	80038aa <_printf_i+0x52>
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1d18      	adds	r0, r3, #4
 8003910:	6010      	str	r0, [r2, #0]
 8003912:	0628      	lsls	r0, r5, #24
 8003914:	d501      	bpl.n	800391a <_printf_i+0xc2>
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	e002      	b.n	8003920 <_printf_i+0xc8>
 800391a:	0668      	lsls	r0, r5, #25
 800391c:	d5fb      	bpl.n	8003916 <_printf_i+0xbe>
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	296f      	cmp	r1, #111	; 0x6f
 8003922:	bf14      	ite	ne
 8003924:	220a      	movne	r2, #10
 8003926:	2208      	moveq	r2, #8
 8003928:	4852      	ldr	r0, [pc, #328]	; (8003a74 <_printf_i+0x21c>)
 800392a:	2100      	movs	r1, #0
 800392c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003930:	6865      	ldr	r5, [r4, #4]
 8003932:	2d00      	cmp	r5, #0
 8003934:	60a5      	str	r5, [r4, #8]
 8003936:	f2c0 8095 	blt.w	8003a64 <_printf_i+0x20c>
 800393a:	6821      	ldr	r1, [r4, #0]
 800393c:	f021 0104 	bic.w	r1, r1, #4
 8003940:	6021      	str	r1, [r4, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d13d      	bne.n	80039c2 <_printf_i+0x16a>
 8003946:	2d00      	cmp	r5, #0
 8003948:	f040 808e 	bne.w	8003a68 <_printf_i+0x210>
 800394c:	4665      	mov	r5, ip
 800394e:	2a08      	cmp	r2, #8
 8003950:	d10b      	bne.n	800396a <_printf_i+0x112>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	07db      	lsls	r3, r3, #31
 8003956:	d508      	bpl.n	800396a <_printf_i+0x112>
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	6862      	ldr	r2, [r4, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	bfde      	ittt	le
 8003960:	2330      	movle	r3, #48	; 0x30
 8003962:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003966:	f105 35ff 	addle.w	r5, r5, #4294967295
 800396a:	ebac 0305 	sub.w	r3, ip, r5
 800396e:	6123      	str	r3, [r4, #16]
 8003970:	f8cd 8000 	str.w	r8, [sp]
 8003974:	463b      	mov	r3, r7
 8003976:	aa03      	add	r2, sp, #12
 8003978:	4621      	mov	r1, r4
 800397a:	4630      	mov	r0, r6
 800397c:	f7ff fef6 	bl	800376c <_printf_common>
 8003980:	3001      	adds	r0, #1
 8003982:	d14d      	bne.n	8003a20 <_printf_i+0x1c8>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	b005      	add	sp, #20
 800398a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800398e:	4839      	ldr	r0, [pc, #228]	; (8003a74 <_printf_i+0x21c>)
 8003990:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003994:	6813      	ldr	r3, [r2, #0]
 8003996:	6821      	ldr	r1, [r4, #0]
 8003998:	1d1d      	adds	r5, r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6015      	str	r5, [r2, #0]
 800399e:	060a      	lsls	r2, r1, #24
 80039a0:	d50b      	bpl.n	80039ba <_printf_i+0x162>
 80039a2:	07ca      	lsls	r2, r1, #31
 80039a4:	bf44      	itt	mi
 80039a6:	f041 0120 	orrmi.w	r1, r1, #32
 80039aa:	6021      	strmi	r1, [r4, #0]
 80039ac:	b91b      	cbnz	r3, 80039b6 <_printf_i+0x15e>
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	f022 0220 	bic.w	r2, r2, #32
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	2210      	movs	r2, #16
 80039b8:	e7b7      	b.n	800392a <_printf_i+0xd2>
 80039ba:	064d      	lsls	r5, r1, #25
 80039bc:	bf48      	it	mi
 80039be:	b29b      	uxthmi	r3, r3
 80039c0:	e7ef      	b.n	80039a2 <_printf_i+0x14a>
 80039c2:	4665      	mov	r5, ip
 80039c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039c8:	fb02 3311 	mls	r3, r2, r1, r3
 80039cc:	5cc3      	ldrb	r3, [r0, r3]
 80039ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039d2:	460b      	mov	r3, r1
 80039d4:	2900      	cmp	r1, #0
 80039d6:	d1f5      	bne.n	80039c4 <_printf_i+0x16c>
 80039d8:	e7b9      	b.n	800394e <_printf_i+0xf6>
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	6825      	ldr	r5, [r4, #0]
 80039de:	1d18      	adds	r0, r3, #4
 80039e0:	6961      	ldr	r1, [r4, #20]
 80039e2:	6010      	str	r0, [r2, #0]
 80039e4:	0628      	lsls	r0, r5, #24
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	d501      	bpl.n	80039ee <_printf_i+0x196>
 80039ea:	6019      	str	r1, [r3, #0]
 80039ec:	e002      	b.n	80039f4 <_printf_i+0x19c>
 80039ee:	066a      	lsls	r2, r5, #25
 80039f0:	d5fb      	bpl.n	80039ea <_printf_i+0x192>
 80039f2:	8019      	strh	r1, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	4665      	mov	r5, ip
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	e7b9      	b.n	8003970 <_printf_i+0x118>
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	6011      	str	r1, [r2, #0]
 8003a02:	681d      	ldr	r5, [r3, #0]
 8003a04:	6862      	ldr	r2, [r4, #4]
 8003a06:	2100      	movs	r1, #0
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 fa93 	bl	8003f34 <memchr>
 8003a0e:	b108      	cbz	r0, 8003a14 <_printf_i+0x1bc>
 8003a10:	1b40      	subs	r0, r0, r5
 8003a12:	6060      	str	r0, [r4, #4]
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	6123      	str	r3, [r4, #16]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1e:	e7a7      	b.n	8003970 <_printf_i+0x118>
 8003a20:	6923      	ldr	r3, [r4, #16]
 8003a22:	462a      	mov	r2, r5
 8003a24:	4639      	mov	r1, r7
 8003a26:	4630      	mov	r0, r6
 8003a28:	47c0      	blx	r8
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d0aa      	beq.n	8003984 <_printf_i+0x12c>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	079b      	lsls	r3, r3, #30
 8003a32:	d413      	bmi.n	8003a5c <_printf_i+0x204>
 8003a34:	68e0      	ldr	r0, [r4, #12]
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	bfb8      	it	lt
 8003a3c:	4618      	movlt	r0, r3
 8003a3e:	e7a3      	b.n	8003988 <_printf_i+0x130>
 8003a40:	2301      	movs	r3, #1
 8003a42:	464a      	mov	r2, r9
 8003a44:	4639      	mov	r1, r7
 8003a46:	4630      	mov	r0, r6
 8003a48:	47c0      	blx	r8
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d09a      	beq.n	8003984 <_printf_i+0x12c>
 8003a4e:	3501      	adds	r5, #1
 8003a50:	68e3      	ldr	r3, [r4, #12]
 8003a52:	9a03      	ldr	r2, [sp, #12]
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	42ab      	cmp	r3, r5
 8003a58:	dcf2      	bgt.n	8003a40 <_printf_i+0x1e8>
 8003a5a:	e7eb      	b.n	8003a34 <_printf_i+0x1dc>
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	f104 0919 	add.w	r9, r4, #25
 8003a62:	e7f5      	b.n	8003a50 <_printf_i+0x1f8>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ac      	bne.n	80039c2 <_printf_i+0x16a>
 8003a68:	7803      	ldrb	r3, [r0, #0]
 8003a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a72:	e76c      	b.n	800394e <_printf_i+0xf6>
 8003a74:	080041a1 	.word	0x080041a1
 8003a78:	080041b2 	.word	0x080041b2

08003a7c <_sbrk_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4c05      	ldr	r4, [pc, #20]	; (8003a98 <_sbrk_r+0x1c>)
 8003a82:	4605      	mov	r5, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	f7fc fe9c 	bl	80007c4 <_sbrk>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_sbrk_r+0x1a>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_sbrk_r+0x1a>
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	200010d8 	.word	0x200010d8

08003a9c <__sread>:
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa4:	f000 faa2 	bl	8003fec <_read_r>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	bfab      	itete	ge
 8003aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003aae:	89a3      	ldrhlt	r3, [r4, #12]
 8003ab0:	181b      	addge	r3, r3, r0
 8003ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ab6:	bfac      	ite	ge
 8003ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aba:	81a3      	strhlt	r3, [r4, #12]
 8003abc:	bd10      	pop	{r4, pc}

08003abe <__swrite>:
 8003abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac2:	461f      	mov	r7, r3
 8003ac4:	898b      	ldrh	r3, [r1, #12]
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	05db      	lsls	r3, r3, #23
 8003aca:	460c      	mov	r4, r1
 8003acc:	4616      	mov	r6, r2
 8003ace:	d505      	bpl.n	8003adc <__swrite+0x1e>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad8:	f000 f9b6 	bl	8003e48 <_lseek_r>
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	4632      	mov	r2, r6
 8003ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ae4:	81a3      	strh	r3, [r4, #12]
 8003ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aea:	463b      	mov	r3, r7
 8003aec:	4628      	mov	r0, r5
 8003aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003af2:	f000 b869 	b.w	8003bc8 <_write_r>

08003af6 <__sseek>:
 8003af6:	b510      	push	{r4, lr}
 8003af8:	460c      	mov	r4, r1
 8003afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afe:	f000 f9a3 	bl	8003e48 <_lseek_r>
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	bf15      	itete	ne
 8003b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b12:	81a3      	strheq	r3, [r4, #12]
 8003b14:	bf18      	it	ne
 8003b16:	81a3      	strhne	r3, [r4, #12]
 8003b18:	bd10      	pop	{r4, pc}

08003b1a <__sclose>:
 8003b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1e:	f000 b8d3 	b.w	8003cc8 <_close_r>
	...

08003b24 <__swbuf_r>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	460e      	mov	r6, r1
 8003b28:	4614      	mov	r4, r2
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	b118      	cbz	r0, 8003b36 <__swbuf_r+0x12>
 8003b2e:	6983      	ldr	r3, [r0, #24]
 8003b30:	b90b      	cbnz	r3, 8003b36 <__swbuf_r+0x12>
 8003b32:	f7ff fbf9 	bl	8003328 <__sinit>
 8003b36:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <__swbuf_r+0x98>)
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	d12a      	bne.n	8003b92 <__swbuf_r+0x6e>
 8003b3c:	686c      	ldr	r4, [r5, #4]
 8003b3e:	69a3      	ldr	r3, [r4, #24]
 8003b40:	60a3      	str	r3, [r4, #8]
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	071a      	lsls	r2, r3, #28
 8003b46:	d52e      	bpl.n	8003ba6 <__swbuf_r+0x82>
 8003b48:	6923      	ldr	r3, [r4, #16]
 8003b4a:	b363      	cbz	r3, 8003ba6 <__swbuf_r+0x82>
 8003b4c:	6923      	ldr	r3, [r4, #16]
 8003b4e:	6820      	ldr	r0, [r4, #0]
 8003b50:	b2f6      	uxtb	r6, r6
 8003b52:	1ac0      	subs	r0, r0, r3
 8003b54:	6963      	ldr	r3, [r4, #20]
 8003b56:	4637      	mov	r7, r6
 8003b58:	4283      	cmp	r3, r0
 8003b5a:	dc04      	bgt.n	8003b66 <__swbuf_r+0x42>
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4628      	mov	r0, r5
 8003b60:	f000 f948 	bl	8003df4 <_fflush_r>
 8003b64:	bb28      	cbnz	r0, 8003bb2 <__swbuf_r+0x8e>
 8003b66:	68a3      	ldr	r3, [r4, #8]
 8003b68:	3001      	adds	r0, #1
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	6022      	str	r2, [r4, #0]
 8003b74:	701e      	strb	r6, [r3, #0]
 8003b76:	6963      	ldr	r3, [r4, #20]
 8003b78:	4283      	cmp	r3, r0
 8003b7a:	d004      	beq.n	8003b86 <__swbuf_r+0x62>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	07db      	lsls	r3, r3, #31
 8003b80:	d519      	bpl.n	8003bb6 <__swbuf_r+0x92>
 8003b82:	2e0a      	cmp	r6, #10
 8003b84:	d117      	bne.n	8003bb6 <__swbuf_r+0x92>
 8003b86:	4621      	mov	r1, r4
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f000 f933 	bl	8003df4 <_fflush_r>
 8003b8e:	b190      	cbz	r0, 8003bb6 <__swbuf_r+0x92>
 8003b90:	e00f      	b.n	8003bb2 <__swbuf_r+0x8e>
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <__swbuf_r+0x9c>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	d101      	bne.n	8003b9c <__swbuf_r+0x78>
 8003b98:	68ac      	ldr	r4, [r5, #8]
 8003b9a:	e7d0      	b.n	8003b3e <__swbuf_r+0x1a>
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <__swbuf_r+0xa0>)
 8003b9e:	429c      	cmp	r4, r3
 8003ba0:	bf08      	it	eq
 8003ba2:	68ec      	ldreq	r4, [r5, #12]
 8003ba4:	e7cb      	b.n	8003b3e <__swbuf_r+0x1a>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f000 f81f 	bl	8003bec <__swsetup_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0cc      	beq.n	8003b4c <__swbuf_r+0x28>
 8003bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	08004150 	.word	0x08004150
 8003bc0:	08004170 	.word	0x08004170
 8003bc4:	08004130 	.word	0x08004130

08003bc8 <_write_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4605      	mov	r5, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4c05      	ldr	r4, [pc, #20]	; (8003be8 <_write_r+0x20>)
 8003bd4:	6022      	str	r2, [r4, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fc fc86 	bl	80004e8 <_write>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_write_r+0x1e>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_write_r+0x1e>
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	200010d8 	.word	0x200010d8

08003bec <__swsetup_r>:
 8003bec:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <__swsetup_r+0xcc>)
 8003bee:	b570      	push	{r4, r5, r6, lr}
 8003bf0:	681d      	ldr	r5, [r3, #0]
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	b125      	cbz	r5, 8003c02 <__swsetup_r+0x16>
 8003bf8:	69ab      	ldr	r3, [r5, #24]
 8003bfa:	b913      	cbnz	r3, 8003c02 <__swsetup_r+0x16>
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f7ff fb93 	bl	8003328 <__sinit>
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <__swsetup_r+0xd0>)
 8003c04:	429c      	cmp	r4, r3
 8003c06:	d10f      	bne.n	8003c28 <__swsetup_r+0x3c>
 8003c08:	686c      	ldr	r4, [r5, #4]
 8003c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	0715      	lsls	r5, r2, #28
 8003c12:	d42c      	bmi.n	8003c6e <__swsetup_r+0x82>
 8003c14:	06d0      	lsls	r0, r2, #27
 8003c16:	d411      	bmi.n	8003c3c <__swsetup_r+0x50>
 8003c18:	2209      	movs	r2, #9
 8003c1a:	6032      	str	r2, [r6, #0]
 8003c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	e03e      	b.n	8003ca6 <__swsetup_r+0xba>
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <__swsetup_r+0xd4>)
 8003c2a:	429c      	cmp	r4, r3
 8003c2c:	d101      	bne.n	8003c32 <__swsetup_r+0x46>
 8003c2e:	68ac      	ldr	r4, [r5, #8]
 8003c30:	e7eb      	b.n	8003c0a <__swsetup_r+0x1e>
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <__swsetup_r+0xd8>)
 8003c34:	429c      	cmp	r4, r3
 8003c36:	bf08      	it	eq
 8003c38:	68ec      	ldreq	r4, [r5, #12]
 8003c3a:	e7e6      	b.n	8003c0a <__swsetup_r+0x1e>
 8003c3c:	0751      	lsls	r1, r2, #29
 8003c3e:	d512      	bpl.n	8003c66 <__swsetup_r+0x7a>
 8003c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c42:	b141      	cbz	r1, 8003c56 <__swsetup_r+0x6a>
 8003c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c48:	4299      	cmp	r1, r3
 8003c4a:	d002      	beq.n	8003c52 <__swsetup_r+0x66>
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 f981 	bl	8003f54 <_free_r>
 8003c52:	2300      	movs	r3, #0
 8003c54:	6363      	str	r3, [r4, #52]	; 0x34
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6063      	str	r3, [r4, #4]
 8003c62:	6923      	ldr	r3, [r4, #16]
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	81a3      	strh	r3, [r4, #12]
 8003c6e:	6923      	ldr	r3, [r4, #16]
 8003c70:	b94b      	cbnz	r3, 8003c86 <__swsetup_r+0x9a>
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7c:	d003      	beq.n	8003c86 <__swsetup_r+0x9a>
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 f917 	bl	8003eb4 <__smakebuf_r>
 8003c86:	89a2      	ldrh	r2, [r4, #12]
 8003c88:	f012 0301 	ands.w	r3, r2, #1
 8003c8c:	d00c      	beq.n	8003ca8 <__swsetup_r+0xbc>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60a3      	str	r3, [r4, #8]
 8003c92:	6963      	ldr	r3, [r4, #20]
 8003c94:	425b      	negs	r3, r3
 8003c96:	61a3      	str	r3, [r4, #24]
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	b953      	cbnz	r3, 8003cb2 <__swsetup_r+0xc6>
 8003c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ca4:	d1ba      	bne.n	8003c1c <__swsetup_r+0x30>
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	0792      	lsls	r2, r2, #30
 8003caa:	bf58      	it	pl
 8003cac:	6963      	ldrpl	r3, [r4, #20]
 8003cae:	60a3      	str	r3, [r4, #8]
 8003cb0:	e7f2      	b.n	8003c98 <__swsetup_r+0xac>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e7f7      	b.n	8003ca6 <__swsetup_r+0xba>
 8003cb6:	bf00      	nop
 8003cb8:	20000010 	.word	0x20000010
 8003cbc:	08004150 	.word	0x08004150
 8003cc0:	08004170 	.word	0x08004170
 8003cc4:	08004130 	.word	0x08004130

08003cc8 <_close_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	2300      	movs	r3, #0
 8003ccc:	4c05      	ldr	r4, [pc, #20]	; (8003ce4 <_close_r+0x1c>)
 8003cce:	4605      	mov	r5, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	f7fc fd45 	bl	8000762 <_close>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d102      	bne.n	8003ce2 <_close_r+0x1a>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	b103      	cbz	r3, 8003ce2 <_close_r+0x1a>
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	200010d8 	.word	0x200010d8

08003ce8 <__sflush_r>:
 8003ce8:	898a      	ldrh	r2, [r1, #12]
 8003cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cee:	4605      	mov	r5, r0
 8003cf0:	0710      	lsls	r0, r2, #28
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	d458      	bmi.n	8003da8 <__sflush_r+0xc0>
 8003cf6:	684b      	ldr	r3, [r1, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	dc05      	bgt.n	8003d08 <__sflush_r+0x20>
 8003cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	dc02      	bgt.n	8003d08 <__sflush_r+0x20>
 8003d02:	2000      	movs	r0, #0
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d0a:	2e00      	cmp	r6, #0
 8003d0c:	d0f9      	beq.n	8003d02 <__sflush_r+0x1a>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d14:	682f      	ldr	r7, [r5, #0]
 8003d16:	6a21      	ldr	r1, [r4, #32]
 8003d18:	602b      	str	r3, [r5, #0]
 8003d1a:	d032      	beq.n	8003d82 <__sflush_r+0x9a>
 8003d1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	075a      	lsls	r2, r3, #29
 8003d22:	d505      	bpl.n	8003d30 <__sflush_r+0x48>
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	1ac0      	subs	r0, r0, r3
 8003d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d2a:	b10b      	cbz	r3, 8003d30 <__sflush_r+0x48>
 8003d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d2e:	1ac0      	subs	r0, r0, r3
 8003d30:	2300      	movs	r3, #0
 8003d32:	4602      	mov	r2, r0
 8003d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d36:	6a21      	ldr	r1, [r4, #32]
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b0      	blx	r6
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	d106      	bne.n	8003d50 <__sflush_r+0x68>
 8003d42:	6829      	ldr	r1, [r5, #0]
 8003d44:	291d      	cmp	r1, #29
 8003d46:	d848      	bhi.n	8003dda <__sflush_r+0xf2>
 8003d48:	4a29      	ldr	r2, [pc, #164]	; (8003df0 <__sflush_r+0x108>)
 8003d4a:	40ca      	lsrs	r2, r1
 8003d4c:	07d6      	lsls	r6, r2, #31
 8003d4e:	d544      	bpl.n	8003dda <__sflush_r+0xf2>
 8003d50:	2200      	movs	r2, #0
 8003d52:	6062      	str	r2, [r4, #4]
 8003d54:	6922      	ldr	r2, [r4, #16]
 8003d56:	04d9      	lsls	r1, r3, #19
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	d504      	bpl.n	8003d66 <__sflush_r+0x7e>
 8003d5c:	1c42      	adds	r2, r0, #1
 8003d5e:	d101      	bne.n	8003d64 <__sflush_r+0x7c>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	b903      	cbnz	r3, 8003d66 <__sflush_r+0x7e>
 8003d64:	6560      	str	r0, [r4, #84]	; 0x54
 8003d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d68:	602f      	str	r7, [r5, #0]
 8003d6a:	2900      	cmp	r1, #0
 8003d6c:	d0c9      	beq.n	8003d02 <__sflush_r+0x1a>
 8003d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d72:	4299      	cmp	r1, r3
 8003d74:	d002      	beq.n	8003d7c <__sflush_r+0x94>
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f8ec 	bl	8003f54 <_free_r>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8003d80:	e7c0      	b.n	8003d04 <__sflush_r+0x1c>
 8003d82:	2301      	movs	r3, #1
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b0      	blx	r6
 8003d88:	1c41      	adds	r1, r0, #1
 8003d8a:	d1c8      	bne.n	8003d1e <__sflush_r+0x36>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0c5      	beq.n	8003d1e <__sflush_r+0x36>
 8003d92:	2b1d      	cmp	r3, #29
 8003d94:	d001      	beq.n	8003d9a <__sflush_r+0xb2>
 8003d96:	2b16      	cmp	r3, #22
 8003d98:	d101      	bne.n	8003d9e <__sflush_r+0xb6>
 8003d9a:	602f      	str	r7, [r5, #0]
 8003d9c:	e7b1      	b.n	8003d02 <__sflush_r+0x1a>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	e7ad      	b.n	8003d04 <__sflush_r+0x1c>
 8003da8:	690f      	ldr	r7, [r1, #16]
 8003daa:	2f00      	cmp	r7, #0
 8003dac:	d0a9      	beq.n	8003d02 <__sflush_r+0x1a>
 8003dae:	0793      	lsls	r3, r2, #30
 8003db0:	bf18      	it	ne
 8003db2:	2300      	movne	r3, #0
 8003db4:	680e      	ldr	r6, [r1, #0]
 8003db6:	bf08      	it	eq
 8003db8:	694b      	ldreq	r3, [r1, #20]
 8003dba:	eba6 0807 	sub.w	r8, r6, r7
 8003dbe:	600f      	str	r7, [r1, #0]
 8003dc0:	608b      	str	r3, [r1, #8]
 8003dc2:	f1b8 0f00 	cmp.w	r8, #0
 8003dc6:	dd9c      	ble.n	8003d02 <__sflush_r+0x1a>
 8003dc8:	4643      	mov	r3, r8
 8003dca:	463a      	mov	r2, r7
 8003dcc:	6a21      	ldr	r1, [r4, #32]
 8003dce:	4628      	mov	r0, r5
 8003dd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003dd2:	47b0      	blx	r6
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	dc06      	bgt.n	8003de6 <__sflush_r+0xfe>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dde:	81a3      	strh	r3, [r4, #12]
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	e78e      	b.n	8003d04 <__sflush_r+0x1c>
 8003de6:	4407      	add	r7, r0
 8003de8:	eba8 0800 	sub.w	r8, r8, r0
 8003dec:	e7e9      	b.n	8003dc2 <__sflush_r+0xda>
 8003dee:	bf00      	nop
 8003df0:	20400001 	.word	0x20400001

08003df4 <_fflush_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	690b      	ldr	r3, [r1, #16]
 8003df8:	4605      	mov	r5, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	b1db      	cbz	r3, 8003e36 <_fflush_r+0x42>
 8003dfe:	b118      	cbz	r0, 8003e08 <_fflush_r+0x14>
 8003e00:	6983      	ldr	r3, [r0, #24]
 8003e02:	b90b      	cbnz	r3, 8003e08 <_fflush_r+0x14>
 8003e04:	f7ff fa90 	bl	8003328 <__sinit>
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <_fflush_r+0x48>)
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d109      	bne.n	8003e22 <_fflush_r+0x2e>
 8003e0e:	686c      	ldr	r4, [r5, #4]
 8003e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e14:	b17b      	cbz	r3, 8003e36 <_fflush_r+0x42>
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e1e:	f7ff bf63 	b.w	8003ce8 <__sflush_r>
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <_fflush_r+0x4c>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	d101      	bne.n	8003e2c <_fflush_r+0x38>
 8003e28:	68ac      	ldr	r4, [r5, #8]
 8003e2a:	e7f1      	b.n	8003e10 <_fflush_r+0x1c>
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <_fflush_r+0x50>)
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	bf08      	it	eq
 8003e32:	68ec      	ldreq	r4, [r5, #12]
 8003e34:	e7ec      	b.n	8003e10 <_fflush_r+0x1c>
 8003e36:	2000      	movs	r0, #0
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
 8003e3a:	bf00      	nop
 8003e3c:	08004150 	.word	0x08004150
 8003e40:	08004170 	.word	0x08004170
 8003e44:	08004130 	.word	0x08004130

08003e48 <_lseek_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	2200      	movs	r2, #0
 8003e52:	4c05      	ldr	r4, [pc, #20]	; (8003e68 <_lseek_r+0x20>)
 8003e54:	6022      	str	r2, [r4, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fc fca7 	bl	80007aa <_lseek>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_lseek_r+0x1e>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_lseek_r+0x1e>
 8003e64:	602b      	str	r3, [r5, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	200010d8 	.word	0x200010d8

08003e6c <__swhatbuf_r>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	460e      	mov	r6, r1
 8003e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e74:	b096      	sub	sp, #88	; 0x58
 8003e76:	2900      	cmp	r1, #0
 8003e78:	4614      	mov	r4, r2
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	da07      	bge.n	8003e8e <__swhatbuf_r+0x22>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	89b3      	ldrh	r3, [r6, #12]
 8003e84:	061a      	lsls	r2, r3, #24
 8003e86:	d410      	bmi.n	8003eaa <__swhatbuf_r+0x3e>
 8003e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8c:	e00e      	b.n	8003eac <__swhatbuf_r+0x40>
 8003e8e:	466a      	mov	r2, sp
 8003e90:	f000 f8be 	bl	8004010 <_fstat_r>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	dbf2      	blt.n	8003e7e <__swhatbuf_r+0x12>
 8003e98:	9a01      	ldr	r2, [sp, #4]
 8003e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ea2:	425a      	negs	r2, r3
 8003ea4:	415a      	adcs	r2, r3
 8003ea6:	602a      	str	r2, [r5, #0]
 8003ea8:	e7ee      	b.n	8003e88 <__swhatbuf_r+0x1c>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	2000      	movs	r0, #0
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	b016      	add	sp, #88	; 0x58
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}

08003eb4 <__smakebuf_r>:
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eb8:	079d      	lsls	r5, r3, #30
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	d507      	bpl.n	8003ed0 <__smakebuf_r+0x1c>
 8003ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6163      	str	r3, [r4, #20]
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	ab01      	add	r3, sp, #4
 8003ed2:	466a      	mov	r2, sp
 8003ed4:	f7ff ffca 	bl	8003e6c <__swhatbuf_r>
 8003ed8:	9900      	ldr	r1, [sp, #0]
 8003eda:	4605      	mov	r5, r0
 8003edc:	4630      	mov	r0, r6
 8003ede:	f7ff faad 	bl	800343c <_malloc_r>
 8003ee2:	b948      	cbnz	r0, 8003ef8 <__smakebuf_r+0x44>
 8003ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee8:	059a      	lsls	r2, r3, #22
 8003eea:	d4ef      	bmi.n	8003ecc <__smakebuf_r+0x18>
 8003eec:	f023 0303 	bic.w	r3, r3, #3
 8003ef0:	f043 0302 	orr.w	r3, r3, #2
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	e7e3      	b.n	8003ec0 <__smakebuf_r+0xc>
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <__smakebuf_r+0x7c>)
 8003efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	6020      	str	r0, [r4, #0]
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	9b00      	ldr	r3, [sp, #0]
 8003f08:	6120      	str	r0, [r4, #16]
 8003f0a:	6163      	str	r3, [r4, #20]
 8003f0c:	9b01      	ldr	r3, [sp, #4]
 8003f0e:	b15b      	cbz	r3, 8003f28 <__smakebuf_r+0x74>
 8003f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f14:	4630      	mov	r0, r6
 8003f16:	f000 f88d 	bl	8004034 <_isatty_r>
 8003f1a:	b128      	cbz	r0, 8003f28 <__smakebuf_r+0x74>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	431d      	orrs	r5, r3
 8003f2c:	81a5      	strh	r5, [r4, #12]
 8003f2e:	e7cd      	b.n	8003ecc <__smakebuf_r+0x18>
 8003f30:	080032f1 	.word	0x080032f1

08003f34 <memchr>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	b2c9      	uxtb	r1, r1
 8003f38:	4402      	add	r2, r0
 8003f3a:	4290      	cmp	r0, r2
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	d101      	bne.n	8003f44 <memchr+0x10>
 8003f40:	2300      	movs	r3, #0
 8003f42:	e003      	b.n	8003f4c <memchr+0x18>
 8003f44:	781c      	ldrb	r4, [r3, #0]
 8003f46:	3001      	adds	r0, #1
 8003f48:	428c      	cmp	r4, r1
 8003f4a:	d1f6      	bne.n	8003f3a <memchr+0x6>
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd10      	pop	{r4, pc}

08003f50 <__malloc_lock>:
 8003f50:	4770      	bx	lr

08003f52 <__malloc_unlock>:
 8003f52:	4770      	bx	lr

08003f54 <_free_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4605      	mov	r5, r0
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	d043      	beq.n	8003fe4 <_free_r+0x90>
 8003f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f60:	1f0c      	subs	r4, r1, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfb8      	it	lt
 8003f66:	18e4      	addlt	r4, r4, r3
 8003f68:	f7ff fff2 	bl	8003f50 <__malloc_lock>
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <_free_r+0x94>)
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	4610      	mov	r0, r2
 8003f72:	b933      	cbnz	r3, 8003f82 <_free_r+0x2e>
 8003f74:	6063      	str	r3, [r4, #4]
 8003f76:	6014      	str	r4, [r2, #0]
 8003f78:	4628      	mov	r0, r5
 8003f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7e:	f7ff bfe8 	b.w	8003f52 <__malloc_unlock>
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	d90b      	bls.n	8003f9e <_free_r+0x4a>
 8003f86:	6821      	ldr	r1, [r4, #0]
 8003f88:	1862      	adds	r2, r4, r1
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bf01      	itttt	eq
 8003f8e:	681a      	ldreq	r2, [r3, #0]
 8003f90:	685b      	ldreq	r3, [r3, #4]
 8003f92:	1852      	addeq	r2, r2, r1
 8003f94:	6022      	streq	r2, [r4, #0]
 8003f96:	6063      	str	r3, [r4, #4]
 8003f98:	6004      	str	r4, [r0, #0]
 8003f9a:	e7ed      	b.n	8003f78 <_free_r+0x24>
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_free_r+0x52>
 8003fa2:	42a2      	cmp	r2, r4
 8003fa4:	d9fa      	bls.n	8003f9c <_free_r+0x48>
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	1858      	adds	r0, r3, r1
 8003faa:	42a0      	cmp	r0, r4
 8003fac:	d10b      	bne.n	8003fc6 <_free_r+0x72>
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	4401      	add	r1, r0
 8003fb2:	1858      	adds	r0, r3, r1
 8003fb4:	4282      	cmp	r2, r0
 8003fb6:	6019      	str	r1, [r3, #0]
 8003fb8:	d1de      	bne.n	8003f78 <_free_r+0x24>
 8003fba:	6810      	ldr	r0, [r2, #0]
 8003fbc:	6852      	ldr	r2, [r2, #4]
 8003fbe:	4401      	add	r1, r0
 8003fc0:	6019      	str	r1, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	e7d8      	b.n	8003f78 <_free_r+0x24>
 8003fc6:	d902      	bls.n	8003fce <_free_r+0x7a>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	e7d4      	b.n	8003f78 <_free_r+0x24>
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	1821      	adds	r1, r4, r0
 8003fd2:	428a      	cmp	r2, r1
 8003fd4:	bf01      	itttt	eq
 8003fd6:	6811      	ldreq	r1, [r2, #0]
 8003fd8:	6852      	ldreq	r2, [r2, #4]
 8003fda:	1809      	addeq	r1, r1, r0
 8003fdc:	6021      	streq	r1, [r4, #0]
 8003fde:	6062      	str	r2, [r4, #4]
 8003fe0:	605c      	str	r4, [r3, #4]
 8003fe2:	e7c9      	b.n	8003f78 <_free_r+0x24>
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000103c 	.word	0x2000103c

08003fec <_read_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4605      	mov	r5, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4c05      	ldr	r4, [pc, #20]	; (800400c <_read_r+0x20>)
 8003ff8:	6022      	str	r2, [r4, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f7fc fb94 	bl	8000728 <_read>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_read_r+0x1e>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	b103      	cbz	r3, 800400a <_read_r+0x1e>
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	200010d8 	.word	0x200010d8

08004010 <_fstat_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	2300      	movs	r3, #0
 8004014:	4c06      	ldr	r4, [pc, #24]	; (8004030 <_fstat_r+0x20>)
 8004016:	4605      	mov	r5, r0
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	f7fc fbab 	bl	8000778 <_fstat>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	d102      	bne.n	800402c <_fstat_r+0x1c>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	b103      	cbz	r3, 800402c <_fstat_r+0x1c>
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	bd38      	pop	{r3, r4, r5, pc}
 800402e:	bf00      	nop
 8004030:	200010d8 	.word	0x200010d8

08004034 <_isatty_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	2300      	movs	r3, #0
 8004038:	4c05      	ldr	r4, [pc, #20]	; (8004050 <_isatty_r+0x1c>)
 800403a:	4605      	mov	r5, r0
 800403c:	4608      	mov	r0, r1
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	f7fc fba9 	bl	8000796 <_isatty>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_isatty_r+0x1a>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	b103      	cbz	r3, 800404e <_isatty_r+0x1a>
 800404c:	602b      	str	r3, [r5, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	200010d8 	.word	0x200010d8

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
