
RTOS_UART_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800600c  0800600c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006014  08006014  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800601c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a98  20000074  08006090  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b0c  08006090  00024b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c7b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fed  00000000  00000000  00038d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  0003bd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003d088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004796  00000000  00000000  0003e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f101  00000000  00000000  00042a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e396b  00000000  00000000  00051b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001354aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005704  00000000  00000000  00135528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ed8 	.word	0x08005ed8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005ed8 	.word	0x08005ed8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	2b00      	cmp	r3, #0
 8000506:	d013      	beq.n	8000530 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000508:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000510:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000518:	e000      	b.n	800051c <ITM_SendChar+0x2c>
    {
      __NOP();
 800051a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000526:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <main>:
void StartTask1(void *argument);
void StartTask2(void *argument);
void StartTask3(void *argument);


int main(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

	HAL_Init();
 8000544:	f000 fbea 	bl	8000d1c <HAL_Init>
	SystemClock_Config();
 8000548:	f000 f83a 	bl	80005c0 <SystemClock_Config>

	MX_GPIO_Init();
 800054c:	f000 f920 	bl	8000790 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000550:	f000 f8a0 	bl	8000694 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000554:	f000 f8c8 	bl	80006e8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000558:	f000 f8f0 	bl	800073c <MX_USART3_UART_Init>

	osKernelInitialize();
 800055c:	f002 fad8 	bl	8002b10 <osKernelInitialize>

	Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <main+0x5c>)
 8000562:	2100      	movs	r1, #0
 8000564:	480e      	ldr	r0, [pc, #56]	; (80005a0 <main+0x60>)
 8000566:	f002 fb3d 	bl	8002be4 <osThreadNew>
 800056a:	4602      	mov	r2, r0
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <main+0x64>)
 800056e:	601a      	str	r2, [r3, #0]
	myTask2Handle = osThreadNew(StartTask2, NULL, &myTask2_attributes);
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <main+0x68>)
 8000572:	2100      	movs	r1, #0
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <main+0x6c>)
 8000576:	f002 fb35 	bl	8002be4 <osThreadNew>
 800057a:	4602      	mov	r2, r0
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <main+0x70>)
 800057e:	601a      	str	r2, [r3, #0]
	myTask3Handle = osThreadNew(StartTask3, NULL, &myTask3_attributes);
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <main+0x74>)
 8000582:	2100      	movs	r1, #0
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0x78>)
 8000586:	f002 fb2d 	bl	8002be4 <osThreadNew>
 800058a:	4602      	mov	r2, r0
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0x7c>)
 800058e:	601a      	str	r2, [r3, #0]
	osKernelStart();
 8000590:	f002 faf2 	bl	8002b78 <osKernelStart>
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	08005f24 	.word	0x08005f24
 80005a0:	080007fd 	.word	0x080007fd
 80005a4:	200049e8 	.word	0x200049e8
 80005a8:	08005f48 	.word	0x08005f48
 80005ac:	08000829 	.word	0x08000829
 80005b0:	20004a40 	.word	0x20004a40
 80005b4:	08005f6c 	.word	0x08005f6c
 80005b8:	08000859 	.word	0x08000859
 80005bc:	200049e4 	.word	0x200049e4

080005c0 <SystemClock_Config>:


void SystemClock_Config(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 f811 	bl	80055f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000638:	233c      	movs	r3, #60	; 0x3c
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000640:	2303      	movs	r3, #3
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fe35 	bl	80012b8 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x98>
		Error_Handler();
 8000654:	f000 f920 	bl	8000898 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f88f 	bl	8001798 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
		Error_Handler();
 8000680:	f000 f90a 	bl	8000898 <Error_Handler>
	}
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART1_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006cc:	f001 fcc6 	bl	800205c <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80006d6:	f000 f8df 	bl	8000898 <Error_Handler>
	}
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200049ec 	.word	0x200049ec
 80006e4:	40011000 	.word	0x40011000

080006e8 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART2_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000720:	f001 fc9c 	bl	800205c <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800072a:	f000 f8b5 	bl	8000898 <Error_Handler>
	}
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20004a44 	.word	0x20004a44
 8000738:	40004400 	.word	0x40004400

0800073c <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART3_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART3_UART_Init+0x4c>)
 8000774:	f001 fc72 	bl	800205c <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800077e:	f000 f88b 	bl	8000898 <Error_Handler>
	}
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200049a4 	.word	0x200049a4
 800078c:	40004800 	.word	0x40004800

08000790 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_GPIO_Init+0x68>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <StartTask1>:

void StartTask1(void *argument) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	for (;;) {
		uint8_t Test[] = "esp"; //Data to send
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <StartTask1+0x24>)
 8000806:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, Test, sizeof(Test), 10);
 8000808:	f107 010c 	add.w	r1, r7, #12
 800080c:	230a      	movs	r3, #10
 800080e:	2204      	movs	r2, #4
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <StartTask1+0x28>)
 8000812:	f001 fc70 	bl	80020f6 <HAL_UART_Transmit>
		osDelay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f002 fa8a 	bl	8002d30 <osDelay>
	for (;;) {
 800081c:	e7f2      	b.n	8000804 <StartTask1+0x8>
 800081e:	bf00      	nop
 8000820:	00707365 	.word	0x00707365
 8000824:	200049ec 	.word	0x200049ec

08000828 <StartTask2>:
	}
}


void StartTask2(void *argument) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]

	for (;;) {

		if (HAL_UART_Receive(&huart1, buffer, 4, 10)) {
 8000830:	230a      	movs	r3, #10
 8000832:	2204      	movs	r2, #4
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <StartTask2+0x28>)
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <StartTask2+0x2c>)
 8000838:	f001 fcf6 	bl	8002228 <HAL_UART_Receive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <StartTask2+0x20>

			printf("%s\n", buffer);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <StartTask2+0x28>)
 8000844:	f004 ff3c 	bl	80056c0 <puts>
		}
		osDelay(10);
 8000848:	200a      	movs	r0, #10
 800084a:	f002 fa71 	bl	8002d30 <osDelay>
		if (HAL_UART_Receive(&huart1, buffer, 4, 10)) {
 800084e:	e7ef      	b.n	8000830 <StartTask2+0x8>
 8000850:	20004a2c 	.word	0x20004a2c
 8000854:	200049ec 	.word	0x200049ec

08000858 <StartTask3>:
	}
}

void StartTask3(void *argument) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

	for (;;) {
		printf("ok\n");
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <StartTask3+0x18>)
 8000862:	f004 ff2d 	bl	80056c0 <puts>
		osDelay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f002 fa62 	bl	8002d30 <osDelay>
		printf("ok\n");
 800086c:	e7f8      	b.n	8000860 <StartTask3+0x8>
 800086e:	bf00      	nop
 8000870:	08005f08 	.word	0x08005f08

08000874 <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d101      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000886:	f000 fa6b 	bl	8000d60 <HAL_IncTick>
	}
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40001000 	.word	0x40001000

08000898 <Error_Handler>:

void Error_Handler(void) {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
	__disable_irq();
	while (1) {
 800089e:	e7fe      	b.n	800089e <Error_Handler+0x6>

080008a0 <_write>:
	}
}

int _write(int file, char *ptr, int len) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e009      	b.n	80008c6 <_write+0x26>
		ITM_SendChar(*ptr++);
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe18 	bl	80004f0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf1      	blt.n	80008b2 <_write+0x12>
	}
	return len;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <HAL_MspInit+0x54>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x54>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_MspInit+0x54>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_MspInit+0x54>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 faf7 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a4c      	ldr	r2, [pc, #304]	; (8000a80 <HAL_UART_MspInit+0x150>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12d      	bne.n	80009ae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a4a      	ldr	r2, [pc, #296]	; (8000a84 <HAL_UART_MspInit+0x154>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	623b      	str	r3, [r7, #32]
 800096c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800098a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099c:	2307      	movs	r3, #7
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4838      	ldr	r0, [pc, #224]	; (8000a88 <HAL_UART_MspInit+0x158>)
 80009a8:	f000 fadc 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ac:	e063      	b.n	8000a76 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a36      	ldr	r2, [pc, #216]	; (8000a8c <HAL_UART_MspInit+0x15c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d12c      	bne.n	8000a12 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <HAL_UART_MspInit+0x154>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	4a30      	ldr	r2, [pc, #192]	; (8000a84 <HAL_UART_MspInit+0x154>)
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c6:	6413      	str	r3, [r2, #64]	; 0x40
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <HAL_UART_MspInit+0x154>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <HAL_UART_MspInit+0x154>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <HAL_UART_MspInit+0x154>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <HAL_UART_MspInit+0x154>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f0:	230c      	movs	r3, #12
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a00:	2307      	movs	r3, #7
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481f      	ldr	r0, [pc, #124]	; (8000a88 <HAL_UART_MspInit+0x158>)
 8000a0c:	f000 faaa 	bl	8000f64 <HAL_GPIO_Init>
}
 8000a10:	e031      	b.n	8000a76 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_UART_MspInit+0x160>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d12c      	bne.n	8000a76 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_MspInit+0x154>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a66:	2307      	movs	r3, #7
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <HAL_UART_MspInit+0x164>)
 8000a72:	f000 fa77 	bl	8000f64 <HAL_GPIO_Init>
}
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	; 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40004800 	.word	0x40004800
 8000a94:	40020400 	.word	0x40020400

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2036      	movs	r0, #54	; 0x36
 8000aae:	f000 fa2f 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ab2:	2036      	movs	r0, #54	; 0x36
 8000ab4:	f000 fa48 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xa4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_InitTick+0xa4>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xa4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad4:	f107 0210 	add.w	r2, r7, #16
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f84c 	bl	8001b7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae4:	f001 f822 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xa8>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0xac>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0xb0>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_InitTick+0xac>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0xac>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0xac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_InitTick+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_InitTick+0xac>)
 8000b1e:	f001 f85f 	bl	8001be0 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_InitTick+0xac>)
 8000b2a:	f001 f88e 	bl	8001c4a <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	20004a84 	.word	0x20004a84
 8000b48:	40001000 	.word	0x40001000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM6_DAC_IRQHandler+0x10>)
 8000b7e:	f001 f888 	bl	8001c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20004a84 	.word	0x20004a84

08000b8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
	}

return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_isatty>:

int _isatty(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f004 fc94 	bl	800558c <__errno>
 8000c64:	4602      	mov	r2, r0
 8000c66:	230c      	movs	r3, #12
 8000c68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20030000 	.word	0x20030000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000090 	.word	0x20000090
 8000c98:	20004b10 	.word	0x20004b10

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <SystemInit+0x28>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <SystemInit+0x28>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SystemInit+0x28>)
 8000cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ccc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cce:	e003      	b.n	8000cd8 <LoopCopyDataInit>

08000cd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cd6:	3104      	adds	r1, #4

08000cd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ce0:	d3f6      	bcc.n	8000cd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ce4:	e002      	b.n	8000cec <LoopFillZerobss>

08000ce6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ce6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce8:	f842 3b04 	str.w	r3, [r2], #4

08000cec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cf0:	d3f9      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ffd3 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f004 fc4f 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc21 	bl	8000540 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d04:	0800601c 	.word	0x0800601c
  ldr  r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d0c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000d10:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000d14:	20004b0c 	.word	0x20004b0c

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8d8 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fea4 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fdc2 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20004ac4 	.word	0x20004ac4

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20004ac4 	.word	0x20004ac4

08000da0 <__NVIC_SetPriorityGrouping>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e177      	b.n	8001270 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8166 	bne.w	800126a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d00b      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb2:	2b11      	cmp	r3, #17
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0xfc>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80c0 	beq.w	800126a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_GPIO_Init+0x320>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a64      	ldr	r2, [pc, #400]	; (8001284 <HAL_GPIO_Init+0x320>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <HAL_GPIO_Init+0x320>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a60      	ldr	r2, [pc, #384]	; (8001288 <HAL_GPIO_Init+0x324>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_GPIO_Init+0x328>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d037      	beq.n	80011a2 <HAL_GPIO_Init+0x23e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x32c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d031      	beq.n	800119e <HAL_GPIO_Init+0x23a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a55      	ldr	r2, [pc, #340]	; (8001294 <HAL_GPIO_Init+0x330>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d02b      	beq.n	800119a <HAL_GPIO_Init+0x236>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a54      	ldr	r2, [pc, #336]	; (8001298 <HAL_GPIO_Init+0x334>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x232>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <HAL_GPIO_Init+0x338>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x22e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_GPIO_Init+0x33c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x22a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x340>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x226>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <HAL_GPIO_Init+0x344>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x348>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	; (80012b0 <HAL_GPIO_Init+0x34c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x21a>
 800117a:	2309      	movs	r3, #9
 800117c:	e012      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 800117e:	230a      	movs	r3, #10
 8001180:	e010      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 8001182:	2308      	movs	r3, #8
 8001184:	e00e      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 8001186:	2307      	movs	r3, #7
 8001188:	e00c      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 800118a:	2306      	movs	r3, #6
 800118c:	e00a      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 800118e:	2305      	movs	r3, #5
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 8001192:	2304      	movs	r3, #4
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x240>
 80011a2:	2300      	movs	r3, #0
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b4:	4934      	ldr	r1, [pc, #208]	; (8001288 <HAL_GPIO_Init+0x324>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <HAL_GPIO_Init+0x350>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e6:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_GPIO_Init+0x350>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <HAL_GPIO_Init+0x350>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_GPIO_Init+0x350>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_GPIO_Init+0x350>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_GPIO_Init+0x350>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_GPIO_Init+0x350>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_GPIO_Init+0x350>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f67f ae84 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001278:	bf00      	nop
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40021c00 	.word	0x40021c00
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40022400 	.word	0x40022400
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e25b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e236      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fd0a 	bl	8000d88 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fd06 	bl	8000d88 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1fb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcf6 	bl	8000d88 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fcf2 	bl	8000d88 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1e7      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1bb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4952      	ldr	r1, [pc, #328]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fcab 	bl	8000d88 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fca7 	bl	8000d88 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e19c      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4940      	ldr	r1, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc8a 	bl	8000d88 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc86 	bl	8000d88 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e17b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc6a 	bl	8000d88 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc66 	bl	8000d88 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e15b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc53 	bl	8000d88 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc4f 	bl	8000d88 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e144      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a0 	beq.w	8001652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d121      	bne.n	8001592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fc15 	bl	8000d88 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x2ce>
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	42470000 	.word	0x42470000
 800156c:	42470e80 	.word	0x42470e80
 8001570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff fc08 	bl	8000d88 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0fd      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4d4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a7c      	ldr	r2, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x312>
 80015b0:	4b77      	ldr	r3, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a76      	ldr	r2, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015ca:	4b71      	ldr	r3, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a70      	ldr	r2, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fbcd 	bl	8000d88 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fbc9 	bl	8000d88 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0bc      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x33a>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fbb7 	bl	8000d88 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fbb3 	bl	8000d88 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0a6      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8092 	beq.w	8001780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d05c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d141      	bne.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fb87 	bl	8000d88 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fb83 	bl	8000d88 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e078      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb5c 	bl	8000d88 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fb58 	bl	8000d88 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04d      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x41c>
 80016f2:	e045      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb45 	bl	8000d88 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fb41 	bl	8000d88 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e036      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x44a>
 8001720:	e02e      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e029      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	429a      	cmp	r2, r3
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d115      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa7e 	bl	8000d88 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa7a 	bl	8000d88 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8aa 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08005f90 	.word	0x08005f90
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d007      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x32>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d008      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x38>
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80b4 	bne.w	8001af8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e0b3      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e0b0      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04a      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	ea03 0501 	and.w	r5, r3, r1
 80019c8:	ea04 0602 	and.w	r6, r4, r2
 80019cc:	4629      	mov	r1, r5
 80019ce:	4632      	mov	r2, r6
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	0154      	lsls	r4, r2, #5
 80019da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019de:	014b      	lsls	r3, r1, #5
 80019e0:	4619      	mov	r1, r3
 80019e2:	4622      	mov	r2, r4
 80019e4:	1b49      	subs	r1, r1, r5
 80019e6:	eb62 0206 	sbc.w	r2, r2, r6
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	f04f 0400 	mov.w	r4, #0
 80019f2:	0194      	lsls	r4, r2, #6
 80019f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019f8:	018b      	lsls	r3, r1, #6
 80019fa:	1a5b      	subs	r3, r3, r1
 80019fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	00e2      	lsls	r2, r4, #3
 8001a0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a0e:	00d9      	lsls	r1, r3, #3
 8001a10:	460b      	mov	r3, r1
 8001a12:	4614      	mov	r4, r2
 8001a14:	195b      	adds	r3, r3, r5
 8001a16:	eb44 0406 	adc.w	r4, r4, r6
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	0262      	lsls	r2, r4, #9
 8001a24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a28:	0259      	lsls	r1, r3, #9
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4621      	mov	r1, r4
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	f7fe fbd8 	bl	80001f0 <__aeabi_uldivmod>
 8001a40:	4603      	mov	r3, r0
 8001a42:	460c      	mov	r4, r1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e049      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	f04f 0400 	mov.w	r4, #0
 8001a52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	ea03 0501 	and.w	r5, r3, r1
 8001a5e:	ea04 0602 	and.w	r6, r4, r2
 8001a62:	4629      	mov	r1, r5
 8001a64:	4632      	mov	r2, r6
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	0154      	lsls	r4, r2, #5
 8001a70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a74:	014b      	lsls	r3, r1, #5
 8001a76:	4619      	mov	r1, r3
 8001a78:	4622      	mov	r2, r4
 8001a7a:	1b49      	subs	r1, r1, r5
 8001a7c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	f04f 0400 	mov.w	r4, #0
 8001a88:	0194      	lsls	r4, r2, #6
 8001a8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a8e:	018b      	lsls	r3, r1, #6
 8001a90:	1a5b      	subs	r3, r3, r1
 8001a92:	eb64 0402 	sbc.w	r4, r4, r2
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	00e2      	lsls	r2, r4, #3
 8001aa0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001aa4:	00d9      	lsls	r1, r3, #3
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	195b      	adds	r3, r3, r5
 8001aac:	eb44 0406 	adc.w	r4, r4, r6
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	02a2      	lsls	r2, r4, #10
 8001aba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001abe:	0299      	lsls	r1, r3, #10
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4614      	mov	r4, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f04f 0400 	mov.w	r4, #0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	f7fe fb8d 	bl	80001f0 <__aeabi_uldivmod>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	60bb      	str	r3, [r7, #8]
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001afa:	60bb      	str	r3, [r7, #8]
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	68bb      	ldr	r3, [r7, #8]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08005fa0 	.word	0x08005fa0

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b58:	f7ff ffdc 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0b5b      	lsrs	r3, r3, #13
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08005fa0 	.word	0x08005fa0

08001b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	220f      	movs	r2, #15
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCC_GetClockConfig+0x60>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01d      	b.n	8001c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f815 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 f968 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d007      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d122      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d11b      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0202 	mvn.w	r2, #2
 8001cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8ee 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001cda:	e005      	b.n	8001ce8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8e0 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8f1 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d122      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d11b      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f06f 0204 	mvn.w	r2, #4
 8001d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8c4 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001d2e:	e005      	b.n	8001d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8b6 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c7 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d122      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11b      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f06f 0208 	mvn.w	r2, #8
 8001d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f89a 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001d82:	e005      	b.n	8001d90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f88c 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89d 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d122      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d11b      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f06f 0210 	mvn.w	r2, #16
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f870 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e005      	b.n	8001de4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f862 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f873 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0201 	mvn.w	r2, #1
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fd2f 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f903 	bl	8002048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f838 	bl	8001ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d10e      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d107      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0220 	mvn.w	r2, #32
 8001e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8cd 	bl	8002034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d027      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d023      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <TIM_Base_SetConfig+0x128>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <TIM_Base_SetConfig+0x130>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <TIM_Base_SetConfig+0x134>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <TIM_Base_SetConfig+0x138>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <TIM_Base_SetConfig+0x13c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800
 8002028:	40001800 	.word	0x40001800
 800202c:	40001c00 	.word	0x40001c00
 8002030:	40002000 	.word	0x40002000

08002034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e03f      	b.n	80020ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fc54 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800209e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f9b1 	bl	8002408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b088      	sub	sp, #32
 80020fa:	af02      	add	r7, sp, #8
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	f040 8083 	bne.w	800221e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_UART_Transmit+0x2e>
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e07b      	b.n	8002220 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_UART_Transmit+0x40>
 8002132:	2302      	movs	r3, #2
 8002134:	e074      	b.n	8002220 <HAL_UART_Transmit+0x12a>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2221      	movs	r2, #33	; 0x21
 8002148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800214c:	f7fe fe1c 	bl	8000d88 <HAL_GetTick>
 8002150:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	88fa      	ldrh	r2, [r7, #6]
 800215c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002166:	e042      	b.n	80021ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217e:	d122      	bne.n	80021c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2200      	movs	r2, #0
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f8f2 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e042      	b.n	8002220 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3302      	adds	r3, #2
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	e017      	b.n	80021ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	e013      	b.n	80021ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f8cf 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e01f      	b.n	8002220 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	60ba      	str	r2, [r7, #8]
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1b7      	bne.n	8002168 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2200      	movs	r2, #0
 8002200:	2140      	movs	r1, #64	; 0x40
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8b6 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e006      	b.n	8002220 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
  }
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	f040 8090 	bne.w	800236a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_UART_Receive+0x2e>
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e088      	b.n	800236c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_UART_Receive+0x40>
 8002264:	2302      	movs	r3, #2
 8002266:	e081      	b.n	800236c <HAL_UART_Receive+0x144>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2222      	movs	r2, #34	; 0x22
 800227a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800227e:	f7fe fd83 	bl	8000d88 <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002298:	e05c      	b.n	8002354 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	d12b      	bne.n	800230a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2120      	movs	r1, #32
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f859 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e04f      	b.n	800236c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10c      	bne.n	80022f2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3302      	adds	r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	e030      	b.n	8002354 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	e024      	b.n	8002354 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	2120      	movs	r1, #32
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f82d 	bl	8002374 <UART_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e023      	b.n	800236c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d108      	bne.n	800233e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	60ba      	str	r2, [r7, #8]
 8002338:	b2ca      	uxtb	r2, r1
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	e00a      	b.n	8002354 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1c59      	adds	r1, r3, #1
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d19d      	bne.n	800229a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002384:	e02c      	b.n	80023e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d028      	beq.n	80023e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002394:	f7fe fcf8 	bl	8000d88 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d21d      	bcs.n	80023e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e00f      	b.n	8002400 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4013      	ands	r3, r2
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d0c3      	beq.n	8002386 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800244a:	f023 030c 	bic.w	r3, r3, #12
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002476:	f040 818b 	bne.w	8002790 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4ac1      	ldr	r2, [pc, #772]	; (8002784 <UART_SetConfig+0x37c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d005      	beq.n	8002490 <UART_SetConfig+0x88>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4abf      	ldr	r2, [pc, #764]	; (8002788 <UART_SetConfig+0x380>)
 800248a:	4293      	cmp	r3, r2
 800248c:	f040 80bd 	bne.w	800260a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002490:	f7ff fb60 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8002494:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	461d      	mov	r5, r3
 800249a:	f04f 0600 	mov.w	r6, #0
 800249e:	46a8      	mov	r8, r5
 80024a0:	46b1      	mov	r9, r6
 80024a2:	eb18 0308 	adds.w	r3, r8, r8
 80024a6:	eb49 0409 	adc.w	r4, r9, r9
 80024aa:	4698      	mov	r8, r3
 80024ac:	46a1      	mov	r9, r4
 80024ae:	eb18 0805 	adds.w	r8, r8, r5
 80024b2:	eb49 0906 	adc.w	r9, r9, r6
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024ca:	4688      	mov	r8, r1
 80024cc:	4691      	mov	r9, r2
 80024ce:	eb18 0005 	adds.w	r0, r8, r5
 80024d2:	eb49 0106 	adc.w	r1, r9, r6
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	461d      	mov	r5, r3
 80024dc:	f04f 0600 	mov.w	r6, #0
 80024e0:	196b      	adds	r3, r5, r5
 80024e2:	eb46 0406 	adc.w	r4, r6, r6
 80024e6:	461a      	mov	r2, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	f7fd fe81 	bl	80001f0 <__aeabi_uldivmod>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	461a      	mov	r2, r3
 80024f4:	4ba5      	ldr	r3, [pc, #660]	; (800278c <UART_SetConfig+0x384>)
 80024f6:	fba3 2302 	umull	r2, r3, r3, r2
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	461d      	mov	r5, r3
 8002504:	f04f 0600 	mov.w	r6, #0
 8002508:	46a9      	mov	r9, r5
 800250a:	46b2      	mov	sl, r6
 800250c:	eb19 0309 	adds.w	r3, r9, r9
 8002510:	eb4a 040a 	adc.w	r4, sl, sl
 8002514:	4699      	mov	r9, r3
 8002516:	46a2      	mov	sl, r4
 8002518:	eb19 0905 	adds.w	r9, r9, r5
 800251c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800252c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002530:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002534:	4689      	mov	r9, r1
 8002536:	4692      	mov	sl, r2
 8002538:	eb19 0005 	adds.w	r0, r9, r5
 800253c:	eb4a 0106 	adc.w	r1, sl, r6
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	461d      	mov	r5, r3
 8002546:	f04f 0600 	mov.w	r6, #0
 800254a:	196b      	adds	r3, r5, r5
 800254c:	eb46 0406 	adc.w	r4, r6, r6
 8002550:	461a      	mov	r2, r3
 8002552:	4623      	mov	r3, r4
 8002554:	f7fd fe4c 	bl	80001f0 <__aeabi_uldivmod>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	461a      	mov	r2, r3
 800255e:	4b8b      	ldr	r3, [pc, #556]	; (800278c <UART_SetConfig+0x384>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	3332      	adds	r3, #50	; 0x32
 8002572:	4a86      	ldr	r2, [pc, #536]	; (800278c <UART_SetConfig+0x384>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002580:	4498      	add	r8, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	461d      	mov	r5, r3
 8002586:	f04f 0600 	mov.w	r6, #0
 800258a:	46a9      	mov	r9, r5
 800258c:	46b2      	mov	sl, r6
 800258e:	eb19 0309 	adds.w	r3, r9, r9
 8002592:	eb4a 040a 	adc.w	r4, sl, sl
 8002596:	4699      	mov	r9, r3
 8002598:	46a2      	mov	sl, r4
 800259a:	eb19 0905 	adds.w	r9, r9, r5
 800259e:	eb4a 0a06 	adc.w	sl, sl, r6
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025b6:	4689      	mov	r9, r1
 80025b8:	4692      	mov	sl, r2
 80025ba:	eb19 0005 	adds.w	r0, r9, r5
 80025be:	eb4a 0106 	adc.w	r1, sl, r6
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	461d      	mov	r5, r3
 80025c8:	f04f 0600 	mov.w	r6, #0
 80025cc:	196b      	adds	r3, r5, r5
 80025ce:	eb46 0406 	adc.w	r4, r6, r6
 80025d2:	461a      	mov	r2, r3
 80025d4:	4623      	mov	r3, r4
 80025d6:	f7fd fe0b 	bl	80001f0 <__aeabi_uldivmod>
 80025da:	4603      	mov	r3, r0
 80025dc:	460c      	mov	r4, r1
 80025de:	461a      	mov	r2, r3
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <UART_SetConfig+0x384>)
 80025e2:	fba3 1302 	umull	r1, r3, r3, r2
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2164      	movs	r1, #100	; 0x64
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	3332      	adds	r3, #50	; 0x32
 80025f4:	4a65      	ldr	r2, [pc, #404]	; (800278c <UART_SetConfig+0x384>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	f003 0207 	and.w	r2, r3, #7
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4442      	add	r2, r8
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e26f      	b.n	8002aea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800260a:	f7ff fa8f 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 800260e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	461d      	mov	r5, r3
 8002614:	f04f 0600 	mov.w	r6, #0
 8002618:	46a8      	mov	r8, r5
 800261a:	46b1      	mov	r9, r6
 800261c:	eb18 0308 	adds.w	r3, r8, r8
 8002620:	eb49 0409 	adc.w	r4, r9, r9
 8002624:	4698      	mov	r8, r3
 8002626:	46a1      	mov	r9, r4
 8002628:	eb18 0805 	adds.w	r8, r8, r5
 800262c:	eb49 0906 	adc.w	r9, r9, r6
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800263c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002640:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002644:	4688      	mov	r8, r1
 8002646:	4691      	mov	r9, r2
 8002648:	eb18 0005 	adds.w	r0, r8, r5
 800264c:	eb49 0106 	adc.w	r1, r9, r6
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	461d      	mov	r5, r3
 8002656:	f04f 0600 	mov.w	r6, #0
 800265a:	196b      	adds	r3, r5, r5
 800265c:	eb46 0406 	adc.w	r4, r6, r6
 8002660:	461a      	mov	r2, r3
 8002662:	4623      	mov	r3, r4
 8002664:	f7fd fdc4 	bl	80001f0 <__aeabi_uldivmod>
 8002668:	4603      	mov	r3, r0
 800266a:	460c      	mov	r4, r1
 800266c:	461a      	mov	r2, r3
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <UART_SetConfig+0x384>)
 8002670:	fba3 2302 	umull	r2, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	461d      	mov	r5, r3
 800267e:	f04f 0600 	mov.w	r6, #0
 8002682:	46a9      	mov	r9, r5
 8002684:	46b2      	mov	sl, r6
 8002686:	eb19 0309 	adds.w	r3, r9, r9
 800268a:	eb4a 040a 	adc.w	r4, sl, sl
 800268e:	4699      	mov	r9, r3
 8002690:	46a2      	mov	sl, r4
 8002692:	eb19 0905 	adds.w	r9, r9, r5
 8002696:	eb4a 0a06 	adc.w	sl, sl, r6
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026ae:	4689      	mov	r9, r1
 80026b0:	4692      	mov	sl, r2
 80026b2:	eb19 0005 	adds.w	r0, r9, r5
 80026b6:	eb4a 0106 	adc.w	r1, sl, r6
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	461d      	mov	r5, r3
 80026c0:	f04f 0600 	mov.w	r6, #0
 80026c4:	196b      	adds	r3, r5, r5
 80026c6:	eb46 0406 	adc.w	r4, r6, r6
 80026ca:	461a      	mov	r2, r3
 80026cc:	4623      	mov	r3, r4
 80026ce:	f7fd fd8f 	bl	80001f0 <__aeabi_uldivmod>
 80026d2:	4603      	mov	r3, r0
 80026d4:	460c      	mov	r4, r1
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <UART_SetConfig+0x384>)
 80026da:	fba3 1302 	umull	r1, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2164      	movs	r1, #100	; 0x64
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	3332      	adds	r3, #50	; 0x32
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <UART_SetConfig+0x384>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026fa:	4498      	add	r8, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	461d      	mov	r5, r3
 8002700:	f04f 0600 	mov.w	r6, #0
 8002704:	46a9      	mov	r9, r5
 8002706:	46b2      	mov	sl, r6
 8002708:	eb19 0309 	adds.w	r3, r9, r9
 800270c:	eb4a 040a 	adc.w	r4, sl, sl
 8002710:	4699      	mov	r9, r3
 8002712:	46a2      	mov	sl, r4
 8002714:	eb19 0905 	adds.w	r9, r9, r5
 8002718:	eb4a 0a06 	adc.w	sl, sl, r6
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002728:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800272c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002730:	4689      	mov	r9, r1
 8002732:	4692      	mov	sl, r2
 8002734:	eb19 0005 	adds.w	r0, r9, r5
 8002738:	eb4a 0106 	adc.w	r1, sl, r6
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	461d      	mov	r5, r3
 8002742:	f04f 0600 	mov.w	r6, #0
 8002746:	196b      	adds	r3, r5, r5
 8002748:	eb46 0406 	adc.w	r4, r6, r6
 800274c:	461a      	mov	r2, r3
 800274e:	4623      	mov	r3, r4
 8002750:	f7fd fd4e 	bl	80001f0 <__aeabi_uldivmod>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	461a      	mov	r2, r3
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <UART_SetConfig+0x384>)
 800275c:	fba3 1302 	umull	r1, r3, r3, r2
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	2164      	movs	r1, #100	; 0x64
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	3332      	adds	r3, #50	; 0x32
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <UART_SetConfig+0x384>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	f003 0207 	and.w	r2, r3, #7
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4442      	add	r2, r8
 8002780:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002782:	e1b2      	b.n	8002aea <UART_SetConfig+0x6e2>
 8002784:	40011000 	.word	0x40011000
 8002788:	40011400 	.word	0x40011400
 800278c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4ad7      	ldr	r2, [pc, #860]	; (8002af4 <UART_SetConfig+0x6ec>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d005      	beq.n	80027a6 <UART_SetConfig+0x39e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4ad6      	ldr	r2, [pc, #856]	; (8002af8 <UART_SetConfig+0x6f0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	f040 80d1 	bne.w	8002948 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027a6:	f7ff f9d5 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 80027aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	469a      	mov	sl, r3
 80027b0:	f04f 0b00 	mov.w	fp, #0
 80027b4:	46d0      	mov	r8, sl
 80027b6:	46d9      	mov	r9, fp
 80027b8:	eb18 0308 	adds.w	r3, r8, r8
 80027bc:	eb49 0409 	adc.w	r4, r9, r9
 80027c0:	4698      	mov	r8, r3
 80027c2:	46a1      	mov	r9, r4
 80027c4:	eb18 080a 	adds.w	r8, r8, sl
 80027c8:	eb49 090b 	adc.w	r9, r9, fp
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027e0:	4688      	mov	r8, r1
 80027e2:	4691      	mov	r9, r2
 80027e4:	eb1a 0508 	adds.w	r5, sl, r8
 80027e8:	eb4b 0609 	adc.w	r6, fp, r9
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f04f 0400 	mov.w	r4, #0
 80027fe:	0094      	lsls	r4, r2, #2
 8002800:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002804:	008b      	lsls	r3, r1, #2
 8002806:	461a      	mov	r2, r3
 8002808:	4623      	mov	r3, r4
 800280a:	4628      	mov	r0, r5
 800280c:	4631      	mov	r1, r6
 800280e:	f7fd fcef 	bl	80001f0 <__aeabi_uldivmod>
 8002812:	4603      	mov	r3, r0
 8002814:	460c      	mov	r4, r1
 8002816:	461a      	mov	r2, r3
 8002818:	4bb8      	ldr	r3, [pc, #736]	; (8002afc <UART_SetConfig+0x6f4>)
 800281a:	fba3 2302 	umull	r2, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	469b      	mov	fp, r3
 8002828:	f04f 0c00 	mov.w	ip, #0
 800282c:	46d9      	mov	r9, fp
 800282e:	46e2      	mov	sl, ip
 8002830:	eb19 0309 	adds.w	r3, r9, r9
 8002834:	eb4a 040a 	adc.w	r4, sl, sl
 8002838:	4699      	mov	r9, r3
 800283a:	46a2      	mov	sl, r4
 800283c:	eb19 090b 	adds.w	r9, r9, fp
 8002840:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002844:	f04f 0100 	mov.w	r1, #0
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002858:	4689      	mov	r9, r1
 800285a:	4692      	mov	sl, r2
 800285c:	eb1b 0509 	adds.w	r5, fp, r9
 8002860:	eb4c 060a 	adc.w	r6, ip, sl
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f04f 0400 	mov.w	r4, #0
 8002876:	0094      	lsls	r4, r2, #2
 8002878:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800287c:	008b      	lsls	r3, r1, #2
 800287e:	461a      	mov	r2, r3
 8002880:	4623      	mov	r3, r4
 8002882:	4628      	mov	r0, r5
 8002884:	4631      	mov	r1, r6
 8002886:	f7fd fcb3 	bl	80001f0 <__aeabi_uldivmod>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	461a      	mov	r2, r3
 8002890:	4b9a      	ldr	r3, [pc, #616]	; (8002afc <UART_SetConfig+0x6f4>)
 8002892:	fba3 1302 	umull	r1, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2164      	movs	r1, #100	; 0x64
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	3332      	adds	r3, #50	; 0x32
 80028a4:	4a95      	ldr	r2, [pc, #596]	; (8002afc <UART_SetConfig+0x6f4>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b0:	4498      	add	r8, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	469b      	mov	fp, r3
 80028b6:	f04f 0c00 	mov.w	ip, #0
 80028ba:	46d9      	mov	r9, fp
 80028bc:	46e2      	mov	sl, ip
 80028be:	eb19 0309 	adds.w	r3, r9, r9
 80028c2:	eb4a 040a 	adc.w	r4, sl, sl
 80028c6:	4699      	mov	r9, r3
 80028c8:	46a2      	mov	sl, r4
 80028ca:	eb19 090b 	adds.w	r9, r9, fp
 80028ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028e6:	4689      	mov	r9, r1
 80028e8:	4692      	mov	sl, r2
 80028ea:	eb1b 0509 	adds.w	r5, fp, r9
 80028ee:	eb4c 060a 	adc.w	r6, ip, sl
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4619      	mov	r1, r3
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f04f 0400 	mov.w	r4, #0
 8002904:	0094      	lsls	r4, r2, #2
 8002906:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800290a:	008b      	lsls	r3, r1, #2
 800290c:	461a      	mov	r2, r3
 800290e:	4623      	mov	r3, r4
 8002910:	4628      	mov	r0, r5
 8002912:	4631      	mov	r1, r6
 8002914:	f7fd fc6c 	bl	80001f0 <__aeabi_uldivmod>
 8002918:	4603      	mov	r3, r0
 800291a:	460c      	mov	r4, r1
 800291c:	461a      	mov	r2, r3
 800291e:	4b77      	ldr	r3, [pc, #476]	; (8002afc <UART_SetConfig+0x6f4>)
 8002920:	fba3 1302 	umull	r1, r3, r3, r2
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	2164      	movs	r1, #100	; 0x64
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	3332      	adds	r3, #50	; 0x32
 8002932:	4a72      	ldr	r2, [pc, #456]	; (8002afc <UART_SetConfig+0x6f4>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	f003 020f 	and.w	r2, r3, #15
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4442      	add	r2, r8
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	e0d0      	b.n	8002aea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002948:	f7ff f8f0 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 800294c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	469a      	mov	sl, r3
 8002952:	f04f 0b00 	mov.w	fp, #0
 8002956:	46d0      	mov	r8, sl
 8002958:	46d9      	mov	r9, fp
 800295a:	eb18 0308 	adds.w	r3, r8, r8
 800295e:	eb49 0409 	adc.w	r4, r9, r9
 8002962:	4698      	mov	r8, r3
 8002964:	46a1      	mov	r9, r4
 8002966:	eb18 080a 	adds.w	r8, r8, sl
 800296a:	eb49 090b 	adc.w	r9, r9, fp
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800297a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800297e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002982:	4688      	mov	r8, r1
 8002984:	4691      	mov	r9, r2
 8002986:	eb1a 0508 	adds.w	r5, sl, r8
 800298a:	eb4b 0609 	adc.w	r6, fp, r9
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4619      	mov	r1, r3
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	0094      	lsls	r4, r2, #2
 80029a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029a6:	008b      	lsls	r3, r1, #2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	4628      	mov	r0, r5
 80029ae:	4631      	mov	r1, r6
 80029b0:	f7fd fc1e 	bl	80001f0 <__aeabi_uldivmod>
 80029b4:	4603      	mov	r3, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <UART_SetConfig+0x6f4>)
 80029bc:	fba3 2302 	umull	r2, r3, r3, r2
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	469b      	mov	fp, r3
 80029ca:	f04f 0c00 	mov.w	ip, #0
 80029ce:	46d9      	mov	r9, fp
 80029d0:	46e2      	mov	sl, ip
 80029d2:	eb19 0309 	adds.w	r3, r9, r9
 80029d6:	eb4a 040a 	adc.w	r4, sl, sl
 80029da:	4699      	mov	r9, r3
 80029dc:	46a2      	mov	sl, r4
 80029de:	eb19 090b 	adds.w	r9, r9, fp
 80029e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029e6:	f04f 0100 	mov.w	r1, #0
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029fa:	4689      	mov	r9, r1
 80029fc:	4692      	mov	sl, r2
 80029fe:	eb1b 0509 	adds.w	r5, fp, r9
 8002a02:	eb4c 060a 	adc.w	r6, ip, sl
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f04f 0400 	mov.w	r4, #0
 8002a18:	0094      	lsls	r4, r2, #2
 8002a1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a1e:	008b      	lsls	r3, r1, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4623      	mov	r3, r4
 8002a24:	4628      	mov	r0, r5
 8002a26:	4631      	mov	r1, r6
 8002a28:	f7fd fbe2 	bl	80001f0 <__aeabi_uldivmod>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b32      	ldr	r3, [pc, #200]	; (8002afc <UART_SetConfig+0x6f4>)
 8002a34:	fba3 1302 	umull	r1, r3, r3, r2
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	2164      	movs	r1, #100	; 0x64
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	3332      	adds	r3, #50	; 0x32
 8002a46:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <UART_SetConfig+0x6f4>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a52:	4498      	add	r8, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	469b      	mov	fp, r3
 8002a58:	f04f 0c00 	mov.w	ip, #0
 8002a5c:	46d9      	mov	r9, fp
 8002a5e:	46e2      	mov	sl, ip
 8002a60:	eb19 0309 	adds.w	r3, r9, r9
 8002a64:	eb4a 040a 	adc.w	r4, sl, sl
 8002a68:	4699      	mov	r9, r3
 8002a6a:	46a2      	mov	sl, r4
 8002a6c:	eb19 090b 	adds.w	r9, r9, fp
 8002a70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a88:	4689      	mov	r9, r1
 8002a8a:	4692      	mov	sl, r2
 8002a8c:	eb1b 0509 	adds.w	r5, fp, r9
 8002a90:	eb4c 060a 	adc.w	r6, ip, sl
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	0094      	lsls	r4, r2, #2
 8002aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002aac:	008b      	lsls	r3, r1, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4631      	mov	r1, r6
 8002ab6:	f7fd fb9b 	bl	80001f0 <__aeabi_uldivmod>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <UART_SetConfig+0x6f4>)
 8002ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2164      	movs	r1, #100	; 0x64
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a09      	ldr	r2, [pc, #36]	; (8002afc <UART_SetConfig+0x6f4>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4442      	add	r2, r8
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	e7ff      	b.n	8002aea <UART_SetConfig+0x6e2>
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40011400 	.word	0x40011400
 8002afc:	51eb851f 	.word	0x51eb851f

08002b00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b16:	f3ef 8305 	mrs	r3, IPSR
 8002b1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b22:	f3ef 8310 	mrs	r3, PRIMASK
 8002b26:	607b      	str	r3, [r7, #4]
  return(result);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002b32:	603b      	str	r3, [r7, #0]
  return(result);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <osKernelInitialize+0x3a>
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <osKernelInitialize+0x64>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d103      	bne.n	8002b4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002b42:	f06f 0305 	mvn.w	r3, #5
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e00c      	b.n	8002b64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <osKernelInitialize+0x64>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <osKernelInitialize+0x64>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e002      	b.n	8002b64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b64:	68fb      	ldr	r3, [r7, #12]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000094 	.word	0x20000094

08002b78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b7e:	f3ef 8305 	mrs	r3, IPSR
 8002b82:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8e:	607b      	str	r3, [r7, #4]
  return(result);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b96:	f3ef 8311 	mrs	r3, BASEPRI
 8002b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <osKernelStart+0x3a>
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <osKernelStart+0x68>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002baa:	f06f 0305 	mvn.w	r3, #5
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e010      	b.n	8002bd4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <osKernelStart+0x68>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d109      	bne.n	8002bce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002bba:	f7ff ffa1 	bl	8002b00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <osKernelStart+0x68>)
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bc4:	f001 f870 	bl	8003ca8 <vTaskStartScheduler>
      stat = osOK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e002      	b.n	8002bd4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000094 	.word	0x20000094

08002be4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b090      	sub	sp, #64	; 0x40
 8002be8:	af04      	add	r7, sp, #16
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf4:	f3ef 8305 	mrs	r3, IPSR
 8002bf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bfa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 808f 	bne.w	8002d20 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c02:	f3ef 8310 	mrs	r3, PRIMASK
 8002c06:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c12:	617b      	str	r3, [r7, #20]
  return(result);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <osThreadNew+0x3e>
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <osThreadNew+0x148>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d07e      	beq.n	8002d20 <osThreadNew+0x13c>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d07b      	beq.n	8002d20 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002c2c:	2318      	movs	r3, #24
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d045      	beq.n	8002ccc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <osThreadNew+0x6a>
        name = attr->name;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <osThreadNew+0x90>
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	2b38      	cmp	r3, #56	; 0x38
 8002c66:	d805      	bhi.n	8002c74 <osThreadNew+0x90>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <osThreadNew+0x94>
        return (NULL);
 8002c74:	2300      	movs	r3, #0
 8002c76:	e054      	b.n	8002d22 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <osThreadNew+0xca>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b5b      	cmp	r3, #91	; 0x5b
 8002c96:	d90a      	bls.n	8002cae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <osThreadNew+0xca>
        mem = 1;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	e010      	b.n	8002cd0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10c      	bne.n	8002cd0 <osThreadNew+0xec>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <osThreadNew+0xec>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <osThreadNew+0xec>
          mem = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	e001      	b.n	8002cd0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d110      	bne.n	8002cf8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cde:	9202      	str	r2, [sp, #8]
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fe09 	bl	8003904 <xTaskCreateStatic>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e013      	b.n	8002d20 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d110      	bne.n	8002d20 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fe51 	bl	80039b8 <xTaskCreate>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d001      	beq.n	8002d20 <osThreadNew+0x13c>
          hTask = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d20:	693b      	ldr	r3, [r7, #16]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3730      	adds	r7, #48	; 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000094 	.word	0x20000094

08002d30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d38:	f3ef 8305 	mrs	r3, IPSR
 8002d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10f      	bne.n	8002d64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d44:	f3ef 8310 	mrs	r3, PRIMASK
 8002d48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d50:	f3ef 8311 	mrs	r3, BASEPRI
 8002d54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <osDelay+0x3c>
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <osDelay+0x58>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d103      	bne.n	8002d6c <osDelay+0x3c>
    stat = osErrorISR;
 8002d64:	f06f 0305 	mvn.w	r3, #5
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e007      	b.n	8002d7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 ff62 	bl	8003c40 <vTaskDelay>
    }
  }

  return (stat);
 8002d7c:	697b      	ldr	r3, [r7, #20]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000094 	.word	0x20000094

08002d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <vApplicationGetIdleTaskMemory+0x30>)
 8002da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000098 	.word	0x20000098
 8002dbc:	200000f4 	.word	0x200000f4

08002dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <vApplicationGetTimerTaskMemory+0x2c>)
 8002dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <vApplicationGetTimerTaskMemory+0x30>)
 8002dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dde:	601a      	str	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	200002f4 	.word	0x200002f4
 8002df0:	20000350 	.word	0x20000350

08002df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f103 0208 	add.w	r2, r3, #8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f103 0208 	add.w	r2, r3, #8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f103 0208 	add.w	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d103      	bne.n	8002eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e00c      	b.n	8002ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3308      	adds	r3, #8
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e002      	b.n	8002ec4 <vListInsert+0x2e>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d2f6      	bcs.n	8002ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d103      	bne.n	8002f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	e7fe      	b.n	8002f82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002f84:	f002 f812 	bl	8004fac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	441a      	add	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	22ff      	movs	r2, #255	; 0xff
 8002fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d114      	bne.n	8003004 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01a      	beq.n	8003018 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3310      	adds	r3, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 f8de 	bl	80041a8 <xTaskRemoveFromEventList>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <xQueueGenericReset+0xcc>)
 8002ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	e009      	b.n	8003018 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3310      	adds	r3, #16
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fef3 	bl	8002df4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3324      	adds	r3, #36	; 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff feee 	bl	8002df4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003018:	f001 fff6 	bl	8005008 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800301c:	2301      	movs	r3, #1
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08e      	sub	sp, #56	; 0x38
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <xQueueGenericCreateStatic+0x28>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
 8003052:	e7fe      	b.n	8003052 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <xQueueGenericCreateStatic+0x42>
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	e7fe      	b.n	800306c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <xQueueGenericCreateStatic+0x4e>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <xQueueGenericCreateStatic+0x52>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <xQueueGenericCreateStatic+0x54>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <xQueueGenericCreateStatic+0x6c>
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	e7fe      	b.n	8003096 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <xQueueGenericCreateStatic+0x78>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <xQueueGenericCreateStatic+0x7c>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <xQueueGenericCreateStatic+0x7e>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <xQueueGenericCreateStatic+0x96>
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	e7fe      	b.n	80030c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030c2:	2350      	movs	r3, #80	; 0x50
 80030c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d009      	beq.n	80030e0 <xQueueGenericCreateStatic+0xb4>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e7fe      	b.n	80030de <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f805 	bl	8003112 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800310a:	4618      	mov	r0, r3
 800310c:	3730      	adds	r7, #48	; 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e002      	b.n	8003134 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003140:	2101      	movs	r1, #1
 8003142:	69b8      	ldr	r0, [r7, #24]
 8003144:	f7ff ff0a 	bl	8002f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08e      	sub	sp, #56	; 0x38
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003166:	2300      	movs	r3, #0
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <xQueueGenericSend+0x30>
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
 8003186:	e7fe      	b.n	8003186 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <xQueueGenericSend+0x3e>
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <xQueueGenericSend+0x42>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueGenericSend+0x44>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <xQueueGenericSend+0x5c>
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	e7fe      	b.n	80031b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d103      	bne.n	80031c2 <xQueueGenericSend+0x6a>
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <xQueueGenericSend+0x6e>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <xQueueGenericSend+0x70>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <xQueueGenericSend+0x88>
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	e7fe      	b.n	80031de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031e0:	f001 f998 	bl	8004514 <xTaskGetSchedulerState>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <xQueueGenericSend+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <xQueueGenericSend+0x9c>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <xQueueGenericSend+0x9e>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <xQueueGenericSend+0xb6>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	e7fe      	b.n	800320c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800320e:	f001 fecd 	bl	8004fac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <xQueueGenericSend+0xcc>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d129      	bne.n	8003278 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800322a:	f000 f9ff 	bl	800362c <prvCopyDataToQueue>
 800322e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	3324      	adds	r3, #36	; 0x24
 800323c:	4618      	mov	r0, r3
 800323e:	f000 ffb3 	bl	80041a8 <xTaskRemoveFromEventList>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d013      	beq.n	8003270 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <xQueueGenericSend+0x1f0>)
 800324a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	e00a      	b.n	8003270 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <xQueueGenericSend+0x1f0>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003270:	f001 feca 	bl	8005008 <vPortExitCritical>
				return pdPASS;
 8003274:	2301      	movs	r3, #1
 8003276:	e063      	b.n	8003340 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800327e:	f001 fec3 	bl	8005008 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003282:	2300      	movs	r3, #0
 8003284:	e05c      	b.n	8003340 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4618      	mov	r0, r3
 8003292:	f000 ffeb 	bl	800426c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003296:	2301      	movs	r3, #1
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800329a:	f001 feb5 	bl	8005008 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800329e:	f000 fd67 	bl	8003d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032a2:	f001 fe83 	bl	8004fac <vPortEnterCritical>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d103      	bne.n	80032bc <xQueueGenericSend+0x164>
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d103      	bne.n	80032d2 <xQueueGenericSend+0x17a>
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d2:	f001 fe99 	bl	8005008 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032d6:	1d3a      	adds	r2, r7, #4
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffda 	bl	8004298 <xTaskCheckForTimeOut>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d124      	bne.n	8003334 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ec:	f000 fa96 	bl	800381c <prvIsQueueFull>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d018      	beq.n	8003328 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	3310      	adds	r3, #16
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 ff04 	bl	800410c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003306:	f000 fa21 	bl	800374c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800330a:	f000 fd3f 	bl	8003d8c <xTaskResumeAll>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f af7c 	bne.w	800320e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <xQueueGenericSend+0x1f0>)
 8003318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	e772      	b.n	800320e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332a:	f000 fa0f 	bl	800374c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800332e:	f000 fd2d 	bl	8003d8c <xTaskResumeAll>
 8003332:	e76c      	b.n	800320e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003336:	f000 fa09 	bl	800374c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800333a:	f000 fd27 	bl	8003d8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800333e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003340:	4618      	mov	r0, r3
 8003342:	3738      	adds	r7, #56	; 0x38
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08e      	sub	sp, #56	; 0x38
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <xQueueGenericSendFromISR+0x2c>
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e7fe      	b.n	8003376 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <xQueueGenericSendFromISR+0x3a>
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <xQueueGenericSendFromISR+0x3e>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <xQueueGenericSendFromISR+0x40>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <xQueueGenericSendFromISR+0x58>
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	e7fe      	b.n	80033a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d103      	bne.n	80033b2 <xQueueGenericSendFromISR+0x66>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <xQueueGenericSendFromISR+0x6a>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <xQueueGenericSendFromISR+0x6c>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <xQueueGenericSendFromISR+0x84>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e7fe      	b.n	80033ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d0:	f001 fec8 	bl	8005164 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033d4:	f3ef 8211 	mrs	r2, BASEPRI
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61ba      	str	r2, [r7, #24]
 80033ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <xQueueGenericSendFromISR+0xb6>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d12c      	bne.n	800345c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003412:	f000 f90b 	bl	800362c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003416:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d112      	bne.n	8003446 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d016      	beq.n	8003456 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	3324      	adds	r3, #36	; 0x24
 800342c:	4618      	mov	r0, r3
 800342e:	f000 febb 	bl	80041a8 <xTaskRemoveFromEventList>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e007      	b.n	8003456 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800344a:	3301      	adds	r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	b25a      	sxtb	r2, r3
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003456:	2301      	movs	r3, #1
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800345a:	e001      	b.n	8003460 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800345c:	2300      	movs	r3, #0
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800346c:	4618      	mov	r0, r3
 800346e:	3738      	adds	r7, #56	; 0x38
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <xQueueReceive+0x2e>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	e7fe      	b.n	80034a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <xQueueReceive+0x3c>
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <xQueueReceive+0x40>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <xQueueReceive+0x42>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <xQueueReceive+0x5a>
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e7fe      	b.n	80034cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ce:	f001 f821 	bl	8004514 <xTaskGetSchedulerState>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <xQueueReceive+0x6a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <xQueueReceive+0x6e>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueReceive+0x70>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <xQueueReceive+0x88>
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e7fe      	b.n	80034fa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034fc:	f001 fd56 	bl	8004fac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01f      	beq.n	800354c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003510:	f000 f8f6 	bl	8003700 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	3310      	adds	r3, #16
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fe3d 	bl	80041a8 <xTaskRemoveFromEventList>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003534:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <xQueueReceive+0x1b4>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003544:	f001 fd60 	bl	8005008 <vPortExitCritical>
				return pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	e069      	b.n	8003620 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003552:	f001 fd59 	bl	8005008 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003556:	2300      	movs	r3, #0
 8003558:	e062      	b.n	8003620 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fe81 	bl	800426c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356e:	f001 fd4b 	bl	8005008 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003572:	f000 fbfd 	bl	8003d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003576:	f001 fd19 	bl	8004fac <vPortEnterCritical>
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003580:	b25b      	sxtb	r3, r3
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d103      	bne.n	8003590 <xQueueReceive+0x11c>
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003596:	b25b      	sxtb	r3, r3
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d103      	bne.n	80035a6 <xQueueReceive+0x132>
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a6:	f001 fd2f 	bl	8005008 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035aa:	1d3a      	adds	r2, r7, #4
 80035ac:	f107 0310 	add.w	r3, r7, #16
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fe70 	bl	8004298 <xTaskCheckForTimeOut>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d123      	bne.n	8003606 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035c0:	f000 f916 	bl	80037f0 <prvIsQueueEmpty>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	3324      	adds	r3, #36	; 0x24
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fd9a 	bl	800410c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035da:	f000 f8b7 	bl	800374c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035de:	f000 fbd5 	bl	8003d8c <xTaskResumeAll>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d189      	bne.n	80034fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <xQueueReceive+0x1b4>)
 80035ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	e780      	b.n	80034fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035fc:	f000 f8a6 	bl	800374c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003600:	f000 fbc4 	bl	8003d8c <xTaskResumeAll>
 8003604:	e77a      	b.n	80034fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003608:	f000 f8a0 	bl	800374c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800360c:	f000 fbbe 	bl	8003d8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003612:	f000 f8ed 	bl	80037f0 <prvIsQueueEmpty>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	f43f af6f 	beq.w	80034fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800361e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003620:	4618      	mov	r0, r3
 8003622:	3730      	adds	r7, #48	; 0x30
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d14d      	bne.n	80036ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 ff7a 	bl	8004550 <xTaskPriorityDisinherit>
 800365c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e043      	b.n	80036ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d119      	bne.n	80036a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6858      	ldr	r0, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	461a      	mov	r2, r3
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	f001 ffb2 	bl	80055e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	441a      	add	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	d32b      	bcc.n	80036ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	e026      	b.n	80036ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68d8      	ldr	r0, [r3, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	461a      	mov	r2, r3
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	f001 ff98 	bl	80055e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	425b      	negs	r3, r3
 80036ba:	441a      	add	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d207      	bcs.n	80036dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	425b      	negs	r3, r3
 80036d6:	441a      	add	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d105      	bne.n	80036ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036f6:	697b      	ldr	r3, [r7, #20]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d018      	beq.n	8003744 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	429a      	cmp	r2, r3
 800372a:	d303      	bcc.n	8003734 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68d9      	ldr	r1, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	461a      	mov	r2, r3
 800373e:	6838      	ldr	r0, [r7, #0]
 8003740:	f001 ff4e 	bl	80055e0 <memcpy>
	}
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003754:	f001 fc2a 	bl	8004fac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003760:	e011      	b.n	8003786 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3324      	adds	r3, #36	; 0x24
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fd1a 	bl	80041a8 <xTaskRemoveFromEventList>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800377a:	f000 fded 	bl	8004358 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	3b01      	subs	r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	dce9      	bgt.n	8003762 <prvUnlockQueue+0x16>
 800378e:	e000      	b.n	8003792 <prvUnlockQueue+0x46>
					break;
 8003790:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	22ff      	movs	r2, #255	; 0xff
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800379a:	f001 fc35 	bl	8005008 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800379e:	f001 fc05 	bl	8004fac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037aa:	e011      	b.n	80037d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3310      	adds	r3, #16
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fcf5 	bl	80041a8 <xTaskRemoveFromEventList>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037c4:	f000 fdc8 	bl	8004358 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037c8:	7bbb      	ldrb	r3, [r7, #14]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	dce9      	bgt.n	80037ac <prvUnlockQueue+0x60>
 80037d8:	e000      	b.n	80037dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	22ff      	movs	r2, #255	; 0xff
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037e4:	f001 fc10 	bl	8005008 <vPortExitCritical>
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037f8:	f001 fbd8 	bl	8004fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e001      	b.n	800380e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800380e:	f001 fbfb 	bl	8005008 <vPortExitCritical>

	return xReturn;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003824:	f001 fbc2 	bl	8004fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	429a      	cmp	r2, r3
 8003832:	d102      	bne.n	800383a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e001      	b.n	800383e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800383e:	f001 fbe3 	bl	8005008 <vPortExitCritical>

	return xReturn;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e014      	b.n	8003886 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <vQueueAddToRegistry+0x4c>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003868:	490b      	ldr	r1, [pc, #44]	; (8003898 <vQueueAddToRegistry+0x4c>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <vQueueAddToRegistry+0x4c>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800387e:	e005      	b.n	800388c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b07      	cmp	r3, #7
 800388a:	d9e7      	bls.n	800385c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20004ac8 	.word	0x20004ac8

0800389c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038ac:	f001 fb7e 	bl	8004fac <vPortEnterCritical>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d103      	bne.n	80038c6 <vQueueWaitForMessageRestricted+0x2a>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d103      	bne.n	80038dc <vQueueWaitForMessageRestricted+0x40>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038dc:	f001 fb94 	bl	8005008 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3324      	adds	r3, #36	; 0x24
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fc2f 	bl	8004154 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7ff ff28 	bl	800374c <prvUnlockQueue>
	}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	; 0x38
 8003908:	af04      	add	r7, sp, #16
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <xTaskCreateStatic+0x28>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	e7fe      	b.n	800392a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <xTaskCreateStatic+0x42>
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e7fe      	b.n	8003944 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003946:	235c      	movs	r3, #92	; 0x5c
 8003948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b5c      	cmp	r3, #92	; 0x5c
 800394e:	d009      	beq.n	8003964 <xTaskCreateStatic+0x60>
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e7fe      	b.n	8003962 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01e      	beq.n	80039aa <xTaskCreateStatic+0xa6>
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01b      	beq.n	80039aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800397a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003984:	2300      	movs	r3, #0
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f850 	bl	8003a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a4:	f000 f8dc 	bl	8003b60 <prvAddNewTaskToReadyList>
 80039a8:	e001      	b.n	80039ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
	}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	; 0x30
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fc07 	bl	80051e0 <pvPortMalloc>
 80039d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039da:	205c      	movs	r0, #92	; 0x5c
 80039dc:	f001 fc00 	bl	80051e0 <pvPortMalloc>
 80039e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
 80039ee:	e005      	b.n	80039fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f001 fcb7 	bl	8005364 <vPortFree>
 80039f6:	e001      	b.n	80039fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f80e 	bl	8003a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a26:	69f8      	ldr	r0, [r7, #28]
 8003a28:	f000 f89a 	bl	8003b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e002      	b.n	8003a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a38:	69bb      	ldr	r3, [r7, #24]
	}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b088      	sub	sp, #32
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	21a5      	movs	r1, #165	; 0xa5
 8003a5c:	f001 fdcb 	bl	80055f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f023 0307 	bic.w	r3, r3, #7
 8003a78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <prvInitialiseNewTask+0x56>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e7fe      	b.n	8003a96 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01f      	beq.n	8003ade <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e012      	b.n	8003aca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	7819      	ldrb	r1, [r3, #0]
 8003aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3334      	adds	r3, #52	; 0x34
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b0f      	cmp	r3, #15
 8003ace:	d9e9      	bls.n	8003aa4 <prvInitialiseNewTask+0x62>
 8003ad0:	e000      	b.n	8003ad4 <prvInitialiseNewTask+0x92>
			{
				break;
 8003ad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003adc:	e003      	b.n	8003ae6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	2b37      	cmp	r3, #55	; 0x37
 8003aea:	d901      	bls.n	8003af0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aec:	2337      	movs	r3, #55	; 0x37
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	2200      	movs	r2, #0
 8003b00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	3304      	adds	r3, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff f994 	bl	8002e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	3318      	adds	r3, #24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f98f 	bl	8002e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	69b8      	ldr	r0, [r7, #24]
 8003b40:	f001 f90c 	bl	8004d5c <pxPortInitialiseStack>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b56:	bf00      	nop
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b68:	f001 fa20 	bl	8004fac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b76:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d110      	bne.n	8003bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b8c:	f000 fc08 	bl	80043a0 <prvInitialiseTaskLists>
 8003b90:	e00d      	b.n	8003bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <prvAddNewTaskToReadyList+0xcc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d802      	bhi.n	8003bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <prvAddNewTaskToReadyList+0xd0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <prvAddNewTaskToReadyList+0xd0>)
 8003bb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bb8:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <prvAddNewTaskToReadyList+0xd0>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <prvAddNewTaskToReadyList+0xd4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d903      	bls.n	8003bd4 <prvAddNewTaskToReadyList+0x74>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <prvAddNewTaskToReadyList+0xd4>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <prvAddNewTaskToReadyList+0xd8>)
 8003be2:	441a      	add	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7ff f92f 	bl	8002e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bf0:	f001 fa0a 	bl	8005008 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bf4:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <prvAddNewTaskToReadyList+0xcc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d207      	bcs.n	8003c1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <prvAddNewTaskToReadyList+0xdc>)
 8003c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000c24 	.word	0x20000c24
 8003c28:	20000750 	.word	0x20000750
 8003c2c:	20000c30 	.word	0x20000c30
 8003c30:	20000c40 	.word	0x20000c40
 8003c34:	20000c2c 	.word	0x20000c2c
 8003c38:	20000754 	.word	0x20000754
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d016      	beq.n	8003c80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <vTaskDelay+0x60>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <vTaskDelay+0x2e>
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	e7fe      	b.n	8003c6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c6e:	f000 f87f 	bl	8003d70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c72:	2100      	movs	r1, #0
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fcd7 	bl	8004628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c7a:	f000 f887 	bl	8003d8c <xTaskResumeAll>
 8003c7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <vTaskDelay+0x64>)
 8003c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000c4c 	.word	0x20000c4c
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cb6:	463a      	mov	r2, r7
 8003cb8:	1d39      	adds	r1, r7, #4
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff f864 	bl	8002d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cc4:	6839      	ldr	r1, [r7, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	9202      	str	r2, [sp, #8]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	4920      	ldr	r1, [pc, #128]	; (8003d58 <vTaskStartScheduler+0xb0>)
 8003cd8:	4820      	ldr	r0, [pc, #128]	; (8003d5c <vTaskStartScheduler+0xb4>)
 8003cda:	f7ff fe13 	bl	8003904 <xTaskCreateStatic>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <vTaskStartScheduler+0xb8>)
 8003ce2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <vTaskStartScheduler+0xb8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e001      	b.n	8003cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cfc:	f000 fce8 	bl	80046d0 <xTimerCreateTimerTask>
 8003d00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d115      	bne.n	8003d34 <vTaskStartScheduler+0x8c>
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <vTaskStartScheduler+0xbc>)
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <vTaskStartScheduler+0xc0>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <vTaskStartScheduler+0xc4>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d2e:	f001 f89f 	bl	8004e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d32:	e00d      	b.n	8003d50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d109      	bne.n	8003d50 <vTaskStartScheduler+0xa8>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e7fe      	b.n	8003d4e <vTaskStartScheduler+0xa6>
}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	08005f0c 	.word	0x08005f0c
 8003d5c:	08004371 	.word	0x08004371
 8003d60:	20000c48 	.word	0x20000c48
 8003d64:	20000c44 	.word	0x20000c44
 8003d68:	20000c30 	.word	0x20000c30
 8003d6c:	20000c28 	.word	0x20000c28

08003d70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <vTaskSuspendAll+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <vTaskSuspendAll+0x18>)
 8003d7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	20000c4c 	.word	0x20000c4c

08003d8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <xTaskResumeAll+0x2a>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	e7fe      	b.n	8003db4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003db6:	f001 f8f9 	bl	8004fac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	4a37      	ldr	r2, [pc, #220]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003dc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d162      	bne.n	8003e92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <xTaskResumeAll+0x118>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05e      	beq.n	8003e92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd4:	e02f      	b.n	8003e36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd6:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <xTaskResumeAll+0x11c>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3318      	adds	r3, #24
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f890 	bl	8002f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff f88b 	bl	8002f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <xTaskResumeAll+0x120>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d903      	bls.n	8003e06 <xTaskResumeAll+0x7a>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <xTaskResumeAll+0x120>)
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <xTaskResumeAll+0x124>)
 8003e14:	441a      	add	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7ff f816 	bl	8002e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e26:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <xTaskResumeAll+0x128>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <xTaskResumeAll+0x12c>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <xTaskResumeAll+0x11c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1cb      	bne.n	8003dd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e44:	f000 fb46 	bl	80044d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <xTaskResumeAll+0x130>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e54:	f000 f846 	bl	8003ee4 <xTaskIncrementTick>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e5e:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <xTaskResumeAll+0x12c>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f1      	bne.n	8003e54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <xTaskResumeAll+0x130>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <xTaskResumeAll+0x12c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <xTaskResumeAll+0x134>)
 8003e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e92:	f001 f8b9 	bl	8005008 <vPortExitCritical>

	return xAlreadyYielded;
 8003e96:	68bb      	ldr	r3, [r7, #8]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000c4c 	.word	0x20000c4c
 8003ea4:	20000c24 	.word	0x20000c24
 8003ea8:	20000be4 	.word	0x20000be4
 8003eac:	20000c2c 	.word	0x20000c2c
 8003eb0:	20000754 	.word	0x20000754
 8003eb4:	20000750 	.word	0x20000750
 8003eb8:	20000c38 	.word	0x20000c38
 8003ebc:	20000c34 	.word	0x20000c34
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <xTaskGetTickCount+0x1c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ed0:	687b      	ldr	r3, [r7, #4]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000c28 	.word	0x20000c28

08003ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <xTaskIncrementTick+0x144>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8088 	bne.w	8004008 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <xTaskIncrementTick+0x148>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f00:	4a4a      	ldr	r2, [pc, #296]	; (800402c <xTaskIncrementTick+0x148>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11f      	bne.n	8003f4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <xTaskIncrementTick+0x46>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	e7fe      	b.n	8003f28 <xTaskIncrementTick+0x44>
 8003f2a:	4b41      	ldr	r3, [pc, #260]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <xTaskIncrementTick+0x150>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a3e      	ldr	r2, [pc, #248]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <xTaskIncrementTick+0x150>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <xTaskIncrementTick+0x154>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <xTaskIncrementTick+0x154>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	f000 fac4 	bl	80044d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <xTaskIncrementTick+0x158>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d349      	bcc.n	8003fea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <xTaskIncrementTick+0x158>)
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	601a      	str	r2, [r3, #0]
					break;
 8003f68:	e03f      	b.n	8003fea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6a:	4b31      	ldr	r3, [pc, #196]	; (8004030 <xTaskIncrementTick+0x14c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d203      	bcs.n	8003f8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f82:	4a2e      	ldr	r2, [pc, #184]	; (800403c <xTaskIncrementTick+0x158>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f88:	e02f      	b.n	8003fea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe ffba 	bl	8002f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3318      	adds	r3, #24
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe ffb1 	bl	8002f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	4b25      	ldr	r3, [pc, #148]	; (8004040 <xTaskIncrementTick+0x15c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d903      	bls.n	8003fba <xTaskIncrementTick+0xd6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a22      	ldr	r2, [pc, #136]	; (8004040 <xTaskIncrementTick+0x15c>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <xTaskIncrementTick+0x160>)
 8003fc8:	441a      	add	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7fe ff3c 	bl	8002e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <xTaskIncrementTick+0x164>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3b8      	bcc.n	8003f56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	e7b5      	b.n	8003f56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <xTaskIncrementTick+0x164>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4914      	ldr	r1, [pc, #80]	; (8004044 <xTaskIncrementTick+0x160>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d907      	bls.n	8004012 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004002:	2301      	movs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e004      	b.n	8004012 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <xTaskIncrementTick+0x168>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a0f      	ldr	r2, [pc, #60]	; (800404c <xTaskIncrementTick+0x168>)
 8004010:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <xTaskIncrementTick+0x16c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800401e:	697b      	ldr	r3, [r7, #20]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000c4c 	.word	0x20000c4c
 800402c:	20000c28 	.word	0x20000c28
 8004030:	20000bdc 	.word	0x20000bdc
 8004034:	20000be0 	.word	0x20000be0
 8004038:	20000c3c 	.word	0x20000c3c
 800403c:	20000c44 	.word	0x20000c44
 8004040:	20000c2c 	.word	0x20000c2c
 8004044:	20000754 	.word	0x20000754
 8004048:	20000750 	.word	0x20000750
 800404c:	20000c34 	.word	0x20000c34
 8004050:	20000c38 	.word	0x20000c38

08004054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <vTaskSwitchContext+0xa4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <vTaskSwitchContext+0xa8>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004068:	e040      	b.n	80040ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <vTaskSwitchContext+0xa8>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004070:	4b23      	ldr	r3, [pc, #140]	; (8004100 <vTaskSwitchContext+0xac>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e00f      	b.n	8004098 <vTaskSwitchContext+0x44>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <vTaskSwitchContext+0x3e>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	e7fe      	b.n	8004090 <vTaskSwitchContext+0x3c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	491a      	ldr	r1, [pc, #104]	; (8004104 <vTaskSwitchContext+0xb0>)
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0e5      	beq.n	8004078 <vTaskSwitchContext+0x24>
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <vTaskSwitchContext+0xb0>)
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3308      	adds	r3, #8
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d104      	bne.n	80040dc <vTaskSwitchContext+0x88>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a09      	ldr	r2, [pc, #36]	; (8004108 <vTaskSwitchContext+0xb4>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4a06      	ldr	r2, [pc, #24]	; (8004100 <vTaskSwitchContext+0xac>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	20000c4c 	.word	0x20000c4c
 80040fc:	20000c38 	.word	0x20000c38
 8004100:	20000c2c 	.word	0x20000c2c
 8004104:	20000754 	.word	0x20000754
 8004108:	20000750 	.word	0x20000750

0800410c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <vTaskPlaceOnEventList+0x24>
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e7fe      	b.n	800412e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <vTaskPlaceOnEventList+0x44>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3318      	adds	r3, #24
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fe feac 	bl	8002e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800413e:	2101      	movs	r1, #1
 8004140:	6838      	ldr	r0, [r7, #0]
 8004142:	f000 fa71 	bl	8004628 <prvAddCurrentTaskToDelayedList>
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000750 	.word	0x20000750

08004154 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <vTaskPlaceOnEventListRestricted+0x26>
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e7fe      	b.n	8004178 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <vTaskPlaceOnEventListRestricted+0x50>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3318      	adds	r3, #24
 8004180:	4619      	mov	r1, r3
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7fe fe63 	bl	8002e4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295
 8004192:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	68b8      	ldr	r0, [r7, #8]
 8004198:	f000 fa46 	bl	8004628 <prvAddCurrentTaskToDelayedList>
	}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000750 	.word	0x20000750

080041a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <xTaskRemoveFromEventList+0x2a>
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e7fe      	b.n	80041d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3318      	adds	r3, #24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fe96 	bl	8002f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <xTaskRemoveFromEventList+0xac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11d      	bne.n	8004220 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fe8d 	bl	8002f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <xTaskRemoveFromEventList+0xb0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d903      	bls.n	8004202 <xTaskRemoveFromEventList+0x5a>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	4a16      	ldr	r2, [pc, #88]	; (8004258 <xTaskRemoveFromEventList+0xb0>)
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4a13      	ldr	r2, [pc, #76]	; (800425c <xTaskRemoveFromEventList+0xb4>)
 8004210:	441a      	add	r2, r3
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f7fe fe18 	bl	8002e4e <vListInsertEnd>
 800421e:	e005      	b.n	800422c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3318      	adds	r3, #24
 8004224:	4619      	mov	r1, r3
 8004226:	480e      	ldr	r0, [pc, #56]	; (8004260 <xTaskRemoveFromEventList+0xb8>)
 8004228:	f7fe fe11 	bl	8002e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <xTaskRemoveFromEventList+0xbc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	429a      	cmp	r2, r3
 8004238:	d905      	bls.n	8004246 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800423a:	2301      	movs	r3, #1
 800423c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <xTaskRemoveFromEventList+0xc0>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e001      	b.n	800424a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800424a:	697b      	ldr	r3, [r7, #20]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000c4c 	.word	0x20000c4c
 8004258:	20000c2c 	.word	0x20000c2c
 800425c:	20000754 	.word	0x20000754
 8004260:	20000be4 	.word	0x20000be4
 8004264:	20000750 	.word	0x20000750
 8004268:	20000c38 	.word	0x20000c38

0800426c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <vTaskInternalSetTimeOutState+0x24>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <vTaskInternalSetTimeOutState+0x28>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	605a      	str	r2, [r3, #4]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	20000c3c 	.word	0x20000c3c
 8004294:	20000c28 	.word	0x20000c28

08004298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <xTaskCheckForTimeOut+0x24>
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e7fe      	b.n	80042ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <xTaskCheckForTimeOut+0x3e>
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e7fe      	b.n	80042d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80042d6:	f000 fe69 	bl	8004fac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <xTaskCheckForTimeOut+0xb8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d102      	bne.n	80042fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e023      	b.n	8004342 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <xTaskCheckForTimeOut+0xbc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d007      	beq.n	8004316 <xTaskCheckForTimeOut+0x7e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	e015      	b.n	8004342 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	429a      	cmp	r2, r3
 800431e:	d20b      	bcs.n	8004338 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff9d 	bl	800426c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e004      	b.n	8004342 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800433e:	2301      	movs	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004342:	f000 fe61 	bl	8005008 <vPortExitCritical>

	return xReturn;
 8004346:	69fb      	ldr	r3, [r7, #28]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000c28 	.word	0x20000c28
 8004354:	20000c3c 	.word	0x20000c3c

08004358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <vTaskMissedYield+0x14>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000c38 	.word	0x20000c38

08004370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004378:	f000 f852 	bl	8004420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <prvIdleTask+0x28>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d9f9      	bls.n	8004378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <prvIdleTask+0x2c>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004394:	e7f0      	b.n	8004378 <prvIdleTask+0x8>
 8004396:	bf00      	nop
 8004398:	20000754 	.word	0x20000754
 800439c:	e000ed04 	.word	0xe000ed04

080043a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043a6:	2300      	movs	r3, #0
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	e00c      	b.n	80043c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a12      	ldr	r2, [pc, #72]	; (8004400 <prvInitialiseTaskLists+0x60>)
 80043b8:	4413      	add	r3, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fd1a 	bl	8002df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b37      	cmp	r3, #55	; 0x37
 80043ca:	d9ef      	bls.n	80043ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043cc:	480d      	ldr	r0, [pc, #52]	; (8004404 <prvInitialiseTaskLists+0x64>)
 80043ce:	f7fe fd11 	bl	8002df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043d2:	480d      	ldr	r0, [pc, #52]	; (8004408 <prvInitialiseTaskLists+0x68>)
 80043d4:	f7fe fd0e 	bl	8002df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043d8:	480c      	ldr	r0, [pc, #48]	; (800440c <prvInitialiseTaskLists+0x6c>)
 80043da:	f7fe fd0b 	bl	8002df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043de:	480c      	ldr	r0, [pc, #48]	; (8004410 <prvInitialiseTaskLists+0x70>)
 80043e0:	f7fe fd08 	bl	8002df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <prvInitialiseTaskLists+0x74>)
 80043e6:	f7fe fd05 	bl	8002df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <prvInitialiseTaskLists+0x78>)
 80043ec:	4a05      	ldr	r2, [pc, #20]	; (8004404 <prvInitialiseTaskLists+0x64>)
 80043ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvInitialiseTaskLists+0x7c>)
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <prvInitialiseTaskLists+0x68>)
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000754 	.word	0x20000754
 8004404:	20000bb4 	.word	0x20000bb4
 8004408:	20000bc8 	.word	0x20000bc8
 800440c:	20000be4 	.word	0x20000be4
 8004410:	20000bf8 	.word	0x20000bf8
 8004414:	20000c10 	.word	0x20000c10
 8004418:	20000bdc 	.word	0x20000bdc
 800441c:	20000be0 	.word	0x20000be0

08004420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004426:	e019      	b.n	800445c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004428:	f000 fdc0 	bl	8004fac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <prvCheckTasksWaitingTermination+0x4c>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fd65 	bl	8002f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <prvCheckTasksWaitingTermination+0x50>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <prvCheckTasksWaitingTermination+0x50>)
 8004446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3b01      	subs	r3, #1
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 8004450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004452:	f000 fdd9 	bl	8005008 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f80e 	bl	8004478 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e1      	bne.n	8004428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000bf8 	.word	0x20000bf8
 8004470:	20000c24 	.word	0x20000c24
 8004474:	20000c0c 	.word	0x20000c0c

08004478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ff68 	bl	8005364 <vPortFree>
				vPortFree( pxTCB );
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 ff65 	bl	8005364 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800449a:	e017      	b.n	80044cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d103      	bne.n	80044ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 ff5c 	bl	8005364 <vPortFree>
	}
 80044ac:	e00e      	b.n	80044cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d009      	beq.n	80044cc <prvDeleteTCB+0x54>
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e7fe      	b.n	80044ca <prvDeleteTCB+0x52>
	}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <prvResetNextTaskUnblockTime+0x38>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvResetNextTaskUnblockTime+0x3c>)
 80044e6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044ec:	e008      	b.n	8004500 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <prvResetNextTaskUnblockTime+0x38>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <prvResetNextTaskUnblockTime+0x3c>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000bdc 	.word	0x20000bdc
 8004510:	20000c44 	.word	0x20000c44

08004514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <xTaskGetSchedulerState+0x34>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004522:	2301      	movs	r3, #1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	e008      	b.n	800453a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <xTaskGetSchedulerState+0x38>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004530:	2302      	movs	r3, #2
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e001      	b.n	800453a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800453a:	687b      	ldr	r3, [r7, #4]
	}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000c30 	.word	0x20000c30
 800454c:	20000c4c 	.word	0x20000c4c

08004550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d054      	beq.n	8004610 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <xTaskPriorityDisinherit+0xcc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d009      	beq.n	8004584 <xTaskPriorityDisinherit+0x34>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e7fe      	b.n	8004582 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <xTaskPriorityDisinherit+0x50>
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	e7fe      	b.n	800459e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d02c      	beq.n	8004610 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d128      	bne.n	8004610 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fca0 	bl	8002f08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <xTaskPriorityDisinherit+0xd0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d903      	bls.n	80045f0 <xTaskPriorityDisinherit+0xa0>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <xTaskPriorityDisinherit+0xd0>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4a09      	ldr	r2, [pc, #36]	; (8004624 <xTaskPriorityDisinherit+0xd4>)
 80045fe:	441a      	add	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7fe fc21 	bl	8002e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004610:	697b      	ldr	r3, [r7, #20]
	}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000750 	.word	0x20000750
 8004620:	20000c2c 	.word	0x20000c2c
 8004624:	20000754 	.word	0x20000754

08004628 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004638:	4b20      	ldr	r3, [pc, #128]	; (80046bc <prvAddCurrentTaskToDelayedList+0x94>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fc62 	bl	8002f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d10a      	bne.n	8004662 <prvAddCurrentTaskToDelayedList+0x3a>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4819      	ldr	r0, [pc, #100]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800465c:	f7fe fbf7 	bl	8002e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004660:	e026      	b.n	80046b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4413      	add	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <prvAddCurrentTaskToDelayedList+0x94>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	429a      	cmp	r2, r3
 8004678:	d209      	bcs.n	800468e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe fc05 	bl	8002e96 <vListInsert>
}
 800468c:	e010      	b.n	80046b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f7fe fbfb 	bl	8002e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d202      	bcs.n	80046b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046aa:	4a08      	ldr	r2, [pc, #32]	; (80046cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6013      	str	r3, [r2, #0]
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000c28 	.word	0x20000c28
 80046bc:	20000750 	.word	0x20000750
 80046c0:	20000c10 	.word	0x20000c10
 80046c4:	20000be0 	.word	0x20000be0
 80046c8:	20000bdc 	.word	0x20000bdc
 80046cc:	20000c44 	.word	0x20000c44

080046d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046da:	f000 faff 	bl	8004cdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <xTimerCreateTimerTask+0x80>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d021      	beq.n	800472a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80046ee:	1d3a      	adds	r2, r7, #4
 80046f0:	f107 0108 	add.w	r1, r7, #8
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fb61 	bl	8002dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	9202      	str	r2, [sp, #8]
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	2302      	movs	r3, #2
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	460a      	mov	r2, r1
 8004710:	4910      	ldr	r1, [pc, #64]	; (8004754 <xTimerCreateTimerTask+0x84>)
 8004712:	4811      	ldr	r0, [pc, #68]	; (8004758 <xTimerCreateTimerTask+0x88>)
 8004714:	f7ff f8f6 	bl	8003904 <xTaskCreateStatic>
 8004718:	4602      	mov	r2, r0
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <xTimerCreateTimerTask+0x8c>)
 800471c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <xTimerCreateTimerTask+0x8c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004726:	2301      	movs	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <xTimerCreateTimerTask+0x74>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e7fe      	b.n	8004742 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004744:	697b      	ldr	r3, [r7, #20]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000c80 	.word	0x20000c80
 8004754:	08005f14 	.word	0x08005f14
 8004758:	08004891 	.word	0x08004891
 800475c:	20000c84 	.word	0x20000c84

08004760 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800476e:	2300      	movs	r3, #0
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <xTimerGenericCommand+0x2c>
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	e7fe      	b.n	800478a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <xTimerGenericCommand+0x94>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02a      	beq.n	80047ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	dc18      	bgt.n	80047d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047a6:	f7ff feb5 	bl	8004514 <xTaskGetSchedulerState>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d109      	bne.n	80047c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <xTimerGenericCommand+0x94>)
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f107 0110 	add.w	r1, r7, #16
 80047b8:	2300      	movs	r3, #0
 80047ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047bc:	f7fe fccc 	bl	8003158 <xQueueGenericSend>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24
 80047c2:	e012      	b.n	80047ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <xTimerGenericCommand+0x94>)
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	f107 0110 	add.w	r1, r7, #16
 80047cc:	2300      	movs	r3, #0
 80047ce:	2200      	movs	r2, #0
 80047d0:	f7fe fcc2 	bl	8003158 <xQueueGenericSend>
 80047d4:	6278      	str	r0, [r7, #36]	; 0x24
 80047d6:	e008      	b.n	80047ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <xTimerGenericCommand+0x94>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	f107 0110 	add.w	r1, r7, #16
 80047e0:	2300      	movs	r3, #0
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	f7fe fdb2 	bl	800334c <xQueueGenericSendFromISR>
 80047e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000c80 	.word	0x20000c80

080047f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <prvProcessExpiredTimer+0x94>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3304      	adds	r3, #4
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fb79 	bl	8002f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d021      	beq.n	8004868 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	18d1      	adds	r1, r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	6978      	ldr	r0, [r7, #20]
 8004832:	f000 f8d1 	bl	80049d8 <prvInsertTimerInActiveList>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01e      	beq.n	800487a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800483c:	2300      	movs	r3, #0
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2300      	movs	r3, #0
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	2100      	movs	r1, #0
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7ff ff8a 	bl	8004760 <xTimerGenericCommand>
 800484c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d112      	bne.n	800487a <prvProcessExpiredTimer+0x82>
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e7fe      	b.n	8004866 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	4798      	blx	r3
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000c78 	.word	0x20000c78

08004890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f857 	bl	8004950 <prvGetNextExpireTime>
 80048a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4619      	mov	r1, r3
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f803 	bl	80048b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048ae:	f000 f8d5 	bl	8004a5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048b2:	e7f1      	b.n	8004898 <prvTimerTask+0x8>

080048b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048be:	f7ff fa57 	bl	8003d70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f866 	bl	8004998 <prvSampleTimeNow>
 80048cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d130      	bne.n	8004936 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <prvProcessTimerOrBlockTask+0x3c>
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d806      	bhi.n	80048f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80048e2:	f7ff fa53 	bl	8003d8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff85 	bl	80047f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048ee:	e024      	b.n	800493a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <prvProcessTimerOrBlockTask+0x90>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <prvProcessTimerOrBlockTask+0x50>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <prvProcessTimerOrBlockTask+0x52>
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <prvProcessTimerOrBlockTask+0x94>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	f7fe ffc1 	bl	800389c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800491a:	f7ff fa37 	bl	8003d8c <xTaskResumeAll>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <prvProcessTimerOrBlockTask+0x98>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	f3bf 8f6f 	isb	sy
}
 8004934:	e001      	b.n	800493a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004936:	f7ff fa29 	bl	8003d8c <xTaskResumeAll>
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000c7c 	.word	0x20000c7c
 8004948:	20000c80 	.word	0x20000c80
 800494c:	e000ed04 	.word	0xe000ed04

08004950 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <prvGetNextExpireTime+0x44>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <prvGetNextExpireTime+0x16>
 8004962:	2201      	movs	r2, #1
 8004964:	e000      	b.n	8004968 <prvGetNextExpireTime+0x18>
 8004966:	2200      	movs	r2, #0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <prvGetNextExpireTime+0x44>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e001      	b.n	8004984 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000c78 	.word	0x20000c78

08004998 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049a0:	f7ff fa90 	bl	8003ec4 <xTaskGetTickCount>
 80049a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <prvSampleTimeNow+0x3c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d205      	bcs.n	80049bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049b0:	f000 f930 	bl	8004c14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <prvSampleTimeNow+0x3c>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049c8:	68fb      	ldr	r3, [r7, #12]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000c88 	.word	0x20000c88

080049d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d812      	bhi.n	8004a24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	1ad2      	subs	r2, r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e01b      	b.n	8004a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <prvInsertTimerInActiveList+0x7c>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fe fa3a 	bl	8002e96 <vListInsert>
 8004a22:	e012      	b.n	8004a4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d206      	bcs.n	8004a3a <prvInsertTimerInActiveList+0x62>
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e007      	b.n	8004a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a3a:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <prvInsertTimerInActiveList+0x80>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f7fe fa26 	bl	8002e96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a4a:	697b      	ldr	r3, [r7, #20]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000c7c 	.word	0x20000c7c
 8004a58:	20000c78 	.word	0x20000c78

08004a5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08e      	sub	sp, #56	; 0x38
 8004a60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a62:	e0c6      	b.n	8004bf2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da17      	bge.n	8004a9a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <prvProcessReceivedCommands+0x2e>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e7fe      	b.n	8004a88 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	6850      	ldr	r0, [r2, #4]
 8004a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f2c0 80a7 	blt.w	8004bf0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fa28 	bl	8002f08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ab8:	463b      	mov	r3, r7
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff6c 	bl	8004998 <prvSampleTimeNow>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	f200 8094 	bhi.w	8004bf2 <prvProcessReceivedCommands+0x196>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <prvProcessReceivedCommands+0x74>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004af9 	.word	0x08004af9
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004af9 	.word	0x08004af9
 8004adc:	08004b6b 	.word	0x08004b6b
 8004ae0:	08004b7f 	.word	0x08004b7f
 8004ae4:	08004bc7 	.word	0x08004bc7
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004af9 	.word	0x08004af9
 8004af0:	08004b6b 	.word	0x08004b6b
 8004af4:	08004b7f 	.word	0x08004b7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	18d1      	adds	r1, r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b18:	f7ff ff5e 	bl	80049d8 <prvInsertTimerInActiveList>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d067      	beq.n	8004bf2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05c      	beq.n	8004bf2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	441a      	add	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	2100      	movs	r1, #0
 8004b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4a:	f7ff fe09 	bl	8004760 <xTimerGenericCommand>
 8004b4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d14d      	bne.n	8004bf2 <prvProcessReceivedCommands+0x196>
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e7fe      	b.n	8004b68 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b7c:	e039      	b.n	8004bf2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvProcessReceivedCommands+0x156>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e7fe      	b.n	8004bb0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	18d1      	adds	r1, r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc0:	f7ff ff0a 	bl	80049d8 <prvInsertTimerInActiveList>
					break;
 8004bc4:	e015      	b.n	8004bf2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd6:	f000 fbc5 	bl	8005364 <vPortFree>
 8004bda:	e00a      	b.n	8004bf2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004bee:	e000      	b.n	8004bf2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004bf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <prvProcessReceivedCommands+0x1b4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	1d39      	adds	r1, r7, #4
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fc3a 	bl	8003474 <xQueueReceive>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f47f af2e 	bne.w	8004a64 <prvProcessReceivedCommands+0x8>
	}
}
 8004c08:	bf00      	nop
 8004c0a:	3730      	adds	r7, #48	; 0x30
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000c80 	.word	0x20000c80

08004c14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c1a:	e047      	b.n	8004cac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <prvSwitchTimerLists+0xc0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c26:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <prvSwitchTimerLists+0xc0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe f967 	bl	8002f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02d      	beq.n	8004cac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4413      	add	r3, r2
 8004c58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d90e      	bls.n	8004c80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <prvSwitchTimerLists+0xc0>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7fe f90c 	bl	8002e96 <vListInsert>
 8004c7e:	e015      	b.n	8004cac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c80:	2300      	movs	r3, #0
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7ff fd68 	bl	8004760 <xTimerGenericCommand>
 8004c90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <prvSwitchTimerLists+0x98>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	e7fe      	b.n	8004caa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <prvSwitchTimerLists+0xc0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1b2      	bne.n	8004c1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <prvSwitchTimerLists+0xc0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <prvSwitchTimerLists+0xc4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <prvSwitchTimerLists+0xc0>)
 8004cc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <prvSwitchTimerLists+0xc4>)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6013      	str	r3, [r2, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000c78 	.word	0x20000c78
 8004cd8:	20000c7c 	.word	0x20000c7c

08004cdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ce2:	f000 f963 	bl	8004fac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <prvCheckForValidListAndQueue+0x60>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d120      	bne.n	8004d30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cee:	4814      	ldr	r0, [pc, #80]	; (8004d40 <prvCheckForValidListAndQueue+0x64>)
 8004cf0:	f7fe f880 	bl	8002df4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cf4:	4813      	ldr	r0, [pc, #76]	; (8004d44 <prvCheckForValidListAndQueue+0x68>)
 8004cf6:	f7fe f87d 	bl	8002df4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cfa:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <prvCheckForValidListAndQueue+0x6c>)
 8004cfc:	4a10      	ldr	r2, [pc, #64]	; (8004d40 <prvCheckForValidListAndQueue+0x64>)
 8004cfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <prvCheckForValidListAndQueue+0x70>)
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <prvCheckForValidListAndQueue+0x68>)
 8004d04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d06:	2300      	movs	r3, #0
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <prvCheckForValidListAndQueue+0x74>)
 8004d0c:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <prvCheckForValidListAndQueue+0x78>)
 8004d0e:	2110      	movs	r1, #16
 8004d10:	200a      	movs	r0, #10
 8004d12:	f7fe f98b 	bl	800302c <xQueueGenericCreateStatic>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <prvCheckForValidListAndQueue+0x60>)
 8004d1a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <prvCheckForValidListAndQueue+0x60>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <prvCheckForValidListAndQueue+0x60>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	490b      	ldr	r1, [pc, #44]	; (8004d58 <prvCheckForValidListAndQueue+0x7c>)
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fd8e 	bl	800384c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d30:	f000 f96a 	bl	8005008 <vPortExitCritical>
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000c80 	.word	0x20000c80
 8004d40:	20000c50 	.word	0x20000c50
 8004d44:	20000c64 	.word	0x20000c64
 8004d48:	20000c78 	.word	0x20000c78
 8004d4c:	20000c7c 	.word	0x20000c7c
 8004d50:	20000d2c 	.word	0x20000d2c
 8004d54:	20000c8c 	.word	0x20000c8c
 8004d58:	08005f1c 	.word	0x08005f1c

08004d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <pxPortInitialiseStack+0x64>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b14      	subs	r3, #20
 8004d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f06f 0202 	mvn.w	r2, #2
 8004daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b20      	subs	r3, #32
 8004db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	08004dc5 	.word	0x08004dc5

08004dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <prvTaskExitError+0x50>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d009      	beq.n	8004dec <prvTaskExitError+0x28>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e7fe      	b.n	8004dea <prvTaskExitError+0x26>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dfe:	bf00      	nop
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0fc      	beq.n	8004e00 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000000c 	.word	0x2000000c
	...

08004e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <pxCurrentTCBConst2>)
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	6808      	ldr	r0, [r1, #0]
 8004e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	f380 8809 	msr	PSP, r0
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f380 8811 	msr	BASEPRI, r0
 8004e3a:	4770      	bx	lr
 8004e3c:	f3af 8000 	nop.w

08004e40 <pxCurrentTCBConst2>:
 8004e40:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop

08004e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e48:	4808      	ldr	r0, [pc, #32]	; (8004e6c <prvPortStartFirstTask+0x24>)
 8004e4a:	6800      	ldr	r0, [r0, #0]
 8004e4c:	6800      	ldr	r0, [r0, #0]
 8004e4e:	f380 8808 	msr	MSP, r0
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8814 	msr	CONTROL, r0
 8004e5a:	b662      	cpsie	i
 8004e5c:	b661      	cpsie	f
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	df00      	svc	0
 8004e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e6a:	bf00      	nop
 8004e6c:	e000ed08 	.word	0xe000ed08

08004e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e76:	4b44      	ldr	r3, [pc, #272]	; (8004f88 <xPortStartScheduler+0x118>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a44      	ldr	r2, [pc, #272]	; (8004f8c <xPortStartScheduler+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d109      	bne.n	8004e94 <xPortStartScheduler+0x24>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	e7fe      	b.n	8004e92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e94:	4b3c      	ldr	r3, [pc, #240]	; (8004f88 <xPortStartScheduler+0x118>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <xPortStartScheduler+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d109      	bne.n	8004eb2 <xPortStartScheduler+0x42>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e7fe      	b.n	8004eb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eb2:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <xPortStartScheduler+0x124>)
 8004eb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <xPortStartScheduler+0x128>)
 8004ed8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eda:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004edc:	2207      	movs	r2, #7
 8004ede:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ee0:	e009      	b.n	8004ef6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004eea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d0ef      	beq.n	8004ee2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f02:	4b26      	ldr	r3, [pc, #152]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1c3 0307 	rsb	r3, r3, #7
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d009      	beq.n	8004f22 <xPortStartScheduler+0xb2>
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	e7fe      	b.n	8004f20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004f2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <xPortStartScheduler+0x12c>)
 8004f36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <xPortStartScheduler+0x130>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <xPortStartScheduler+0x130>)
 8004f46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <xPortStartScheduler+0x130>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <xPortStartScheduler+0x130>)
 8004f52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f58:	f000 f8d6 	bl	8005108 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f5c:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <xPortStartScheduler+0x134>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f62:	f000 f8f5 	bl	8005150 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <xPortStartScheduler+0x138>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a0f      	ldr	r2, [pc, #60]	; (8004fa8 <xPortStartScheduler+0x138>)
 8004f6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f72:	f7ff ff69 	bl	8004e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f76:	f7ff f86d 	bl	8004054 <vTaskSwitchContext>
	prvTaskExitError();
 8004f7a:	f7ff ff23 	bl	8004dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed00 	.word	0xe000ed00
 8004f8c:	410fc271 	.word	0x410fc271
 8004f90:	410fc270 	.word	0x410fc270
 8004f94:	e000e400 	.word	0xe000e400
 8004f98:	20000d7c 	.word	0x20000d7c
 8004f9c:	20000d80 	.word	0x20000d80
 8004fa0:	e000ed20 	.word	0xe000ed20
 8004fa4:	2000000c 	.word	0x2000000c
 8004fa8:	e000ef34 	.word	0xe000ef34

08004fac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <vPortEnterCritical+0x54>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <vPortEnterCritical+0x54>)
 8004fcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <vPortEnterCritical+0x54>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d10e      	bne.n	8004ff4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <vPortEnterCritical+0x58>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <vPortEnterCritical+0x48>
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	e7fe      	b.n	8004ff2 <vPortEnterCritical+0x46>
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	2000000c 	.word	0x2000000c
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <vPortExitCritical+0x4c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <vPortExitCritical+0x22>
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	e7fe      	b.n	8005028 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <vPortExitCritical+0x4c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3b01      	subs	r3, #1
 8005030:	4a08      	ldr	r2, [pc, #32]	; (8005054 <vPortExitCritical+0x4c>)
 8005032:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <vPortExitCritical+0x4c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <vPortExitCritical+0x3e>
 800503c:	2300      	movs	r3, #0
 800503e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	2000000c 	.word	0x2000000c
	...

08005060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005060:	f3ef 8009 	mrs	r0, PSP
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <pxCurrentTCBConst>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	f01e 0f10 	tst.w	lr, #16
 8005070:	bf08      	it	eq
 8005072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005084:	f380 8811 	msr	BASEPRI, r0
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f7fe ffe0 	bl	8004054 <vTaskSwitchContext>
 8005094:	f04f 0000 	mov.w	r0, #0
 8005098:	f380 8811 	msr	BASEPRI, r0
 800509c:	bc09      	pop	{r0, r3}
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	6808      	ldr	r0, [r1, #0]
 80050a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a6:	f01e 0f10 	tst.w	lr, #16
 80050aa:	bf08      	it	eq
 80050ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050b0:	f380 8809 	msr	PSP, r0
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w

080050c0 <pxCurrentTCBConst>:
 80050c0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop

080050c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050e0:	f7fe ff00 	bl	8003ee4 <xTaskIncrementTick>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <SysTick_Handler+0x3c>)
 80050ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <vPortSetupTimerInterrupt+0x34>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <vPortSetupTimerInterrupt+0x38>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <vPortSetupTimerInterrupt+0x3c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <vPortSetupTimerInterrupt+0x40>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	4a09      	ldr	r2, [pc, #36]	; (800514c <vPortSetupTimerInterrupt+0x44>)
 8005126:	3b01      	subs	r3, #1
 8005128:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800512a:	4b04      	ldr	r3, [pc, #16]	; (800513c <vPortSetupTimerInterrupt+0x34>)
 800512c:	2207      	movs	r2, #7
 800512e:	601a      	str	r2, [r3, #0]
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000e010 	.word	0xe000e010
 8005140:	e000e018 	.word	0xe000e018
 8005144:	20000000 	.word	0x20000000
 8005148:	10624dd3 	.word	0x10624dd3
 800514c:	e000e014 	.word	0xe000e014

08005150 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005150:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005160 <vPortEnableVFP+0x10>
 8005154:	6801      	ldr	r1, [r0, #0]
 8005156:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800515a:	6001      	str	r1, [r0, #0]
 800515c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800515e:	bf00      	nop
 8005160:	e000ed88 	.word	0xe000ed88

08005164 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800516a:	f3ef 8305 	mrs	r3, IPSR
 800516e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b0f      	cmp	r3, #15
 8005174:	d913      	bls.n	800519e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <vPortValidateInterruptPriority+0x6c>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005180:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <vPortValidateInterruptPriority+0x70>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	7afa      	ldrb	r2, [r7, #11]
 8005186:	429a      	cmp	r2, r3
 8005188:	d209      	bcs.n	800519e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	e7fe      	b.n	800519c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <vPortValidateInterruptPriority+0x74>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <vPortValidateInterruptPriority+0x78>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d909      	bls.n	80051c2 <vPortValidateInterruptPriority+0x5e>
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	e7fe      	b.n	80051c0 <vPortValidateInterruptPriority+0x5c>
	}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e3f0 	.word	0xe000e3f0
 80051d4:	20000d7c 	.word	0x20000d7c
 80051d8:	e000ed0c 	.word	0xe000ed0c
 80051dc:	20000d80 	.word	0x20000d80

080051e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051ec:	f7fe fdc0 	bl	8003d70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051f0:	4b57      	ldr	r3, [pc, #348]	; (8005350 <pvPortMalloc+0x170>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051f8:	f000 f90c 	bl	8005414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051fc:	4b55      	ldr	r3, [pc, #340]	; (8005354 <pvPortMalloc+0x174>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 808c 	bne.w	8005322 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01c      	beq.n	800524a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005210:	2208      	movs	r2, #8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d013      	beq.n	800524a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f023 0307 	bic.w	r3, r3, #7
 8005228:	3308      	adds	r3, #8
 800522a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <pvPortMalloc+0x6a>
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e7fe      	b.n	8005248 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d068      	beq.n	8005322 <pvPortMalloc+0x142>
 8005250:	4b41      	ldr	r3, [pc, #260]	; (8005358 <pvPortMalloc+0x178>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d863      	bhi.n	8005322 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800525a:	4b40      	ldr	r3, [pc, #256]	; (800535c <pvPortMalloc+0x17c>)
 800525c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <pvPortMalloc+0x17c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005264:	e004      	b.n	8005270 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	429a      	cmp	r2, r3
 8005278:	d903      	bls.n	8005282 <pvPortMalloc+0xa2>
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f1      	bne.n	8005266 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005282:	4b33      	ldr	r3, [pc, #204]	; (8005350 <pvPortMalloc+0x170>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005288:	429a      	cmp	r2, r3
 800528a:	d04a      	beq.n	8005322 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	4413      	add	r3, r2
 8005294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	1ad2      	subs	r2, r2, r3
 80052a6:	2308      	movs	r3, #8
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d91e      	bls.n	80052ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <pvPortMalloc+0xf4>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e7fe      	b.n	80052d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052e6:	69b8      	ldr	r0, [r7, #24]
 80052e8:	f000 f8f6 	bl	80054d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <pvPortMalloc+0x178>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	4a18      	ldr	r2, [pc, #96]	; (8005358 <pvPortMalloc+0x178>)
 80052f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052fa:	4b17      	ldr	r3, [pc, #92]	; (8005358 <pvPortMalloc+0x178>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b18      	ldr	r3, [pc, #96]	; (8005360 <pvPortMalloc+0x180>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d203      	bcs.n	800530e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005306:	4b14      	ldr	r3, [pc, #80]	; (8005358 <pvPortMalloc+0x178>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a15      	ldr	r2, [pc, #84]	; (8005360 <pvPortMalloc+0x180>)
 800530c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <pvPortMalloc+0x174>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	431a      	orrs	r2, r3
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005322:	f7fe fd33 	bl	8003d8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <pvPortMalloc+0x164>
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e7fe      	b.n	8005342 <pvPortMalloc+0x162>
	return pvReturn;
 8005344:	69fb      	ldr	r3, [r7, #28]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	2000498c 	.word	0x2000498c
 8005354:	20004998 	.word	0x20004998
 8005358:	20004990 	.word	0x20004990
 800535c:	20004984 	.word	0x20004984
 8005360:	20004994 	.word	0x20004994

08005364 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d046      	beq.n	8005404 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005376:	2308      	movs	r3, #8
 8005378:	425b      	negs	r3, r3
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <vPortFree+0xa8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <vPortFree+0x42>
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e7fe      	b.n	80053a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <vPortFree+0x5e>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	e7fe      	b.n	80053c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b11      	ldr	r3, [pc, #68]	; (800540c <vPortFree+0xa8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d019      	beq.n	8005404 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d115      	bne.n	8005404 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <vPortFree+0xa8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053e8:	f7fe fcc2 	bl	8003d70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <vPortFree+0xac>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	4a06      	ldr	r2, [pc, #24]	; (8005410 <vPortFree+0xac>)
 80053f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f000 f86c 	bl	80054d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005400:	f7fe fcc4 	bl	8003d8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005404:	bf00      	nop
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20004998 	.word	0x20004998
 8005410:	20004990 	.word	0x20004990

08005414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800541a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800541e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <prvHeapInit+0xac>)
 8005422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00c      	beq.n	8005448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3307      	adds	r3, #7
 8005432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0307 	bic.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <prvHeapInit+0xac>)
 8005444:	4413      	add	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800544c:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <prvHeapInit+0xb0>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <prvHeapInit+0xb0>)
 8005454:	2200      	movs	r2, #0
 8005456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005460:	2208      	movs	r2, #8
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <prvHeapInit+0xb4>)
 8005474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <prvHeapInit+0xb4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800547e:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <prvHeapInit+0xb4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	1ad2      	subs	r2, r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <prvHeapInit+0xb4>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <prvHeapInit+0xb8>)
 80054a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <prvHeapInit+0xbc>)
 80054aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <prvHeapInit+0xc0>)
 80054ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000d84 	.word	0x20000d84
 80054c4:	20004984 	.word	0x20004984
 80054c8:	2000498c 	.word	0x2000498c
 80054cc:	20004994 	.word	0x20004994
 80054d0:	20004990 	.word	0x20004990
 80054d4:	20004998 	.word	0x20004998

080054d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <prvInsertBlockIntoFreeList+0xac>)
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	e002      	b.n	80054ec <prvInsertBlockIntoFreeList+0x14>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d8f7      	bhi.n	80054e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4413      	add	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d108      	bne.n	800551a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	441a      	add	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d118      	bne.n	8005560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <prvInsertBlockIntoFreeList+0xb0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d00d      	beq.n	8005556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e008      	b.n	8005568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <prvInsertBlockIntoFreeList+0xb0>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e003      	b.n	8005568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d002      	beq.n	8005576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20004984 	.word	0x20004984
 8005588:	2000498c 	.word	0x2000498c

0800558c <__errno>:
 800558c:	4b01      	ldr	r3, [pc, #4]	; (8005594 <__errno+0x8>)
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000010 	.word	0x20000010

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4e0d      	ldr	r6, [pc, #52]	; (80055d0 <__libc_init_array+0x38>)
 800559c:	4c0d      	ldr	r4, [pc, #52]	; (80055d4 <__libc_init_array+0x3c>)
 800559e:	1ba4      	subs	r4, r4, r6
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	2500      	movs	r5, #0
 80055a4:	42a5      	cmp	r5, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	4e0b      	ldr	r6, [pc, #44]	; (80055d8 <__libc_init_array+0x40>)
 80055aa:	4c0c      	ldr	r4, [pc, #48]	; (80055dc <__libc_init_array+0x44>)
 80055ac:	f000 fc94 	bl	8005ed8 <_init>
 80055b0:	1ba4      	subs	r4, r4, r6
 80055b2:	10a4      	asrs	r4, r4, #2
 80055b4:	2500      	movs	r5, #0
 80055b6:	42a5      	cmp	r5, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c0:	4798      	blx	r3
 80055c2:	3501      	adds	r5, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ca:	4798      	blx	r3
 80055cc:	3501      	adds	r5, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	08006014 	.word	0x08006014
 80055d4:	08006014 	.word	0x08006014
 80055d8:	08006014 	.word	0x08006014
 80055dc:	08006018 	.word	0x08006018

080055e0 <memcpy>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	1e43      	subs	r3, r0, #1
 80055e4:	440a      	add	r2, r1
 80055e6:	4291      	cmp	r1, r2
 80055e8:	d100      	bne.n	80055ec <memcpy+0xc>
 80055ea:	bd10      	pop	{r4, pc}
 80055ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f4:	e7f7      	b.n	80055e6 <memcpy+0x6>

080055f6 <memset>:
 80055f6:	4402      	add	r2, r0
 80055f8:	4603      	mov	r3, r0
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d100      	bne.n	8005600 <memset+0xa>
 80055fe:	4770      	bx	lr
 8005600:	f803 1b01 	strb.w	r1, [r3], #1
 8005604:	e7f9      	b.n	80055fa <memset+0x4>
	...

08005608 <_puts_r>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	460e      	mov	r6, r1
 800560c:	4605      	mov	r5, r0
 800560e:	b118      	cbz	r0, 8005618 <_puts_r+0x10>
 8005610:	6983      	ldr	r3, [r0, #24]
 8005612:	b90b      	cbnz	r3, 8005618 <_puts_r+0x10>
 8005614:	f000 fa0c 	bl	8005a30 <__sinit>
 8005618:	69ab      	ldr	r3, [r5, #24]
 800561a:	68ac      	ldr	r4, [r5, #8]
 800561c:	b913      	cbnz	r3, 8005624 <_puts_r+0x1c>
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fa06 	bl	8005a30 <__sinit>
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <_puts_r+0xac>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d117      	bne.n	800565a <_puts_r+0x52>
 800562a:	686c      	ldr	r4, [r5, #4]
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	071b      	lsls	r3, r3, #28
 8005630:	d51d      	bpl.n	800566e <_puts_r+0x66>
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	b1db      	cbz	r3, 800566e <_puts_r+0x66>
 8005636:	3e01      	subs	r6, #1
 8005638:	68a3      	ldr	r3, [r4, #8]
 800563a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800563e:	3b01      	subs	r3, #1
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	b9e9      	cbnz	r1, 8005680 <_puts_r+0x78>
 8005644:	2b00      	cmp	r3, #0
 8005646:	da2e      	bge.n	80056a6 <_puts_r+0x9e>
 8005648:	4622      	mov	r2, r4
 800564a:	210a      	movs	r1, #10
 800564c:	4628      	mov	r0, r5
 800564e:	f000 f83f 	bl	80056d0 <__swbuf_r>
 8005652:	3001      	adds	r0, #1
 8005654:	d011      	beq.n	800567a <_puts_r+0x72>
 8005656:	200a      	movs	r0, #10
 8005658:	e011      	b.n	800567e <_puts_r+0x76>
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <_puts_r+0xb0>)
 800565c:	429c      	cmp	r4, r3
 800565e:	d101      	bne.n	8005664 <_puts_r+0x5c>
 8005660:	68ac      	ldr	r4, [r5, #8]
 8005662:	e7e3      	b.n	800562c <_puts_r+0x24>
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <_puts_r+0xb4>)
 8005666:	429c      	cmp	r4, r3
 8005668:	bf08      	it	eq
 800566a:	68ec      	ldreq	r4, [r5, #12]
 800566c:	e7de      	b.n	800562c <_puts_r+0x24>
 800566e:	4621      	mov	r1, r4
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f87f 	bl	8005774 <__swsetup_r>
 8005676:	2800      	cmp	r0, #0
 8005678:	d0dd      	beq.n	8005636 <_puts_r+0x2e>
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	2b00      	cmp	r3, #0
 8005682:	da04      	bge.n	800568e <_puts_r+0x86>
 8005684:	69a2      	ldr	r2, [r4, #24]
 8005686:	429a      	cmp	r2, r3
 8005688:	dc06      	bgt.n	8005698 <_puts_r+0x90>
 800568a:	290a      	cmp	r1, #10
 800568c:	d004      	beq.n	8005698 <_puts_r+0x90>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	6022      	str	r2, [r4, #0]
 8005694:	7019      	strb	r1, [r3, #0]
 8005696:	e7cf      	b.n	8005638 <_puts_r+0x30>
 8005698:	4622      	mov	r2, r4
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f818 	bl	80056d0 <__swbuf_r>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d1c9      	bne.n	8005638 <_puts_r+0x30>
 80056a4:	e7e9      	b.n	800567a <_puts_r+0x72>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	200a      	movs	r0, #10
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	7018      	strb	r0, [r3, #0]
 80056b0:	e7e5      	b.n	800567e <_puts_r+0x76>
 80056b2:	bf00      	nop
 80056b4:	08005fcc 	.word	0x08005fcc
 80056b8:	08005fec 	.word	0x08005fec
 80056bc:	08005fac 	.word	0x08005fac

080056c0 <puts>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <puts+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f7ff bf9f 	b.w	8005608 <_puts_r>
 80056ca:	bf00      	nop
 80056cc:	20000010 	.word	0x20000010

080056d0 <__swbuf_r>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	460e      	mov	r6, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	4605      	mov	r5, r0
 80056d8:	b118      	cbz	r0, 80056e2 <__swbuf_r+0x12>
 80056da:	6983      	ldr	r3, [r0, #24]
 80056dc:	b90b      	cbnz	r3, 80056e2 <__swbuf_r+0x12>
 80056de:	f000 f9a7 	bl	8005a30 <__sinit>
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <__swbuf_r+0x98>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	d12a      	bne.n	800573e <__swbuf_r+0x6e>
 80056e8:	686c      	ldr	r4, [r5, #4]
 80056ea:	69a3      	ldr	r3, [r4, #24]
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	071a      	lsls	r2, r3, #28
 80056f2:	d52e      	bpl.n	8005752 <__swbuf_r+0x82>
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b363      	cbz	r3, 8005752 <__swbuf_r+0x82>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1ac0      	subs	r0, r0, r3
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	b2f6      	uxtb	r6, r6
 8005702:	4283      	cmp	r3, r0
 8005704:	4637      	mov	r7, r6
 8005706:	dc04      	bgt.n	8005712 <__swbuf_r+0x42>
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f926 	bl	800595c <_fflush_r>
 8005710:	bb28      	cbnz	r0, 800575e <__swbuf_r+0x8e>
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	3b01      	subs	r3, #1
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	701e      	strb	r6, [r3, #0]
 8005720:	6963      	ldr	r3, [r4, #20]
 8005722:	3001      	adds	r0, #1
 8005724:	4283      	cmp	r3, r0
 8005726:	d004      	beq.n	8005732 <__swbuf_r+0x62>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	07db      	lsls	r3, r3, #31
 800572c:	d519      	bpl.n	8005762 <__swbuf_r+0x92>
 800572e:	2e0a      	cmp	r6, #10
 8005730:	d117      	bne.n	8005762 <__swbuf_r+0x92>
 8005732:	4621      	mov	r1, r4
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f911 	bl	800595c <_fflush_r>
 800573a:	b190      	cbz	r0, 8005762 <__swbuf_r+0x92>
 800573c:	e00f      	b.n	800575e <__swbuf_r+0x8e>
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <__swbuf_r+0x9c>)
 8005740:	429c      	cmp	r4, r3
 8005742:	d101      	bne.n	8005748 <__swbuf_r+0x78>
 8005744:	68ac      	ldr	r4, [r5, #8]
 8005746:	e7d0      	b.n	80056ea <__swbuf_r+0x1a>
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <__swbuf_r+0xa0>)
 800574a:	429c      	cmp	r4, r3
 800574c:	bf08      	it	eq
 800574e:	68ec      	ldreq	r4, [r5, #12]
 8005750:	e7cb      	b.n	80056ea <__swbuf_r+0x1a>
 8005752:	4621      	mov	r1, r4
 8005754:	4628      	mov	r0, r5
 8005756:	f000 f80d 	bl	8005774 <__swsetup_r>
 800575a:	2800      	cmp	r0, #0
 800575c:	d0cc      	beq.n	80056f8 <__swbuf_r+0x28>
 800575e:	f04f 37ff 	mov.w	r7, #4294967295
 8005762:	4638      	mov	r0, r7
 8005764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005766:	bf00      	nop
 8005768:	08005fcc 	.word	0x08005fcc
 800576c:	08005fec 	.word	0x08005fec
 8005770:	08005fac 	.word	0x08005fac

08005774 <__swsetup_r>:
 8005774:	4b32      	ldr	r3, [pc, #200]	; (8005840 <__swsetup_r+0xcc>)
 8005776:	b570      	push	{r4, r5, r6, lr}
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	4606      	mov	r6, r0
 800577c:	460c      	mov	r4, r1
 800577e:	b125      	cbz	r5, 800578a <__swsetup_r+0x16>
 8005780:	69ab      	ldr	r3, [r5, #24]
 8005782:	b913      	cbnz	r3, 800578a <__swsetup_r+0x16>
 8005784:	4628      	mov	r0, r5
 8005786:	f000 f953 	bl	8005a30 <__sinit>
 800578a:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <__swsetup_r+0xd0>)
 800578c:	429c      	cmp	r4, r3
 800578e:	d10f      	bne.n	80057b0 <__swsetup_r+0x3c>
 8005790:	686c      	ldr	r4, [r5, #4]
 8005792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005796:	b29a      	uxth	r2, r3
 8005798:	0715      	lsls	r5, r2, #28
 800579a:	d42c      	bmi.n	80057f6 <__swsetup_r+0x82>
 800579c:	06d0      	lsls	r0, r2, #27
 800579e:	d411      	bmi.n	80057c4 <__swsetup_r+0x50>
 80057a0:	2209      	movs	r2, #9
 80057a2:	6032      	str	r2, [r6, #0]
 80057a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	e03e      	b.n	800582e <__swsetup_r+0xba>
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <__swsetup_r+0xd4>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d101      	bne.n	80057ba <__swsetup_r+0x46>
 80057b6:	68ac      	ldr	r4, [r5, #8]
 80057b8:	e7eb      	b.n	8005792 <__swsetup_r+0x1e>
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <__swsetup_r+0xd8>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	bf08      	it	eq
 80057c0:	68ec      	ldreq	r4, [r5, #12]
 80057c2:	e7e6      	b.n	8005792 <__swsetup_r+0x1e>
 80057c4:	0751      	lsls	r1, r2, #29
 80057c6:	d512      	bpl.n	80057ee <__swsetup_r+0x7a>
 80057c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ca:	b141      	cbz	r1, 80057de <__swsetup_r+0x6a>
 80057cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d0:	4299      	cmp	r1, r3
 80057d2:	d002      	beq.n	80057da <__swsetup_r+0x66>
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 fa19 	bl	8005c0c <_free_r>
 80057da:	2300      	movs	r3, #0
 80057dc:	6363      	str	r3, [r4, #52]	; 0x34
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	2300      	movs	r3, #0
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f043 0308 	orr.w	r3, r3, #8
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	b94b      	cbnz	r3, 800580e <__swsetup_r+0x9a>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005804:	d003      	beq.n	800580e <__swsetup_r+0x9a>
 8005806:	4621      	mov	r1, r4
 8005808:	4630      	mov	r0, r6
 800580a:	f000 f9bf 	bl	8005b8c <__smakebuf_r>
 800580e:	89a2      	ldrh	r2, [r4, #12]
 8005810:	f012 0301 	ands.w	r3, r2, #1
 8005814:	d00c      	beq.n	8005830 <__swsetup_r+0xbc>
 8005816:	2300      	movs	r3, #0
 8005818:	60a3      	str	r3, [r4, #8]
 800581a:	6963      	ldr	r3, [r4, #20]
 800581c:	425b      	negs	r3, r3
 800581e:	61a3      	str	r3, [r4, #24]
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	b953      	cbnz	r3, 800583a <__swsetup_r+0xc6>
 8005824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005828:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800582c:	d1ba      	bne.n	80057a4 <__swsetup_r+0x30>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	0792      	lsls	r2, r2, #30
 8005832:	bf58      	it	pl
 8005834:	6963      	ldrpl	r3, [r4, #20]
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	e7f2      	b.n	8005820 <__swsetup_r+0xac>
 800583a:	2000      	movs	r0, #0
 800583c:	e7f7      	b.n	800582e <__swsetup_r+0xba>
 800583e:	bf00      	nop
 8005840:	20000010 	.word	0x20000010
 8005844:	08005fcc 	.word	0x08005fcc
 8005848:	08005fec 	.word	0x08005fec
 800584c:	08005fac 	.word	0x08005fac

08005850 <__sflush_r>:
 8005850:	898a      	ldrh	r2, [r1, #12]
 8005852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005856:	4605      	mov	r5, r0
 8005858:	0710      	lsls	r0, r2, #28
 800585a:	460c      	mov	r4, r1
 800585c:	d458      	bmi.n	8005910 <__sflush_r+0xc0>
 800585e:	684b      	ldr	r3, [r1, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	dc05      	bgt.n	8005870 <__sflush_r+0x20>
 8005864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	dc02      	bgt.n	8005870 <__sflush_r+0x20>
 800586a:	2000      	movs	r0, #0
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005872:	2e00      	cmp	r6, #0
 8005874:	d0f9      	beq.n	800586a <__sflush_r+0x1a>
 8005876:	2300      	movs	r3, #0
 8005878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800587c:	682f      	ldr	r7, [r5, #0]
 800587e:	6a21      	ldr	r1, [r4, #32]
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	d032      	beq.n	80058ea <__sflush_r+0x9a>
 8005884:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	075a      	lsls	r2, r3, #29
 800588a:	d505      	bpl.n	8005898 <__sflush_r+0x48>
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	1ac0      	subs	r0, r0, r3
 8005890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005892:	b10b      	cbz	r3, 8005898 <__sflush_r+0x48>
 8005894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005896:	1ac0      	subs	r0, r0, r3
 8005898:	2300      	movs	r3, #0
 800589a:	4602      	mov	r2, r0
 800589c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800589e:	6a21      	ldr	r1, [r4, #32]
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b0      	blx	r6
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	d106      	bne.n	80058b8 <__sflush_r+0x68>
 80058aa:	6829      	ldr	r1, [r5, #0]
 80058ac:	291d      	cmp	r1, #29
 80058ae:	d848      	bhi.n	8005942 <__sflush_r+0xf2>
 80058b0:	4a29      	ldr	r2, [pc, #164]	; (8005958 <__sflush_r+0x108>)
 80058b2:	40ca      	lsrs	r2, r1
 80058b4:	07d6      	lsls	r6, r2, #31
 80058b6:	d544      	bpl.n	8005942 <__sflush_r+0xf2>
 80058b8:	2200      	movs	r2, #0
 80058ba:	6062      	str	r2, [r4, #4]
 80058bc:	04d9      	lsls	r1, r3, #19
 80058be:	6922      	ldr	r2, [r4, #16]
 80058c0:	6022      	str	r2, [r4, #0]
 80058c2:	d504      	bpl.n	80058ce <__sflush_r+0x7e>
 80058c4:	1c42      	adds	r2, r0, #1
 80058c6:	d101      	bne.n	80058cc <__sflush_r+0x7c>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b903      	cbnz	r3, 80058ce <__sflush_r+0x7e>
 80058cc:	6560      	str	r0, [r4, #84]	; 0x54
 80058ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058d0:	602f      	str	r7, [r5, #0]
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d0c9      	beq.n	800586a <__sflush_r+0x1a>
 80058d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058da:	4299      	cmp	r1, r3
 80058dc:	d002      	beq.n	80058e4 <__sflush_r+0x94>
 80058de:	4628      	mov	r0, r5
 80058e0:	f000 f994 	bl	8005c0c <_free_r>
 80058e4:	2000      	movs	r0, #0
 80058e6:	6360      	str	r0, [r4, #52]	; 0x34
 80058e8:	e7c0      	b.n	800586c <__sflush_r+0x1c>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b0      	blx	r6
 80058f0:	1c41      	adds	r1, r0, #1
 80058f2:	d1c8      	bne.n	8005886 <__sflush_r+0x36>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0c5      	beq.n	8005886 <__sflush_r+0x36>
 80058fa:	2b1d      	cmp	r3, #29
 80058fc:	d001      	beq.n	8005902 <__sflush_r+0xb2>
 80058fe:	2b16      	cmp	r3, #22
 8005900:	d101      	bne.n	8005906 <__sflush_r+0xb6>
 8005902:	602f      	str	r7, [r5, #0]
 8005904:	e7b1      	b.n	800586a <__sflush_r+0x1a>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	e7ad      	b.n	800586c <__sflush_r+0x1c>
 8005910:	690f      	ldr	r7, [r1, #16]
 8005912:	2f00      	cmp	r7, #0
 8005914:	d0a9      	beq.n	800586a <__sflush_r+0x1a>
 8005916:	0793      	lsls	r3, r2, #30
 8005918:	680e      	ldr	r6, [r1, #0]
 800591a:	bf08      	it	eq
 800591c:	694b      	ldreq	r3, [r1, #20]
 800591e:	600f      	str	r7, [r1, #0]
 8005920:	bf18      	it	ne
 8005922:	2300      	movne	r3, #0
 8005924:	eba6 0807 	sub.w	r8, r6, r7
 8005928:	608b      	str	r3, [r1, #8]
 800592a:	f1b8 0f00 	cmp.w	r8, #0
 800592e:	dd9c      	ble.n	800586a <__sflush_r+0x1a>
 8005930:	4643      	mov	r3, r8
 8005932:	463a      	mov	r2, r7
 8005934:	6a21      	ldr	r1, [r4, #32]
 8005936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005938:	4628      	mov	r0, r5
 800593a:	47b0      	blx	r6
 800593c:	2800      	cmp	r0, #0
 800593e:	dc06      	bgt.n	800594e <__sflush_r+0xfe>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	e78e      	b.n	800586c <__sflush_r+0x1c>
 800594e:	4407      	add	r7, r0
 8005950:	eba8 0800 	sub.w	r8, r8, r0
 8005954:	e7e9      	b.n	800592a <__sflush_r+0xda>
 8005956:	bf00      	nop
 8005958:	20400001 	.word	0x20400001

0800595c <_fflush_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	4605      	mov	r5, r0
 8005962:	460c      	mov	r4, r1
 8005964:	b1db      	cbz	r3, 800599e <_fflush_r+0x42>
 8005966:	b118      	cbz	r0, 8005970 <_fflush_r+0x14>
 8005968:	6983      	ldr	r3, [r0, #24]
 800596a:	b90b      	cbnz	r3, 8005970 <_fflush_r+0x14>
 800596c:	f000 f860 	bl	8005a30 <__sinit>
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <_fflush_r+0x48>)
 8005972:	429c      	cmp	r4, r3
 8005974:	d109      	bne.n	800598a <_fflush_r+0x2e>
 8005976:	686c      	ldr	r4, [r5, #4]
 8005978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597c:	b17b      	cbz	r3, 800599e <_fflush_r+0x42>
 800597e:	4621      	mov	r1, r4
 8005980:	4628      	mov	r0, r5
 8005982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005986:	f7ff bf63 	b.w	8005850 <__sflush_r>
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <_fflush_r+0x4c>)
 800598c:	429c      	cmp	r4, r3
 800598e:	d101      	bne.n	8005994 <_fflush_r+0x38>
 8005990:	68ac      	ldr	r4, [r5, #8]
 8005992:	e7f1      	b.n	8005978 <_fflush_r+0x1c>
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <_fflush_r+0x50>)
 8005996:	429c      	cmp	r4, r3
 8005998:	bf08      	it	eq
 800599a:	68ec      	ldreq	r4, [r5, #12]
 800599c:	e7ec      	b.n	8005978 <_fflush_r+0x1c>
 800599e:	2000      	movs	r0, #0
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
 80059a2:	bf00      	nop
 80059a4:	08005fcc 	.word	0x08005fcc
 80059a8:	08005fec 	.word	0x08005fec
 80059ac:	08005fac 	.word	0x08005fac

080059b0 <std>:
 80059b0:	2300      	movs	r3, #0
 80059b2:	b510      	push	{r4, lr}
 80059b4:	4604      	mov	r4, r0
 80059b6:	e9c0 3300 	strd	r3, r3, [r0]
 80059ba:	6083      	str	r3, [r0, #8]
 80059bc:	8181      	strh	r1, [r0, #12]
 80059be:	6643      	str	r3, [r0, #100]	; 0x64
 80059c0:	81c2      	strh	r2, [r0, #14]
 80059c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059c6:	6183      	str	r3, [r0, #24]
 80059c8:	4619      	mov	r1, r3
 80059ca:	2208      	movs	r2, #8
 80059cc:	305c      	adds	r0, #92	; 0x5c
 80059ce:	f7ff fe12 	bl	80055f6 <memset>
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <std+0x38>)
 80059d4:	6263      	str	r3, [r4, #36]	; 0x24
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <std+0x3c>)
 80059d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <std+0x40>)
 80059dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059de:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <std+0x44>)
 80059e0:	6224      	str	r4, [r4, #32]
 80059e2:	6323      	str	r3, [r4, #48]	; 0x30
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	bf00      	nop
 80059e8:	08005d7d 	.word	0x08005d7d
 80059ec:	08005d9f 	.word	0x08005d9f
 80059f0:	08005dd7 	.word	0x08005dd7
 80059f4:	08005dfb 	.word	0x08005dfb

080059f8 <_cleanup_r>:
 80059f8:	4901      	ldr	r1, [pc, #4]	; (8005a00 <_cleanup_r+0x8>)
 80059fa:	f000 b885 	b.w	8005b08 <_fwalk_reent>
 80059fe:	bf00      	nop
 8005a00:	0800595d 	.word	0x0800595d

08005a04 <__sfmoreglue>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	1e4a      	subs	r2, r1, #1
 8005a08:	2568      	movs	r5, #104	; 0x68
 8005a0a:	4355      	muls	r5, r2
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a12:	f000 f949 	bl	8005ca8 <_malloc_r>
 8005a16:	4604      	mov	r4, r0
 8005a18:	b140      	cbz	r0, 8005a2c <__sfmoreglue+0x28>
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	e9c0 1600 	strd	r1, r6, [r0]
 8005a20:	300c      	adds	r0, #12
 8005a22:	60a0      	str	r0, [r4, #8]
 8005a24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a28:	f7ff fde5 	bl	80055f6 <memset>
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}

08005a30 <__sinit>:
 8005a30:	6983      	ldr	r3, [r0, #24]
 8005a32:	b510      	push	{r4, lr}
 8005a34:	4604      	mov	r4, r0
 8005a36:	bb33      	cbnz	r3, 8005a86 <__sinit+0x56>
 8005a38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005a3c:	6503      	str	r3, [r0, #80]	; 0x50
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <__sinit+0x58>)
 8005a40:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <__sinit+0x5c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6282      	str	r2, [r0, #40]	; 0x28
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bf04      	itt	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	6183      	streq	r3, [r0, #24]
 8005a4e:	f000 f81f 	bl	8005a90 <__sfp>
 8005a52:	6060      	str	r0, [r4, #4]
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f81b 	bl	8005a90 <__sfp>
 8005a5a:	60a0      	str	r0, [r4, #8]
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 f817 	bl	8005a90 <__sfp>
 8005a62:	2200      	movs	r2, #0
 8005a64:	60e0      	str	r0, [r4, #12]
 8005a66:	2104      	movs	r1, #4
 8005a68:	6860      	ldr	r0, [r4, #4]
 8005a6a:	f7ff ffa1 	bl	80059b0 <std>
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2109      	movs	r1, #9
 8005a72:	68a0      	ldr	r0, [r4, #8]
 8005a74:	f7ff ff9c 	bl	80059b0 <std>
 8005a78:	2202      	movs	r2, #2
 8005a7a:	2112      	movs	r1, #18
 8005a7c:	68e0      	ldr	r0, [r4, #12]
 8005a7e:	f7ff ff97 	bl	80059b0 <std>
 8005a82:	2301      	movs	r3, #1
 8005a84:	61a3      	str	r3, [r4, #24]
 8005a86:	bd10      	pop	{r4, pc}
 8005a88:	08005fa8 	.word	0x08005fa8
 8005a8c:	080059f9 	.word	0x080059f9

08005a90 <__sfp>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <__sfp+0x70>)
 8005a94:	681e      	ldr	r6, [r3, #0]
 8005a96:	69b3      	ldr	r3, [r6, #24]
 8005a98:	4607      	mov	r7, r0
 8005a9a:	b913      	cbnz	r3, 8005aa2 <__sfp+0x12>
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff ffc7 	bl	8005a30 <__sinit>
 8005aa2:	3648      	adds	r6, #72	; 0x48
 8005aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	d503      	bpl.n	8005ab4 <__sfp+0x24>
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	b133      	cbz	r3, 8005abe <__sfp+0x2e>
 8005ab0:	6836      	ldr	r6, [r6, #0]
 8005ab2:	e7f7      	b.n	8005aa4 <__sfp+0x14>
 8005ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ab8:	b16d      	cbz	r5, 8005ad6 <__sfp+0x46>
 8005aba:	3468      	adds	r4, #104	; 0x68
 8005abc:	e7f4      	b.n	8005aa8 <__sfp+0x18>
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff ff9f 	bl	8005a04 <__sfmoreglue>
 8005ac6:	6030      	str	r0, [r6, #0]
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d1f1      	bne.n	8005ab0 <__sfp+0x20>
 8005acc:	230c      	movs	r3, #12
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <__sfp+0x74>)
 8005ad8:	6665      	str	r5, [r4, #100]	; 0x64
 8005ada:	e9c4 5500 	strd	r5, r5, [r4]
 8005ade:	60a5      	str	r5, [r4, #8]
 8005ae0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005ae4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	4629      	mov	r1, r5
 8005aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005af0:	f7ff fd81 	bl	80055f6 <memset>
 8005af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005afc:	e7e9      	b.n	8005ad2 <__sfp+0x42>
 8005afe:	bf00      	nop
 8005b00:	08005fa8 	.word	0x08005fa8
 8005b04:	ffff0001 	.word	0xffff0001

08005b08 <_fwalk_reent>:
 8005b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	4689      	mov	r9, r1
 8005b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b14:	2600      	movs	r6, #0
 8005b16:	b914      	cbnz	r4, 8005b1e <_fwalk_reent+0x16>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005b22:	3f01      	subs	r7, #1
 8005b24:	d501      	bpl.n	8005b2a <_fwalk_reent+0x22>
 8005b26:	6824      	ldr	r4, [r4, #0]
 8005b28:	e7f5      	b.n	8005b16 <_fwalk_reent+0xe>
 8005b2a:	89ab      	ldrh	r3, [r5, #12]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d907      	bls.n	8005b40 <_fwalk_reent+0x38>
 8005b30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b34:	3301      	adds	r3, #1
 8005b36:	d003      	beq.n	8005b40 <_fwalk_reent+0x38>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	47c8      	blx	r9
 8005b3e:	4306      	orrs	r6, r0
 8005b40:	3568      	adds	r5, #104	; 0x68
 8005b42:	e7ee      	b.n	8005b22 <_fwalk_reent+0x1a>

08005b44 <__swhatbuf_r>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	460e      	mov	r6, r1
 8005b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	b096      	sub	sp, #88	; 0x58
 8005b50:	4614      	mov	r4, r2
 8005b52:	461d      	mov	r5, r3
 8005b54:	da07      	bge.n	8005b66 <__swhatbuf_r+0x22>
 8005b56:	2300      	movs	r3, #0
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	89b3      	ldrh	r3, [r6, #12]
 8005b5c:	061a      	lsls	r2, r3, #24
 8005b5e:	d410      	bmi.n	8005b82 <__swhatbuf_r+0x3e>
 8005b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b64:	e00e      	b.n	8005b84 <__swhatbuf_r+0x40>
 8005b66:	466a      	mov	r2, sp
 8005b68:	f000 f96e 	bl	8005e48 <_fstat_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	dbf2      	blt.n	8005b56 <__swhatbuf_r+0x12>
 8005b70:	9a01      	ldr	r2, [sp, #4]
 8005b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b7a:	425a      	negs	r2, r3
 8005b7c:	415a      	adcs	r2, r3
 8005b7e:	602a      	str	r2, [r5, #0]
 8005b80:	e7ee      	b.n	8005b60 <__swhatbuf_r+0x1c>
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	2000      	movs	r0, #0
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	b016      	add	sp, #88	; 0x58
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}

08005b8c <__smakebuf_r>:
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b90:	079d      	lsls	r5, r3, #30
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	d507      	bpl.n	8005ba8 <__smakebuf_r+0x1c>
 8005b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	6163      	str	r3, [r4, #20]
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	ab01      	add	r3, sp, #4
 8005baa:	466a      	mov	r2, sp
 8005bac:	f7ff ffca 	bl	8005b44 <__swhatbuf_r>
 8005bb0:	9900      	ldr	r1, [sp, #0]
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f877 	bl	8005ca8 <_malloc_r>
 8005bba:	b948      	cbnz	r0, 8005bd0 <__smakebuf_r+0x44>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d4ef      	bmi.n	8005ba4 <__smakebuf_r+0x18>
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7e3      	b.n	8005b98 <__smakebuf_r+0xc>
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <__smakebuf_r+0x7c>)
 8005bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	6163      	str	r3, [r4, #20]
 8005be2:	9b01      	ldr	r3, [sp, #4]
 8005be4:	6120      	str	r0, [r4, #16]
 8005be6:	b15b      	cbz	r3, 8005c00 <__smakebuf_r+0x74>
 8005be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 f93d 	bl	8005e6c <_isatty_r>
 8005bf2:	b128      	cbz	r0, 8005c00 <__smakebuf_r+0x74>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	431d      	orrs	r5, r3
 8005c04:	81a5      	strh	r5, [r4, #12]
 8005c06:	e7cd      	b.n	8005ba4 <__smakebuf_r+0x18>
 8005c08:	080059f9 	.word	0x080059f9

08005c0c <_free_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4605      	mov	r5, r0
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d045      	beq.n	8005ca0 <_free_r+0x94>
 8005c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c18:	1f0c      	subs	r4, r1, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bfb8      	it	lt
 8005c1e:	18e4      	addlt	r4, r4, r3
 8005c20:	f000 f946 	bl	8005eb0 <__malloc_lock>
 8005c24:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <_free_r+0x98>)
 8005c26:	6813      	ldr	r3, [r2, #0]
 8005c28:	4610      	mov	r0, r2
 8005c2a:	b933      	cbnz	r3, 8005c3a <_free_r+0x2e>
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	6014      	str	r4, [r2, #0]
 8005c30:	4628      	mov	r0, r5
 8005c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c36:	f000 b93c 	b.w	8005eb2 <__malloc_unlock>
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	d90c      	bls.n	8005c58 <_free_r+0x4c>
 8005c3e:	6821      	ldr	r1, [r4, #0]
 8005c40:	1862      	adds	r2, r4, r1
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bf04      	itt	eq
 8005c46:	681a      	ldreq	r2, [r3, #0]
 8005c48:	685b      	ldreq	r3, [r3, #4]
 8005c4a:	6063      	str	r3, [r4, #4]
 8005c4c:	bf04      	itt	eq
 8005c4e:	1852      	addeq	r2, r2, r1
 8005c50:	6022      	streq	r2, [r4, #0]
 8005c52:	6004      	str	r4, [r0, #0]
 8005c54:	e7ec      	b.n	8005c30 <_free_r+0x24>
 8005c56:	4613      	mov	r3, r2
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	b10a      	cbz	r2, 8005c60 <_free_r+0x54>
 8005c5c:	42a2      	cmp	r2, r4
 8005c5e:	d9fa      	bls.n	8005c56 <_free_r+0x4a>
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	1858      	adds	r0, r3, r1
 8005c64:	42a0      	cmp	r0, r4
 8005c66:	d10b      	bne.n	8005c80 <_free_r+0x74>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	4401      	add	r1, r0
 8005c6c:	1858      	adds	r0, r3, r1
 8005c6e:	4282      	cmp	r2, r0
 8005c70:	6019      	str	r1, [r3, #0]
 8005c72:	d1dd      	bne.n	8005c30 <_free_r+0x24>
 8005c74:	6810      	ldr	r0, [r2, #0]
 8005c76:	6852      	ldr	r2, [r2, #4]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	6019      	str	r1, [r3, #0]
 8005c7e:	e7d7      	b.n	8005c30 <_free_r+0x24>
 8005c80:	d902      	bls.n	8005c88 <_free_r+0x7c>
 8005c82:	230c      	movs	r3, #12
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	e7d3      	b.n	8005c30 <_free_r+0x24>
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	1821      	adds	r1, r4, r0
 8005c8c:	428a      	cmp	r2, r1
 8005c8e:	bf04      	itt	eq
 8005c90:	6811      	ldreq	r1, [r2, #0]
 8005c92:	6852      	ldreq	r2, [r2, #4]
 8005c94:	6062      	str	r2, [r4, #4]
 8005c96:	bf04      	itt	eq
 8005c98:	1809      	addeq	r1, r1, r0
 8005c9a:	6021      	streq	r1, [r4, #0]
 8005c9c:	605c      	str	r4, [r3, #4]
 8005c9e:	e7c7      	b.n	8005c30 <_free_r+0x24>
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	2000499c 	.word	0x2000499c

08005ca8 <_malloc_r>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	1ccd      	adds	r5, r1, #3
 8005cac:	f025 0503 	bic.w	r5, r5, #3
 8005cb0:	3508      	adds	r5, #8
 8005cb2:	2d0c      	cmp	r5, #12
 8005cb4:	bf38      	it	cc
 8005cb6:	250c      	movcc	r5, #12
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	4606      	mov	r6, r0
 8005cbc:	db01      	blt.n	8005cc2 <_malloc_r+0x1a>
 8005cbe:	42a9      	cmp	r1, r5
 8005cc0:	d903      	bls.n	8005cca <_malloc_r+0x22>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	6033      	str	r3, [r6, #0]
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	f000 f8f1 	bl	8005eb0 <__malloc_lock>
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <_malloc_r+0xac>)
 8005cd0:	6814      	ldr	r4, [r2, #0]
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	b991      	cbnz	r1, 8005cfc <_malloc_r+0x54>
 8005cd6:	4c20      	ldr	r4, [pc, #128]	; (8005d58 <_malloc_r+0xb0>)
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	b91b      	cbnz	r3, 8005ce4 <_malloc_r+0x3c>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f000 f83d 	bl	8005d5c <_sbrk_r>
 8005ce2:	6020      	str	r0, [r4, #0]
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f000 f838 	bl	8005d5c <_sbrk_r>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d124      	bne.n	8005d3a <_malloc_r+0x92>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	6033      	str	r3, [r6, #0]
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f8dc 	bl	8005eb2 <__malloc_unlock>
 8005cfa:	e7e4      	b.n	8005cc6 <_malloc_r+0x1e>
 8005cfc:	680b      	ldr	r3, [r1, #0]
 8005cfe:	1b5b      	subs	r3, r3, r5
 8005d00:	d418      	bmi.n	8005d34 <_malloc_r+0x8c>
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d90f      	bls.n	8005d26 <_malloc_r+0x7e>
 8005d06:	600b      	str	r3, [r1, #0]
 8005d08:	50cd      	str	r5, [r1, r3]
 8005d0a:	18cc      	adds	r4, r1, r3
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f000 f8d0 	bl	8005eb2 <__malloc_unlock>
 8005d12:	f104 000b 	add.w	r0, r4, #11
 8005d16:	1d23      	adds	r3, r4, #4
 8005d18:	f020 0007 	bic.w	r0, r0, #7
 8005d1c:	1ac3      	subs	r3, r0, r3
 8005d1e:	d0d3      	beq.n	8005cc8 <_malloc_r+0x20>
 8005d20:	425a      	negs	r2, r3
 8005d22:	50e2      	str	r2, [r4, r3]
 8005d24:	e7d0      	b.n	8005cc8 <_malloc_r+0x20>
 8005d26:	428c      	cmp	r4, r1
 8005d28:	684b      	ldr	r3, [r1, #4]
 8005d2a:	bf16      	itet	ne
 8005d2c:	6063      	strne	r3, [r4, #4]
 8005d2e:	6013      	streq	r3, [r2, #0]
 8005d30:	460c      	movne	r4, r1
 8005d32:	e7eb      	b.n	8005d0c <_malloc_r+0x64>
 8005d34:	460c      	mov	r4, r1
 8005d36:	6849      	ldr	r1, [r1, #4]
 8005d38:	e7cc      	b.n	8005cd4 <_malloc_r+0x2c>
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d005      	beq.n	8005d50 <_malloc_r+0xa8>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f808 	bl	8005d5c <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d0cf      	beq.n	8005cf0 <_malloc_r+0x48>
 8005d50:	6025      	str	r5, [r4, #0]
 8005d52:	e7db      	b.n	8005d0c <_malloc_r+0x64>
 8005d54:	2000499c 	.word	0x2000499c
 8005d58:	200049a0 	.word	0x200049a0

08005d5c <_sbrk_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4c06      	ldr	r4, [pc, #24]	; (8005d78 <_sbrk_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4605      	mov	r5, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	f7fa ff62 	bl	8000c30 <_sbrk>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_sbrk_r+0x1a>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_sbrk_r+0x1a>
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20004b08 	.word	0x20004b08

08005d7c <__sread>:
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	460c      	mov	r4, r1
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	f000 f896 	bl	8005eb4 <_read_r>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	bfab      	itete	ge
 8005d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d90:	181b      	addge	r3, r3, r0
 8005d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d96:	bfac      	ite	ge
 8005d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d9a:	81a3      	strhlt	r3, [r4, #12]
 8005d9c:	bd10      	pop	{r4, pc}

08005d9e <__swrite>:
 8005d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da2:	461f      	mov	r7, r3
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	05db      	lsls	r3, r3, #23
 8005da8:	4605      	mov	r5, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	4616      	mov	r6, r2
 8005dae:	d505      	bpl.n	8005dbc <__swrite+0x1e>
 8005db0:	2302      	movs	r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	f000 f868 	bl	8005e8c <_lseek_r>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dc6:	81a3      	strh	r3, [r4, #12]
 8005dc8:	4632      	mov	r2, r6
 8005dca:	463b      	mov	r3, r7
 8005dcc:	4628      	mov	r0, r5
 8005dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd2:	f000 b817 	b.w	8005e04 <_write_r>

08005dd6 <__sseek>:
 8005dd6:	b510      	push	{r4, lr}
 8005dd8:	460c      	mov	r4, r1
 8005dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dde:	f000 f855 	bl	8005e8c <_lseek_r>
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	bf15      	itete	ne
 8005de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005df2:	81a3      	strheq	r3, [r4, #12]
 8005df4:	bf18      	it	ne
 8005df6:	81a3      	strhne	r3, [r4, #12]
 8005df8:	bd10      	pop	{r4, pc}

08005dfa <__sclose>:
 8005dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfe:	f000 b813 	b.w	8005e28 <_close_r>
	...

08005e04 <_write_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4c07      	ldr	r4, [pc, #28]	; (8005e24 <_write_r+0x20>)
 8005e08:	4605      	mov	r5, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fa fd44 	bl	80008a0 <_write>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_write_r+0x1e>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_write_r+0x1e>
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20004b08 	.word	0x20004b08

08005e28 <_close_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4c06      	ldr	r4, [pc, #24]	; (8005e44 <_close_r+0x1c>)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4605      	mov	r5, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	f7fa fec7 	bl	8000bc6 <_close>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_close_r+0x1a>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_close_r+0x1a>
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	20004b08 	.word	0x20004b08

08005e48 <_fstat_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4c07      	ldr	r4, [pc, #28]	; (8005e68 <_fstat_r+0x20>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4605      	mov	r5, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	f7fa fec2 	bl	8000bde <_fstat>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d102      	bne.n	8005e64 <_fstat_r+0x1c>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	b103      	cbz	r3, 8005e64 <_fstat_r+0x1c>
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
 8005e66:	bf00      	nop
 8005e68:	20004b08 	.word	0x20004b08

08005e6c <_isatty_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4c06      	ldr	r4, [pc, #24]	; (8005e88 <_isatty_r+0x1c>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	4605      	mov	r5, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	f7fa fec1 	bl	8000bfe <_isatty>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d102      	bne.n	8005e86 <_isatty_r+0x1a>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	b103      	cbz	r3, 8005e86 <_isatty_r+0x1a>
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	20004b08 	.word	0x20004b08

08005e8c <_lseek_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4c07      	ldr	r4, [pc, #28]	; (8005eac <_lseek_r+0x20>)
 8005e90:	4605      	mov	r5, r0
 8005e92:	4608      	mov	r0, r1
 8005e94:	4611      	mov	r1, r2
 8005e96:	2200      	movs	r2, #0
 8005e98:	6022      	str	r2, [r4, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f7fa feba 	bl	8000c14 <_lseek>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_lseek_r+0x1e>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_lseek_r+0x1e>
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20004b08 	.word	0x20004b08

08005eb0 <__malloc_lock>:
 8005eb0:	4770      	bx	lr

08005eb2 <__malloc_unlock>:
 8005eb2:	4770      	bx	lr

08005eb4 <_read_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4c07      	ldr	r4, [pc, #28]	; (8005ed4 <_read_r+0x20>)
 8005eb8:	4605      	mov	r5, r0
 8005eba:	4608      	mov	r0, r1
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f7fa fe62 	bl	8000b8c <_read>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_read_r+0x1e>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_read_r+0x1e>
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20004b08 	.word	0x20004b08

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
