
SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa8  20000084  0800649c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b2c  0800649c  00024b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191ee  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003003  00000000  00000000  000392a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003d610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004774  00000000  00000000  0003e820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f14d  00000000  00000000  00042f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3193  00000000  00000000  000520e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c0  00000000  00000000  001352f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062a4 	.word	0x080062a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080062a4 	.word	0x080062a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d013      	beq.n	80005d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	e000      	b.n	80005bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <main>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
void StartDefaultTask(void *argument);
void StartTask02(void *argument);

int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	HAL_Init();
 80005e4:	f000 fb6e 	bl	8000cc4 <HAL_Init>
	SystemClock_Config();
 80005e8:	f000 f828 	bl	800063c <SystemClock_Config>

	MX_GPIO_Init();
 80005ec:	f000 f8c8 	bl	8000780 <MX_GPIO_Init>
	MX_SPI1_Init();
 80005f0:	f000 f88e 	bl	8000710 <MX_SPI1_Init>

	osKernelInitialize();
 80005f4:	f001 ffc6 	bl	8002584 <osKernelInitialize>
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80005f8:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <main+0x44>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <main+0x48>)
 80005fe:	f002 f82b 	bl	8002658 <osThreadNew>
 8000602:	4602      	mov	r2, r0
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <main+0x4c>)
 8000606:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <main+0x50>)
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <main+0x54>)
 800060e:	f002 f823 	bl	8002658 <osThreadNew>
 8000612:	4602      	mov	r2, r0
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x58>)
 8000616:	601a      	str	r2, [r3, #0]
	osKernelStart();
 8000618:	f001 ffe8 	bl	80025ec <osKernelStart>
 800061c:	2300      	movs	r3, #0

}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08006310 	.word	0x08006310
 8000628:	08000821 	.word	0x08000821
 800062c:	200049b8 	.word	0x200049b8
 8000630:	08006334 	.word	0x08006334
 8000634:	08000831 	.word	0x08000831
 8000638:	200049d0 	.word	0x200049d0

0800063c <SystemClock_Config>:

void SystemClock_Config(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fd0b 	bl	8005066 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80006b4:	2348      	movs	r3, #72	; 0x48
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80006bc:	2303      	movs	r3, #3
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fde5 	bl	8001294 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
		Error_Handler();
 80006d0:	f000 f922 	bl	8000918 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f83f 	bl	8001774 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc4>
		Error_Handler();
 80006fc:	f000 f90c 	bl	8000918 <Error_Handler>
	}
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_SPI1_Init>:

static void MX_SPI1_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

	hspi1.Instance = SPI1;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_SPI1_Init+0x68>)
 8000716:	4a19      	ldr	r2, [pc, #100]	; (800077c <MX_SPI1_Init+0x6c>)
 8000718:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_SPI1_Init+0x68>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_SPI1_Init+0x68>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_SPI1_Init+0x68>)
 800072a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800072e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_SPI1_Init+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x68>)
 800073e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000742:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI1_Init+0x68>)
 8000746:	2210      	movs	r2, #16
 8000748:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_SPI1_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI1_Init+0x68>)
 800075e:	220a      	movs	r2, #10
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_SPI1_Init+0x68>)
 8000764:	f001 fa16 	bl	8001b94 <HAL_SPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_SPI1_Init+0x62>
		Error_Handler();
 800076e:	f000 f8d3 	bl	8000918 <Error_Handler>
	}
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200049e8 	.word	0x200049e8
 800077c:	40013000 	.word	0x40013000

08000780 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0x98>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <MX_GPIO_Init+0x98>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0x98>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_GPIO_Init+0x98>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0x98>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x98>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_GPIO_Init+0x98>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <MX_GPIO_Init+0x98>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_GPIO_Init+0x98>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2110      	movs	r1, #16
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_GPIO_Init+0x9c>)
 80007f0:	f000 fd36 	bl	8001260 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007f4:	2310      	movs	r3, #16
 80007f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0x9c>)
 800080c:	f000 fb7e 	bl	8000f0c <HAL_GPIO_Init>
}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000

08000820 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f001 ffbb 	bl	80027a4 <osDelay>
 800082e:	e7fb      	b.n	8000828 <StartDefaultTask+0x8>

08000830 <StartTask02>:
	}
}

void StartTask02(void *argument) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af02      	add	r7, sp, #8
 8000836:	6078      	str	r0, [r7, #4]

	for (;;) {

		snprintf(txBuf2, sizeof(txBuf2), "%s %010d", txBuf, counter);
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <StartTask02+0x98>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <StartTask02+0x9c>)
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <StartTask02+0xa0>)
 8000842:	2164      	movs	r1, #100	; 0x64
 8000844:	4823      	ldr	r0, [pc, #140]	; (80008d4 <StartTask02+0xa4>)
 8000846:	f004 fc93 	bl	8005170 <sniprintf>
		printf("spi rcv 1: ");
 800084a:	4823      	ldr	r0, [pc, #140]	; (80008d8 <StartTask02+0xa8>)
 800084c:	f004 fc14 	bl	8005078 <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	4821      	ldr	r0, [pc, #132]	; (80008dc <StartTask02+0xac>)
 8000856:	f000 fd03 	bl	8001260 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) txBuf2, (uint8_t*) rxBuff1, 8,
 800085a:	2364      	movs	r3, #100	; 0x64
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2308      	movs	r3, #8
 8000860:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <StartTask02+0xb0>)
 8000862:	491c      	ldr	r1, [pc, #112]	; (80008d4 <StartTask02+0xa4>)
 8000864:	481f      	ldr	r0, [pc, #124]	; (80008e4 <StartTask02+0xb4>)
 8000866:	f001 f9f9 	bl	8001c5c <HAL_SPI_TransmitReceive>
				100);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2110      	movs	r1, #16
 800086e:	481b      	ldr	r0, [pc, #108]	; (80008dc <StartTask02+0xac>)
 8000870:	f000 fcf6 	bl	8001260 <HAL_GPIO_WritePin>
		printf("%s\n", rxBuff1);
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <StartTask02+0xb0>)
 8000876:	f004 fc73 	bl	8005160 <puts>
		printf("%s\n", txBuf2);
 800087a:	4816      	ldr	r0, [pc, #88]	; (80008d4 <StartTask02+0xa4>)
 800087c:	f004 fc70 	bl	8005160 <puts>
		counter++;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <StartTask02+0x98>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <StartTask02+0x98>)
 8000888:	6013      	str	r3, [r2, #0]
		osDelay(110);
 800088a:	206e      	movs	r0, #110	; 0x6e
 800088c:	f001 ff8a 	bl	80027a4 <osDelay>

		printf("spi rcv 2: ");
 8000890:	4815      	ldr	r0, [pc, #84]	; (80008e8 <StartTask02+0xb8>)
 8000892:	f004 fbf1 	bl	8005078 <iprintf>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2110      	movs	r1, #16
 800089a:	4810      	ldr	r0, [pc, #64]	; (80008dc <StartTask02+0xac>)
 800089c:	f000 fce0 	bl	8001260 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) txBuf3, (uint8_t*) rxBuff2, 2,
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <StartTask02+0xbc>)
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <StartTask02+0xc0>)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <StartTask02+0xb4>)
 80008ac:	f001 f9d6 	bl	8001c5c <HAL_SPI_TransmitReceive>
				100);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2110      	movs	r1, #16
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <StartTask02+0xac>)
 80008b6:	f000 fcd3 	bl	8001260 <HAL_GPIO_WritePin>
		printf("%s\n", rxBuff2);
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <StartTask02+0xbc>)
 80008bc:	f004 fc50 	bl	8005160 <puts>
		osDelay(10);
 80008c0:	200a      	movs	r0, #10
 80008c2:	f001 ff6f 	bl	80027a4 <osDelay>
		snprintf(txBuf2, sizeof(txBuf2), "%s %010d", txBuf, counter);
 80008c6:	e7b7      	b.n	8000838 <StartTask02+0x8>
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	20000000 	.word	0x20000000
 80008d0:	080062d4 	.word	0x080062d4
 80008d4:	20004a40 	.word	0x20004a40
 80008d8:	080062e0 	.word	0x080062e0
 80008dc:	40020000 	.word	0x40020000
 80008e0:	200049bc 	.word	0x200049bc
 80008e4:	200049e8 	.word	0x200049e8
 80008e8:	080062ec 	.word	0x080062ec
 80008ec:	200049d4 	.word	0x200049d4
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000906:	f000 f9ff 	bl	8000d08 <HAL_IncTick>
	}
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40001000 	.word	0x40001000

08000918 <Error_Handler>:

void Error_Handler(void) {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
	__disable_irq();
	while (1) {
 800091e:	e7fe      	b.n	800091e <Error_Handler+0x6>

08000920 <_write>:
	}
}

int _write(int file, char *ptr, int len) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e009      	b.n	8000946 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	60ba      	str	r2, [r7, #8]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe28 	bl	8000590 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	429a      	cmp	r2, r3
 800094c:	dbf1      	blt.n	8000932 <_write+0x12>
	}
	return len;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_MspInit+0x54>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x54>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_MspInit+0x54>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_MspInit+0x54>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 fa8b 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_SPI_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 80009dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_SPI_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a0a:	23e0      	movs	r3, #224	; 0xe0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_SPI_MspInit+0x8c>)
 8000a26:	f000 fa71 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40013000 	.word	0x40013000
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2036      	movs	r0, #54	; 0x36
 8000a56:	f000 fa2f 	bl	8000eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5a:	2036      	movs	r0, #54	; 0x36
 8000a5c:	f000 fa48 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f852 	bl	8001b30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 f83c 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8000a90:	4603      	mov	r3, r0
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_InitTick+0xa8>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_InitTick+0xac>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_InitTick+0xb0>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_InitTick+0xac>)
 8000aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_InitTick+0xac>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_InitTick+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_InitTick+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_InitTick+0xac>)
 8000ac6:	f001 fb17 	bl	80020f8 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_InitTick+0xac>)
 8000ad2:	f001 fb46 	bl	8002162 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	20004aa4 	.word	0x20004aa4
 8000af0:	40001000 	.word	0x40001000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM6_DAC_IRQHandler+0x10>)
 8000b26:	f001 fb40 	bl	80021aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20004aa4 	.word	0x20004aa4

08000b34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
	}

return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f004 f9f8 	bl	8004ffc <__errno>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20030000 	.word	0x20030000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	200000a4 	.word	0x200000a4
 8000c40:	20004b30 	.word	0x20004b30

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <SystemInit+0x28>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <SystemInit+0x28>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SystemInit+0x28>)
 8000c5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c76:	e003      	b.n	8000c80 <LoopCopyDataInit>

08000c78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c7e:	3104      	adds	r1, #4

08000c80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c88:	d3f6      	bcc.n	8000c78 <CopyDataInit>
  ldr  r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c8c:	e002      	b.n	8000c94 <LoopFillZerobss>

08000c8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c90:	f842 3b04 	str.w	r3, [r2], #4

08000c94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c98:	d3f9      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd3 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f004 f9b3 	bl	8005008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc9d 	bl	80005e0 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ca8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000cac:	08006418 	.word	0x08006418
  ldr  r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000cb8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000cbc:	20004b2c 	.word	0x20004b2c

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f8d8 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fea4 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe2e 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000018 	.word	0x20000018
 8000d2c:	20004ae4 	.word	0x20004ae4

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20004ae4 	.word	0x20004ae4

08000d48 <__NVIC_SetPriorityGrouping>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff61 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb1 	bl	8000e3c <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff80 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff54 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e177      	b.n	8001218 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 8166 	bne.w	8001212 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d00b      	beq.n	8000f66 <HAL_GPIO_Init+0x5a>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5a:	2b11      	cmp	r3, #17
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0xfc>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80c0 	beq.w	8001212 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b65      	ldr	r3, [pc, #404]	; (800122c <HAL_GPIO_Init+0x320>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a64      	ldr	r2, [pc, #400]	; (800122c <HAL_GPIO_Init+0x320>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b62      	ldr	r3, [pc, #392]	; (800122c <HAL_GPIO_Init+0x320>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a60      	ldr	r2, [pc, #384]	; (8001230 <HAL_GPIO_Init+0x324>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a57      	ldr	r2, [pc, #348]	; (8001234 <HAL_GPIO_Init+0x328>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d037      	beq.n	800114a <HAL_GPIO_Init+0x23e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a56      	ldr	r2, [pc, #344]	; (8001238 <HAL_GPIO_Init+0x32c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d031      	beq.n	8001146 <HAL_GPIO_Init+0x23a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a55      	ldr	r2, [pc, #340]	; (800123c <HAL_GPIO_Init+0x330>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x236>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a54      	ldr	r2, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x334>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x232>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a53      	ldr	r2, [pc, #332]	; (8001244 <HAL_GPIO_Init+0x338>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x22e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_GPIO_Init+0x33c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x22a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_GPIO_Init+0x340>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x226>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_GPIO_Init+0x344>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x222>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4f      	ldr	r2, [pc, #316]	; (8001254 <HAL_GPIO_Init+0x348>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x21e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <HAL_GPIO_Init+0x34c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x21a>
 8001122:	2309      	movs	r3, #9
 8001124:	e012      	b.n	800114c <HAL_GPIO_Init+0x240>
 8001126:	230a      	movs	r3, #10
 8001128:	e010      	b.n	800114c <HAL_GPIO_Init+0x240>
 800112a:	2308      	movs	r3, #8
 800112c:	e00e      	b.n	800114c <HAL_GPIO_Init+0x240>
 800112e:	2307      	movs	r3, #7
 8001130:	e00c      	b.n	800114c <HAL_GPIO_Init+0x240>
 8001132:	2306      	movs	r3, #6
 8001134:	e00a      	b.n	800114c <HAL_GPIO_Init+0x240>
 8001136:	2305      	movs	r3, #5
 8001138:	e008      	b.n	800114c <HAL_GPIO_Init+0x240>
 800113a:	2304      	movs	r3, #4
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x240>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x240>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x240>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x240>
 800114a:	2300      	movs	r3, #0
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115c:	4934      	ldr	r1, [pc, #208]	; (8001230 <HAL_GPIO_Init+0x324>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <HAL_GPIO_Init+0x350>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <HAL_GPIO_Init+0x350>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <HAL_GPIO_Init+0x350>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <HAL_GPIO_Init+0x350>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_GPIO_Init+0x350>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <HAL_GPIO_Init+0x350>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_GPIO_Init+0x350>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_GPIO_Init+0x350>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	f67f ae84 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001220:	bf00      	nop
 8001222:	3724      	adds	r7, #36	; 0x24
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40023800 	.word	0x40023800
 8001230:	40013800 	.word	0x40013800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40021400 	.word	0x40021400
 800124c:	40021800 	.word	0x40021800
 8001250:	40021c00 	.word	0x40021c00
 8001254:	40022000 	.word	0x40022000
 8001258:	40022400 	.word	0x40022400
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e25b      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d075      	beq.n	800139e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b2:	4ba3      	ldr	r3, [pc, #652]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d00c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4ba0      	ldr	r3, [pc, #640]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d112      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b9d      	ldr	r3, [pc, #628]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d6:	d10b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	4b99      	ldr	r3, [pc, #612]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d05b      	beq.n	800139c <HAL_RCC_OscConfig+0x108>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d157      	bne.n	800139c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e236      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x74>
 80012fa:	4b91      	ldr	r3, [pc, #580]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a90      	ldr	r2, [pc, #576]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x98>
 8001312:	4b8b      	ldr	r3, [pc, #556]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a8a      	ldr	r2, [pc, #552]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b88      	ldr	r3, [pc, #544]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a87      	ldr	r2, [pc, #540]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 800132c:	4b84      	ldr	r3, [pc, #528]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a83      	ldr	r2, [pc, #524]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b81      	ldr	r3, [pc, #516]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a80      	ldr	r2, [pc, #512]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fcf0 	bl	8000d30 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fcec 	bl	8000d30 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1fb      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xc0>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fcdc 	bl	8000d30 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcd8 	bl	8000d30 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1e7      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b6c      	ldr	r3, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0xe8>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d063      	beq.n	8001472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013aa:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b62      	ldr	r3, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d11c      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b5c      	ldr	r3, [pc, #368]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e1bb      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4952      	ldr	r1, [pc, #328]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	e03a      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_RCC_OscConfig+0x2b0>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fc91 	bl	8000d30 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fc8d 	bl	8000d30 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e19c      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4940      	ldr	r1, [pc, #256]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x2b0>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fc70 	bl	8000d30 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fc6c 	bl	8000d30 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e17b      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d030      	beq.n	80014e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d016      	beq.n	80014b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_RCC_OscConfig+0x2b4>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fc50 	bl	8000d30 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fc4c 	bl	8000d30 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e15b      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x200>
 80014b2:	e015      	b.n	80014e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x2b4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fc39 	bl	8000d30 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fc35 	bl	8000d30 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e144      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a0 	beq.w	800162e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x2b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d121      	bne.n	800156e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_RCC_OscConfig+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_RCC_OscConfig+0x2b8>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fbfb 	bl	8000d30 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e011      	b.n	8001562 <HAL_RCC_OscConfig+0x2ce>
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	42470000 	.word	0x42470000
 8001548:	42470e80 	.word	0x42470e80
 800154c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fbee 	bl	8000d30 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e0fd      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x4d4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x2f0>
 8001576:	4b7d      	ldr	r3, [pc, #500]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x32a>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x312>
 800158c:	4b77      	ldr	r3, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a76      	ldr	r2, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	4b74      	ldr	r3, [pc, #464]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a73      	ldr	r2, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x32a>
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a70      	ldr	r2, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	4b6e      	ldr	r3, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a6d      	ldr	r2, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff fbb3 	bl	8000d30 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fbaf 	bl	8000d30 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0bc      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x33a>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb9d 	bl	8000d30 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb99 	bl	8000d30 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0a6      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b52      	ldr	r3, [pc, #328]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8092 	beq.w	800175c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d05c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d141      	bne.n	80016d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b48      	ldr	r3, [pc, #288]	; (8001770 <HAL_RCC_OscConfig+0x4dc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb6d 	bl	8000d30 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb69 	bl	8000d30 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e078      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	3b01      	subs	r3, #1
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	4933      	ldr	r1, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x4dc>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb42 	bl	8000d30 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fb3e 	bl	8000d30 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e04d      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x41c>
 80016ce:	e045      	b.n	800175c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x4dc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb2b 	bl	8000d30 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb27 	bl	8000d30 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e036      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x44a>
 80016fc:	e02e      	b.n	800175c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e029      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_OscConfig+0x4d8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	429a      	cmp	r2, r3
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d115      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001738:	4293      	cmp	r3, r2
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40007000 	.word	0x40007000
 800176c:	40023800 	.word	0x40023800
 8001770:	42470060 	.word	0x42470060

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fa64 	bl	8000d30 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff fa60 	bl	8000d30 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4601      	mov	r1, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	fa21 f303 	lsr.w	r3, r1, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f890 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	08006358 	.word	0x08006358
 8001938:	20000010 	.word	0x20000010
 800193c:	20000014 	.word	0x20000014

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d007      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x32>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d008      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x38>
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 80b4 	bne.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800196e:	60bb      	str	r3, [r7, #8]
       break;
 8001970:	e0b3      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001974:	60bb      	str	r3, [r7, #8]
      break;
 8001976:	e0b0      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001980:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d04a      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	f04f 0400 	mov.w	r4, #0
 8001998:	f240 11ff 	movw	r1, #511	; 0x1ff
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	ea03 0501 	and.w	r5, r3, r1
 80019a4:	ea04 0602 	and.w	r6, r4, r2
 80019a8:	4629      	mov	r1, r5
 80019aa:	4632      	mov	r2, r6
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f04f 0400 	mov.w	r4, #0
 80019b4:	0154      	lsls	r4, r2, #5
 80019b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ba:	014b      	lsls	r3, r1, #5
 80019bc:	4619      	mov	r1, r3
 80019be:	4622      	mov	r2, r4
 80019c0:	1b49      	subs	r1, r1, r5
 80019c2:	eb62 0206 	sbc.w	r2, r2, r6
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	0194      	lsls	r4, r2, #6
 80019d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d4:	018b      	lsls	r3, r1, #6
 80019d6:	1a5b      	subs	r3, r3, r1
 80019d8:	eb64 0402 	sbc.w	r4, r4, r2
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	00e2      	lsls	r2, r4, #3
 80019e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ea:	00d9      	lsls	r1, r3, #3
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	195b      	adds	r3, r3, r5
 80019f2:	eb44 0406 	adc.w	r4, r4, r6
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	0262      	lsls	r2, r4, #9
 8001a00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a04:	0259      	lsls	r1, r3, #9
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f04f 0400 	mov.w	r4, #0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	f7fe fc3a 	bl	8000290 <__aeabi_uldivmod>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e049      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	f04f 0400 	mov.w	r4, #0
 8001a2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	ea03 0501 	and.w	r5, r3, r1
 8001a3a:	ea04 0602 	and.w	r6, r4, r2
 8001a3e:	4629      	mov	r1, r5
 8001a40:	4632      	mov	r2, r6
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f04f 0400 	mov.w	r4, #0
 8001a4a:	0154      	lsls	r4, r2, #5
 8001a4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a50:	014b      	lsls	r3, r1, #5
 8001a52:	4619      	mov	r1, r3
 8001a54:	4622      	mov	r2, r4
 8001a56:	1b49      	subs	r1, r1, r5
 8001a58:	eb62 0206 	sbc.w	r2, r2, r6
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	0194      	lsls	r4, r2, #6
 8001a66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a6a:	018b      	lsls	r3, r1, #6
 8001a6c:	1a5b      	subs	r3, r3, r1
 8001a6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a80:	00d9      	lsls	r1, r3, #3
 8001a82:	460b      	mov	r3, r1
 8001a84:	4614      	mov	r4, r2
 8001a86:	195b      	adds	r3, r3, r5
 8001a88:	eb44 0406 	adc.w	r4, r4, r6
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	02a2      	lsls	r2, r4, #10
 8001a96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a9a:	0299      	lsls	r1, r3, #10
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f04f 0400 	mov.w	r4, #0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4623      	mov	r3, r4
 8001aae:	f7fe fbef 	bl	8000290 <__aeabi_uldivmod>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
      break;
 8001ad2:	e002      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ad6:	60bb      	str	r3, [r7, #8]
      break;
 8001ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ada:	68bb      	ldr	r3, [r7, #8]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	00f42400 	.word	0x00f42400
 8001aec:	007a1200 	.word	0x007a1200

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000010 	.word	0x20000010

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0a9b      	lsrs	r3, r3, #10
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08006368 	.word	0x08006368

08001b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0203 	and.w	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RCC_GetClockConfig+0x60>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 020f 	and.w	r2, r3, #15
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e056      	b.n	8001c54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d106      	bne.n	8001bc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fef5 	bl	80009b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bdc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	ea42 0103 	orr.w	r1, r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	0c1b      	lsrs	r3, r3, #16
 8001c24:	f003 0104 	and.w	r1, r3, #4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_SPI_TransmitReceive+0x26>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e18a      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x33c>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c8a:	f7ff f851 	bl	8000d30 <HAL_GetTick>
 8001c8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d00f      	beq.n	8001ccc <HAL_SPI_TransmitReceive+0x70>
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cb2:	d107      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x68>
 8001cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d003      	beq.n	8001ccc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cca:	e15b      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_SPI_TransmitReceive+0x82>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_SPI_TransmitReceive+0x82>
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ce4:	e14e      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d003      	beq.n	8001cfa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d007      	beq.n	8001d4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d56:	d178      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_SPI_TransmitReceive+0x10a>
 8001d60:	8b7b      	ldrh	r3, [r7, #26]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d166      	bne.n	8001e34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	1c9a      	adds	r2, r3, #2
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d8a:	e053      	b.n	8001e34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d11b      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x176>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d016      	beq.n	8001dd2 <HAL_SPI_TransmitReceive+0x176>
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d113      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	1c9a      	adds	r2, r3, #2
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d119      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x1b8>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d014      	beq.n	8001e14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	b292      	uxth	r2, r2
 8001df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e14:	f7fe ff8c 	bl	8000d30 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d807      	bhi.n	8001e34 <HAL_SPI_TransmitReceive+0x1d8>
 8001e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	d003      	beq.n	8001e34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e32:	e0a7      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1a6      	bne.n	8001d8c <HAL_SPI_TransmitReceive+0x130>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1a1      	bne.n	8001d8c <HAL_SPI_TransmitReceive+0x130>
 8001e48:	e07c      	b.n	8001f44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_SPI_TransmitReceive+0x1fc>
 8001e52:	8b7b      	ldrh	r3, [r7, #26]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d16b      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	330c      	adds	r3, #12
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7e:	e057      	b.n	8001f30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x26c>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d017      	beq.n	8001ec8 <HAL_SPI_TransmitReceive+0x26c>
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d114      	bne.n	8001ec8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	330c      	adds	r3, #12
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d119      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x2ae>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d014      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f06:	2301      	movs	r3, #1
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f0a:	f7fe ff11 	bl	8000d30 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d803      	bhi.n	8001f22 <HAL_SPI_TransmitReceive+0x2c6>
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d102      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0x2cc>
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f2e:	e029      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1a2      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x224>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d19d      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f893 	bl	8002074 <SPI_EndRxTxTransaction>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f60:	e010      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	e000      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001f82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3730      	adds	r7, #48	; 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fb0:	e04c      	b.n	800204c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d048      	beq.n	800204c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001fba:	f7fe feb9 	bl	8000d30 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d902      	bls.n	8001fd0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d13d      	bne.n	800204c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fe8:	d111      	bne.n	800200e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff2:	d004      	beq.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffc:	d107      	bne.n	800200e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002016:	d10f      	bne.n	8002038 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e00f      	b.n	800206c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4013      	ands	r3, r2
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	429a      	cmp	r2, r3
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	429a      	cmp	r2, r3
 8002068:	d1a3      	bne.n	8001fb2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <SPI_EndRxTxTransaction+0x7c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <SPI_EndRxTxTransaction+0x80>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0d5b      	lsrs	r3, r3, #21
 800208c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800209e:	d112      	bne.n	80020c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff ff78 	bl	8001fa0 <SPI_WaitFlagStateUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d016      	beq.n	80020e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e00f      	b.n	80020e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d0f2      	beq.n	80020c6 <SPI_EndRxTxTransaction+0x52>
 80020e0:	e000      	b.n	80020e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80020e2:	bf00      	nop
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000010 	.word	0x20000010
 80020f4:	165e9f81 	.word	0x165e9f81

080020f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e01d      	b.n	8002146 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f815 	bl	800214e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f000 f968 	bl	800240c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d007      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d122      	bne.n	8002206 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11b      	bne.n	8002206 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0202 	mvn.w	r2, #2
 80021d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f8ee 	bl	80023ce <HAL_TIM_IC_CaptureCallback>
 80021f2:	e005      	b.n	8002200 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f8e0 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8f1 	bl	80023e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b04      	cmp	r3, #4
 8002212:	d122      	bne.n	800225a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b04      	cmp	r3, #4
 8002220:	d11b      	bne.n	800225a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f06f 0204 	mvn.w	r2, #4
 800222a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f8c4 	bl	80023ce <HAL_TIM_IC_CaptureCallback>
 8002246:	e005      	b.n	8002254 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8b6 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f8c7 	bl	80023e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b08      	cmp	r3, #8
 8002266:	d122      	bne.n	80022ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b08      	cmp	r3, #8
 8002274:	d11b      	bne.n	80022ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f06f 0208 	mvn.w	r2, #8
 800227e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2204      	movs	r2, #4
 8002284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f89a 	bl	80023ce <HAL_TIM_IC_CaptureCallback>
 800229a:	e005      	b.n	80022a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f88c 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f89d 	bl	80023e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d122      	bne.n	8002302 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d11b      	bne.n	8002302 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0210 	mvn.w	r2, #16
 80022d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2208      	movs	r2, #8
 80022d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f870 	bl	80023ce <HAL_TIM_IC_CaptureCallback>
 80022ee:	e005      	b.n	80022fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f862 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f873 	bl	80023e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10e      	bne.n	800232e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f06f 0201 	mvn.w	r2, #1
 8002326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7fe fae3 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d10e      	bne.n	800235a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002346:	2b80      	cmp	r3, #128	; 0x80
 8002348:	d107      	bne.n	800235a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f903 	bl	8002560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d10e      	bne.n	8002386 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d107      	bne.n	8002386 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800237e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f838 	bl	80023f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b20      	cmp	r3, #32
 8002392:	d10e      	bne.n	80023b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d107      	bne.n	80023b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f06f 0220 	mvn.w	r2, #32
 80023aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f8cd 	bl	800254c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a40      	ldr	r2, [pc, #256]	; (8002520 <TIM_Base_SetConfig+0x114>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d013      	beq.n	800244c <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242a:	d00f      	beq.n	800244c <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <TIM_Base_SetConfig+0x118>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00b      	beq.n	800244c <TIM_Base_SetConfig+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <TIM_Base_SetConfig+0x11c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <TIM_Base_SetConfig+0x40>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3b      	ldr	r2, [pc, #236]	; (800252c <TIM_Base_SetConfig+0x120>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0x40>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <TIM_Base_SetConfig+0x124>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d108      	bne.n	800245e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <TIM_Base_SetConfig+0x114>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d02b      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246c:	d027      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <TIM_Base_SetConfig+0x118>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d023      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <TIM_Base_SetConfig+0x11c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01f      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2a      	ldr	r2, [pc, #168]	; (800252c <TIM_Base_SetConfig+0x120>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01b      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <TIM_Base_SetConfig+0x124>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d017      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a28      	ldr	r2, [pc, #160]	; (8002534 <TIM_Base_SetConfig+0x128>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <TIM_Base_SetConfig+0x12c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00f      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <TIM_Base_SetConfig+0x130>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00b      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a25      	ldr	r2, [pc, #148]	; (8002540 <TIM_Base_SetConfig+0x134>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a24      	ldr	r2, [pc, #144]	; (8002544 <TIM_Base_SetConfig+0x138>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d003      	beq.n	80024be <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a23      	ldr	r2, [pc, #140]	; (8002548 <TIM_Base_SetConfig+0x13c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d108      	bne.n	80024d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <TIM_Base_SetConfig+0x114>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_Base_SetConfig+0xf8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <TIM_Base_SetConfig+0x124>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d103      	bne.n	800250c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	615a      	str	r2, [r3, #20]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40000c00 	.word	0x40000c00
 8002530:	40010400 	.word	0x40010400
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800
 8002540:	40001800 	.word	0x40001800
 8002544:	40001c00 	.word	0x40001c00
 8002548:	40002000 	.word	0x40002000

0800254c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800258a:	f3ef 8305 	mrs	r3, IPSR
 800258e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002590:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002596:	f3ef 8310 	mrs	r3, PRIMASK
 800259a:	607b      	str	r3, [r7, #4]
  return(result);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025a2:	f3ef 8311 	mrs	r3, BASEPRI
 80025a6:	603b      	str	r3, [r7, #0]
  return(result);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <osKernelInitialize+0x3a>
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <osKernelInitialize+0x64>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d103      	bne.n	80025be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80025b6:	f06f 0305 	mvn.w	r3, #5
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e00c      	b.n	80025d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <osKernelInitialize+0x64>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <osKernelInitialize+0x64>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e002      	b.n	80025d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	200000a8 	.word	0x200000a8

080025ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f2:	f3ef 8305 	mrs	r3, IPSR
 80025f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80025f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002602:	607b      	str	r3, [r7, #4]
  return(result);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800260a:	f3ef 8311 	mrs	r3, BASEPRI
 800260e:	603b      	str	r3, [r7, #0]
  return(result);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <osKernelStart+0x3a>
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <osKernelStart+0x68>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d103      	bne.n	8002626 <osKernelStart+0x3a>
    stat = osErrorISR;
 800261e:	f06f 0305 	mvn.w	r3, #5
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e010      	b.n	8002648 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <osKernelStart+0x68>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d109      	bne.n	8002642 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800262e:	f7ff ffa1 	bl	8002574 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <osKernelStart+0x68>)
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002638:	f001 f870 	bl	800371c <vTaskStartScheduler>
      stat = osOK;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e002      	b.n	8002648 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002648:	68fb      	ldr	r3, [r7, #12]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200000a8 	.word	0x200000a8

08002658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b090      	sub	sp, #64	; 0x40
 800265c:	af04      	add	r7, sp, #16
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002668:	f3ef 8305 	mrs	r3, IPSR
 800266c:	61fb      	str	r3, [r7, #28]
  return(result);
 800266e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 808f 	bne.w	8002794 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002676:	f3ef 8310 	mrs	r3, PRIMASK
 800267a:	61bb      	str	r3, [r7, #24]
  return(result);
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002682:	f3ef 8311 	mrs	r3, BASEPRI
 8002686:	617b      	str	r3, [r7, #20]
  return(result);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <osThreadNew+0x3e>
 800268e:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <osThreadNew+0x148>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d07e      	beq.n	8002794 <osThreadNew+0x13c>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d07b      	beq.n	8002794 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80026a0:	2318      	movs	r3, #24
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d045      	beq.n	8002740 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <osThreadNew+0x6a>
        name = attr->name;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <osThreadNew+0x90>
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	2b38      	cmp	r3, #56	; 0x38
 80026da:	d805      	bhi.n	80026e8 <osThreadNew+0x90>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <osThreadNew+0x94>
        return (NULL);
 80026e8:	2300      	movs	r3, #0
 80026ea:	e054      	b.n	8002796 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00e      	beq.n	8002722 <osThreadNew+0xca>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b5b      	cmp	r3, #91	; 0x5b
 800270a:	d90a      	bls.n	8002722 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <osThreadNew+0xca>
        mem = 1;
 800271c:	2301      	movs	r3, #1
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	e010      	b.n	8002744 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <osThreadNew+0xec>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <osThreadNew+0xec>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <osThreadNew+0xec>
          mem = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	e001      	b.n	8002744 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d110      	bne.n	800276c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002752:	9202      	str	r2, [sp, #8]
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fe09 	bl	8003378 <xTaskCreateStatic>
 8002766:	4603      	mov	r3, r0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e013      	b.n	8002794 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d110      	bne.n	8002794 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	b29a      	uxth	r2, r3
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fe51 	bl	800342c <xTaskCreate>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d001      	beq.n	8002794 <osThreadNew+0x13c>
          hTask = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002794:	693b      	ldr	r3, [r7, #16]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3730      	adds	r7, #48	; 0x30
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200000a8 	.word	0x200000a8

080027a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ac:	f3ef 8305 	mrs	r3, IPSR
 80027b0:	613b      	str	r3, [r7, #16]
  return(result);
 80027b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b8:	f3ef 8310 	mrs	r3, PRIMASK
 80027bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027c4:	f3ef 8311 	mrs	r3, BASEPRI
 80027c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <osDelay+0x3c>
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <osDelay+0x58>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d103      	bne.n	80027e0 <osDelay+0x3c>
    stat = osErrorISR;
 80027d8:	f06f 0305 	mvn.w	r3, #5
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e007      	b.n	80027f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 ff62 	bl	80036b4 <vTaskDelay>
    }
  }

  return (stat);
 80027f0:	697b      	ldr	r3, [r7, #20]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200000a8 	.word	0x200000a8

08002800 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <vApplicationGetIdleTaskMemory+0x2c>)
 8002810:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <vApplicationGetIdleTaskMemory+0x30>)
 8002816:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	200000ac 	.word	0x200000ac
 8002830:	20000108 	.word	0x20000108

08002834 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <vApplicationGetTimerTaskMemory+0x2c>)
 8002844:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4a06      	ldr	r2, [pc, #24]	; (8002864 <vApplicationGetTimerTaskMemory+0x30>)
 800284a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	20000308 	.word	0x20000308
 8002864:	20000364 	.word	0x20000364

08002868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0208 	add.w	r2, r3, #8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f103 0208 	add.w	r2, r3, #8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 0208 	add.w	r2, r3, #8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d103      	bne.n	800292a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e00c      	b.n	8002944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3308      	adds	r3, #8
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e002      	b.n	8002938 <vListInsert+0x2e>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d2f6      	bcs.n	8002932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	601a      	str	r2, [r3, #0]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6852      	ldr	r2, [r2, #4]
 800299c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d103      	bne.n	80029b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	e7fe      	b.n	80029f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80029f8:	f002 f810 	bl	8004a1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	441a      	add	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	441a      	add	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	22ff      	movs	r2, #255	; 0xff
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d114      	bne.n	8002a78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01a      	beq.n	8002a8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3310      	adds	r3, #16
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f8de 	bl	8003c1c <xTaskRemoveFromEventList>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <xQueueGenericReset+0xcc>)
 8002a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	e009      	b.n	8002a8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fef3 	bl	8002868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3324      	adds	r3, #36	; 0x24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff feee 	bl	8002868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a8c:	f001 fff4 	bl	8004a78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a90:	2301      	movs	r3, #1
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08e      	sub	sp, #56	; 0x38
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <xQueueGenericCreateStatic+0x28>
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <xQueueGenericCreateStatic+0x42>
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	e7fe      	b.n	8002ae0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <xQueueGenericCreateStatic+0x4e>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <xQueueGenericCreateStatic+0x52>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueGenericCreateStatic+0x54>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <xQueueGenericCreateStatic+0x6c>
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	e7fe      	b.n	8002b0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <xQueueGenericCreateStatic+0x78>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <xQueueGenericCreateStatic+0x7c>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <xQueueGenericCreateStatic+0x7e>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <xQueueGenericCreateStatic+0x96>
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e7fe      	b.n	8002b34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b36:	2350      	movs	r3, #80	; 0x50
 8002b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b50      	cmp	r3, #80	; 0x50
 8002b3e:	d009      	beq.n	8002b54 <xQueueGenericCreateStatic+0xb4>
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e7fe      	b.n	8002b52 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f805 	bl	8002b86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e002      	b.n	8002ba8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	69b8      	ldr	r0, [r7, #24]
 8002bb8:	f7ff ff0a 	bl	80029d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08e      	sub	sp, #56	; 0x38
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <xQueueGenericSend+0x30>
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfa:	e7fe      	b.n	8002bfa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <xQueueGenericSend+0x3e>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xQueueGenericSend+0x42>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueGenericSend+0x44>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <xQueueGenericSend+0x5c>
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e7fe      	b.n	8002c26 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d103      	bne.n	8002c36 <xQueueGenericSend+0x6a>
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <xQueueGenericSend+0x6e>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueGenericSend+0x70>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <xQueueGenericSend+0x88>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c54:	f001 f998 	bl	8003f88 <xTaskGetSchedulerState>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <xQueueGenericSend+0x98>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <xQueueGenericSend+0x9c>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <xQueueGenericSend+0x9e>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <xQueueGenericSend+0xb6>
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	e7fe      	b.n	8002c80 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c82:	f001 fecb 	bl	8004a1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <xQueueGenericSend+0xcc>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d129      	bne.n	8002cec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c9e:	f000 f9ff 	bl	80030a0 <prvCopyDataToQueue>
 8002ca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 ffb3 	bl	8003c1c <xTaskRemoveFromEventList>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cbc:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <xQueueGenericSend+0x1f0>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	e00a      	b.n	8002ce4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cd4:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <xQueueGenericSend+0x1f0>)
 8002cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ce4:	f001 fec8 	bl	8004a78 <vPortExitCritical>
				return pdPASS;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e063      	b.n	8002db4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf2:	f001 fec1 	bl	8004a78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e05c      	b.n	8002db4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 ffeb 	bl	8003ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d0e:	f001 feb3 	bl	8004a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d12:	f000 fd67 	bl	80037e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d16:	f001 fe81 	bl	8004a1c <vPortEnterCritical>
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d103      	bne.n	8002d30 <xQueueGenericSend+0x164>
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d103      	bne.n	8002d46 <xQueueGenericSend+0x17a>
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d46:	f001 fe97 	bl	8004a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d4a:	1d3a      	adds	r2, r7, #4
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 ffda 	bl	8003d0c <xTaskCheckForTimeOut>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d124      	bne.n	8002da8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d60:	f000 fa96 	bl	8003290 <prvIsQueueFull>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d018      	beq.n	8002d9c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	3310      	adds	r3, #16
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 ff04 	bl	8003b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7a:	f000 fa21 	bl	80031c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d7e:	f000 fd3f 	bl	8003800 <xTaskResumeAll>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f47f af7c 	bne.w	8002c82 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <xQueueGenericSend+0x1f0>)
 8002d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	e772      	b.n	8002c82 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d9e:	f000 fa0f 	bl	80031c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002da2:	f000 fd2d 	bl	8003800 <xTaskResumeAll>
 8002da6:	e76c      	b.n	8002c82 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002daa:	f000 fa09 	bl	80031c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dae:	f000 fd27 	bl	8003800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3738      	adds	r7, #56	; 0x38
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <xQueueGenericSendFromISR+0x2c>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <xQueueGenericSendFromISR+0x3a>
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericSendFromISR+0x3e>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericSendFromISR+0x40>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <xQueueGenericSendFromISR+0x58>
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	e7fe      	b.n	8002e16 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSendFromISR+0x66>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <xQueueGenericSendFromISR+0x6a>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueGenericSendFromISR+0x6c>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <xQueueGenericSendFromISR+0x84>
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e7fe      	b.n	8002e42 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e44:	f001 fec6 	bl	8004bd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e48:	f3ef 8211 	mrs	r2, BASEPRI
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	61ba      	str	r2, [r7, #24]
 8002e5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d302      	bcc.n	8002e76 <xQueueGenericSendFromISR+0xb6>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d12c      	bne.n	8002ed0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e86:	f000 f90b 	bl	80030a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d112      	bne.n	8002eba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d016      	beq.n	8002eca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 febb 	bl	8003c1c <xTaskRemoveFromEventList>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e007      	b.n	8002eca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	b25a      	sxtb	r2, r3
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002ece:	e001      	b.n	8002ed4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3738      	adds	r7, #56	; 0x38
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	; 0x30
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <xQueueReceive+0x2e>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	e7fe      	b.n	8002f14 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <xQueueReceive+0x3c>
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <xQueueReceive+0x40>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <xQueueReceive+0x42>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <xQueueReceive+0x5a>
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e7fe      	b.n	8002f40 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f42:	f001 f821 	bl	8003f88 <xTaskGetSchedulerState>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <xQueueReceive+0x6a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <xQueueReceive+0x6e>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueReceive+0x70>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <xQueueReceive+0x88>
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e7fe      	b.n	8002f6e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f70:	f001 fd54 	bl	8004a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01f      	beq.n	8002fc0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f84:	f000 f8f6 	bl	8003174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00f      	beq.n	8002fb8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fe3d 	bl	8003c1c <xTaskRemoveFromEventList>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fa8:	4b3c      	ldr	r3, [pc, #240]	; (800309c <xQueueReceive+0x1b4>)
 8002faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fb8:	f001 fd5e 	bl	8004a78 <vPortExitCritical>
				return pdPASS;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e069      	b.n	8003094 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc6:	f001 fd57 	bl	8004a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e062      	b.n	8003094 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fe81 	bl	8003ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fe2:	f001 fd49 	bl	8004a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe6:	f000 fbfd 	bl	80037e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fea:	f001 fd17 	bl	8004a1c <vPortEnterCritical>
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d103      	bne.n	8003004 <xQueueReceive+0x11c>
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300a:	b25b      	sxtb	r3, r3
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d103      	bne.n	800301a <xQueueReceive+0x132>
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800301a:	f001 fd2d 	bl	8004a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800301e:	1d3a      	adds	r2, r7, #4
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fe70 	bl	8003d0c <xTaskCheckForTimeOut>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d123      	bne.n	800307a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003034:	f000 f916 	bl	8003264 <prvIsQueueEmpty>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d017      	beq.n	800306e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	3324      	adds	r3, #36	; 0x24
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd9a 	bl	8003b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800304c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304e:	f000 f8b7 	bl	80031c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003052:	f000 fbd5 	bl	8003800 <xTaskResumeAll>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d189      	bne.n	8002f70 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <xQueueReceive+0x1b4>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	e780      	b.n	8002f70 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800306e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003070:	f000 f8a6 	bl	80031c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003074:	f000 fbc4 	bl	8003800 <xTaskResumeAll>
 8003078:	e77a      	b.n	8002f70 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800307a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307c:	f000 f8a0 	bl	80031c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003080:	f000 fbbe 	bl	8003800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003086:	f000 f8ed 	bl	8003264 <prvIsQueueEmpty>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	f43f af6f 	beq.w	8002f70 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003092:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003094:	4618      	mov	r0, r3
 8003096:	3730      	adds	r7, #48	; 0x30
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d14d      	bne.n	8003162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff7a 	bl	8003fc4 <xTaskPriorityDisinherit>
 80030d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e043      	b.n	8003162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d119      	bne.n	8003114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6858      	ldr	r0, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	461a      	mov	r2, r3
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	f001 ffb0 	bl	8005050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	441a      	add	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	d32b      	bcc.n	8003162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e026      	b.n	8003162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68d8      	ldr	r0, [r3, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	461a      	mov	r2, r3
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	f001 ff96 	bl	8005050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	425b      	negs	r3, r3
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d207      	bcs.n	8003150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	425b      	negs	r3, r3
 800314a:	441a      	add	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d105      	bne.n	8003162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3b01      	subs	r3, #1
 8003160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800316a:	697b      	ldr	r3, [r7, #20]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	441a      	add	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d303      	bcc.n	80031a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68d9      	ldr	r1, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	461a      	mov	r2, r3
 80031b2:	6838      	ldr	r0, [r7, #0]
 80031b4:	f001 ff4c 	bl	8005050 <memcpy>
	}
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031c8:	f001 fc28 	bl	8004a1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031d4:	e011      	b.n	80031fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3324      	adds	r3, #36	; 0x24
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fd1a 	bl	8003c1c <xTaskRemoveFromEventList>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031ee:	f000 fded 	bl	8003dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dce9      	bgt.n	80031d6 <prvUnlockQueue+0x16>
 8003202:	e000      	b.n	8003206 <prvUnlockQueue+0x46>
					break;
 8003204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800320e:	f001 fc33 	bl	8004a78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003212:	f001 fc03 	bl	8004a1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800321c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800321e:	e011      	b.n	8003244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d012      	beq.n	800324e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3310      	adds	r3, #16
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fcf5 	bl	8003c1c <xTaskRemoveFromEventList>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003238:	f000 fdc8 	bl	8003dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800323c:	7bbb      	ldrb	r3, [r7, #14]
 800323e:	3b01      	subs	r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003248:	2b00      	cmp	r3, #0
 800324a:	dce9      	bgt.n	8003220 <prvUnlockQueue+0x60>
 800324c:	e000      	b.n	8003250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800324e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003258:	f001 fc0e 	bl	8004a78 <vPortExitCritical>
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800326c:	f001 fbd6 	bl	8004a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003278:	2301      	movs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e001      	b.n	8003282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003282:	f001 fbf9 	bl	8004a78 <vPortExitCritical>

	return xReturn;
 8003286:	68fb      	ldr	r3, [r7, #12]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003298:	f001 fbc0 	bl	8004a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d102      	bne.n	80032ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e001      	b.n	80032b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032b2:	f001 fbe1 	bl	8004a78 <vPortExitCritical>

	return xReturn;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e014      	b.n	80032fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <vQueueAddToRegistry+0x4c>)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032dc:	490b      	ldr	r1, [pc, #44]	; (800330c <vQueueAddToRegistry+0x4c>)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <vQueueAddToRegistry+0x4c>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032f2:	e005      	b.n	8003300 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b07      	cmp	r3, #7
 80032fe:	d9e7      	bls.n	80032d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	20004ae8 	.word	0x20004ae8

08003310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003320:	f001 fb7c 	bl	8004a1c <vPortEnterCritical>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800332a:	b25b      	sxtb	r3, r3
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d103      	bne.n	800333a <vQueueWaitForMessageRestricted+0x2a>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003340:	b25b      	sxtb	r3, r3
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d103      	bne.n	8003350 <vQueueWaitForMessageRestricted+0x40>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003350:	f001 fb92 	bl	8004a78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3324      	adds	r3, #36	; 0x24
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fc2f 	bl	8003bc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff28 	bl	80031c0 <prvUnlockQueue>
	}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af04      	add	r7, sp, #16
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <xTaskCreateStatic+0x28>
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	623b      	str	r3, [r7, #32]
 800339e:	e7fe      	b.n	800339e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <xTaskCreateStatic+0x42>
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e7fe      	b.n	80033b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033ba:	235c      	movs	r3, #92	; 0x5c
 80033bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b5c      	cmp	r3, #92	; 0x5c
 80033c2:	d009      	beq.n	80033d8 <xTaskCreateStatic+0x60>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e7fe      	b.n	80033d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01e      	beq.n	800341e <xTaskCreateStatic+0xa6>
 80033e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01b      	beq.n	800341e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033f8:	2300      	movs	r3, #0
 80033fa:	9303      	str	r3, [sp, #12]
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	9302      	str	r3, [sp, #8]
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f850 	bl	80034b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003418:	f000 f8dc 	bl	80035d4 <prvAddNewTaskToReadyList>
 800341c:	e001      	b.n	8003422 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003422:	697b      	ldr	r3, [r7, #20]
	}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	; 0x30
 8003430:	af04      	add	r7, sp, #16
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fc05 	bl	8004c50 <pvPortMalloc>
 8003446:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00e      	beq.n	800346c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800344e:	205c      	movs	r0, #92	; 0x5c
 8003450:	f001 fbfe 	bl	8004c50 <pvPortMalloc>
 8003454:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
 8003462:	e005      	b.n	8003470 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003464:	6978      	ldr	r0, [r7, #20]
 8003466:	f001 fcb5 	bl	8004dd4 <vPortFree>
 800346a:	e001      	b.n	8003470 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d017      	beq.n	80034a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	2300      	movs	r3, #0
 8003482:	9303      	str	r3, [sp, #12]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	9302      	str	r3, [sp, #8]
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f80e 	bl	80034b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800349a:	69f8      	ldr	r0, [r7, #28]
 800349c:	f000 f89a 	bl	80035d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034a0:	2301      	movs	r3, #1
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	e002      	b.n	80034ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034ac:	69bb      	ldr	r3, [r7, #24]
	}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	461a      	mov	r2, r3
 80034ce:	21a5      	movs	r1, #165	; 0xa5
 80034d0:	f001 fdc9 	bl	8005066 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034de:	3b01      	subs	r3, #1
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <prvInitialiseNewTask+0x56>
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e7fe      	b.n	800350a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01f      	beq.n	8003552 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e012      	b.n	800353e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	7819      	ldrb	r1, [r3, #0]
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	3334      	adds	r3, #52	; 0x34
 8003528:	460a      	mov	r2, r1
 800352a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	3301      	adds	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d9e9      	bls.n	8003518 <prvInitialiseNewTask+0x62>
 8003544:	e000      	b.n	8003548 <prvInitialiseNewTask+0x92>
			{
				break;
 8003546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003550:	e003      	b.n	800355a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2b37      	cmp	r3, #55	; 0x37
 800355e:	d901      	bls.n	8003564 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003560:	2337      	movs	r3, #55	; 0x37
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	2200      	movs	r2, #0
 8003574:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	3304      	adds	r3, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f994 	bl	80028a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	3318      	adds	r3, #24
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f98f 	bl	80028a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	2200      	movs	r2, #0
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	69b8      	ldr	r0, [r7, #24]
 80035b4:	f001 f90c 	bl	80047d0 <pxPortInitialiseStack>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ca:	bf00      	nop
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035dc:	f001 fa1e 	bl	8004a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <prvAddNewTaskToReadyList+0xc4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <prvAddNewTaskToReadyList+0xc4>)
 80035e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <prvAddNewTaskToReadyList+0xc8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035f2:	4a2a      	ldr	r2, [pc, #168]	; (800369c <prvAddNewTaskToReadyList+0xc8>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035f8:	4b27      	ldr	r3, [pc, #156]	; (8003698 <prvAddNewTaskToReadyList+0xc4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d110      	bne.n	8003622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003600:	f000 fc08 	bl	8003e14 <prvInitialiseTaskLists>
 8003604:	e00d      	b.n	8003622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <prvAddNewTaskToReadyList+0xcc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <prvAddNewTaskToReadyList+0xc8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d802      	bhi.n	8003622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800361c:	4a1f      	ldr	r2, [pc, #124]	; (800369c <prvAddNewTaskToReadyList+0xc8>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <prvAddNewTaskToReadyList+0xd0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <prvAddNewTaskToReadyList+0xd0>)
 800362a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <prvAddNewTaskToReadyList+0xd0>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <prvAddNewTaskToReadyList+0xd4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d903      	bls.n	8003648 <prvAddNewTaskToReadyList+0x74>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <prvAddNewTaskToReadyList+0xd4>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <prvAddNewTaskToReadyList+0xd8>)
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f7ff f92f 	bl	80028c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003664:	f001 fa08 	bl	8004a78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <prvAddNewTaskToReadyList+0xcc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvAddNewTaskToReadyList+0xc8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d207      	bcs.n	800368e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <prvAddNewTaskToReadyList+0xdc>)
 8003680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000c38 	.word	0x20000c38
 800369c:	20000764 	.word	0x20000764
 80036a0:	20000c44 	.word	0x20000c44
 80036a4:	20000c54 	.word	0x20000c54
 80036a8:	20000c40 	.word	0x20000c40
 80036ac:	20000768 	.word	0x20000768
 80036b0:	e000ed04 	.word	0xe000ed04

080036b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <vTaskDelay+0x60>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <vTaskDelay+0x2e>
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	e7fe      	b.n	80036e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80036e2:	f000 f87f 	bl	80037e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036e6:	2100      	movs	r1, #0
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fcd7 	bl	800409c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036ee:	f000 f887 	bl	8003800 <xTaskResumeAll>
 80036f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <vTaskDelay+0x64>)
 80036fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000c60 	.word	0x20000c60
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800372a:	463a      	mov	r2, r7
 800372c:	1d39      	adds	r1, r7, #4
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f864 	bl	8002800 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	9202      	str	r2, [sp, #8]
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	460a      	mov	r2, r1
 800374a:	4920      	ldr	r1, [pc, #128]	; (80037cc <vTaskStartScheduler+0xb0>)
 800374c:	4820      	ldr	r0, [pc, #128]	; (80037d0 <vTaskStartScheduler+0xb4>)
 800374e:	f7ff fe13 	bl	8003378 <xTaskCreateStatic>
 8003752:	4602      	mov	r2, r0
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <vTaskStartScheduler+0xb8>)
 8003756:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <vTaskStartScheduler+0xb8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e001      	b.n	800376a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003770:	f000 fce8 	bl	8004144 <xTimerCreateTimerTask>
 8003774:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d115      	bne.n	80037a8 <vTaskStartScheduler+0x8c>
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <vTaskStartScheduler+0xbc>)
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <vTaskStartScheduler+0xc0>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <vTaskStartScheduler+0xc4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037a2:	f001 f89d 	bl	80048e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037a6:	e00d      	b.n	80037c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d109      	bne.n	80037c4 <vTaskStartScheduler+0xa8>
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e7fe      	b.n	80037c2 <vTaskStartScheduler+0xa6>
}
 80037c4:	bf00      	nop
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	080062f8 	.word	0x080062f8
 80037d0:	08003de5 	.word	0x08003de5
 80037d4:	20000c5c 	.word	0x20000c5c
 80037d8:	20000c58 	.word	0x20000c58
 80037dc:	20000c44 	.word	0x20000c44
 80037e0:	20000c3c 	.word	0x20000c3c

080037e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <vTaskSuspendAll+0x18>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a03      	ldr	r2, [pc, #12]	; (80037fc <vTaskSuspendAll+0x18>)
 80037f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000c60 	.word	0x20000c60

08003800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <xTaskResumeAll+0x114>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <xTaskResumeAll+0x2a>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	e7fe      	b.n	8003828 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800382a:	f001 f8f7 	bl	8004a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <xTaskResumeAll+0x114>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	4a37      	ldr	r2, [pc, #220]	; (8003914 <xTaskResumeAll+0x114>)
 8003836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <xTaskResumeAll+0x114>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d162      	bne.n	8003906 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003840:	4b35      	ldr	r3, [pc, #212]	; (8003918 <xTaskResumeAll+0x118>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05e      	beq.n	8003906 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003848:	e02f      	b.n	80038aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <xTaskResumeAll+0x11c>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3318      	adds	r3, #24
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f890 	bl	800297c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff f88b 	bl	800297c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <xTaskResumeAll+0x120>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d903      	bls.n	800387a <xTaskResumeAll+0x7a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <xTaskResumeAll+0x120>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4a27      	ldr	r2, [pc, #156]	; (8003924 <xTaskResumeAll+0x124>)
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7ff f816 	bl	80028c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <xTaskResumeAll+0x128>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <xTaskResumeAll+0x12c>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038aa:	4b1c      	ldr	r3, [pc, #112]	; (800391c <xTaskResumeAll+0x11c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1cb      	bne.n	800384a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038b8:	f000 fb46 	bl	8003f48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <xTaskResumeAll+0x130>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038c8:	f000 f846 	bl	8003958 <xTaskIncrementTick>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <xTaskResumeAll+0x12c>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f1      	bne.n	80038c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <xTaskResumeAll+0x130>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <xTaskResumeAll+0x12c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <xTaskResumeAll+0x134>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003906:	f001 f8b7 	bl	8004a78 <vPortExitCritical>

	return xAlreadyYielded;
 800390a:	68bb      	ldr	r3, [r7, #8]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000c60 	.word	0x20000c60
 8003918:	20000c38 	.word	0x20000c38
 800391c:	20000bf8 	.word	0x20000bf8
 8003920:	20000c40 	.word	0x20000c40
 8003924:	20000768 	.word	0x20000768
 8003928:	20000764 	.word	0x20000764
 800392c:	20000c4c 	.word	0x20000c4c
 8003930:	20000c48 	.word	0x20000c48
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <xTaskGetTickCount+0x1c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000c3c 	.word	0x20000c3c

08003958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003962:	4b4e      	ldr	r3, [pc, #312]	; (8003a9c <xTaskIncrementTick+0x144>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 8088 	bne.w	8003a7c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <xTaskIncrementTick+0x148>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003974:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <xTaskIncrementTick+0x148>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11f      	bne.n	80039c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003980:	4b48      	ldr	r3, [pc, #288]	; (8003aa4 <xTaskIncrementTick+0x14c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <xTaskIncrementTick+0x46>
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	e7fe      	b.n	800399c <xTaskIncrementTick+0x44>
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <xTaskIncrementTick+0x14c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <xTaskIncrementTick+0x150>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3e      	ldr	r2, [pc, #248]	; (8003aa4 <xTaskIncrementTick+0x14c>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4a3e      	ldr	r2, [pc, #248]	; (8003aa8 <xTaskIncrementTick+0x150>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <xTaskIncrementTick+0x154>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <xTaskIncrementTick+0x154>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	f000 fac4 	bl	8003f48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039c0:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <xTaskIncrementTick+0x158>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d349      	bcc.n	8003a5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <xTaskIncrementTick+0x14c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d104      	bne.n	80039de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <xTaskIncrementTick+0x158>)
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295
 80039da:	601a      	str	r2, [r3, #0]
					break;
 80039dc:	e03f      	b.n	8003a5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xTaskIncrementTick+0x14c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d203      	bcs.n	80039fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039f6:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <xTaskIncrementTick+0x158>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039fc:	e02f      	b.n	8003a5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe ffba 	bl	800297c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3318      	adds	r3, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe ffb1 	bl	800297c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1e:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <xTaskIncrementTick+0x15c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d903      	bls.n	8003a2e <xTaskIncrementTick+0xd6>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <xTaskIncrementTick+0x15c>)
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <xTaskIncrementTick+0x160>)
 8003a3c:	441a      	add	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7fe ff3c 	bl	80028c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <xTaskIncrementTick+0x164>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3b8      	bcc.n	80039ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a5c:	e7b5      	b.n	80039ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <xTaskIncrementTick+0x164>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	4914      	ldr	r1, [pc, #80]	; (8003ab8 <xTaskIncrementTick+0x160>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d907      	bls.n	8003a86 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003a76:	2301      	movs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e004      	b.n	8003a86 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <xTaskIncrementTick+0x168>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <xTaskIncrementTick+0x168>)
 8003a84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <xTaskIncrementTick+0x16c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a92:	697b      	ldr	r3, [r7, #20]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000c60 	.word	0x20000c60
 8003aa0:	20000c3c 	.word	0x20000c3c
 8003aa4:	20000bf0 	.word	0x20000bf0
 8003aa8:	20000bf4 	.word	0x20000bf4
 8003aac:	20000c50 	.word	0x20000c50
 8003ab0:	20000c58 	.word	0x20000c58
 8003ab4:	20000c40 	.word	0x20000c40
 8003ab8:	20000768 	.word	0x20000768
 8003abc:	20000764 	.word	0x20000764
 8003ac0:	20000c48 	.word	0x20000c48
 8003ac4:	20000c4c 	.word	0x20000c4c

08003ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <vTaskSwitchContext+0xa4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <vTaskSwitchContext+0xa8>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003adc:	e040      	b.n	8003b60 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <vTaskSwitchContext+0xa8>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <vTaskSwitchContext+0xac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e00f      	b.n	8003b0c <vTaskSwitchContext+0x44>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <vTaskSwitchContext+0x3e>
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	e7fe      	b.n	8003b04 <vTaskSwitchContext+0x3c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	491a      	ldr	r1, [pc, #104]	; (8003b78 <vTaskSwitchContext+0xb0>)
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0e5      	beq.n	8003aec <vTaskSwitchContext+0x24>
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <vTaskSwitchContext+0xb0>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3308      	adds	r3, #8
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d104      	bne.n	8003b50 <vTaskSwitchContext+0x88>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <vTaskSwitchContext+0xb4>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4a06      	ldr	r2, [pc, #24]	; (8003b74 <vTaskSwitchContext+0xac>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000c60 	.word	0x20000c60
 8003b70:	20000c4c 	.word	0x20000c4c
 8003b74:	20000c40 	.word	0x20000c40
 8003b78:	20000768 	.word	0x20000768
 8003b7c:	20000764 	.word	0x20000764

08003b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <vTaskPlaceOnEventList+0x24>
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e7fe      	b.n	8003ba2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <vTaskPlaceOnEventList+0x44>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fe feac 	bl	800290a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	6838      	ldr	r0, [r7, #0]
 8003bb6:	f000 fa71 	bl	800409c <prvAddCurrentTaskToDelayedList>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000764 	.word	0x20000764

08003bc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <vTaskPlaceOnEventListRestricted+0x26>
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e7fe      	b.n	8003bec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <vTaskPlaceOnEventListRestricted+0x50>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7fe fe63 	bl	80028c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f000 fa46 	bl	800409c <prvAddCurrentTaskToDelayedList>
	}
 8003c10:	bf00      	nop
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000764 	.word	0x20000764

08003c1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <xTaskRemoveFromEventList+0x2a>
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e7fe      	b.n	8003c44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3318      	adds	r3, #24
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fe96 	bl	800297c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <xTaskRemoveFromEventList+0xac>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11d      	bne.n	8003c94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fe8d 	bl	800297c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <xTaskRemoveFromEventList+0xb0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d903      	bls.n	8003c76 <xTaskRemoveFromEventList+0x5a>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <xTaskRemoveFromEventList+0xb0>)
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <xTaskRemoveFromEventList+0xb4>)
 8003c84:	441a      	add	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7fe fe18 	bl	80028c2 <vListInsertEnd>
 8003c92:	e005      	b.n	8003ca0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3318      	adds	r3, #24
 8003c98:	4619      	mov	r1, r3
 8003c9a:	480e      	ldr	r0, [pc, #56]	; (8003cd4 <xTaskRemoveFromEventList+0xb8>)
 8003c9c:	f7fe fe11 	bl	80028c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <xTaskRemoveFromEventList+0xbc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d905      	bls.n	8003cba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <xTaskRemoveFromEventList+0xc0>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e001      	b.n	8003cbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000c60 	.word	0x20000c60
 8003ccc:	20000c40 	.word	0x20000c40
 8003cd0:	20000768 	.word	0x20000768
 8003cd4:	20000bf8 	.word	0x20000bf8
 8003cd8:	20000764 	.word	0x20000764
 8003cdc:	20000c4c 	.word	0x20000c4c

08003ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <vTaskInternalSetTimeOutState+0x24>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <vTaskInternalSetTimeOutState+0x28>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	605a      	str	r2, [r3, #4]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000c50 	.word	0x20000c50
 8003d08:	20000c3c 	.word	0x20000c3c

08003d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <xTaskCheckForTimeOut+0x24>
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	e7fe      	b.n	8003d2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <xTaskCheckForTimeOut+0x3e>
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e7fe      	b.n	8003d48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003d4a:	f000 fe67 	bl	8004a1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <xTaskCheckForTimeOut+0xb8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d102      	bne.n	8003d6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	e023      	b.n	8003db6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <xTaskCheckForTimeOut+0xbc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d007      	beq.n	8003d8a <xTaskCheckForTimeOut+0x7e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e015      	b.n	8003db6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d20b      	bcs.n	8003dac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff9d 	bl	8003ce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e004      	b.n	8003db6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003db6:	f000 fe5f 	bl	8004a78 <vPortExitCritical>

	return xReturn;
 8003dba:	69fb      	ldr	r3, [r7, #28]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000c3c 	.word	0x20000c3c
 8003dc8:	20000c50 	.word	0x20000c50

08003dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <vTaskMissedYield+0x14>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000c4c 	.word	0x20000c4c

08003de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dec:	f000 f852 	bl	8003e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <prvIdleTask+0x28>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d9f9      	bls.n	8003dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <prvIdleTask+0x2c>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e08:	e7f0      	b.n	8003dec <prvIdleTask+0x8>
 8003e0a:	bf00      	nop
 8003e0c:	20000768 	.word	0x20000768
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	e00c      	b.n	8003e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <prvInitialiseTaskLists+0x60>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fd1a 	bl	8002868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3301      	adds	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b37      	cmp	r3, #55	; 0x37
 8003e3e:	d9ef      	bls.n	8003e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e40:	480d      	ldr	r0, [pc, #52]	; (8003e78 <prvInitialiseTaskLists+0x64>)
 8003e42:	f7fe fd11 	bl	8002868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e46:	480d      	ldr	r0, [pc, #52]	; (8003e7c <prvInitialiseTaskLists+0x68>)
 8003e48:	f7fe fd0e 	bl	8002868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e4c:	480c      	ldr	r0, [pc, #48]	; (8003e80 <prvInitialiseTaskLists+0x6c>)
 8003e4e:	f7fe fd0b 	bl	8002868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e52:	480c      	ldr	r0, [pc, #48]	; (8003e84 <prvInitialiseTaskLists+0x70>)
 8003e54:	f7fe fd08 	bl	8002868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <prvInitialiseTaskLists+0x74>)
 8003e5a:	f7fe fd05 	bl	8002868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <prvInitialiseTaskLists+0x78>)
 8003e60:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <prvInitialiseTaskLists+0x64>)
 8003e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <prvInitialiseTaskLists+0x7c>)
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <prvInitialiseTaskLists+0x68>)
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000768 	.word	0x20000768
 8003e78:	20000bc8 	.word	0x20000bc8
 8003e7c:	20000bdc 	.word	0x20000bdc
 8003e80:	20000bf8 	.word	0x20000bf8
 8003e84:	20000c0c 	.word	0x20000c0c
 8003e88:	20000c24 	.word	0x20000c24
 8003e8c:	20000bf0 	.word	0x20000bf0
 8003e90:	20000bf4 	.word	0x20000bf4

08003e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e9a:	e019      	b.n	8003ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e9c:	f000 fdbe 	bl	8004a1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <prvCheckTasksWaitingTermination+0x4c>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fd65 	bl	800297c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <prvCheckTasksWaitingTermination+0x50>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <prvCheckTasksWaitingTermination+0x50>)
 8003eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <prvCheckTasksWaitingTermination+0x54>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <prvCheckTasksWaitingTermination+0x54>)
 8003ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ec6:	f000 fdd7 	bl	8004a78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f80e 	bl	8003eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <prvCheckTasksWaitingTermination+0x54>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e1      	bne.n	8003e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000c0c 	.word	0x20000c0c
 8003ee4:	20000c38 	.word	0x20000c38
 8003ee8:	20000c20 	.word	0x20000c20

08003eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ff66 	bl	8004dd4 <vPortFree>
				vPortFree( pxTCB );
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 ff63 	bl	8004dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f0e:	e017      	b.n	8003f40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d103      	bne.n	8003f22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 ff5a 	bl	8004dd4 <vPortFree>
	}
 8003f20:	e00e      	b.n	8003f40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d009      	beq.n	8003f40 <prvDeleteTCB+0x54>
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e7fe      	b.n	8003f3e <prvDeleteTCB+0x52>
	}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <prvResetNextTaskUnblockTime+0x38>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d104      	bne.n	8003f62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <prvResetNextTaskUnblockTime+0x3c>)
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f60:	e008      	b.n	8003f74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <prvResetNextTaskUnblockTime+0x38>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <prvResetNextTaskUnblockTime+0x3c>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000bf0 	.word	0x20000bf0
 8003f84:	20000c58 	.word	0x20000c58

08003f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <xTaskGetSchedulerState+0x34>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f96:	2301      	movs	r3, #1
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	e008      	b.n	8003fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <xTaskGetSchedulerState+0x38>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	e001      	b.n	8003fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fae:	687b      	ldr	r3, [r7, #4]
	}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000c44 	.word	0x20000c44
 8003fc0:	20000c60 	.word	0x20000c60

08003fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d054      	beq.n	8004084 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003fda:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <xTaskPriorityDisinherit+0xcc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d009      	beq.n	8003ff8 <xTaskPriorityDisinherit+0x34>
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <xTaskPriorityDisinherit+0x50>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	e7fe      	b.n	8004012 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	1e5a      	subs	r2, r3, #1
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	429a      	cmp	r2, r3
 8004028:	d02c      	beq.n	8004084 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d128      	bne.n	8004084 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3304      	adds	r3, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fca0 	bl	800297c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <xTaskPriorityDisinherit+0xd0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d903      	bls.n	8004064 <xTaskPriorityDisinherit+0xa0>
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <xTaskPriorityDisinherit+0xd0>)
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4a09      	ldr	r2, [pc, #36]	; (8004098 <xTaskPriorityDisinherit+0xd4>)
 8004072:	441a      	add	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f7fe fc21 	bl	80028c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004084:	697b      	ldr	r3, [r7, #20]
	}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000764 	.word	0x20000764
 8004094:	20000c40 	.word	0x20000c40
 8004098:	20000768 	.word	0x20000768

0800409c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040a6:	4b21      	ldr	r3, [pc, #132]	; (800412c <prvAddCurrentTaskToDelayedList+0x90>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <prvAddCurrentTaskToDelayedList+0x94>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fc62 	bl	800297c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d10a      	bne.n	80040d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <prvAddCurrentTaskToDelayedList+0x94>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4819      	ldr	r0, [pc, #100]	; (8004134 <prvAddCurrentTaskToDelayedList+0x98>)
 80040d0:	f7fe fbf7 	bl	80028c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040d4:	e026      	b.n	8004124 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <prvAddCurrentTaskToDelayedList+0x94>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d209      	bcs.n	8004102 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <prvAddCurrentTaskToDelayedList+0x94>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f7fe fc05 	bl	800290a <vListInsert>
}
 8004100:	e010      	b.n	8004124 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <prvAddCurrentTaskToDelayedList+0x94>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7fe fbfb 	bl	800290a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	d202      	bcs.n	8004124 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000c3c 	.word	0x20000c3c
 8004130:	20000764 	.word	0x20000764
 8004134:	20000c24 	.word	0x20000c24
 8004138:	20000bf4 	.word	0x20000bf4
 800413c:	20000bf0 	.word	0x20000bf0
 8004140:	20000c58 	.word	0x20000c58

08004144 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800414e:	f000 faff 	bl	8004750 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004152:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <xTimerCreateTimerTask+0x80>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d021      	beq.n	800419e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004162:	1d3a      	adds	r2, r7, #4
 8004164:	f107 0108 	add.w	r1, r7, #8
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fb61 	bl	8002834 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	9202      	str	r2, [sp, #8]
 800417a:	9301      	str	r3, [sp, #4]
 800417c:	2302      	movs	r3, #2
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2300      	movs	r3, #0
 8004182:	460a      	mov	r2, r1
 8004184:	4910      	ldr	r1, [pc, #64]	; (80041c8 <xTimerCreateTimerTask+0x84>)
 8004186:	4811      	ldr	r0, [pc, #68]	; (80041cc <xTimerCreateTimerTask+0x88>)
 8004188:	f7ff f8f6 	bl	8003378 <xTaskCreateStatic>
 800418c:	4602      	mov	r2, r0
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <xTimerCreateTimerTask+0x8c>)
 8004190:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <xTimerCreateTimerTask+0x8c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800419a:	2301      	movs	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <xTimerCreateTimerTask+0x74>
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e7fe      	b.n	80041b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000c94 	.word	0x20000c94
 80041c8:	08006300 	.word	0x08006300
 80041cc:	08004305 	.word	0x08004305
 80041d0:	20000c98 	.word	0x20000c98

080041d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <xTimerGenericCommand+0x2c>
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	e7fe      	b.n	80041fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <xTimerGenericCommand+0x94>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d02a      	beq.n	800425e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b05      	cmp	r3, #5
 8004218:	dc18      	bgt.n	800424c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800421a:	f7ff feb5 	bl	8003f88 <xTaskGetSchedulerState>
 800421e:	4603      	mov	r3, r0
 8004220:	2b02      	cmp	r3, #2
 8004222:	d109      	bne.n	8004238 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <xTimerGenericCommand+0x94>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	f107 0110 	add.w	r1, r7, #16
 800422c:	2300      	movs	r3, #0
 800422e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004230:	f7fe fccc 	bl	8002bcc <xQueueGenericSend>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24
 8004236:	e012      	b.n	800425e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <xTimerGenericCommand+0x94>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	f107 0110 	add.w	r1, r7, #16
 8004240:	2300      	movs	r3, #0
 8004242:	2200      	movs	r2, #0
 8004244:	f7fe fcc2 	bl	8002bcc <xQueueGenericSend>
 8004248:	6278      	str	r0, [r7, #36]	; 0x24
 800424a:	e008      	b.n	800425e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <xTimerGenericCommand+0x94>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	f107 0110 	add.w	r1, r7, #16
 8004254:	2300      	movs	r3, #0
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	f7fe fdb2 	bl	8002dc0 <xQueueGenericSendFromISR>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004260:	4618      	mov	r0, r3
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000c94 	.word	0x20000c94

0800426c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <prvProcessExpiredTimer+0x94>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fb79 	bl	800297c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d021      	beq.n	80042dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	18d1      	adds	r1, r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	6978      	ldr	r0, [r7, #20]
 80042a6:	f000 f8d1 	bl	800444c <prvInsertTimerInActiveList>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042b0:	2300      	movs	r3, #0
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2300      	movs	r3, #0
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	2100      	movs	r1, #0
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff ff8a 	bl	80041d4 <xTimerGenericCommand>
 80042c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d112      	bne.n	80042ee <prvProcessExpiredTimer+0x82>
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e7fe      	b.n	80042da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	4798      	blx	r3
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000c8c 	.word	0x20000c8c

08004304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f857 	bl	80043c4 <prvGetNextExpireTime>
 8004316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4619      	mov	r1, r3
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f803 	bl	8004328 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004322:	f000 f8d5 	bl	80044d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004326:	e7f1      	b.n	800430c <prvTimerTask+0x8>

08004328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004332:	f7ff fa57 	bl	80037e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004336:	f107 0308 	add.w	r3, r7, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f866 	bl	800440c <prvSampleTimeNow>
 8004340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d130      	bne.n	80043aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <prvProcessTimerOrBlockTask+0x3c>
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	429a      	cmp	r2, r3
 8004354:	d806      	bhi.n	8004364 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004356:	f7ff fa53 	bl	8003800 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff85 	bl	800426c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004362:	e024      	b.n	80043ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <prvProcessTimerOrBlockTask+0x90>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <prvProcessTimerOrBlockTask+0x50>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <prvProcessTimerOrBlockTask+0x52>
 8004378:	2300      	movs	r3, #0
 800437a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <prvProcessTimerOrBlockTask+0x94>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	f7fe ffc1 	bl	8003310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800438e:	f7ff fa37 	bl	8003800 <xTaskResumeAll>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <prvProcessTimerOrBlockTask+0x98>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
}
 80043a8:	e001      	b.n	80043ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043aa:	f7ff fa29 	bl	8003800 <xTaskResumeAll>
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000c90 	.word	0x20000c90
 80043bc:	20000c94 	.word	0x20000c94
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <prvGetNextExpireTime+0x44>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <prvGetNextExpireTime+0x16>
 80043d6:	2201      	movs	r2, #1
 80043d8:	e000      	b.n	80043dc <prvGetNextExpireTime+0x18>
 80043da:	2200      	movs	r2, #0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043e8:	4b07      	ldr	r3, [pc, #28]	; (8004408 <prvGetNextExpireTime+0x44>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e001      	b.n	80043f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043f8:	68fb      	ldr	r3, [r7, #12]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000c8c 	.word	0x20000c8c

0800440c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004414:	f7ff fa90 	bl	8003938 <xTaskGetTickCount>
 8004418:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <prvSampleTimeNow+0x3c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	429a      	cmp	r2, r3
 8004422:	d205      	bcs.n	8004430 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004424:	f000 f930 	bl	8004688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e002      	b.n	8004436 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <prvSampleTimeNow+0x3c>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800443c:	68fb      	ldr	r3, [r7, #12]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000c9c 	.word	0x20000c9c

0800444c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d812      	bhi.n	8004498 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004480:	2301      	movs	r3, #1
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e01b      	b.n	80044be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <prvInsertTimerInActiveList+0x7c>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe fa3a 	bl	800290a <vListInsert>
 8004496:	e012      	b.n	80044be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d206      	bcs.n	80044ae <prvInsertTimerInActiveList+0x62>
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e007      	b.n	80044be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <prvInsertTimerInActiveList+0x80>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f7fe fa26 	bl	800290a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000c90 	.word	0x20000c90
 80044cc:	20000c8c 	.word	0x20000c8c

080044d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044d6:	e0c6      	b.n	8004666 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da17      	bge.n	800450e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	3304      	adds	r3, #4
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <prvProcessReceivedCommands+0x2e>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e7fe      	b.n	80044fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004504:	6850      	ldr	r0, [r2, #4]
 8004506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	4611      	mov	r1, r2
 800450c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f2c0 80a7 	blt.w	8004664 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fa28 	bl	800297c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800452c:	463b      	mov	r3, r7
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff6c 	bl	800440c <prvSampleTimeNow>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b09      	cmp	r3, #9
 800453a:	f200 8094 	bhi.w	8004666 <prvProcessReceivedCommands+0x196>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <prvProcessReceivedCommands+0x74>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	0800456d 	.word	0x0800456d
 8004548:	0800456d 	.word	0x0800456d
 800454c:	0800456d 	.word	0x0800456d
 8004550:	080045df 	.word	0x080045df
 8004554:	080045f3 	.word	0x080045f3
 8004558:	0800463b 	.word	0x0800463b
 800455c:	0800456d 	.word	0x0800456d
 8004560:	0800456d 	.word	0x0800456d
 8004564:	080045df 	.word	0x080045df
 8004568:	080045f3 	.word	0x080045f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	b2da      	uxtb	r2, r3
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	18d1      	adds	r1, r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458c:	f7ff ff5e 	bl	800444c <prvInsertTimerInActiveList>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d067      	beq.n	8004666 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800459c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05c      	beq.n	8004666 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	441a      	add	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	2100      	movs	r1, #0
 80045bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045be:	f7ff fe09 	bl	80041d4 <xTimerGenericCommand>
 80045c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d14d      	bne.n	8004666 <prvProcessReceivedCommands+0x196>
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e7fe      	b.n	80045dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80045f0:	e039      	b.n	8004666 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <prvProcessReceivedCommands+0x156>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e7fe      	b.n	8004624 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	18d1      	adds	r1, r2, r3
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004634:	f7ff ff0a 	bl	800444c <prvInsertTimerInActiveList>
					break;
 8004638:	e015      	b.n	8004666 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f000 fbc3 	bl	8004dd4 <vPortFree>
 800464e:	e00a      	b.n	8004666 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004662:	e000      	b.n	8004666 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004664:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <prvProcessReceivedCommands+0x1b4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1d39      	adds	r1, r7, #4
 800466c:	2200      	movs	r2, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fc3a 	bl	8002ee8 <xQueueReceive>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	f47f af2e 	bne.w	80044d8 <prvProcessReceivedCommands+0x8>
	}
}
 800467c:	bf00      	nop
 800467e:	3730      	adds	r7, #48	; 0x30
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000c94 	.word	0x20000c94

08004688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800468e:	e047      	b.n	8004720 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004690:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <prvSwitchTimerLists+0xc0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469a:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <prvSwitchTimerLists+0xc0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe f967 	bl	800297c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90e      	bls.n	80046f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046e2:	4b19      	ldr	r3, [pc, #100]	; (8004748 <prvSwitchTimerLists+0xc0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe f90c 	bl	800290a <vListInsert>
 80046f2:	e015      	b.n	8004720 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	2100      	movs	r1, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fd68 	bl	80041d4 <xTimerGenericCommand>
 8004704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <prvSwitchTimerLists+0x98>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	e7fe      	b.n	800471e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <prvSwitchTimerLists+0xc0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1b2      	bne.n	8004690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <prvSwitchTimerLists+0xc0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <prvSwitchTimerLists+0xc4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <prvSwitchTimerLists+0xc0>)
 8004736:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <prvSwitchTimerLists+0xc4>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6013      	str	r3, [r2, #0]
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000c8c 	.word	0x20000c8c
 800474c:	20000c90 	.word	0x20000c90

08004750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004756:	f000 f961 	bl	8004a1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <prvCheckForValidListAndQueue+0x60>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d120      	bne.n	80047a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004762:	4814      	ldr	r0, [pc, #80]	; (80047b4 <prvCheckForValidListAndQueue+0x64>)
 8004764:	f7fe f880 	bl	8002868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004768:	4813      	ldr	r0, [pc, #76]	; (80047b8 <prvCheckForValidListAndQueue+0x68>)
 800476a:	f7fe f87d 	bl	8002868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <prvCheckForValidListAndQueue+0x6c>)
 8004770:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <prvCheckForValidListAndQueue+0x64>)
 8004772:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <prvCheckForValidListAndQueue+0x70>)
 8004776:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <prvCheckForValidListAndQueue+0x68>)
 8004778:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800477a:	2300      	movs	r3, #0
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <prvCheckForValidListAndQueue+0x74>)
 8004780:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <prvCheckForValidListAndQueue+0x78>)
 8004782:	2110      	movs	r1, #16
 8004784:	200a      	movs	r0, #10
 8004786:	f7fe f98b 	bl	8002aa0 <xQueueGenericCreateStatic>
 800478a:	4602      	mov	r2, r0
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <prvCheckForValidListAndQueue+0x60>)
 800478e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <prvCheckForValidListAndQueue+0x60>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <prvCheckForValidListAndQueue+0x60>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	490b      	ldr	r1, [pc, #44]	; (80047cc <prvCheckForValidListAndQueue+0x7c>)
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fd8e 	bl	80032c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047a4:	f000 f968 	bl	8004a78 <vPortExitCritical>
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000c94 	.word	0x20000c94
 80047b4:	20000c64 	.word	0x20000c64
 80047b8:	20000c78 	.word	0x20000c78
 80047bc:	20000c8c 	.word	0x20000c8c
 80047c0:	20000c90 	.word	0x20000c90
 80047c4:	20000d40 	.word	0x20000d40
 80047c8:	20000ca0 	.word	0x20000ca0
 80047cc:	08006308 	.word	0x08006308

080047d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b04      	subs	r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b04      	subs	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <pxPortInitialiseStack+0x64>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b14      	subs	r3, #20
 800480a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3b04      	subs	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f06f 0202 	mvn.w	r2, #2
 800481e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3b20      	subs	r3, #32
 8004824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	08004839 	.word	0x08004839

08004838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <prvTaskExitError+0x50>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d009      	beq.n	8004860 <prvTaskExitError+0x28>
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e7fe      	b.n	800485e <prvTaskExitError+0x26>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004872:	bf00      	nop
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0fc      	beq.n	8004874 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	2000001c 	.word	0x2000001c
 800488c:	00000000 	.word	0x00000000

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048b8:	4808      	ldr	r0, [pc, #32]	; (80048dc <prvPortStartFirstTask+0x24>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8814 	msr	CONTROL, r0
 80048ca:	b662      	cpsie	i
 80048cc:	b661      	cpsie	f
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	df00      	svc	0
 80048d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048da:	bf00      	nop
 80048dc:	e000ed08 	.word	0xe000ed08

080048e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <xPortStartScheduler+0x118>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a44      	ldr	r2, [pc, #272]	; (80049fc <xPortStartScheduler+0x11c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d109      	bne.n	8004904 <xPortStartScheduler+0x24>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e7fe      	b.n	8004902 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <xPortStartScheduler+0x118>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <xPortStartScheduler+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d109      	bne.n	8004922 <xPortStartScheduler+0x42>
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e7fe      	b.n	8004920 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004922:	4b38      	ldr	r3, [pc, #224]	; (8004a04 <xPortStartScheduler+0x124>)
 8004924:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <xPortStartScheduler+0x128>)
 8004948:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <xPortStartScheduler+0x12c>)
 800494c:	2207      	movs	r2, #7
 800494e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004950:	e009      	b.n	8004966 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <xPortStartScheduler+0x12c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <xPortStartScheduler+0x12c>)
 800495a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	b2db      	uxtb	r3, r3
 8004964:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d0ef      	beq.n	8004952 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <xPortStartScheduler+0x12c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1c3 0307 	rsb	r3, r3, #7
 800497a:	2b04      	cmp	r3, #4
 800497c:	d009      	beq.n	8004992 <xPortStartScheduler+0xb2>
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	e7fe      	b.n	8004990 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <xPortStartScheduler+0x12c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <xPortStartScheduler+0x12c>)
 800499a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <xPortStartScheduler+0x12c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a4:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <xPortStartScheduler+0x12c>)
 80049a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <xPortStartScheduler+0x130>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <xPortStartScheduler+0x130>)
 80049b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <xPortStartScheduler+0x130>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <xPortStartScheduler+0x130>)
 80049c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049c8:	f000 f8d6 	bl	8004b78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <xPortStartScheduler+0x134>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049d2:	f000 f8f5 	bl	8004bc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <xPortStartScheduler+0x138>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <xPortStartScheduler+0x138>)
 80049dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049e2:	f7ff ff69 	bl	80048b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049e6:	f7ff f86f 	bl	8003ac8 <vTaskSwitchContext>
	prvTaskExitError();
 80049ea:	f7ff ff25 	bl	8004838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed00 	.word	0xe000ed00
 80049fc:	410fc271 	.word	0x410fc271
 8004a00:	410fc270 	.word	0x410fc270
 8004a04:	e000e400 	.word	0xe000e400
 8004a08:	20000d90 	.word	0x20000d90
 8004a0c:	20000d94 	.word	0x20000d94
 8004a10:	e000ed20 	.word	0xe000ed20
 8004a14:	2000001c 	.word	0x2000001c
 8004a18:	e000ef34 	.word	0xe000ef34

08004a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a34:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <vPortEnterCritical+0x54>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <vPortEnterCritical+0x54>)
 8004a3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <vPortEnterCritical+0x54>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10e      	bne.n	8004a64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <vPortEnterCritical+0x58>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <vPortEnterCritical+0x48>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	e7fe      	b.n	8004a62 <vPortEnterCritical+0x46>
	}
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	2000001c 	.word	0x2000001c
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <vPortExitCritical+0x4c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <vPortExitCritical+0x22>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	e7fe      	b.n	8004a98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <vPortExitCritical+0x4c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <vPortExitCritical+0x4c>)
 8004aa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aa4:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <vPortExitCritical+0x4c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <vPortExitCritical+0x3e>
 8004aac:	2300      	movs	r3, #0
 8004aae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000001c 	.word	0x2000001c
	...

08004ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ad0:	f3ef 8009 	mrs	r0, PSP
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <pxCurrentTCBConst>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f01e 0f10 	tst.w	lr, #16
 8004ae0:	bf08      	it	eq
 8004ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004af4:	f380 8811 	msr	BASEPRI, r0
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f7fe ffe2 	bl	8003ac8 <vTaskSwitchContext>
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f380 8811 	msr	BASEPRI, r0
 8004b0c:	bc09      	pop	{r0, r3}
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	6808      	ldr	r0, [r1, #0]
 8004b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b16:	f01e 0f10 	tst.w	lr, #16
 8004b1a:	bf08      	it	eq
 8004b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b20:	f380 8809 	msr	PSP, r0
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	f3af 8000 	nop.w

08004b30 <pxCurrentTCBConst>:
 8004b30:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop

08004b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b50:	f7fe ff02 	bl	8003958 <xTaskIncrementTick>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <SysTick_Handler+0x3c>)
 8004b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	2300      	movs	r3, #0
 8004b64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <vPortSetupTimerInterrupt+0x34>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortSetupTimerInterrupt+0x38>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <vPortSetupTimerInterrupt+0x3c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <vPortSetupTimerInterrupt+0x40>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	099b      	lsrs	r3, r3, #6
 8004b94:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <vPortSetupTimerInterrupt+0x44>)
 8004b96:	3b01      	subs	r3, #1
 8004b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b9a:	4b04      	ldr	r3, [pc, #16]	; (8004bac <vPortSetupTimerInterrupt+0x34>)
 8004b9c:	2207      	movs	r2, #7
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000e010 	.word	0xe000e010
 8004bb0:	e000e018 	.word	0xe000e018
 8004bb4:	20000010 	.word	0x20000010
 8004bb8:	10624dd3 	.word	0x10624dd3
 8004bbc:	e000e014 	.word	0xe000e014

08004bc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bd0 <vPortEnableVFP+0x10>
 8004bc4:	6801      	ldr	r1, [r0, #0]
 8004bc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bca:	6001      	str	r1, [r0, #0]
 8004bcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bce:	bf00      	nop
 8004bd0:	e000ed88 	.word	0xe000ed88

08004bd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bda:	f3ef 8305 	mrs	r3, IPSR
 8004bde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b0f      	cmp	r3, #15
 8004be4:	d913      	bls.n	8004c0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <vPortValidateInterruptPriority+0x6c>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <vPortValidateInterruptPriority+0x70>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	7afa      	ldrb	r2, [r7, #11]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d209      	bcs.n	8004c0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e7fe      	b.n	8004c0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <vPortValidateInterruptPriority+0x74>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <vPortValidateInterruptPriority+0x78>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d909      	bls.n	8004c32 <vPortValidateInterruptPriority+0x5e>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	e7fe      	b.n	8004c30 <vPortValidateInterruptPriority+0x5c>
	}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000e3f0 	.word	0xe000e3f0
 8004c44:	20000d90 	.word	0x20000d90
 8004c48:	e000ed0c 	.word	0xe000ed0c
 8004c4c:	20000d94 	.word	0x20000d94

08004c50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c5c:	f7fe fdc2 	bl	80037e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <pvPortMalloc+0x170>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c68:	f000 f90c 	bl	8004e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c6c:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <pvPortMalloc+0x174>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4013      	ands	r3, r2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 808c 	bne.w	8004d92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01c      	beq.n	8004cba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c80:	2208      	movs	r2, #8
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d013      	beq.n	8004cba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f023 0307 	bic.w	r3, r3, #7
 8004c98:	3308      	adds	r3, #8
 8004c9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <pvPortMalloc+0x6a>
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e7fe      	b.n	8004cb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d068      	beq.n	8004d92 <pvPortMalloc+0x142>
 8004cc0:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <pvPortMalloc+0x178>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d863      	bhi.n	8004d92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cca:	4b40      	ldr	r3, [pc, #256]	; (8004dcc <pvPortMalloc+0x17c>)
 8004ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <pvPortMalloc+0x17c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cd4:	e004      	b.n	8004ce0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d903      	bls.n	8004cf2 <pvPortMalloc+0xa2>
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f1      	bne.n	8004cd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cf2:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <pvPortMalloc+0x170>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d04a      	beq.n	8004d92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2208      	movs	r2, #8
 8004d02:	4413      	add	r3, r2
 8004d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1ad2      	subs	r2, r2, r3
 8004d16:	2308      	movs	r3, #8
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d91e      	bls.n	8004d5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <pvPortMalloc+0xf4>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e7fe      	b.n	8004d42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d56:	69b8      	ldr	r0, [r7, #24]
 8004d58:	f000 f8f6 	bl	8004f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <pvPortMalloc+0x178>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <pvPortMalloc+0x178>)
 8004d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d6a:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <pvPortMalloc+0x178>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <pvPortMalloc+0x180>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d203      	bcs.n	8004d7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <pvPortMalloc+0x178>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <pvPortMalloc+0x180>)
 8004d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <pvPortMalloc+0x174>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d92:	f7fe fd35 	bl	8003800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <pvPortMalloc+0x164>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e7fe      	b.n	8004db2 <pvPortMalloc+0x162>
	return pvReturn;
 8004db4:	69fb      	ldr	r3, [r7, #28]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3728      	adds	r7, #40	; 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200049a0 	.word	0x200049a0
 8004dc4:	200049ac 	.word	0x200049ac
 8004dc8:	200049a4 	.word	0x200049a4
 8004dcc:	20004998 	.word	0x20004998
 8004dd0:	200049a8 	.word	0x200049a8

08004dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d046      	beq.n	8004e74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004de6:	2308      	movs	r3, #8
 8004de8:	425b      	negs	r3, r3
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4413      	add	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <vPortFree+0xa8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <vPortFree+0x42>
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e7fe      	b.n	8004e14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <vPortFree+0x5e>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	e7fe      	b.n	8004e30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <vPortFree+0xa8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d019      	beq.n	8004e74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d115      	bne.n	8004e74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <vPortFree+0xa8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e58:	f7fe fcc4 	bl	80037e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <vPortFree+0xac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	4a06      	ldr	r2, [pc, #24]	; (8004e80 <vPortFree+0xac>)
 8004e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e6a:	6938      	ldr	r0, [r7, #16]
 8004e6c:	f000 f86c 	bl	8004f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e70:	f7fe fcc6 	bl	8003800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200049ac 	.word	0x200049ac
 8004e80:	200049a4 	.word	0x200049a4

08004e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <prvHeapInit+0xac>)
 8004e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3307      	adds	r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0307 	bic.w	r3, r3, #7
 8004eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <prvHeapInit+0xac>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <prvHeapInit+0xb0>)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <prvHeapInit+0xb0>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4413      	add	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0307 	bic.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <prvHeapInit+0xb4>)
 8004ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ee6:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <prvHeapInit+0xb4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <prvHeapInit+0xb4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	1ad2      	subs	r2, r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <prvHeapInit+0xb4>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <prvHeapInit+0xb8>)
 8004f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <prvHeapInit+0xbc>)
 8004f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <prvHeapInit+0xc0>)
 8004f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20000d98 	.word	0x20000d98
 8004f34:	20004998 	.word	0x20004998
 8004f38:	200049a0 	.word	0x200049a0
 8004f3c:	200049a8 	.word	0x200049a8
 8004f40:	200049a4 	.word	0x200049a4
 8004f44:	200049ac 	.word	0x200049ac

08004f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f50:	4b28      	ldr	r3, [pc, #160]	; (8004ff4 <prvInsertBlockIntoFreeList+0xac>)
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e002      	b.n	8004f5c <prvInsertBlockIntoFreeList+0x14>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d8f7      	bhi.n	8004f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d108      	bne.n	8004f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	441a      	add	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	441a      	add	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d118      	bne.n	8004fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d00d      	beq.n	8004fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e008      	b.n	8004fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e003      	b.n	8004fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d002      	beq.n	8004fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20004998 	.word	0x20004998
 8004ff8:	200049a0 	.word	0x200049a0

08004ffc <__errno>:
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <__errno+0x8>)
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000020 	.word	0x20000020

08005008 <__libc_init_array>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4e0d      	ldr	r6, [pc, #52]	; (8005040 <__libc_init_array+0x38>)
 800500c:	4c0d      	ldr	r4, [pc, #52]	; (8005044 <__libc_init_array+0x3c>)
 800500e:	1ba4      	subs	r4, r4, r6
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	2500      	movs	r5, #0
 8005014:	42a5      	cmp	r5, r4
 8005016:	d109      	bne.n	800502c <__libc_init_array+0x24>
 8005018:	4e0b      	ldr	r6, [pc, #44]	; (8005048 <__libc_init_array+0x40>)
 800501a:	4c0c      	ldr	r4, [pc, #48]	; (800504c <__libc_init_array+0x44>)
 800501c:	f001 f942 	bl	80062a4 <_init>
 8005020:	1ba4      	subs	r4, r4, r6
 8005022:	10a4      	asrs	r4, r4, #2
 8005024:	2500      	movs	r5, #0
 8005026:	42a5      	cmp	r5, r4
 8005028:	d105      	bne.n	8005036 <__libc_init_array+0x2e>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005030:	4798      	blx	r3
 8005032:	3501      	adds	r5, #1
 8005034:	e7ee      	b.n	8005014 <__libc_init_array+0xc>
 8005036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800503a:	4798      	blx	r3
 800503c:	3501      	adds	r5, #1
 800503e:	e7f2      	b.n	8005026 <__libc_init_array+0x1e>
 8005040:	08006410 	.word	0x08006410
 8005044:	08006410 	.word	0x08006410
 8005048:	08006410 	.word	0x08006410
 800504c:	08006414 	.word	0x08006414

08005050 <memcpy>:
 8005050:	b510      	push	{r4, lr}
 8005052:	1e43      	subs	r3, r0, #1
 8005054:	440a      	add	r2, r1
 8005056:	4291      	cmp	r1, r2
 8005058:	d100      	bne.n	800505c <memcpy+0xc>
 800505a:	bd10      	pop	{r4, pc}
 800505c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005064:	e7f7      	b.n	8005056 <memcpy+0x6>

08005066 <memset>:
 8005066:	4402      	add	r2, r0
 8005068:	4603      	mov	r3, r0
 800506a:	4293      	cmp	r3, r2
 800506c:	d100      	bne.n	8005070 <memset+0xa>
 800506e:	4770      	bx	lr
 8005070:	f803 1b01 	strb.w	r1, [r3], #1
 8005074:	e7f9      	b.n	800506a <memset+0x4>
	...

08005078 <iprintf>:
 8005078:	b40f      	push	{r0, r1, r2, r3}
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <iprintf+0x2c>)
 800507c:	b513      	push	{r0, r1, r4, lr}
 800507e:	681c      	ldr	r4, [r3, #0]
 8005080:	b124      	cbz	r4, 800508c <iprintf+0x14>
 8005082:	69a3      	ldr	r3, [r4, #24]
 8005084:	b913      	cbnz	r3, 800508c <iprintf+0x14>
 8005086:	4620      	mov	r0, r4
 8005088:	f000 fa56 	bl	8005538 <__sinit>
 800508c:	ab05      	add	r3, sp, #20
 800508e:	9a04      	ldr	r2, [sp, #16]
 8005090:	68a1      	ldr	r1, [r4, #8]
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fd61 	bl	8005b5c <_vfiprintf_r>
 800509a:	b002      	add	sp, #8
 800509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a0:	b004      	add	sp, #16
 80050a2:	4770      	bx	lr
 80050a4:	20000020 	.word	0x20000020

080050a8 <_puts_r>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	460e      	mov	r6, r1
 80050ac:	4605      	mov	r5, r0
 80050ae:	b118      	cbz	r0, 80050b8 <_puts_r+0x10>
 80050b0:	6983      	ldr	r3, [r0, #24]
 80050b2:	b90b      	cbnz	r3, 80050b8 <_puts_r+0x10>
 80050b4:	f000 fa40 	bl	8005538 <__sinit>
 80050b8:	69ab      	ldr	r3, [r5, #24]
 80050ba:	68ac      	ldr	r4, [r5, #8]
 80050bc:	b913      	cbnz	r3, 80050c4 <_puts_r+0x1c>
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 fa3a 	bl	8005538 <__sinit>
 80050c4:	4b23      	ldr	r3, [pc, #140]	; (8005154 <_puts_r+0xac>)
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d117      	bne.n	80050fa <_puts_r+0x52>
 80050ca:	686c      	ldr	r4, [r5, #4]
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	071b      	lsls	r3, r3, #28
 80050d0:	d51d      	bpl.n	800510e <_puts_r+0x66>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	b1db      	cbz	r3, 800510e <_puts_r+0x66>
 80050d6:	3e01      	subs	r6, #1
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050de:	3b01      	subs	r3, #1
 80050e0:	60a3      	str	r3, [r4, #8]
 80050e2:	b9e9      	cbnz	r1, 8005120 <_puts_r+0x78>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da2e      	bge.n	8005146 <_puts_r+0x9e>
 80050e8:	4622      	mov	r2, r4
 80050ea:	210a      	movs	r1, #10
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 f873 	bl	80051d8 <__swbuf_r>
 80050f2:	3001      	adds	r0, #1
 80050f4:	d011      	beq.n	800511a <_puts_r+0x72>
 80050f6:	200a      	movs	r0, #10
 80050f8:	e011      	b.n	800511e <_puts_r+0x76>
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <_puts_r+0xb0>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d101      	bne.n	8005104 <_puts_r+0x5c>
 8005100:	68ac      	ldr	r4, [r5, #8]
 8005102:	e7e3      	b.n	80050cc <_puts_r+0x24>
 8005104:	4b15      	ldr	r3, [pc, #84]	; (800515c <_puts_r+0xb4>)
 8005106:	429c      	cmp	r4, r3
 8005108:	bf08      	it	eq
 800510a:	68ec      	ldreq	r4, [r5, #12]
 800510c:	e7de      	b.n	80050cc <_puts_r+0x24>
 800510e:	4621      	mov	r1, r4
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f8b3 	bl	800527c <__swsetup_r>
 8005116:	2800      	cmp	r0, #0
 8005118:	d0dd      	beq.n	80050d6 <_puts_r+0x2e>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	2b00      	cmp	r3, #0
 8005122:	da04      	bge.n	800512e <_puts_r+0x86>
 8005124:	69a2      	ldr	r2, [r4, #24]
 8005126:	429a      	cmp	r2, r3
 8005128:	dc06      	bgt.n	8005138 <_puts_r+0x90>
 800512a:	290a      	cmp	r1, #10
 800512c:	d004      	beq.n	8005138 <_puts_r+0x90>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	6022      	str	r2, [r4, #0]
 8005134:	7019      	strb	r1, [r3, #0]
 8005136:	e7cf      	b.n	80050d8 <_puts_r+0x30>
 8005138:	4622      	mov	r2, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f84c 	bl	80051d8 <__swbuf_r>
 8005140:	3001      	adds	r0, #1
 8005142:	d1c9      	bne.n	80050d8 <_puts_r+0x30>
 8005144:	e7e9      	b.n	800511a <_puts_r+0x72>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	200a      	movs	r0, #10
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	6022      	str	r2, [r4, #0]
 800514e:	7018      	strb	r0, [r3, #0]
 8005150:	e7e5      	b.n	800511e <_puts_r+0x76>
 8005152:	bf00      	nop
 8005154:	08006394 	.word	0x08006394
 8005158:	080063b4 	.word	0x080063b4
 800515c:	08006374 	.word	0x08006374

08005160 <puts>:
 8005160:	4b02      	ldr	r3, [pc, #8]	; (800516c <puts+0xc>)
 8005162:	4601      	mov	r1, r0
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	f7ff bf9f 	b.w	80050a8 <_puts_r>
 800516a:	bf00      	nop
 800516c:	20000020 	.word	0x20000020

08005170 <sniprintf>:
 8005170:	b40c      	push	{r2, r3}
 8005172:	b530      	push	{r4, r5, lr}
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <sniprintf+0x64>)
 8005176:	1e0c      	subs	r4, r1, #0
 8005178:	b09d      	sub	sp, #116	; 0x74
 800517a:	681d      	ldr	r5, [r3, #0]
 800517c:	da08      	bge.n	8005190 <sniprintf+0x20>
 800517e:	238b      	movs	r3, #139	; 0x8b
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	f04f 30ff 	mov.w	r0, #4294967295
 8005186:	b01d      	add	sp, #116	; 0x74
 8005188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800518c:	b002      	add	sp, #8
 800518e:	4770      	bx	lr
 8005190:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005194:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005198:	bf14      	ite	ne
 800519a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800519e:	4623      	moveq	r3, r4
 80051a0:	9304      	str	r3, [sp, #16]
 80051a2:	9307      	str	r3, [sp, #28]
 80051a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051a8:	9002      	str	r0, [sp, #8]
 80051aa:	9006      	str	r0, [sp, #24]
 80051ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051b2:	ab21      	add	r3, sp, #132	; 0x84
 80051b4:	a902      	add	r1, sp, #8
 80051b6:	4628      	mov	r0, r5
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	f000 fbad 	bl	8005918 <_svfiprintf_r>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	bfbc      	itt	lt
 80051c2:	238b      	movlt	r3, #139	; 0x8b
 80051c4:	602b      	strlt	r3, [r5, #0]
 80051c6:	2c00      	cmp	r4, #0
 80051c8:	d0dd      	beq.n	8005186 <sniprintf+0x16>
 80051ca:	9b02      	ldr	r3, [sp, #8]
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e7d9      	b.n	8005186 <sniprintf+0x16>
 80051d2:	bf00      	nop
 80051d4:	20000020 	.word	0x20000020

080051d8 <__swbuf_r>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	460e      	mov	r6, r1
 80051dc:	4614      	mov	r4, r2
 80051de:	4605      	mov	r5, r0
 80051e0:	b118      	cbz	r0, 80051ea <__swbuf_r+0x12>
 80051e2:	6983      	ldr	r3, [r0, #24]
 80051e4:	b90b      	cbnz	r3, 80051ea <__swbuf_r+0x12>
 80051e6:	f000 f9a7 	bl	8005538 <__sinit>
 80051ea:	4b21      	ldr	r3, [pc, #132]	; (8005270 <__swbuf_r+0x98>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	d12a      	bne.n	8005246 <__swbuf_r+0x6e>
 80051f0:	686c      	ldr	r4, [r5, #4]
 80051f2:	69a3      	ldr	r3, [r4, #24]
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	071a      	lsls	r2, r3, #28
 80051fa:	d52e      	bpl.n	800525a <__swbuf_r+0x82>
 80051fc:	6923      	ldr	r3, [r4, #16]
 80051fe:	b363      	cbz	r3, 800525a <__swbuf_r+0x82>
 8005200:	6923      	ldr	r3, [r4, #16]
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	1ac0      	subs	r0, r0, r3
 8005206:	6963      	ldr	r3, [r4, #20]
 8005208:	b2f6      	uxtb	r6, r6
 800520a:	4283      	cmp	r3, r0
 800520c:	4637      	mov	r7, r6
 800520e:	dc04      	bgt.n	800521a <__swbuf_r+0x42>
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f926 	bl	8005464 <_fflush_r>
 8005218:	bb28      	cbnz	r0, 8005266 <__swbuf_r+0x8e>
 800521a:	68a3      	ldr	r3, [r4, #8]
 800521c:	3b01      	subs	r3, #1
 800521e:	60a3      	str	r3, [r4, #8]
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	6022      	str	r2, [r4, #0]
 8005226:	701e      	strb	r6, [r3, #0]
 8005228:	6963      	ldr	r3, [r4, #20]
 800522a:	3001      	adds	r0, #1
 800522c:	4283      	cmp	r3, r0
 800522e:	d004      	beq.n	800523a <__swbuf_r+0x62>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	07db      	lsls	r3, r3, #31
 8005234:	d519      	bpl.n	800526a <__swbuf_r+0x92>
 8005236:	2e0a      	cmp	r6, #10
 8005238:	d117      	bne.n	800526a <__swbuf_r+0x92>
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	f000 f911 	bl	8005464 <_fflush_r>
 8005242:	b190      	cbz	r0, 800526a <__swbuf_r+0x92>
 8005244:	e00f      	b.n	8005266 <__swbuf_r+0x8e>
 8005246:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <__swbuf_r+0x9c>)
 8005248:	429c      	cmp	r4, r3
 800524a:	d101      	bne.n	8005250 <__swbuf_r+0x78>
 800524c:	68ac      	ldr	r4, [r5, #8]
 800524e:	e7d0      	b.n	80051f2 <__swbuf_r+0x1a>
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <__swbuf_r+0xa0>)
 8005252:	429c      	cmp	r4, r3
 8005254:	bf08      	it	eq
 8005256:	68ec      	ldreq	r4, [r5, #12]
 8005258:	e7cb      	b.n	80051f2 <__swbuf_r+0x1a>
 800525a:	4621      	mov	r1, r4
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f80d 	bl	800527c <__swsetup_r>
 8005262:	2800      	cmp	r0, #0
 8005264:	d0cc      	beq.n	8005200 <__swbuf_r+0x28>
 8005266:	f04f 37ff 	mov.w	r7, #4294967295
 800526a:	4638      	mov	r0, r7
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526e:	bf00      	nop
 8005270:	08006394 	.word	0x08006394
 8005274:	080063b4 	.word	0x080063b4
 8005278:	08006374 	.word	0x08006374

0800527c <__swsetup_r>:
 800527c:	4b32      	ldr	r3, [pc, #200]	; (8005348 <__swsetup_r+0xcc>)
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	4606      	mov	r6, r0
 8005284:	460c      	mov	r4, r1
 8005286:	b125      	cbz	r5, 8005292 <__swsetup_r+0x16>
 8005288:	69ab      	ldr	r3, [r5, #24]
 800528a:	b913      	cbnz	r3, 8005292 <__swsetup_r+0x16>
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f953 	bl	8005538 <__sinit>
 8005292:	4b2e      	ldr	r3, [pc, #184]	; (800534c <__swsetup_r+0xd0>)
 8005294:	429c      	cmp	r4, r3
 8005296:	d10f      	bne.n	80052b8 <__swsetup_r+0x3c>
 8005298:	686c      	ldr	r4, [r5, #4]
 800529a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	0715      	lsls	r5, r2, #28
 80052a2:	d42c      	bmi.n	80052fe <__swsetup_r+0x82>
 80052a4:	06d0      	lsls	r0, r2, #27
 80052a6:	d411      	bmi.n	80052cc <__swsetup_r+0x50>
 80052a8:	2209      	movs	r2, #9
 80052aa:	6032      	str	r2, [r6, #0]
 80052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	e03e      	b.n	8005336 <__swsetup_r+0xba>
 80052b8:	4b25      	ldr	r3, [pc, #148]	; (8005350 <__swsetup_r+0xd4>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	d101      	bne.n	80052c2 <__swsetup_r+0x46>
 80052be:	68ac      	ldr	r4, [r5, #8]
 80052c0:	e7eb      	b.n	800529a <__swsetup_r+0x1e>
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <__swsetup_r+0xd8>)
 80052c4:	429c      	cmp	r4, r3
 80052c6:	bf08      	it	eq
 80052c8:	68ec      	ldreq	r4, [r5, #12]
 80052ca:	e7e6      	b.n	800529a <__swsetup_r+0x1e>
 80052cc:	0751      	lsls	r1, r2, #29
 80052ce:	d512      	bpl.n	80052f6 <__swsetup_r+0x7a>
 80052d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052d2:	b141      	cbz	r1, 80052e6 <__swsetup_r+0x6a>
 80052d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052d8:	4299      	cmp	r1, r3
 80052da:	d002      	beq.n	80052e2 <__swsetup_r+0x66>
 80052dc:	4630      	mov	r0, r6
 80052de:	f000 fa19 	bl	8005714 <_free_r>
 80052e2:	2300      	movs	r3, #0
 80052e4:	6363      	str	r3, [r4, #52]	; 0x34
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	2300      	movs	r3, #0
 80052f0:	6063      	str	r3, [r4, #4]
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	b94b      	cbnz	r3, 8005316 <__swsetup_r+0x9a>
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530c:	d003      	beq.n	8005316 <__swsetup_r+0x9a>
 800530e:	4621      	mov	r1, r4
 8005310:	4630      	mov	r0, r6
 8005312:	f000 f9bf 	bl	8005694 <__smakebuf_r>
 8005316:	89a2      	ldrh	r2, [r4, #12]
 8005318:	f012 0301 	ands.w	r3, r2, #1
 800531c:	d00c      	beq.n	8005338 <__swsetup_r+0xbc>
 800531e:	2300      	movs	r3, #0
 8005320:	60a3      	str	r3, [r4, #8]
 8005322:	6963      	ldr	r3, [r4, #20]
 8005324:	425b      	negs	r3, r3
 8005326:	61a3      	str	r3, [r4, #24]
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	b953      	cbnz	r3, 8005342 <__swsetup_r+0xc6>
 800532c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005330:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005334:	d1ba      	bne.n	80052ac <__swsetup_r+0x30>
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	0792      	lsls	r2, r2, #30
 800533a:	bf58      	it	pl
 800533c:	6963      	ldrpl	r3, [r4, #20]
 800533e:	60a3      	str	r3, [r4, #8]
 8005340:	e7f2      	b.n	8005328 <__swsetup_r+0xac>
 8005342:	2000      	movs	r0, #0
 8005344:	e7f7      	b.n	8005336 <__swsetup_r+0xba>
 8005346:	bf00      	nop
 8005348:	20000020 	.word	0x20000020
 800534c:	08006394 	.word	0x08006394
 8005350:	080063b4 	.word	0x080063b4
 8005354:	08006374 	.word	0x08006374

08005358 <__sflush_r>:
 8005358:	898a      	ldrh	r2, [r1, #12]
 800535a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535e:	4605      	mov	r5, r0
 8005360:	0710      	lsls	r0, r2, #28
 8005362:	460c      	mov	r4, r1
 8005364:	d458      	bmi.n	8005418 <__sflush_r+0xc0>
 8005366:	684b      	ldr	r3, [r1, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	dc05      	bgt.n	8005378 <__sflush_r+0x20>
 800536c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	dc02      	bgt.n	8005378 <__sflush_r+0x20>
 8005372:	2000      	movs	r0, #0
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800537a:	2e00      	cmp	r6, #0
 800537c:	d0f9      	beq.n	8005372 <__sflush_r+0x1a>
 800537e:	2300      	movs	r3, #0
 8005380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005384:	682f      	ldr	r7, [r5, #0]
 8005386:	6a21      	ldr	r1, [r4, #32]
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	d032      	beq.n	80053f2 <__sflush_r+0x9a>
 800538c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	075a      	lsls	r2, r3, #29
 8005392:	d505      	bpl.n	80053a0 <__sflush_r+0x48>
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	1ac0      	subs	r0, r0, r3
 8005398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800539a:	b10b      	cbz	r3, 80053a0 <__sflush_r+0x48>
 800539c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800539e:	1ac0      	subs	r0, r0, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	4602      	mov	r2, r0
 80053a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053a6:	6a21      	ldr	r1, [r4, #32]
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b0      	blx	r6
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	d106      	bne.n	80053c0 <__sflush_r+0x68>
 80053b2:	6829      	ldr	r1, [r5, #0]
 80053b4:	291d      	cmp	r1, #29
 80053b6:	d848      	bhi.n	800544a <__sflush_r+0xf2>
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <__sflush_r+0x108>)
 80053ba:	40ca      	lsrs	r2, r1
 80053bc:	07d6      	lsls	r6, r2, #31
 80053be:	d544      	bpl.n	800544a <__sflush_r+0xf2>
 80053c0:	2200      	movs	r2, #0
 80053c2:	6062      	str	r2, [r4, #4]
 80053c4:	04d9      	lsls	r1, r3, #19
 80053c6:	6922      	ldr	r2, [r4, #16]
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	d504      	bpl.n	80053d6 <__sflush_r+0x7e>
 80053cc:	1c42      	adds	r2, r0, #1
 80053ce:	d101      	bne.n	80053d4 <__sflush_r+0x7c>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b903      	cbnz	r3, 80053d6 <__sflush_r+0x7e>
 80053d4:	6560      	str	r0, [r4, #84]	; 0x54
 80053d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d8:	602f      	str	r7, [r5, #0]
 80053da:	2900      	cmp	r1, #0
 80053dc:	d0c9      	beq.n	8005372 <__sflush_r+0x1a>
 80053de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e2:	4299      	cmp	r1, r3
 80053e4:	d002      	beq.n	80053ec <__sflush_r+0x94>
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f994 	bl	8005714 <_free_r>
 80053ec:	2000      	movs	r0, #0
 80053ee:	6360      	str	r0, [r4, #52]	; 0x34
 80053f0:	e7c0      	b.n	8005374 <__sflush_r+0x1c>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b0      	blx	r6
 80053f8:	1c41      	adds	r1, r0, #1
 80053fa:	d1c8      	bne.n	800538e <__sflush_r+0x36>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0c5      	beq.n	800538e <__sflush_r+0x36>
 8005402:	2b1d      	cmp	r3, #29
 8005404:	d001      	beq.n	800540a <__sflush_r+0xb2>
 8005406:	2b16      	cmp	r3, #22
 8005408:	d101      	bne.n	800540e <__sflush_r+0xb6>
 800540a:	602f      	str	r7, [r5, #0]
 800540c:	e7b1      	b.n	8005372 <__sflush_r+0x1a>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005414:	81a3      	strh	r3, [r4, #12]
 8005416:	e7ad      	b.n	8005374 <__sflush_r+0x1c>
 8005418:	690f      	ldr	r7, [r1, #16]
 800541a:	2f00      	cmp	r7, #0
 800541c:	d0a9      	beq.n	8005372 <__sflush_r+0x1a>
 800541e:	0793      	lsls	r3, r2, #30
 8005420:	680e      	ldr	r6, [r1, #0]
 8005422:	bf08      	it	eq
 8005424:	694b      	ldreq	r3, [r1, #20]
 8005426:	600f      	str	r7, [r1, #0]
 8005428:	bf18      	it	ne
 800542a:	2300      	movne	r3, #0
 800542c:	eba6 0807 	sub.w	r8, r6, r7
 8005430:	608b      	str	r3, [r1, #8]
 8005432:	f1b8 0f00 	cmp.w	r8, #0
 8005436:	dd9c      	ble.n	8005372 <__sflush_r+0x1a>
 8005438:	4643      	mov	r3, r8
 800543a:	463a      	mov	r2, r7
 800543c:	6a21      	ldr	r1, [r4, #32]
 800543e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005440:	4628      	mov	r0, r5
 8005442:	47b0      	blx	r6
 8005444:	2800      	cmp	r0, #0
 8005446:	dc06      	bgt.n	8005456 <__sflush_r+0xfe>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e78e      	b.n	8005374 <__sflush_r+0x1c>
 8005456:	4407      	add	r7, r0
 8005458:	eba8 0800 	sub.w	r8, r8, r0
 800545c:	e7e9      	b.n	8005432 <__sflush_r+0xda>
 800545e:	bf00      	nop
 8005460:	20400001 	.word	0x20400001

08005464 <_fflush_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	690b      	ldr	r3, [r1, #16]
 8005468:	4605      	mov	r5, r0
 800546a:	460c      	mov	r4, r1
 800546c:	b1db      	cbz	r3, 80054a6 <_fflush_r+0x42>
 800546e:	b118      	cbz	r0, 8005478 <_fflush_r+0x14>
 8005470:	6983      	ldr	r3, [r0, #24]
 8005472:	b90b      	cbnz	r3, 8005478 <_fflush_r+0x14>
 8005474:	f000 f860 	bl	8005538 <__sinit>
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <_fflush_r+0x48>)
 800547a:	429c      	cmp	r4, r3
 800547c:	d109      	bne.n	8005492 <_fflush_r+0x2e>
 800547e:	686c      	ldr	r4, [r5, #4]
 8005480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005484:	b17b      	cbz	r3, 80054a6 <_fflush_r+0x42>
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548e:	f7ff bf63 	b.w	8005358 <__sflush_r>
 8005492:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <_fflush_r+0x4c>)
 8005494:	429c      	cmp	r4, r3
 8005496:	d101      	bne.n	800549c <_fflush_r+0x38>
 8005498:	68ac      	ldr	r4, [r5, #8]
 800549a:	e7f1      	b.n	8005480 <_fflush_r+0x1c>
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <_fflush_r+0x50>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	bf08      	it	eq
 80054a2:	68ec      	ldreq	r4, [r5, #12]
 80054a4:	e7ec      	b.n	8005480 <_fflush_r+0x1c>
 80054a6:	2000      	movs	r0, #0
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
 80054aa:	bf00      	nop
 80054ac:	08006394 	.word	0x08006394
 80054b0:	080063b4 	.word	0x080063b4
 80054b4:	08006374 	.word	0x08006374

080054b8 <std>:
 80054b8:	2300      	movs	r3, #0
 80054ba:	b510      	push	{r4, lr}
 80054bc:	4604      	mov	r4, r0
 80054be:	e9c0 3300 	strd	r3, r3, [r0]
 80054c2:	6083      	str	r3, [r0, #8]
 80054c4:	8181      	strh	r1, [r0, #12]
 80054c6:	6643      	str	r3, [r0, #100]	; 0x64
 80054c8:	81c2      	strh	r2, [r0, #14]
 80054ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ce:	6183      	str	r3, [r0, #24]
 80054d0:	4619      	mov	r1, r3
 80054d2:	2208      	movs	r2, #8
 80054d4:	305c      	adds	r0, #92	; 0x5c
 80054d6:	f7ff fdc6 	bl	8005066 <memset>
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <std+0x38>)
 80054dc:	6263      	str	r3, [r4, #36]	; 0x24
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <std+0x3c>)
 80054e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <std+0x40>)
 80054e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <std+0x44>)
 80054e8:	6224      	str	r4, [r4, #32]
 80054ea:	6323      	str	r3, [r4, #48]	; 0x30
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	bf00      	nop
 80054f0:	080060b9 	.word	0x080060b9
 80054f4:	080060db 	.word	0x080060db
 80054f8:	08006113 	.word	0x08006113
 80054fc:	08006137 	.word	0x08006137

08005500 <_cleanup_r>:
 8005500:	4901      	ldr	r1, [pc, #4]	; (8005508 <_cleanup_r+0x8>)
 8005502:	f000 b885 	b.w	8005610 <_fwalk_reent>
 8005506:	bf00      	nop
 8005508:	08005465 	.word	0x08005465

0800550c <__sfmoreglue>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	1e4a      	subs	r2, r1, #1
 8005510:	2568      	movs	r5, #104	; 0x68
 8005512:	4355      	muls	r5, r2
 8005514:	460e      	mov	r6, r1
 8005516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800551a:	f000 f949 	bl	80057b0 <_malloc_r>
 800551e:	4604      	mov	r4, r0
 8005520:	b140      	cbz	r0, 8005534 <__sfmoreglue+0x28>
 8005522:	2100      	movs	r1, #0
 8005524:	e9c0 1600 	strd	r1, r6, [r0]
 8005528:	300c      	adds	r0, #12
 800552a:	60a0      	str	r0, [r4, #8]
 800552c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005530:	f7ff fd99 	bl	8005066 <memset>
 8005534:	4620      	mov	r0, r4
 8005536:	bd70      	pop	{r4, r5, r6, pc}

08005538 <__sinit>:
 8005538:	6983      	ldr	r3, [r0, #24]
 800553a:	b510      	push	{r4, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	bb33      	cbnz	r3, 800558e <__sinit+0x56>
 8005540:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005544:	6503      	str	r3, [r0, #80]	; 0x50
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <__sinit+0x58>)
 8005548:	4a12      	ldr	r2, [pc, #72]	; (8005594 <__sinit+0x5c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6282      	str	r2, [r0, #40]	; 0x28
 800554e:	4298      	cmp	r0, r3
 8005550:	bf04      	itt	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	6183      	streq	r3, [r0, #24]
 8005556:	f000 f81f 	bl	8005598 <__sfp>
 800555a:	6060      	str	r0, [r4, #4]
 800555c:	4620      	mov	r0, r4
 800555e:	f000 f81b 	bl	8005598 <__sfp>
 8005562:	60a0      	str	r0, [r4, #8]
 8005564:	4620      	mov	r0, r4
 8005566:	f000 f817 	bl	8005598 <__sfp>
 800556a:	2200      	movs	r2, #0
 800556c:	60e0      	str	r0, [r4, #12]
 800556e:	2104      	movs	r1, #4
 8005570:	6860      	ldr	r0, [r4, #4]
 8005572:	f7ff ffa1 	bl	80054b8 <std>
 8005576:	2201      	movs	r2, #1
 8005578:	2109      	movs	r1, #9
 800557a:	68a0      	ldr	r0, [r4, #8]
 800557c:	f7ff ff9c 	bl	80054b8 <std>
 8005580:	2202      	movs	r2, #2
 8005582:	2112      	movs	r1, #18
 8005584:	68e0      	ldr	r0, [r4, #12]
 8005586:	f7ff ff97 	bl	80054b8 <std>
 800558a:	2301      	movs	r3, #1
 800558c:	61a3      	str	r3, [r4, #24]
 800558e:	bd10      	pop	{r4, pc}
 8005590:	08006370 	.word	0x08006370
 8005594:	08005501 	.word	0x08005501

08005598 <__sfp>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <__sfp+0x70>)
 800559c:	681e      	ldr	r6, [r3, #0]
 800559e:	69b3      	ldr	r3, [r6, #24]
 80055a0:	4607      	mov	r7, r0
 80055a2:	b913      	cbnz	r3, 80055aa <__sfp+0x12>
 80055a4:	4630      	mov	r0, r6
 80055a6:	f7ff ffc7 	bl	8005538 <__sinit>
 80055aa:	3648      	adds	r6, #72	; 0x48
 80055ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	d503      	bpl.n	80055bc <__sfp+0x24>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	b133      	cbz	r3, 80055c6 <__sfp+0x2e>
 80055b8:	6836      	ldr	r6, [r6, #0]
 80055ba:	e7f7      	b.n	80055ac <__sfp+0x14>
 80055bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055c0:	b16d      	cbz	r5, 80055de <__sfp+0x46>
 80055c2:	3468      	adds	r4, #104	; 0x68
 80055c4:	e7f4      	b.n	80055b0 <__sfp+0x18>
 80055c6:	2104      	movs	r1, #4
 80055c8:	4638      	mov	r0, r7
 80055ca:	f7ff ff9f 	bl	800550c <__sfmoreglue>
 80055ce:	6030      	str	r0, [r6, #0]
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1f1      	bne.n	80055b8 <__sfp+0x20>
 80055d4:	230c      	movs	r3, #12
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4604      	mov	r4, r0
 80055da:	4620      	mov	r0, r4
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <__sfp+0x74>)
 80055e0:	6665      	str	r5, [r4, #100]	; 0x64
 80055e2:	e9c4 5500 	strd	r5, r5, [r4]
 80055e6:	60a5      	str	r5, [r4, #8]
 80055e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80055ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80055f0:	2208      	movs	r2, #8
 80055f2:	4629      	mov	r1, r5
 80055f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055f8:	f7ff fd35 	bl	8005066 <memset>
 80055fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005604:	e7e9      	b.n	80055da <__sfp+0x42>
 8005606:	bf00      	nop
 8005608:	08006370 	.word	0x08006370
 800560c:	ffff0001 	.word	0xffff0001

08005610 <_fwalk_reent>:
 8005610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005614:	4680      	mov	r8, r0
 8005616:	4689      	mov	r9, r1
 8005618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800561c:	2600      	movs	r6, #0
 800561e:	b914      	cbnz	r4, 8005626 <_fwalk_reent+0x16>
 8005620:	4630      	mov	r0, r6
 8005622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005626:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800562a:	3f01      	subs	r7, #1
 800562c:	d501      	bpl.n	8005632 <_fwalk_reent+0x22>
 800562e:	6824      	ldr	r4, [r4, #0]
 8005630:	e7f5      	b.n	800561e <_fwalk_reent+0xe>
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d907      	bls.n	8005648 <_fwalk_reent+0x38>
 8005638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800563c:	3301      	adds	r3, #1
 800563e:	d003      	beq.n	8005648 <_fwalk_reent+0x38>
 8005640:	4629      	mov	r1, r5
 8005642:	4640      	mov	r0, r8
 8005644:	47c8      	blx	r9
 8005646:	4306      	orrs	r6, r0
 8005648:	3568      	adds	r5, #104	; 0x68
 800564a:	e7ee      	b.n	800562a <_fwalk_reent+0x1a>

0800564c <__swhatbuf_r>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	460e      	mov	r6, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	2900      	cmp	r1, #0
 8005656:	b096      	sub	sp, #88	; 0x58
 8005658:	4614      	mov	r4, r2
 800565a:	461d      	mov	r5, r3
 800565c:	da07      	bge.n	800566e <__swhatbuf_r+0x22>
 800565e:	2300      	movs	r3, #0
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	89b3      	ldrh	r3, [r6, #12]
 8005664:	061a      	lsls	r2, r3, #24
 8005666:	d410      	bmi.n	800568a <__swhatbuf_r+0x3e>
 8005668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566c:	e00e      	b.n	800568c <__swhatbuf_r+0x40>
 800566e:	466a      	mov	r2, sp
 8005670:	f000 fd88 	bl	8006184 <_fstat_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	dbf2      	blt.n	800565e <__swhatbuf_r+0x12>
 8005678:	9a01      	ldr	r2, [sp, #4]
 800567a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800567e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005682:	425a      	negs	r2, r3
 8005684:	415a      	adcs	r2, r3
 8005686:	602a      	str	r2, [r5, #0]
 8005688:	e7ee      	b.n	8005668 <__swhatbuf_r+0x1c>
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	2000      	movs	r0, #0
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	b016      	add	sp, #88	; 0x58
 8005692:	bd70      	pop	{r4, r5, r6, pc}

08005694 <__smakebuf_r>:
 8005694:	898b      	ldrh	r3, [r1, #12]
 8005696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005698:	079d      	lsls	r5, r3, #30
 800569a:	4606      	mov	r6, r0
 800569c:	460c      	mov	r4, r1
 800569e:	d507      	bpl.n	80056b0 <__smakebuf_r+0x1c>
 80056a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	2301      	movs	r3, #1
 80056aa:	6163      	str	r3, [r4, #20]
 80056ac:	b002      	add	sp, #8
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	ab01      	add	r3, sp, #4
 80056b2:	466a      	mov	r2, sp
 80056b4:	f7ff ffca 	bl	800564c <__swhatbuf_r>
 80056b8:	9900      	ldr	r1, [sp, #0]
 80056ba:	4605      	mov	r5, r0
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 f877 	bl	80057b0 <_malloc_r>
 80056c2:	b948      	cbnz	r0, 80056d8 <__smakebuf_r+0x44>
 80056c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c8:	059a      	lsls	r2, r3, #22
 80056ca:	d4ef      	bmi.n	80056ac <__smakebuf_r+0x18>
 80056cc:	f023 0303 	bic.w	r3, r3, #3
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	e7e3      	b.n	80056a0 <__smakebuf_r+0xc>
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <__smakebuf_r+0x7c>)
 80056da:	62b3      	str	r3, [r6, #40]	; 0x28
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	6020      	str	r0, [r4, #0]
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	9b00      	ldr	r3, [sp, #0]
 80056e8:	6163      	str	r3, [r4, #20]
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	6120      	str	r0, [r4, #16]
 80056ee:	b15b      	cbz	r3, 8005708 <__smakebuf_r+0x74>
 80056f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 fd57 	bl	80061a8 <_isatty_r>
 80056fa:	b128      	cbz	r0, 8005708 <__smakebuf_r+0x74>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	431d      	orrs	r5, r3
 800570c:	81a5      	strh	r5, [r4, #12]
 800570e:	e7cd      	b.n	80056ac <__smakebuf_r+0x18>
 8005710:	08005501 	.word	0x08005501

08005714 <_free_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	2900      	cmp	r1, #0
 800571a:	d045      	beq.n	80057a8 <_free_r+0x94>
 800571c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005720:	1f0c      	subs	r4, r1, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	18e4      	addlt	r4, r4, r3
 8005728:	f000 fd79 	bl	800621e <__malloc_lock>
 800572c:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <_free_r+0x98>)
 800572e:	6813      	ldr	r3, [r2, #0]
 8005730:	4610      	mov	r0, r2
 8005732:	b933      	cbnz	r3, 8005742 <_free_r+0x2e>
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	6014      	str	r4, [r2, #0]
 8005738:	4628      	mov	r0, r5
 800573a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800573e:	f000 bd6f 	b.w	8006220 <__malloc_unlock>
 8005742:	42a3      	cmp	r3, r4
 8005744:	d90c      	bls.n	8005760 <_free_r+0x4c>
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	1862      	adds	r2, r4, r1
 800574a:	4293      	cmp	r3, r2
 800574c:	bf04      	itt	eq
 800574e:	681a      	ldreq	r2, [r3, #0]
 8005750:	685b      	ldreq	r3, [r3, #4]
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	bf04      	itt	eq
 8005756:	1852      	addeq	r2, r2, r1
 8005758:	6022      	streq	r2, [r4, #0]
 800575a:	6004      	str	r4, [r0, #0]
 800575c:	e7ec      	b.n	8005738 <_free_r+0x24>
 800575e:	4613      	mov	r3, r2
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	b10a      	cbz	r2, 8005768 <_free_r+0x54>
 8005764:	42a2      	cmp	r2, r4
 8005766:	d9fa      	bls.n	800575e <_free_r+0x4a>
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	1858      	adds	r0, r3, r1
 800576c:	42a0      	cmp	r0, r4
 800576e:	d10b      	bne.n	8005788 <_free_r+0x74>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	4401      	add	r1, r0
 8005774:	1858      	adds	r0, r3, r1
 8005776:	4282      	cmp	r2, r0
 8005778:	6019      	str	r1, [r3, #0]
 800577a:	d1dd      	bne.n	8005738 <_free_r+0x24>
 800577c:	6810      	ldr	r0, [r2, #0]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	4401      	add	r1, r0
 8005784:	6019      	str	r1, [r3, #0]
 8005786:	e7d7      	b.n	8005738 <_free_r+0x24>
 8005788:	d902      	bls.n	8005790 <_free_r+0x7c>
 800578a:	230c      	movs	r3, #12
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	e7d3      	b.n	8005738 <_free_r+0x24>
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	1821      	adds	r1, r4, r0
 8005794:	428a      	cmp	r2, r1
 8005796:	bf04      	itt	eq
 8005798:	6811      	ldreq	r1, [r2, #0]
 800579a:	6852      	ldreq	r2, [r2, #4]
 800579c:	6062      	str	r2, [r4, #4]
 800579e:	bf04      	itt	eq
 80057a0:	1809      	addeq	r1, r1, r0
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	605c      	str	r4, [r3, #4]
 80057a6:	e7c7      	b.n	8005738 <_free_r+0x24>
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
 80057aa:	bf00      	nop
 80057ac:	200049b0 	.word	0x200049b0

080057b0 <_malloc_r>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	1ccd      	adds	r5, r1, #3
 80057b4:	f025 0503 	bic.w	r5, r5, #3
 80057b8:	3508      	adds	r5, #8
 80057ba:	2d0c      	cmp	r5, #12
 80057bc:	bf38      	it	cc
 80057be:	250c      	movcc	r5, #12
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	4606      	mov	r6, r0
 80057c4:	db01      	blt.n	80057ca <_malloc_r+0x1a>
 80057c6:	42a9      	cmp	r1, r5
 80057c8:	d903      	bls.n	80057d2 <_malloc_r+0x22>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	2000      	movs	r0, #0
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	f000 fd24 	bl	800621e <__malloc_lock>
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <_malloc_r+0xac>)
 80057d8:	6814      	ldr	r4, [r2, #0]
 80057da:	4621      	mov	r1, r4
 80057dc:	b991      	cbnz	r1, 8005804 <_malloc_r+0x54>
 80057de:	4c20      	ldr	r4, [pc, #128]	; (8005860 <_malloc_r+0xb0>)
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	b91b      	cbnz	r3, 80057ec <_malloc_r+0x3c>
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 fc57 	bl	8006098 <_sbrk_r>
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	4629      	mov	r1, r5
 80057ee:	4630      	mov	r0, r6
 80057f0:	f000 fc52 	bl	8006098 <_sbrk_r>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d124      	bne.n	8005842 <_malloc_r+0x92>
 80057f8:	230c      	movs	r3, #12
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	4630      	mov	r0, r6
 80057fe:	f000 fd0f 	bl	8006220 <__malloc_unlock>
 8005802:	e7e4      	b.n	80057ce <_malloc_r+0x1e>
 8005804:	680b      	ldr	r3, [r1, #0]
 8005806:	1b5b      	subs	r3, r3, r5
 8005808:	d418      	bmi.n	800583c <_malloc_r+0x8c>
 800580a:	2b0b      	cmp	r3, #11
 800580c:	d90f      	bls.n	800582e <_malloc_r+0x7e>
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	50cd      	str	r5, [r1, r3]
 8005812:	18cc      	adds	r4, r1, r3
 8005814:	4630      	mov	r0, r6
 8005816:	f000 fd03 	bl	8006220 <__malloc_unlock>
 800581a:	f104 000b 	add.w	r0, r4, #11
 800581e:	1d23      	adds	r3, r4, #4
 8005820:	f020 0007 	bic.w	r0, r0, #7
 8005824:	1ac3      	subs	r3, r0, r3
 8005826:	d0d3      	beq.n	80057d0 <_malloc_r+0x20>
 8005828:	425a      	negs	r2, r3
 800582a:	50e2      	str	r2, [r4, r3]
 800582c:	e7d0      	b.n	80057d0 <_malloc_r+0x20>
 800582e:	428c      	cmp	r4, r1
 8005830:	684b      	ldr	r3, [r1, #4]
 8005832:	bf16      	itet	ne
 8005834:	6063      	strne	r3, [r4, #4]
 8005836:	6013      	streq	r3, [r2, #0]
 8005838:	460c      	movne	r4, r1
 800583a:	e7eb      	b.n	8005814 <_malloc_r+0x64>
 800583c:	460c      	mov	r4, r1
 800583e:	6849      	ldr	r1, [r1, #4]
 8005840:	e7cc      	b.n	80057dc <_malloc_r+0x2c>
 8005842:	1cc4      	adds	r4, r0, #3
 8005844:	f024 0403 	bic.w	r4, r4, #3
 8005848:	42a0      	cmp	r0, r4
 800584a:	d005      	beq.n	8005858 <_malloc_r+0xa8>
 800584c:	1a21      	subs	r1, r4, r0
 800584e:	4630      	mov	r0, r6
 8005850:	f000 fc22 	bl	8006098 <_sbrk_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d0cf      	beq.n	80057f8 <_malloc_r+0x48>
 8005858:	6025      	str	r5, [r4, #0]
 800585a:	e7db      	b.n	8005814 <_malloc_r+0x64>
 800585c:	200049b0 	.word	0x200049b0
 8005860:	200049b4 	.word	0x200049b4

08005864 <__ssputs_r>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	688e      	ldr	r6, [r1, #8]
 800586a:	429e      	cmp	r6, r3
 800586c:	4682      	mov	sl, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4690      	mov	r8, r2
 8005872:	4699      	mov	r9, r3
 8005874:	d837      	bhi.n	80058e6 <__ssputs_r+0x82>
 8005876:	898a      	ldrh	r2, [r1, #12]
 8005878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800587c:	d031      	beq.n	80058e2 <__ssputs_r+0x7e>
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	6909      	ldr	r1, [r1, #16]
 8005882:	1a6f      	subs	r7, r5, r1
 8005884:	6965      	ldr	r5, [r4, #20]
 8005886:	2302      	movs	r3, #2
 8005888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800588c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005890:	f109 0301 	add.w	r3, r9, #1
 8005894:	443b      	add	r3, r7
 8005896:	429d      	cmp	r5, r3
 8005898:	bf38      	it	cc
 800589a:	461d      	movcc	r5, r3
 800589c:	0553      	lsls	r3, r2, #21
 800589e:	d530      	bpl.n	8005902 <__ssputs_r+0x9e>
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7ff ff85 	bl	80057b0 <_malloc_r>
 80058a6:	4606      	mov	r6, r0
 80058a8:	b950      	cbnz	r0, 80058c0 <__ssputs_r+0x5c>
 80058aa:	230c      	movs	r3, #12
 80058ac:	f8ca 3000 	str.w	r3, [sl]
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c0:	463a      	mov	r2, r7
 80058c2:	6921      	ldr	r1, [r4, #16]
 80058c4:	f7ff fbc4 	bl	8005050 <memcpy>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6126      	str	r6, [r4, #16]
 80058d6:	6165      	str	r5, [r4, #20]
 80058d8:	443e      	add	r6, r7
 80058da:	1bed      	subs	r5, r5, r7
 80058dc:	6026      	str	r6, [r4, #0]
 80058de:	60a5      	str	r5, [r4, #8]
 80058e0:	464e      	mov	r6, r9
 80058e2:	454e      	cmp	r6, r9
 80058e4:	d900      	bls.n	80058e8 <__ssputs_r+0x84>
 80058e6:	464e      	mov	r6, r9
 80058e8:	4632      	mov	r2, r6
 80058ea:	4641      	mov	r1, r8
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	f000 fc7d 	bl	80061ec <memmove>
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	1b9b      	subs	r3, r3, r6
 80058f6:	60a3      	str	r3, [r4, #8]
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	441e      	add	r6, r3
 80058fc:	6026      	str	r6, [r4, #0]
 80058fe:	2000      	movs	r0, #0
 8005900:	e7dc      	b.n	80058bc <__ssputs_r+0x58>
 8005902:	462a      	mov	r2, r5
 8005904:	f000 fc8d 	bl	8006222 <_realloc_r>
 8005908:	4606      	mov	r6, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	d1e2      	bne.n	80058d4 <__ssputs_r+0x70>
 800590e:	6921      	ldr	r1, [r4, #16]
 8005910:	4650      	mov	r0, sl
 8005912:	f7ff feff 	bl	8005714 <_free_r>
 8005916:	e7c8      	b.n	80058aa <__ssputs_r+0x46>

08005918 <_svfiprintf_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	461d      	mov	r5, r3
 800591e:	898b      	ldrh	r3, [r1, #12]
 8005920:	061f      	lsls	r7, r3, #24
 8005922:	b09d      	sub	sp, #116	; 0x74
 8005924:	4680      	mov	r8, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4616      	mov	r6, r2
 800592a:	d50f      	bpl.n	800594c <_svfiprintf_r+0x34>
 800592c:	690b      	ldr	r3, [r1, #16]
 800592e:	b96b      	cbnz	r3, 800594c <_svfiprintf_r+0x34>
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	f7ff ff3d 	bl	80057b0 <_malloc_r>
 8005936:	6020      	str	r0, [r4, #0]
 8005938:	6120      	str	r0, [r4, #16]
 800593a:	b928      	cbnz	r0, 8005948 <_svfiprintf_r+0x30>
 800593c:	230c      	movs	r3, #12
 800593e:	f8c8 3000 	str.w	r3, [r8]
 8005942:	f04f 30ff 	mov.w	r0, #4294967295
 8005946:	e0c8      	b.n	8005ada <_svfiprintf_r+0x1c2>
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	6163      	str	r3, [r4, #20]
 800594c:	2300      	movs	r3, #0
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	2320      	movs	r3, #32
 8005952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005956:	2330      	movs	r3, #48	; 0x30
 8005958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800595c:	9503      	str	r5, [sp, #12]
 800595e:	f04f 0b01 	mov.w	fp, #1
 8005962:	4637      	mov	r7, r6
 8005964:	463d      	mov	r5, r7
 8005966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800596a:	b10b      	cbz	r3, 8005970 <_svfiprintf_r+0x58>
 800596c:	2b25      	cmp	r3, #37	; 0x25
 800596e:	d13e      	bne.n	80059ee <_svfiprintf_r+0xd6>
 8005970:	ebb7 0a06 	subs.w	sl, r7, r6
 8005974:	d00b      	beq.n	800598e <_svfiprintf_r+0x76>
 8005976:	4653      	mov	r3, sl
 8005978:	4632      	mov	r2, r6
 800597a:	4621      	mov	r1, r4
 800597c:	4640      	mov	r0, r8
 800597e:	f7ff ff71 	bl	8005864 <__ssputs_r>
 8005982:	3001      	adds	r0, #1
 8005984:	f000 80a4 	beq.w	8005ad0 <_svfiprintf_r+0x1b8>
 8005988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598a:	4453      	add	r3, sl
 800598c:	9309      	str	r3, [sp, #36]	; 0x24
 800598e:	783b      	ldrb	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 809d 	beq.w	8005ad0 <_svfiprintf_r+0x1b8>
 8005996:	2300      	movs	r3, #0
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a8:	931a      	str	r3, [sp, #104]	; 0x68
 80059aa:	462f      	mov	r7, r5
 80059ac:	2205      	movs	r2, #5
 80059ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80059b2:	4850      	ldr	r0, [pc, #320]	; (8005af4 <_svfiprintf_r+0x1dc>)
 80059b4:	f7fa fc1c 	bl	80001f0 <memchr>
 80059b8:	9b04      	ldr	r3, [sp, #16]
 80059ba:	b9d0      	cbnz	r0, 80059f2 <_svfiprintf_r+0xda>
 80059bc:	06d9      	lsls	r1, r3, #27
 80059be:	bf44      	itt	mi
 80059c0:	2220      	movmi	r2, #32
 80059c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059c6:	071a      	lsls	r2, r3, #28
 80059c8:	bf44      	itt	mi
 80059ca:	222b      	movmi	r2, #43	; 0x2b
 80059cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059d0:	782a      	ldrb	r2, [r5, #0]
 80059d2:	2a2a      	cmp	r2, #42	; 0x2a
 80059d4:	d015      	beq.n	8005a02 <_svfiprintf_r+0xea>
 80059d6:	9a07      	ldr	r2, [sp, #28]
 80059d8:	462f      	mov	r7, r5
 80059da:	2000      	movs	r0, #0
 80059dc:	250a      	movs	r5, #10
 80059de:	4639      	mov	r1, r7
 80059e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e4:	3b30      	subs	r3, #48	; 0x30
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	d94d      	bls.n	8005a86 <_svfiprintf_r+0x16e>
 80059ea:	b1b8      	cbz	r0, 8005a1c <_svfiprintf_r+0x104>
 80059ec:	e00f      	b.n	8005a0e <_svfiprintf_r+0xf6>
 80059ee:	462f      	mov	r7, r5
 80059f0:	e7b8      	b.n	8005964 <_svfiprintf_r+0x4c>
 80059f2:	4a40      	ldr	r2, [pc, #256]	; (8005af4 <_svfiprintf_r+0x1dc>)
 80059f4:	1a80      	subs	r0, r0, r2
 80059f6:	fa0b f000 	lsl.w	r0, fp, r0
 80059fa:	4318      	orrs	r0, r3
 80059fc:	9004      	str	r0, [sp, #16]
 80059fe:	463d      	mov	r5, r7
 8005a00:	e7d3      	b.n	80059aa <_svfiprintf_r+0x92>
 8005a02:	9a03      	ldr	r2, [sp, #12]
 8005a04:	1d11      	adds	r1, r2, #4
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	9103      	str	r1, [sp, #12]
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	db01      	blt.n	8005a12 <_svfiprintf_r+0xfa>
 8005a0e:	9207      	str	r2, [sp, #28]
 8005a10:	e004      	b.n	8005a1c <_svfiprintf_r+0x104>
 8005a12:	4252      	negs	r2, r2
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	9207      	str	r2, [sp, #28]
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	783b      	ldrb	r3, [r7, #0]
 8005a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a20:	d10c      	bne.n	8005a3c <_svfiprintf_r+0x124>
 8005a22:	787b      	ldrb	r3, [r7, #1]
 8005a24:	2b2a      	cmp	r3, #42	; 0x2a
 8005a26:	d133      	bne.n	8005a90 <_svfiprintf_r+0x178>
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	9203      	str	r2, [sp, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bfb8      	it	lt
 8005a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a38:	3702      	adds	r7, #2
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	4d2e      	ldr	r5, [pc, #184]	; (8005af8 <_svfiprintf_r+0x1e0>)
 8005a3e:	7839      	ldrb	r1, [r7, #0]
 8005a40:	2203      	movs	r2, #3
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7fa fbd4 	bl	80001f0 <memchr>
 8005a48:	b138      	cbz	r0, 8005a5a <_svfiprintf_r+0x142>
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	1b40      	subs	r0, r0, r5
 8005a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	4303      	orrs	r3, r0
 8005a56:	3701      	adds	r7, #1
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	7839      	ldrb	r1, [r7, #0]
 8005a5c:	4827      	ldr	r0, [pc, #156]	; (8005afc <_svfiprintf_r+0x1e4>)
 8005a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a62:	2206      	movs	r2, #6
 8005a64:	1c7e      	adds	r6, r7, #1
 8005a66:	f7fa fbc3 	bl	80001f0 <memchr>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d038      	beq.n	8005ae0 <_svfiprintf_r+0x1c8>
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <_svfiprintf_r+0x1e8>)
 8005a70:	bb13      	cbnz	r3, 8005ab8 <_svfiprintf_r+0x1a0>
 8005a72:	9b03      	ldr	r3, [sp, #12]
 8005a74:	3307      	adds	r3, #7
 8005a76:	f023 0307 	bic.w	r3, r3, #7
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	9303      	str	r3, [sp, #12]
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	444b      	add	r3, r9
 8005a82:	9309      	str	r3, [sp, #36]	; 0x24
 8005a84:	e76d      	b.n	8005962 <_svfiprintf_r+0x4a>
 8005a86:	fb05 3202 	mla	r2, r5, r2, r3
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	e7a6      	b.n	80059de <_svfiprintf_r+0xc6>
 8005a90:	2300      	movs	r3, #0
 8005a92:	3701      	adds	r7, #1
 8005a94:	9305      	str	r3, [sp, #20]
 8005a96:	4619      	mov	r1, r3
 8005a98:	250a      	movs	r5, #10
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa0:	3a30      	subs	r2, #48	; 0x30
 8005aa2:	2a09      	cmp	r2, #9
 8005aa4:	d903      	bls.n	8005aae <_svfiprintf_r+0x196>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0c8      	beq.n	8005a3c <_svfiprintf_r+0x124>
 8005aaa:	9105      	str	r1, [sp, #20]
 8005aac:	e7c6      	b.n	8005a3c <_svfiprintf_r+0x124>
 8005aae:	fb05 2101 	mla	r1, r5, r1, r2
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	e7f0      	b.n	8005a9a <_svfiprintf_r+0x182>
 8005ab8:	ab03      	add	r3, sp, #12
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4622      	mov	r2, r4
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <_svfiprintf_r+0x1ec>)
 8005ac0:	a904      	add	r1, sp, #16
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f3af 8000 	nop.w
 8005ac8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005acc:	4681      	mov	r9, r0
 8005ace:	d1d6      	bne.n	8005a7e <_svfiprintf_r+0x166>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	065b      	lsls	r3, r3, #25
 8005ad4:	f53f af35 	bmi.w	8005942 <_svfiprintf_r+0x2a>
 8005ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ada:	b01d      	add	sp, #116	; 0x74
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	ab03      	add	r3, sp, #12
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <_svfiprintf_r+0x1ec>)
 8005ae8:	a904      	add	r1, sp, #16
 8005aea:	4640      	mov	r0, r8
 8005aec:	f000 f9c2 	bl	8005e74 <_printf_i>
 8005af0:	e7ea      	b.n	8005ac8 <_svfiprintf_r+0x1b0>
 8005af2:	bf00      	nop
 8005af4:	080063d4 	.word	0x080063d4
 8005af8:	080063da 	.word	0x080063da
 8005afc:	080063de 	.word	0x080063de
 8005b00:	00000000 	.word	0x00000000
 8005b04:	08005865 	.word	0x08005865

08005b08 <__sfputc_r>:
 8005b08:	6893      	ldr	r3, [r2, #8]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	b410      	push	{r4}
 8005b10:	6093      	str	r3, [r2, #8]
 8005b12:	da08      	bge.n	8005b26 <__sfputc_r+0x1e>
 8005b14:	6994      	ldr	r4, [r2, #24]
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	db01      	blt.n	8005b1e <__sfputc_r+0x16>
 8005b1a:	290a      	cmp	r1, #10
 8005b1c:	d103      	bne.n	8005b26 <__sfputc_r+0x1e>
 8005b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b22:	f7ff bb59 	b.w	80051d8 <__swbuf_r>
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	1c58      	adds	r0, r3, #1
 8005b2a:	6010      	str	r0, [r2, #0]
 8005b2c:	7019      	strb	r1, [r3, #0]
 8005b2e:	4608      	mov	r0, r1
 8005b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <__sfputs_r>:
 8005b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b38:	4606      	mov	r6, r0
 8005b3a:	460f      	mov	r7, r1
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	18d5      	adds	r5, r2, r3
 8005b40:	42ac      	cmp	r4, r5
 8005b42:	d101      	bne.n	8005b48 <__sfputs_r+0x12>
 8005b44:	2000      	movs	r0, #0
 8005b46:	e007      	b.n	8005b58 <__sfputs_r+0x22>
 8005b48:	463a      	mov	r2, r7
 8005b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff ffda 	bl	8005b08 <__sfputc_r>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d1f3      	bne.n	8005b40 <__sfputs_r+0xa>
 8005b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b5c <_vfiprintf_r>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	460c      	mov	r4, r1
 8005b62:	b09d      	sub	sp, #116	; 0x74
 8005b64:	4617      	mov	r7, r2
 8005b66:	461d      	mov	r5, r3
 8005b68:	4606      	mov	r6, r0
 8005b6a:	b118      	cbz	r0, 8005b74 <_vfiprintf_r+0x18>
 8005b6c:	6983      	ldr	r3, [r0, #24]
 8005b6e:	b90b      	cbnz	r3, 8005b74 <_vfiprintf_r+0x18>
 8005b70:	f7ff fce2 	bl	8005538 <__sinit>
 8005b74:	4b7c      	ldr	r3, [pc, #496]	; (8005d68 <_vfiprintf_r+0x20c>)
 8005b76:	429c      	cmp	r4, r3
 8005b78:	d158      	bne.n	8005c2c <_vfiprintf_r+0xd0>
 8005b7a:	6874      	ldr	r4, [r6, #4]
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	0718      	lsls	r0, r3, #28
 8005b80:	d55e      	bpl.n	8005c40 <_vfiprintf_r+0xe4>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05b      	beq.n	8005c40 <_vfiprintf_r+0xe4>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b92:	2330      	movs	r3, #48	; 0x30
 8005b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b98:	9503      	str	r5, [sp, #12]
 8005b9a:	f04f 0b01 	mov.w	fp, #1
 8005b9e:	46b8      	mov	r8, r7
 8005ba0:	4645      	mov	r5, r8
 8005ba2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ba6:	b10b      	cbz	r3, 8005bac <_vfiprintf_r+0x50>
 8005ba8:	2b25      	cmp	r3, #37	; 0x25
 8005baa:	d154      	bne.n	8005c56 <_vfiprintf_r+0xfa>
 8005bac:	ebb8 0a07 	subs.w	sl, r8, r7
 8005bb0:	d00b      	beq.n	8005bca <_vfiprintf_r+0x6e>
 8005bb2:	4653      	mov	r3, sl
 8005bb4:	463a      	mov	r2, r7
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ffbc 	bl	8005b36 <__sfputs_r>
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f000 80c2 	beq.w	8005d48 <_vfiprintf_r+0x1ec>
 8005bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc6:	4453      	add	r3, sl
 8005bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bca:	f898 3000 	ldrb.w	r3, [r8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80ba 	beq.w	8005d48 <_vfiprintf_r+0x1ec>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bde:	9304      	str	r3, [sp, #16]
 8005be0:	9307      	str	r3, [sp, #28]
 8005be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be6:	931a      	str	r3, [sp, #104]	; 0x68
 8005be8:	46a8      	mov	r8, r5
 8005bea:	2205      	movs	r2, #5
 8005bec:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005bf0:	485e      	ldr	r0, [pc, #376]	; (8005d6c <_vfiprintf_r+0x210>)
 8005bf2:	f7fa fafd 	bl	80001f0 <memchr>
 8005bf6:	9b04      	ldr	r3, [sp, #16]
 8005bf8:	bb78      	cbnz	r0, 8005c5a <_vfiprintf_r+0xfe>
 8005bfa:	06d9      	lsls	r1, r3, #27
 8005bfc:	bf44      	itt	mi
 8005bfe:	2220      	movmi	r2, #32
 8005c00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c04:	071a      	lsls	r2, r3, #28
 8005c06:	bf44      	itt	mi
 8005c08:	222b      	movmi	r2, #43	; 0x2b
 8005c0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c0e:	782a      	ldrb	r2, [r5, #0]
 8005c10:	2a2a      	cmp	r2, #42	; 0x2a
 8005c12:	d02a      	beq.n	8005c6a <_vfiprintf_r+0x10e>
 8005c14:	9a07      	ldr	r2, [sp, #28]
 8005c16:	46a8      	mov	r8, r5
 8005c18:	2000      	movs	r0, #0
 8005c1a:	250a      	movs	r5, #10
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c22:	3b30      	subs	r3, #48	; 0x30
 8005c24:	2b09      	cmp	r3, #9
 8005c26:	d969      	bls.n	8005cfc <_vfiprintf_r+0x1a0>
 8005c28:	b360      	cbz	r0, 8005c84 <_vfiprintf_r+0x128>
 8005c2a:	e024      	b.n	8005c76 <_vfiprintf_r+0x11a>
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <_vfiprintf_r+0x214>)
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	d101      	bne.n	8005c36 <_vfiprintf_r+0xda>
 8005c32:	68b4      	ldr	r4, [r6, #8]
 8005c34:	e7a2      	b.n	8005b7c <_vfiprintf_r+0x20>
 8005c36:	4b4f      	ldr	r3, [pc, #316]	; (8005d74 <_vfiprintf_r+0x218>)
 8005c38:	429c      	cmp	r4, r3
 8005c3a:	bf08      	it	eq
 8005c3c:	68f4      	ldreq	r4, [r6, #12]
 8005c3e:	e79d      	b.n	8005b7c <_vfiprintf_r+0x20>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff fb1a 	bl	800527c <__swsetup_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d09d      	beq.n	8005b88 <_vfiprintf_r+0x2c>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	b01d      	add	sp, #116	; 0x74
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	46a8      	mov	r8, r5
 8005c58:	e7a2      	b.n	8005ba0 <_vfiprintf_r+0x44>
 8005c5a:	4a44      	ldr	r2, [pc, #272]	; (8005d6c <_vfiprintf_r+0x210>)
 8005c5c:	1a80      	subs	r0, r0, r2
 8005c5e:	fa0b f000 	lsl.w	r0, fp, r0
 8005c62:	4318      	orrs	r0, r3
 8005c64:	9004      	str	r0, [sp, #16]
 8005c66:	4645      	mov	r5, r8
 8005c68:	e7be      	b.n	8005be8 <_vfiprintf_r+0x8c>
 8005c6a:	9a03      	ldr	r2, [sp, #12]
 8005c6c:	1d11      	adds	r1, r2, #4
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	9103      	str	r1, [sp, #12]
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	db01      	blt.n	8005c7a <_vfiprintf_r+0x11e>
 8005c76:	9207      	str	r2, [sp, #28]
 8005c78:	e004      	b.n	8005c84 <_vfiprintf_r+0x128>
 8005c7a:	4252      	negs	r2, r2
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	9207      	str	r2, [sp, #28]
 8005c82:	9304      	str	r3, [sp, #16]
 8005c84:	f898 3000 	ldrb.w	r3, [r8]
 8005c88:	2b2e      	cmp	r3, #46	; 0x2e
 8005c8a:	d10e      	bne.n	8005caa <_vfiprintf_r+0x14e>
 8005c8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c90:	2b2a      	cmp	r3, #42	; 0x2a
 8005c92:	d138      	bne.n	8005d06 <_vfiprintf_r+0x1aa>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	1d1a      	adds	r2, r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	9203      	str	r2, [sp, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bfb8      	it	lt
 8005ca0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ca4:	f108 0802 	add.w	r8, r8, #2
 8005ca8:	9305      	str	r3, [sp, #20]
 8005caa:	4d33      	ldr	r5, [pc, #204]	; (8005d78 <_vfiprintf_r+0x21c>)
 8005cac:	f898 1000 	ldrb.w	r1, [r8]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7fa fa9c 	bl	80001f0 <memchr>
 8005cb8:	b140      	cbz	r0, 8005ccc <_vfiprintf_r+0x170>
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	1b40      	subs	r0, r0, r5
 8005cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8005cc2:	9b04      	ldr	r3, [sp, #16]
 8005cc4:	4303      	orrs	r3, r0
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	f898 1000 	ldrb.w	r1, [r8]
 8005cd0:	482a      	ldr	r0, [pc, #168]	; (8005d7c <_vfiprintf_r+0x220>)
 8005cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cd6:	2206      	movs	r2, #6
 8005cd8:	f108 0701 	add.w	r7, r8, #1
 8005cdc:	f7fa fa88 	bl	80001f0 <memchr>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d037      	beq.n	8005d54 <_vfiprintf_r+0x1f8>
 8005ce4:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <_vfiprintf_r+0x224>)
 8005ce6:	bb1b      	cbnz	r3, 8005d30 <_vfiprintf_r+0x1d4>
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	3307      	adds	r3, #7
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf6:	444b      	add	r3, r9
 8005cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfa:	e750      	b.n	8005b9e <_vfiprintf_r+0x42>
 8005cfc:	fb05 3202 	mla	r2, r5, r2, r3
 8005d00:	2001      	movs	r0, #1
 8005d02:	4688      	mov	r8, r1
 8005d04:	e78a      	b.n	8005c1c <_vfiprintf_r+0xc0>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f108 0801 	add.w	r8, r8, #1
 8005d0c:	9305      	str	r3, [sp, #20]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	250a      	movs	r5, #10
 8005d12:	4640      	mov	r0, r8
 8005d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d18:	3a30      	subs	r2, #48	; 0x30
 8005d1a:	2a09      	cmp	r2, #9
 8005d1c:	d903      	bls.n	8005d26 <_vfiprintf_r+0x1ca>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0c3      	beq.n	8005caa <_vfiprintf_r+0x14e>
 8005d22:	9105      	str	r1, [sp, #20]
 8005d24:	e7c1      	b.n	8005caa <_vfiprintf_r+0x14e>
 8005d26:	fb05 2101 	mla	r1, r5, r1, r2
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	e7f0      	b.n	8005d12 <_vfiprintf_r+0x1b6>
 8005d30:	ab03      	add	r3, sp, #12
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	4622      	mov	r2, r4
 8005d36:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <_vfiprintf_r+0x228>)
 8005d38:	a904      	add	r1, sp, #16
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f3af 8000 	nop.w
 8005d40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d44:	4681      	mov	r9, r0
 8005d46:	d1d5      	bne.n	8005cf4 <_vfiprintf_r+0x198>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	065b      	lsls	r3, r3, #25
 8005d4c:	f53f af7e 	bmi.w	8005c4c <_vfiprintf_r+0xf0>
 8005d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d52:	e77d      	b.n	8005c50 <_vfiprintf_r+0xf4>
 8005d54:	ab03      	add	r3, sp, #12
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <_vfiprintf_r+0x228>)
 8005d5c:	a904      	add	r1, sp, #16
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f888 	bl	8005e74 <_printf_i>
 8005d64:	e7ec      	b.n	8005d40 <_vfiprintf_r+0x1e4>
 8005d66:	bf00      	nop
 8005d68:	08006394 	.word	0x08006394
 8005d6c:	080063d4 	.word	0x080063d4
 8005d70:	080063b4 	.word	0x080063b4
 8005d74:	08006374 	.word	0x08006374
 8005d78:	080063da 	.word	0x080063da
 8005d7c:	080063de 	.word	0x080063de
 8005d80:	00000000 	.word	0x00000000
 8005d84:	08005b37 	.word	0x08005b37

08005d88 <_printf_common>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	461f      	mov	r7, r3
 8005d90:	688a      	ldr	r2, [r1, #8]
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bfb8      	it	lt
 8005d9c:	4613      	movlt	r3, r2
 8005d9e:	f8c9 3000 	str.w	r3, [r9]
 8005da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da6:	4606      	mov	r6, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	b112      	cbz	r2, 8005db2 <_printf_common+0x2a>
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c9 3000 	str.w	r3, [r9]
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	0699      	lsls	r1, r3, #26
 8005db6:	bf42      	ittt	mi
 8005db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005dbc:	3302      	addmi	r3, #2
 8005dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8005dc2:	6825      	ldr	r5, [r4, #0]
 8005dc4:	f015 0506 	ands.w	r5, r5, #6
 8005dc8:	d107      	bne.n	8005dda <_printf_common+0x52>
 8005dca:	f104 0a19 	add.w	sl, r4, #25
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	42ab      	cmp	r3, r5
 8005dd8:	dc28      	bgt.n	8005e2c <_printf_common+0xa4>
 8005dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	3300      	adds	r3, #0
 8005de2:	bf18      	it	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	0692      	lsls	r2, r2, #26
 8005de8:	d42d      	bmi.n	8005e46 <_printf_common+0xbe>
 8005dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dee:	4639      	mov	r1, r7
 8005df0:	4630      	mov	r0, r6
 8005df2:	47c0      	blx	r8
 8005df4:	3001      	adds	r0, #1
 8005df6:	d020      	beq.n	8005e3a <_printf_common+0xb2>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	68e5      	ldr	r5, [r4, #12]
 8005dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005e00:	f003 0306 	and.w	r3, r3, #6
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	bf08      	it	eq
 8005e08:	1aad      	subeq	r5, r5, r2
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	2500      	movne	r5, #0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfc4      	itt	gt
 8005e1a:	1a9b      	subgt	r3, r3, r2
 8005e1c:	18ed      	addgt	r5, r5, r3
 8005e1e:	f04f 0900 	mov.w	r9, #0
 8005e22:	341a      	adds	r4, #26
 8005e24:	454d      	cmp	r5, r9
 8005e26:	d11a      	bne.n	8005e5e <_printf_common+0xd6>
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e008      	b.n	8005e3e <_printf_common+0xb6>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4652      	mov	r2, sl
 8005e30:	4639      	mov	r1, r7
 8005e32:	4630      	mov	r0, r6
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d103      	bne.n	8005e42 <_printf_common+0xba>
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	3501      	adds	r5, #1
 8005e44:	e7c3      	b.n	8005dce <_printf_common+0x46>
 8005e46:	18e1      	adds	r1, r4, r3
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	2030      	movs	r0, #48	; 0x30
 8005e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e50:	4422      	add	r2, r4
 8005e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	e7c5      	b.n	8005dea <_printf_common+0x62>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4622      	mov	r2, r4
 8005e62:	4639      	mov	r1, r7
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d0e6      	beq.n	8005e3a <_printf_common+0xb2>
 8005e6c:	f109 0901 	add.w	r9, r9, #1
 8005e70:	e7d8      	b.n	8005e24 <_printf_common+0x9c>
	...

08005e74 <_printf_i>:
 8005e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	7e09      	ldrb	r1, [r1, #24]
 8005e80:	b085      	sub	sp, #20
 8005e82:	296e      	cmp	r1, #110	; 0x6e
 8005e84:	4617      	mov	r7, r2
 8005e86:	4606      	mov	r6, r0
 8005e88:	4698      	mov	r8, r3
 8005e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e8c:	f000 80b3 	beq.w	8005ff6 <_printf_i+0x182>
 8005e90:	d822      	bhi.n	8005ed8 <_printf_i+0x64>
 8005e92:	2963      	cmp	r1, #99	; 0x63
 8005e94:	d036      	beq.n	8005f04 <_printf_i+0x90>
 8005e96:	d80a      	bhi.n	8005eae <_printf_i+0x3a>
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	f000 80b9 	beq.w	8006010 <_printf_i+0x19c>
 8005e9e:	2958      	cmp	r1, #88	; 0x58
 8005ea0:	f000 8083 	beq.w	8005faa <_printf_i+0x136>
 8005ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005eac:	e032      	b.n	8005f14 <_printf_i+0xa0>
 8005eae:	2964      	cmp	r1, #100	; 0x64
 8005eb0:	d001      	beq.n	8005eb6 <_printf_i+0x42>
 8005eb2:	2969      	cmp	r1, #105	; 0x69
 8005eb4:	d1f6      	bne.n	8005ea4 <_printf_i+0x30>
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	0605      	lsls	r5, r0, #24
 8005ebc:	f103 0104 	add.w	r1, r3, #4
 8005ec0:	d52a      	bpl.n	8005f18 <_printf_i+0xa4>
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da03      	bge.n	8005ed2 <_printf_i+0x5e>
 8005eca:	222d      	movs	r2, #45	; 0x2d
 8005ecc:	425b      	negs	r3, r3
 8005ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ed2:	486f      	ldr	r0, [pc, #444]	; (8006090 <_printf_i+0x21c>)
 8005ed4:	220a      	movs	r2, #10
 8005ed6:	e039      	b.n	8005f4c <_printf_i+0xd8>
 8005ed8:	2973      	cmp	r1, #115	; 0x73
 8005eda:	f000 809d 	beq.w	8006018 <_printf_i+0x1a4>
 8005ede:	d808      	bhi.n	8005ef2 <_printf_i+0x7e>
 8005ee0:	296f      	cmp	r1, #111	; 0x6f
 8005ee2:	d020      	beq.n	8005f26 <_printf_i+0xb2>
 8005ee4:	2970      	cmp	r1, #112	; 0x70
 8005ee6:	d1dd      	bne.n	8005ea4 <_printf_i+0x30>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	e003      	b.n	8005efa <_printf_i+0x86>
 8005ef2:	2975      	cmp	r1, #117	; 0x75
 8005ef4:	d017      	beq.n	8005f26 <_printf_i+0xb2>
 8005ef6:	2978      	cmp	r1, #120	; 0x78
 8005ef8:	d1d4      	bne.n	8005ea4 <_printf_i+0x30>
 8005efa:	2378      	movs	r3, #120	; 0x78
 8005efc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f00:	4864      	ldr	r0, [pc, #400]	; (8006094 <_printf_i+0x220>)
 8005f02:	e055      	b.n	8005fb0 <_printf_i+0x13c>
 8005f04:	6813      	ldr	r3, [r2, #0]
 8005f06:	1d19      	adds	r1, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6011      	str	r1, [r2, #0]
 8005f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f14:	2301      	movs	r3, #1
 8005f16:	e08c      	b.n	8006032 <_printf_i+0x1be>
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6011      	str	r1, [r2, #0]
 8005f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f20:	bf18      	it	ne
 8005f22:	b21b      	sxthne	r3, r3
 8005f24:	e7cf      	b.n	8005ec6 <_printf_i+0x52>
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1d18      	adds	r0, r3, #4
 8005f2c:	6010      	str	r0, [r2, #0]
 8005f2e:	0628      	lsls	r0, r5, #24
 8005f30:	d501      	bpl.n	8005f36 <_printf_i+0xc2>
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	e002      	b.n	8005f3c <_printf_i+0xc8>
 8005f36:	0668      	lsls	r0, r5, #25
 8005f38:	d5fb      	bpl.n	8005f32 <_printf_i+0xbe>
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	4854      	ldr	r0, [pc, #336]	; (8006090 <_printf_i+0x21c>)
 8005f3e:	296f      	cmp	r1, #111	; 0x6f
 8005f40:	bf14      	ite	ne
 8005f42:	220a      	movne	r2, #10
 8005f44:	2208      	moveq	r2, #8
 8005f46:	2100      	movs	r1, #0
 8005f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4c:	6865      	ldr	r5, [r4, #4]
 8005f4e:	60a5      	str	r5, [r4, #8]
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	f2c0 8095 	blt.w	8006080 <_printf_i+0x20c>
 8005f56:	6821      	ldr	r1, [r4, #0]
 8005f58:	f021 0104 	bic.w	r1, r1, #4
 8005f5c:	6021      	str	r1, [r4, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d13d      	bne.n	8005fde <_printf_i+0x16a>
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	f040 808e 	bne.w	8006084 <_printf_i+0x210>
 8005f68:	4665      	mov	r5, ip
 8005f6a:	2a08      	cmp	r2, #8
 8005f6c:	d10b      	bne.n	8005f86 <_printf_i+0x112>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	07db      	lsls	r3, r3, #31
 8005f72:	d508      	bpl.n	8005f86 <_printf_i+0x112>
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	6862      	ldr	r2, [r4, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	bfde      	ittt	le
 8005f7c:	2330      	movle	r3, #48	; 0x30
 8005f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f86:	ebac 0305 	sub.w	r3, ip, r5
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	f8cd 8000 	str.w	r8, [sp]
 8005f90:	463b      	mov	r3, r7
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	4621      	mov	r1, r4
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7ff fef6 	bl	8005d88 <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d14d      	bne.n	800603c <_printf_i+0x1c8>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	b005      	add	sp, #20
 8005fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005faa:	4839      	ldr	r0, [pc, #228]	; (8006090 <_printf_i+0x21c>)
 8005fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	6821      	ldr	r1, [r4, #0]
 8005fb4:	1d1d      	adds	r5, r3, #4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6015      	str	r5, [r2, #0]
 8005fba:	060a      	lsls	r2, r1, #24
 8005fbc:	d50b      	bpl.n	8005fd6 <_printf_i+0x162>
 8005fbe:	07ca      	lsls	r2, r1, #31
 8005fc0:	bf44      	itt	mi
 8005fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8005fc6:	6021      	strmi	r1, [r4, #0]
 8005fc8:	b91b      	cbnz	r3, 8005fd2 <_printf_i+0x15e>
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	f022 0220 	bic.w	r2, r2, #32
 8005fd0:	6022      	str	r2, [r4, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	e7b7      	b.n	8005f46 <_printf_i+0xd2>
 8005fd6:	064d      	lsls	r5, r1, #25
 8005fd8:	bf48      	it	mi
 8005fda:	b29b      	uxthmi	r3, r3
 8005fdc:	e7ef      	b.n	8005fbe <_printf_i+0x14a>
 8005fde:	4665      	mov	r5, ip
 8005fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8005fe8:	5cc3      	ldrb	r3, [r0, r3]
 8005fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fee:	460b      	mov	r3, r1
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d1f5      	bne.n	8005fe0 <_printf_i+0x16c>
 8005ff4:	e7b9      	b.n	8005f6a <_printf_i+0xf6>
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	6825      	ldr	r5, [r4, #0]
 8005ffa:	6961      	ldr	r1, [r4, #20]
 8005ffc:	1d18      	adds	r0, r3, #4
 8005ffe:	6010      	str	r0, [r2, #0]
 8006000:	0628      	lsls	r0, r5, #24
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	d501      	bpl.n	800600a <_printf_i+0x196>
 8006006:	6019      	str	r1, [r3, #0]
 8006008:	e002      	b.n	8006010 <_printf_i+0x19c>
 800600a:	066a      	lsls	r2, r5, #25
 800600c:	d5fb      	bpl.n	8006006 <_printf_i+0x192>
 800600e:	8019      	strh	r1, [r3, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	4665      	mov	r5, ip
 8006016:	e7b9      	b.n	8005f8c <_printf_i+0x118>
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	1d19      	adds	r1, r3, #4
 800601c:	6011      	str	r1, [r2, #0]
 800601e:	681d      	ldr	r5, [r3, #0]
 8006020:	6862      	ldr	r2, [r4, #4]
 8006022:	2100      	movs	r1, #0
 8006024:	4628      	mov	r0, r5
 8006026:	f7fa f8e3 	bl	80001f0 <memchr>
 800602a:	b108      	cbz	r0, 8006030 <_printf_i+0x1bc>
 800602c:	1b40      	subs	r0, r0, r5
 800602e:	6060      	str	r0, [r4, #4]
 8006030:	6863      	ldr	r3, [r4, #4]
 8006032:	6123      	str	r3, [r4, #16]
 8006034:	2300      	movs	r3, #0
 8006036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800603a:	e7a7      	b.n	8005f8c <_printf_i+0x118>
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	462a      	mov	r2, r5
 8006040:	4639      	mov	r1, r7
 8006042:	4630      	mov	r0, r6
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d0aa      	beq.n	8005fa0 <_printf_i+0x12c>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	d413      	bmi.n	8006078 <_printf_i+0x204>
 8006050:	68e0      	ldr	r0, [r4, #12]
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	4298      	cmp	r0, r3
 8006056:	bfb8      	it	lt
 8006058:	4618      	movlt	r0, r3
 800605a:	e7a3      	b.n	8005fa4 <_printf_i+0x130>
 800605c:	2301      	movs	r3, #1
 800605e:	464a      	mov	r2, r9
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d09a      	beq.n	8005fa0 <_printf_i+0x12c>
 800606a:	3501      	adds	r5, #1
 800606c:	68e3      	ldr	r3, [r4, #12]
 800606e:	9a03      	ldr	r2, [sp, #12]
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	42ab      	cmp	r3, r5
 8006074:	dcf2      	bgt.n	800605c <_printf_i+0x1e8>
 8006076:	e7eb      	b.n	8006050 <_printf_i+0x1dc>
 8006078:	2500      	movs	r5, #0
 800607a:	f104 0919 	add.w	r9, r4, #25
 800607e:	e7f5      	b.n	800606c <_printf_i+0x1f8>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ac      	bne.n	8005fde <_printf_i+0x16a>
 8006084:	7803      	ldrb	r3, [r0, #0]
 8006086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800608a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608e:	e76c      	b.n	8005f6a <_printf_i+0xf6>
 8006090:	080063e5 	.word	0x080063e5
 8006094:	080063f6 	.word	0x080063f6

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4c06      	ldr	r4, [pc, #24]	; (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4605      	mov	r5, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	f7fa fd98 	bl	8000bd8 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20004b28 	.word	0x20004b28

080060b8 <__sread>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	460c      	mov	r4, r1
 80060bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c0:	f000 f8d6 	bl	8006270 <_read_r>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	bfab      	itete	ge
 80060c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ca:	89a3      	ldrhlt	r3, [r4, #12]
 80060cc:	181b      	addge	r3, r3, r0
 80060ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060d2:	bfac      	ite	ge
 80060d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060d6:	81a3      	strhlt	r3, [r4, #12]
 80060d8:	bd10      	pop	{r4, pc}

080060da <__swrite>:
 80060da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060de:	461f      	mov	r7, r3
 80060e0:	898b      	ldrh	r3, [r1, #12]
 80060e2:	05db      	lsls	r3, r3, #23
 80060e4:	4605      	mov	r5, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	4616      	mov	r6, r2
 80060ea:	d505      	bpl.n	80060f8 <__swrite+0x1e>
 80060ec:	2302      	movs	r3, #2
 80060ee:	2200      	movs	r2, #0
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f000 f868 	bl	80061c8 <_lseek_r>
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	4632      	mov	r2, r6
 8006106:	463b      	mov	r3, r7
 8006108:	4628      	mov	r0, r5
 800610a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610e:	f000 b817 	b.w	8006140 <_write_r>

08006112 <__sseek>:
 8006112:	b510      	push	{r4, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611a:	f000 f855 	bl	80061c8 <_lseek_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	bf15      	itete	ne
 8006124:	6560      	strne	r0, [r4, #84]	; 0x54
 8006126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800612a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800612e:	81a3      	strheq	r3, [r4, #12]
 8006130:	bf18      	it	ne
 8006132:	81a3      	strhne	r3, [r4, #12]
 8006134:	bd10      	pop	{r4, pc}

08006136 <__sclose>:
 8006136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800613a:	f000 b813 	b.w	8006164 <_close_r>
	...

08006140 <_write_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4c07      	ldr	r4, [pc, #28]	; (8006160 <_write_r+0x20>)
 8006144:	4605      	mov	r5, r0
 8006146:	4608      	mov	r0, r1
 8006148:	4611      	mov	r1, r2
 800614a:	2200      	movs	r2, #0
 800614c:	6022      	str	r2, [r4, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	f7fa fbe6 	bl	8000920 <_write>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_write_r+0x1e>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	b103      	cbz	r3, 800615e <_write_r+0x1e>
 800615c:	602b      	str	r3, [r5, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	20004b28 	.word	0x20004b28

08006164 <_close_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4c06      	ldr	r4, [pc, #24]	; (8006180 <_close_r+0x1c>)
 8006168:	2300      	movs	r3, #0
 800616a:	4605      	mov	r5, r0
 800616c:	4608      	mov	r0, r1
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	f7fa fcfd 	bl	8000b6e <_close>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_close_r+0x1a>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	b103      	cbz	r3, 800617e <_close_r+0x1a>
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	20004b28 	.word	0x20004b28

08006184 <_fstat_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4c07      	ldr	r4, [pc, #28]	; (80061a4 <_fstat_r+0x20>)
 8006188:	2300      	movs	r3, #0
 800618a:	4605      	mov	r5, r0
 800618c:	4608      	mov	r0, r1
 800618e:	4611      	mov	r1, r2
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	f7fa fcf8 	bl	8000b86 <_fstat>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	d102      	bne.n	80061a0 <_fstat_r+0x1c>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	b103      	cbz	r3, 80061a0 <_fstat_r+0x1c>
 800619e:	602b      	str	r3, [r5, #0]
 80061a0:	bd38      	pop	{r3, r4, r5, pc}
 80061a2:	bf00      	nop
 80061a4:	20004b28 	.word	0x20004b28

080061a8 <_isatty_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4c06      	ldr	r4, [pc, #24]	; (80061c4 <_isatty_r+0x1c>)
 80061ac:	2300      	movs	r3, #0
 80061ae:	4605      	mov	r5, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	f7fa fcf7 	bl	8000ba6 <_isatty>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_isatty_r+0x1a>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_isatty_r+0x1a>
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	20004b28 	.word	0x20004b28

080061c8 <_lseek_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4c07      	ldr	r4, [pc, #28]	; (80061e8 <_lseek_r+0x20>)
 80061cc:	4605      	mov	r5, r0
 80061ce:	4608      	mov	r0, r1
 80061d0:	4611      	mov	r1, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fa fcf0 	bl	8000bbc <_lseek>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_lseek_r+0x1e>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_lseek_r+0x1e>
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20004b28 	.word	0x20004b28

080061ec <memmove>:
 80061ec:	4288      	cmp	r0, r1
 80061ee:	b510      	push	{r4, lr}
 80061f0:	eb01 0302 	add.w	r3, r1, r2
 80061f4:	d807      	bhi.n	8006206 <memmove+0x1a>
 80061f6:	1e42      	subs	r2, r0, #1
 80061f8:	4299      	cmp	r1, r3
 80061fa:	d00a      	beq.n	8006212 <memmove+0x26>
 80061fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006200:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006204:	e7f8      	b.n	80061f8 <memmove+0xc>
 8006206:	4283      	cmp	r3, r0
 8006208:	d9f5      	bls.n	80061f6 <memmove+0xa>
 800620a:	1881      	adds	r1, r0, r2
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	42d3      	cmn	r3, r2
 8006210:	d100      	bne.n	8006214 <memmove+0x28>
 8006212:	bd10      	pop	{r4, pc}
 8006214:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006218:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800621c:	e7f7      	b.n	800620e <memmove+0x22>

0800621e <__malloc_lock>:
 800621e:	4770      	bx	lr

08006220 <__malloc_unlock>:
 8006220:	4770      	bx	lr

08006222 <_realloc_r>:
 8006222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006224:	4607      	mov	r7, r0
 8006226:	4614      	mov	r4, r2
 8006228:	460e      	mov	r6, r1
 800622a:	b921      	cbnz	r1, 8006236 <_realloc_r+0x14>
 800622c:	4611      	mov	r1, r2
 800622e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006232:	f7ff babd 	b.w	80057b0 <_malloc_r>
 8006236:	b922      	cbnz	r2, 8006242 <_realloc_r+0x20>
 8006238:	f7ff fa6c 	bl	8005714 <_free_r>
 800623c:	4625      	mov	r5, r4
 800623e:	4628      	mov	r0, r5
 8006240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006242:	f000 f827 	bl	8006294 <_malloc_usable_size_r>
 8006246:	42a0      	cmp	r0, r4
 8006248:	d20f      	bcs.n	800626a <_realloc_r+0x48>
 800624a:	4621      	mov	r1, r4
 800624c:	4638      	mov	r0, r7
 800624e:	f7ff faaf 	bl	80057b0 <_malloc_r>
 8006252:	4605      	mov	r5, r0
 8006254:	2800      	cmp	r0, #0
 8006256:	d0f2      	beq.n	800623e <_realloc_r+0x1c>
 8006258:	4631      	mov	r1, r6
 800625a:	4622      	mov	r2, r4
 800625c:	f7fe fef8 	bl	8005050 <memcpy>
 8006260:	4631      	mov	r1, r6
 8006262:	4638      	mov	r0, r7
 8006264:	f7ff fa56 	bl	8005714 <_free_r>
 8006268:	e7e9      	b.n	800623e <_realloc_r+0x1c>
 800626a:	4635      	mov	r5, r6
 800626c:	e7e7      	b.n	800623e <_realloc_r+0x1c>
	...

08006270 <_read_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4c07      	ldr	r4, [pc, #28]	; (8006290 <_read_r+0x20>)
 8006274:	4605      	mov	r5, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fa fc58 	bl	8000b34 <_read>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_read_r+0x1e>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	b103      	cbz	r3, 800628e <_read_r+0x1e>
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20004b28 	.word	0x20004b28

08006294 <_malloc_usable_size_r>:
 8006294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006298:	1f18      	subs	r0, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfbc      	itt	lt
 800629e:	580b      	ldrlt	r3, [r1, r0]
 80062a0:	18c0      	addlt	r0, r0, r3
 80062a2:	4770      	bx	lr

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
