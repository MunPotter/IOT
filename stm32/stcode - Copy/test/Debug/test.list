
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006b44  08006b44  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b44  08006b44  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  2000007c  08006bc8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  08006bc8  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4ac  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035cf  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  0003db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003f098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028ea3  00000000  00000000  00040470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f79  00000000  00000000  00069313  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9915  00000000  00000000  0007b28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f74  00000000  00000000  00174c1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c5c 	.word	0x08005c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005c5c 	.word	0x08005c5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000098 	.word	0x20000098
 80002a0:	200000ec 	.word	0x200000ec

080002a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d013      	beq.n	80002e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00b      	beq.n	80002e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002cc:	e000      	b.n	80002d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b5b0      	push	{r4, r5, r7, lr}
 80002f6:	b08e      	sub	sp, #56	; 0x38
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f000 fe10 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fe:	f000 f847 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f000 f8e9 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000306:	f000 f8a9 	bl	800045c <MX_I2C1_Init>

  SSD1306_Init (); // initialize the diaply
 800030a:	f000 f997 	bl	800063c <SSD1306_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <main+0x84>)
 8000310:	f107 041c 	add.w	r4, r7, #28
 8000314:	461d      	mov	r5, r3
 8000316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800031e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000322:	f107 031c 	add.w	r3, r7, #28
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fb80 	bl	8003a2e <osThreadCreate>
 800032e:	4602      	mov	r2, r0
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <main+0x88>)
 8000332:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <main+0x8c>)
 8000336:	463c      	mov	r4, r7
 8000338:	461d      	mov	r5, r3
 800033a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800033c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800033e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000346:	463b      	mov	r3, r7
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fb6f 	bl	8003a2e <osThreadCreate>
 8000350:	4602      	mov	r2, r0
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <main+0x90>)
 8000354:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000356:	f003 fb63 	bl	8003a20 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 800035a:	2064      	movs	r0, #100	; 0x64
 800035c:	f000 fe18 	bl	8000f90 <HAL_Delay>
	  n++;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <main+0x94>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a08      	ldr	r2, [pc, #32]	; (8000388 <main+0x94>)
 8000368:	6013      	str	r3, [r2, #0]
	  printf("test mood on %d\n",n);
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <main+0x94>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <main+0x98>)
 8000372:	f004 fd8f 	bl	8004e94 <iprintf>
	  HAL_Delay(100);
 8000376:	e7f0      	b.n	800035a <main+0x66>
 8000378:	08005c94 	.word	0x08005c94
 800037c:	20001404 	.word	0x20001404
 8000380:	08005cbc 	.word	0x08005cbc
 8000384:	20001458 	.word	0x20001458
 8000388:	20001408 	.word	0x20001408
 800038c:	08005c74 	.word	0x08005c74

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b0b8      	sub	sp, #224	; 0xe0
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800039a:	2244      	movs	r2, #68	; 0x44
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 fd70 	bl	8004e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	463b      	mov	r3, r7
 80003b6:	2288      	movs	r2, #136	; 0x88
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 fd62 	bl	8004e84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003c0:	2310      	movs	r3, #16
 80003c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003c6:	2301      	movs	r3, #1
 80003c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003d2:	2360      	movs	r3, #96	; 0x60
 80003d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d8:	2300      	movs	r3, #0
 80003da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fd7c 	bl	8001ee0 <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003ee:	f000 f91d 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	230f      	movs	r3, #15
 80003f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003f8:	2300      	movs	r3, #0
 80003fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000410:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 f948 	bl	80026ac <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000422:	f000 f903 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000426:	2340      	movs	r3, #64	; 0x40
 8000428:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800042a:	2300      	movs	r3, #0
 800042c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042e:	463b      	mov	r3, r7
 8000430:	4618      	mov	r0, r3
 8000432:	f002 fb5b 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800043c:	f000 f8f6 	bl	800062c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000440:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000444:	f001 fcf6 	bl	8001e34 <HAL_PWREx_ControlVoltageScaling>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800044e:	f000 f8ed 	bl	800062c <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	37e0      	adds	r7, #224	; 0xe0
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <MX_I2C1_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000468:	2204      	movs	r2, #4
 800046a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000474:	2201      	movs	r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000496:	480e      	ldr	r0, [pc, #56]	; (80004d0 <MX_I2C1_Init+0x74>)
 8000498:	f001 f826 	bl	80014e8 <HAL_I2C_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004a2:	f000 f8c3 	bl	800062c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a6:	2100      	movs	r1, #0
 80004a8:	4809      	ldr	r0, [pc, #36]	; (80004d0 <MX_I2C1_Init+0x74>)
 80004aa:	f001 fc1d 	bl	8001ce8 <HAL_I2CEx_ConfigAnalogFilter>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b4:	f000 f8ba 	bl	800062c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b8:	2100      	movs	r1, #0
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_I2C1_Init+0x74>)
 80004bc:	f001 fc5f 	bl	8001d7e <HAL_I2CEx_ConfigDigitalFilter>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f8b1 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000140c 	.word	0x2000140c
 80004d4:	40005400 	.word	0x40005400

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_GPIO_Init+0x44>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <MX_GPIO_Init+0x44>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_GPIO_Init+0x44>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_GPIO_Init+0x44>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <MX_GPIO_Init+0x44>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_GPIO_Init+0x44>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  SSD1306_Clear();
 8000528:	f000 faad 	bl	8000a86 <SSD1306_Clear>
	  SSD1306_GotoXY (10,10); // goto 10, 10
 800052c:	210a      	movs	r1, #10
 800052e:	200a      	movs	r0, #10
 8000530:	f000 f9ee 	bl	8000910 <SSD1306_GotoXY>
	  SSD1306_Puts ("MISHU LOVE", &Font_11x18, 1); // print Hello
 8000534:	2201      	movs	r2, #1
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <StartDefaultTask+0x4c>)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <StartDefaultTask+0x50>)
 800053a:	f000 fa7f 	bl	8000a3c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); // update screen
 800053e:	f000 f941 	bl	80007c4 <SSD1306_UpdateScreen>
	  SSD1306_GotoXY (10, 20);
 8000542:	2114      	movs	r1, #20
 8000544:	200a      	movs	r0, #10
 8000546:	f000 f9e3 	bl	8000910 <SSD1306_GotoXY>

	  SSD1306_GotoXY (10, 30);
 800054a:	211e      	movs	r1, #30
 800054c:	200a      	movs	r0, #10
 800054e:	f000 f9df 	bl	8000910 <SSD1306_GotoXY>
	  SSD1306_Puts ("SAIRA", &Font_11x18, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4905      	ldr	r1, [pc, #20]	; (800056c <StartDefaultTask+0x4c>)
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <StartDefaultTask+0x54>)
 8000558:	f000 fa70 	bl	8000a3c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); // update screen
 800055c:	f000 f932 	bl	80007c4 <SSD1306_UpdateScreen>

//	n++;
//	printf("test mood on default task = %d\n",n);
    osDelay(2000);
 8000560:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000564:	f003 faaf 	bl	8003ac6 <osDelay>
	  SSD1306_Clear();
 8000568:	e7de      	b.n	8000528 <StartDefaultTask+0x8>
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	08005cd8 	.word	0x08005cd8
 8000574:	08005ce4 	.word	0x08005ce4

08000578 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//		m++;
//		printf("test mood on task 2 = %d\n",m);

	  SSD1306_Clear();
 8000580:	f000 fa81 	bl	8000a86 <SSD1306_Clear>
	  SSD1306_GotoXY (10,10); // goto 10, 10
 8000584:	210a      	movs	r1, #10
 8000586:	200a      	movs	r0, #10
 8000588:	f000 f9c2 	bl	8000910 <SSD1306_GotoXY>
	  SSD1306_Puts ("SAIRA LOVE ", &Font_11x18, 1); // print Hello
 800058c:	2201      	movs	r2, #1
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <StartTask02+0x4c>)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <StartTask02+0x50>)
 8000592:	f000 fa53 	bl	8000a3c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); // update screen
 8000596:	f000 f915 	bl	80007c4 <SSD1306_UpdateScreen>
	  SSD1306_GotoXY (10, 20);
 800059a:	2114      	movs	r1, #20
 800059c:	200a      	movs	r0, #10
 800059e:	f000 f9b7 	bl	8000910 <SSD1306_GotoXY>

	  SSD1306_GotoXY (10, 30);
 80005a2:	211e      	movs	r1, #30
 80005a4:	200a      	movs	r0, #10
 80005a6:	f000 f9b3 	bl	8000910 <SSD1306_GotoXY>
	  SSD1306_Puts ("MISHU", &Font_11x18, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	4905      	ldr	r1, [pc, #20]	; (80005c4 <StartTask02+0x4c>)
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <StartTask02+0x54>)
 80005b0:	f000 fa44 	bl	8000a3c <SSD1306_Puts>
	  SSD1306_UpdateScreen(); // update screen
 80005b4:	f000 f906 	bl	80007c4 <SSD1306_UpdateScreen>

	  osDelay(2000);
 80005b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005bc:	f003 fa83 	bl	8003ac6 <osDelay>
	  SSD1306_Clear();
 80005c0:	e7de      	b.n	8000580 <StartTask02+0x8>
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	08005cec 	.word	0x08005cec
 80005cc:	08005cf8 	.word	0x08005cf8

080005d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d101      	bne.n	80005e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005e2:	f000 fcb5 	bl	8000f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40012c00 	.word	0x40012c00

080005f4 <_write>:


int _write(int file,char *ptr, int len)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e009      	b.n	800061a <_write+0x26>
 {

 ITM_SendChar(*ptr++);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	60ba      	str	r2, [r7, #8]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fe48 	bl	80002a4 <ITM_SendChar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	429a      	cmp	r2, r3
 8000620:	dbf1      	blt.n	8000606 <_write+0x12>

 }
return len;
 8000622:	687b      	ldr	r3, [r7, #4]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000642:	f000 fa29 	bl	8000a98 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000646:	f644 6320 	movw	r3, #20000	; 0x4e20
 800064a:	2201      	movs	r2, #1
 800064c:	2178      	movs	r1, #120	; 0x78
 800064e:	485b      	ldr	r0, [pc, #364]	; (80007bc <SSD1306_Init+0x180>)
 8000650:	f001 f8ce 	bl	80017f0 <HAL_I2C_IsDeviceReady>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800065a:	2300      	movs	r3, #0
 800065c:	e0a9      	b.n	80007b2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800065e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000662:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000664:	e002      	b.n	800066c <SSD1306_Init+0x30>
		p--;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3b01      	subs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f9      	bne.n	8000666 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000672:	22ae      	movs	r2, #174	; 0xae
 8000674:	2100      	movs	r1, #0
 8000676:	2078      	movs	r0, #120	; 0x78
 8000678:	f000 fa6a 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800067c:	2220      	movs	r2, #32
 800067e:	2100      	movs	r1, #0
 8000680:	2078      	movs	r0, #120	; 0x78
 8000682:	f000 fa65 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000686:	2210      	movs	r2, #16
 8000688:	2100      	movs	r1, #0
 800068a:	2078      	movs	r0, #120	; 0x78
 800068c:	f000 fa60 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000690:	22b0      	movs	r2, #176	; 0xb0
 8000692:	2100      	movs	r1, #0
 8000694:	2078      	movs	r0, #120	; 0x78
 8000696:	f000 fa5b 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800069a:	22c8      	movs	r2, #200	; 0xc8
 800069c:	2100      	movs	r1, #0
 800069e:	2078      	movs	r0, #120	; 0x78
 80006a0:	f000 fa56 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	2078      	movs	r0, #120	; 0x78
 80006aa:	f000 fa51 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80006ae:	2210      	movs	r2, #16
 80006b0:	2100      	movs	r1, #0
 80006b2:	2078      	movs	r0, #120	; 0x78
 80006b4:	f000 fa4c 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	2100      	movs	r1, #0
 80006bc:	2078      	movs	r0, #120	; 0x78
 80006be:	f000 fa47 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80006c2:	2281      	movs	r2, #129	; 0x81
 80006c4:	2100      	movs	r1, #0
 80006c6:	2078      	movs	r0, #120	; 0x78
 80006c8:	f000 fa42 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80006cc:	22ff      	movs	r2, #255	; 0xff
 80006ce:	2100      	movs	r1, #0
 80006d0:	2078      	movs	r0, #120	; 0x78
 80006d2:	f000 fa3d 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80006d6:	22a1      	movs	r2, #161	; 0xa1
 80006d8:	2100      	movs	r1, #0
 80006da:	2078      	movs	r0, #120	; 0x78
 80006dc:	f000 fa38 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80006e0:	22a6      	movs	r2, #166	; 0xa6
 80006e2:	2100      	movs	r1, #0
 80006e4:	2078      	movs	r0, #120	; 0x78
 80006e6:	f000 fa33 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80006ea:	22a8      	movs	r2, #168	; 0xa8
 80006ec:	2100      	movs	r1, #0
 80006ee:	2078      	movs	r0, #120	; 0x78
 80006f0:	f000 fa2e 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80006f4:	223f      	movs	r2, #63	; 0x3f
 80006f6:	2100      	movs	r1, #0
 80006f8:	2078      	movs	r0, #120	; 0x78
 80006fa:	f000 fa29 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006fe:	22a4      	movs	r2, #164	; 0xa4
 8000700:	2100      	movs	r1, #0
 8000702:	2078      	movs	r0, #120	; 0x78
 8000704:	f000 fa24 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000708:	22d3      	movs	r2, #211	; 0xd3
 800070a:	2100      	movs	r1, #0
 800070c:	2078      	movs	r0, #120	; 0x78
 800070e:	f000 fa1f 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2078      	movs	r0, #120	; 0x78
 8000718:	f000 fa1a 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800071c:	22d5      	movs	r2, #213	; 0xd5
 800071e:	2100      	movs	r1, #0
 8000720:	2078      	movs	r0, #120	; 0x78
 8000722:	f000 fa15 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000726:	22f0      	movs	r2, #240	; 0xf0
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	; 0x78
 800072c:	f000 fa10 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000730:	22d9      	movs	r2, #217	; 0xd9
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	; 0x78
 8000736:	f000 fa0b 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800073a:	2222      	movs	r2, #34	; 0x22
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	; 0x78
 8000740:	f000 fa06 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000744:	22da      	movs	r2, #218	; 0xda
 8000746:	2100      	movs	r1, #0
 8000748:	2078      	movs	r0, #120	; 0x78
 800074a:	f000 fa01 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800074e:	2212      	movs	r2, #18
 8000750:	2100      	movs	r1, #0
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 f9fc 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000758:	22db      	movs	r2, #219	; 0xdb
 800075a:	2100      	movs	r1, #0
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 f9f7 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f000 f9f2 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800076c:	228d      	movs	r2, #141	; 0x8d
 800076e:	2100      	movs	r1, #0
 8000770:	2078      	movs	r0, #120	; 0x78
 8000772:	f000 f9ed 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000776:	2214      	movs	r2, #20
 8000778:	2100      	movs	r1, #0
 800077a:	2078      	movs	r0, #120	; 0x78
 800077c:	f000 f9e8 	bl	8000b50 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000780:	22af      	movs	r2, #175	; 0xaf
 8000782:	2100      	movs	r1, #0
 8000784:	2078      	movs	r0, #120	; 0x78
 8000786:	f000 f9e3 	bl	8000b50 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800078a:	222e      	movs	r2, #46	; 0x2e
 800078c:	2100      	movs	r1, #0
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f000 f9de 	bl	8000b50 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000794:	2000      	movs	r0, #0
 8000796:	f000 f843 	bl	8000820 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800079a:	f000 f813 	bl	80007c4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SSD1306_Init+0x184>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SSD1306_Init+0x184>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SSD1306_Init+0x184>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80007b0:	2301      	movs	r3, #1
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000140c 	.word	0x2000140c
 80007c0:	200006ec 	.word	0x200006ec

080007c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	e01d      	b.n	800080c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b50      	subs	r3, #80	; 0x50
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	; 0x78
 80007dc:	f000 f9b8 	bl	8000b50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	; 0x78
 80007e6:	f000 f9b3 	bl	8000b50 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007ea:	2210      	movs	r2, #16
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	; 0x78
 80007f0:	f000 f9ae 	bl	8000b50 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	01db      	lsls	r3, r3, #7
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <SSD1306_UpdateScreen+0x58>)
 80007fa:	441a      	add	r2, r3
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	2078      	movs	r0, #120	; 0x78
 8000802:	f000 f95d 	bl	8000ac0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	3301      	adds	r3, #1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b07      	cmp	r3, #7
 8000810:	d9de      	bls.n	80007d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200002ec 	.word	0x200002ec

08000820 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d101      	bne.n	8000834 <SSD1306_Fill+0x14>
 8000830:	2300      	movs	r3, #0
 8000832:	e000      	b.n	8000836 <SSD1306_Fill+0x16>
 8000834:	23ff      	movs	r3, #255	; 0xff
 8000836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083a:	4619      	mov	r1, r3
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <SSD1306_Fill+0x2c>)
 800083e:	f004 fb21 	bl	8004e84 <memset>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002ec 	.word	0x200002ec

08000850 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	460b      	mov	r3, r1
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	70fb      	strb	r3, [r7, #3]
	if (
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	2b7f      	cmp	r3, #127	; 0x7f
 8000866:	d848      	bhi.n	80008fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000868:	88bb      	ldrh	r3, [r7, #4]
 800086a:	2b3f      	cmp	r3, #63	; 0x3f
 800086c:	d845      	bhi.n	80008fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <SSD1306_DrawPixel+0xb8>)
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d006      	beq.n	8000884 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b00      	cmp	r3, #0
 800087a:	bf0c      	ite	eq
 800087c:	2301      	moveq	r3, #1
 800087e:	2300      	movne	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d11a      	bne.n	80008c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	b298      	uxth	r0, r3
 8000892:	4603      	mov	r3, r0
 8000894:	01db      	lsls	r3, r3, #7
 8000896:	4413      	add	r3, r2
 8000898:	4a1c      	ldr	r2, [pc, #112]	; (800090c <SSD1306_DrawPixel+0xbc>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	b25a      	sxtb	r2, r3
 800089e:	88bb      	ldrh	r3, [r7, #4]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b259      	sxtb	r1, r3
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	4603      	mov	r3, r0
 80008b4:	01db      	lsls	r3, r3, #7
 80008b6:	4413      	add	r3, r2
 80008b8:	b2c9      	uxtb	r1, r1
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <SSD1306_DrawPixel+0xbc>)
 80008bc:	54d1      	strb	r1, [r2, r3]
 80008be:	e01d      	b.n	80008fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	b298      	uxth	r0, r3
 80008c8:	4603      	mov	r3, r0
 80008ca:	01db      	lsls	r3, r3, #7
 80008cc:	4413      	add	r3, r2
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <SSD1306_DrawPixel+0xbc>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	b25a      	sxtb	r2, r3
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4013      	ands	r3, r2
 80008e8:	b259      	sxtb	r1, r3
 80008ea:	88fa      	ldrh	r2, [r7, #6]
 80008ec:	4603      	mov	r3, r0
 80008ee:	01db      	lsls	r3, r3, #7
 80008f0:	4413      	add	r3, r2
 80008f2:	b2c9      	uxtb	r1, r1
 80008f4:	4a05      	ldr	r2, [pc, #20]	; (800090c <SSD1306_DrawPixel+0xbc>)
 80008f6:	54d1      	strb	r1, [r2, r3]
 80008f8:	e000      	b.n	80008fc <SSD1306_DrawPixel+0xac>
		return;
 80008fa:	bf00      	nop
	}
}
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	200006ec 	.word	0x200006ec
 800090c:	200002ec 	.word	0x200002ec

08000910 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	80fb      	strh	r3, [r7, #6]
 800091c:	4613      	mov	r3, r2
 800091e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SSD1306_GotoXY+0x28>)
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <SSD1306_GotoXY+0x28>)
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	8053      	strh	r3, [r2, #2]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	200006ec 	.word	0x200006ec

0800093c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800094c:	4b3a      	ldr	r3, [pc, #232]	; (8000a38 <SSD1306_Putc+0xfc>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
	if (
 8000958:	2b7f      	cmp	r3, #127	; 0x7f
 800095a:	dc07      	bgt.n	800096c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800095c:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <SSD1306_Putc+0xfc>)
 800095e:	885b      	ldrh	r3, [r3, #2]
 8000960:	461a      	mov	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000968:	2b3f      	cmp	r3, #63	; 0x3f
 800096a:	dd01      	ble.n	8000970 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800096c:	2300      	movs	r3, #0
 800096e:	e05e      	b.n	8000a2e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e04b      	b.n	8000a0e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	3b20      	subs	r3, #32
 800097e:	6839      	ldr	r1, [r7, #0]
 8000980:	7849      	ldrb	r1, [r1, #1]
 8000982:	fb01 f303 	mul.w	r3, r1, r3
 8000986:	4619      	mov	r1, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	440b      	add	r3, r1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	e030      	b.n	80009fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d010      	beq.n	80009cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <SSD1306_Putc+0xfc>)
 80009ac:	881a      	ldrh	r2, [r3, #0]
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4413      	add	r3, r2
 80009b4:	b298      	uxth	r0, r3
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <SSD1306_Putc+0xfc>)
 80009b8:	885a      	ldrh	r2, [r3, #2]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f7ff ff43 	bl	8000850 <SSD1306_DrawPixel>
 80009ca:	e014      	b.n	80009f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <SSD1306_Putc+0xfc>)
 80009ce:	881a      	ldrh	r2, [r3, #0]
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	b298      	uxth	r0, r3
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <SSD1306_Putc+0xfc>)
 80009da:	885a      	ldrh	r2, [r3, #2]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	b299      	uxth	r1, r3
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf0c      	ite	eq
 80009ea:	2301      	moveq	r3, #1
 80009ec:	2300      	movne	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	f7ff ff2d 	bl	8000850 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	3301      	adds	r3, #1
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d3c8      	bcc.n	800099a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	461a      	mov	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d3ad      	bcc.n	8000976 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <SSD1306_Putc+0xfc>)
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <SSD1306_Putc+0xfc>)
 8000a2a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200006ec 	.word	0x200006ec

08000a3c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	4613      	mov	r3, r2
 8000a48:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a4a:	e012      	b.n	8000a72 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff71 	bl	800093c <SSD1306_Putc>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d002      	beq.n	8000a6c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	e008      	b.n	8000a7e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1e8      	bne.n	8000a4c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fec8 	bl	8000820 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000a90:	f7ff fe98 	bl	80007c4 <SSD1306_UpdateScreen>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <ssd1306_I2C_Init+0x24>)
 8000aa0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000aa2:	e002      	b.n	8000aaa <ssd1306_I2C_Init+0x12>
		p--;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f9      	bne.n	8000aa4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	0003d090 	.word	0x0003d090

08000ac0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b0c7      	sub	sp, #284	; 0x11c
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4639      	mov	r1, r7
 8000acc:	600a      	str	r2, [r1, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	4622      	mov	r2, r4
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	1dbb      	adds	r3, r7, #6
 8000ad8:	4602      	mov	r2, r0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	460a      	mov	r2, r1
 8000ae0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	1dba      	adds	r2, r7, #6
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000af2:	e010      	b.n	8000b16 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000af4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000af8:	463a      	mov	r2, r7
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	441a      	add	r2, r3
 8000afe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b02:	3301      	adds	r3, #1
 8000b04:	7811      	ldrb	r1, [r2, #0]
 8000b06:	f107 020c 	add.w	r2, r7, #12
 8000b0a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b0c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b10:	3301      	adds	r3, #1
 8000b12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	1d3a      	adds	r2, r7, #4
 8000b1e:	8812      	ldrh	r2, [r2, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8e7      	bhi.n	8000af4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b298      	uxth	r0, r3
 8000b32:	f107 020c 	add.w	r2, r7, #12
 8000b36:	230a      	movs	r3, #10
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <ssd1306_I2C_WriteMulti+0x8c>)
 8000b3e:	f000 fd63 	bl	8001608 <HAL_I2C_Master_Transmit>
}
 8000b42:	bf00      	nop
 8000b44:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	2000140c 	.word	0x2000140c

08000b50 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	71bb      	strb	r3, [r7, #6]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b66:	797b      	ldrb	r3, [r7, #5]
 8000b68:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	b299      	uxth	r1, r3
 8000b6e:	f107 020c 	add.w	r2, r7, #12
 8000b72:	230a      	movs	r3, #10
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2302      	movs	r3, #2
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <ssd1306_I2C_Write+0x38>)
 8000b7a:	f000 fd45 	bl	8001608 <HAL_I2C_Master_Transmit>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000140c 	.word	0x2000140c

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <HAL_I2C_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c2a:	f000 fab5 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2019      	movs	r0, #25
 8000c72:	f000 fa67 	bl	8001144 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c76:	2019      	movs	r0, #25
 8000c78:	f000 fa80 	bl	800117c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_InitTick+0x9c>)
 8000c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_InitTick+0x9c>)
 8000c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c86:	6613      	str	r3, [r2, #96]	; 0x60
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_InitTick+0x9c>)
 8000c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c94:	f107 0210 	add.w	r2, r7, #16
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fe92 	bl	80029c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca4:	f001 fe7a 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8000ca8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_InitTick+0xa0>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	0c9b      	lsrs	r3, r3, #18
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cda:	f002 fbb7 	bl	800344c <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d104      	bne.n	8000cee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <HAL_InitTick+0xa4>)
 8000ce6:	f002 fc13 	bl	8003510 <HAL_TIM_Base_Start_IT>
 8000cea:	4603      	mov	r3, r0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	20001460 	.word	0x20001460
 8000d04:	40012c00 	.word	0x40012c00

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d42:	f002 fc55 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20001460 	.word	0x20001460

08000d50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
	}

return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f004 f804 	bl	8004e30 <__errno>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20018000 	.word	0x20018000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200006f4 	.word	0x200006f4
 8000e5c:	200014b8 	.word	0x200014b8

08000e60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <SystemInit+0x64>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <SystemInit+0x64>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <SystemInit+0x68>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <SystemInit+0x68>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <SystemInit+0x68>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <SystemInit+0x68>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <SystemInit+0x68>)
 8000e8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <SystemInit+0x68>)
 8000e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SystemInit+0x68>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <SystemInit+0x68>)
 8000ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <SystemInit+0x68>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SystemInit+0x64>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff ffc6 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <LoopForever+0x16>)
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 ff9f 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff f9f9 	bl	80002f4 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f08:	08006b4c 	.word	0x08006b4c
	ldr	r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f10:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000f14:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000f18:	200014b4 	.word	0x200014b4

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>

08000f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f900 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fe94 	bl	8000c5c <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e001      	b.n	8000f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f40:	f7ff fe24 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000010 	.word	0x20000010
 8000f74:	200014ac 	.word	0x200014ac

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200014ac 	.word	0x200014ac

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_Delay+0x40>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000010 	.word	0x20000010

08000fd4 <__NVIC_SetPriorityGrouping>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001156:	f7ff ff61 	bl	800101c <__NVIC_GetPriorityGrouping>
 800115a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f7ff ffb1 	bl	80010c8 <NVIC_EncodePriority>
 8001166:	4602      	mov	r2, r0
 8001168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff80 	bl	8001074 <__NVIC_SetPriority>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff54 	bl	8001038 <__NVIC_EnableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e17f      	b.n	80014a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8171 	beq.w	80014a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d00b      	beq.n	80011e0 <HAL_GPIO_Init+0x48>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d130      	bne.n	8001242 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001216:	2201      	movs	r2, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	f003 0201 	and.w	r2, r3, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b03      	cmp	r3, #3
 800124c:	d118      	bne.n	8001280 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001254:	2201      	movs	r2, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	f003 0201 	and.w	r2, r3, #1
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x128>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b12      	cmp	r3, #18
 80012be:	d123      	bne.n	8001308 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	6939      	ldr	r1, [r7, #16]
 8001304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80ac 	beq.w	80014a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	4b5e      	ldr	r3, [pc, #376]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	4a5d      	ldr	r2, [pc, #372]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6613      	str	r3, [r2, #96]	; 0x60
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001362:	4a59      	ldr	r2, [pc, #356]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800138c:	d025      	beq.n	80013da <HAL_GPIO_Init+0x242>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x334>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d01f      	beq.n	80013d6 <HAL_GPIO_Init+0x23e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x338>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d019      	beq.n	80013d2 <HAL_GPIO_Init+0x23a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x33c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0x236>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x340>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00d      	beq.n	80013ca <HAL_GPIO_Init+0x232>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_GPIO_Init+0x344>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x22e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <HAL_GPIO_Init+0x348>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_GPIO_Init+0x22a>
 80013be:	2306      	movs	r3, #6
 80013c0:	e00c      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00a      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x244>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ec:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_GPIO_Init+0x330>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f47f ae78 	bne.w	80011a8 <HAL_GPIO_Init+0x10>
  }
}
 80014b8:	bf00      	nop
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000c00 	.word	0x48000c00
 80014d8:	48001000 	.word	0x48001000
 80014dc:	48001400 	.word	0x48001400
 80014e0:	48001800 	.word	0x48001800
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e081      	b.n	80015fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fb60 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2224      	movs	r2, #36	; 0x24
 8001518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	e006      	b.n	8001570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800156e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d104      	bne.n	8001582 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001594:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	ea42 0103 	orr.w	r1, r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	021a      	lsls	r2, r3, #8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69d9      	ldr	r1, [r3, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af02      	add	r7, sp, #8
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	461a      	mov	r2, r3
 8001614:	460b      	mov	r3, r1
 8001616:	817b      	strh	r3, [r7, #10]
 8001618:	4613      	mov	r3, r2
 800161a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b20      	cmp	r3, #32
 8001626:	f040 80da 	bne.w	80017de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_I2C_Master_Transmit+0x30>
 8001634:	2302      	movs	r3, #2
 8001636:	e0d3      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1d8>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001640:	f7ff fc9a 	bl	8000f78 <HAL_GetTick>
 8001644:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2319      	movs	r3, #25
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f9f7 	bl	8001a46 <I2C_WaitOnFlagUntilTimeout>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0be      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2221      	movs	r2, #33	; 0x21
 8001666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2210      	movs	r2, #16
 800166e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	893a      	ldrh	r2, [r7, #8]
 8001682:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168e:	b29b      	uxth	r3, r3
 8001690:	2bff      	cmp	r3, #255	; 0xff
 8001692:	d90e      	bls.n	80016b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	8979      	ldrh	r1, [r7, #10]
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 faee 	bl	8001c8c <I2C_TransferConfig>
 80016b0:	e06c      	b.n	800178c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	8979      	ldrh	r1, [r7, #10]
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 fadd 	bl	8001c8c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80016d2:	e05b      	b.n	800178c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	6a39      	ldr	r1, [r7, #32]
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f9f4 	bl	8001ac6 <I2C_WaitOnTXISFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e07b      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d034      	beq.n	800178c <HAL_I2C_Master_Transmit+0x184>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	2b00      	cmp	r3, #0
 8001728:	d130      	bne.n	800178c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f986 	bl	8001a46 <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e04d      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d90e      	bls.n	800176c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	b2da      	uxtb	r2, r3
 800175a:	8979      	ldrh	r1, [r7, #10]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fa91 	bl	8001c8c <I2C_TransferConfig>
 800176a:	e00f      	b.n	800178c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	b2da      	uxtb	r2, r3
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fa80 	bl	8001c8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d19e      	bne.n	80016d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	6a39      	ldr	r1, [r7, #32]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f9d3 	bl	8001b46 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e01a      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_I2C_Master_Transmit+0x1e4>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	80002000 	.word	0x80002000
 80017ec:	fe00e800 	.word	0xfe00e800

080017f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	460b      	mov	r3, r1
 80017fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b20      	cmp	r3, #32
 800180e:	f040 80f1 	bne.w	80019f4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001820:	d101      	bne.n	8001826 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001822:	2302      	movs	r3, #2
 8001824:	e0e7      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_I2C_IsDeviceReady+0x44>
 8001830:	2302      	movs	r3, #2
 8001832:	e0e0      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_I2C_IsDeviceReady+0x72>
 8001852:	897b      	ldrh	r3, [r7, #10]
 8001854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001860:	e004      	b.n	800186c <HAL_I2C_IsDeviceReady+0x7c>
 8001862:	897b      	ldrh	r3, [r7, #10]
 8001864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001868:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001872:	f7ff fb81 	bl	8000f78 <HAL_GetTick>
 8001876:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	2b20      	cmp	r3, #32
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b10      	cmp	r3, #16
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018a4:	e034      	b.n	8001910 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d01a      	beq.n	80018e4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018ae:	f7ff fb63 	bl	8000f78 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d302      	bcc.n	80018c4 <HAL_I2C_IsDeviceReady+0xd4>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10f      	bne.n	80018e4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f043 0220 	orr.w	r2, r3, #32
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e088      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b10      	cmp	r3, #16
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_I2C_IsDeviceReady+0x12c>
 8001916:	7fbb      	ldrb	r3, [r7, #30]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0c4      	beq.n	80018a6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b10      	cmp	r3, #16
 8001928:	d01a      	beq.n	8001960 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	2120      	movs	r1, #32
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f886 	bl	8001a46 <I2C_WaitOnFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e058      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2220      	movs	r2, #32
 800194a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e04a      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	2120      	movs	r1, #32
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f86b 	bl	8001a46 <I2C_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e03d      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2210      	movs	r2, #16
 8001980:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2220      	movs	r2, #32
 8001988:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	d118      	bne.n	80019c4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2120      	movs	r1, #32
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f84a 	bl	8001a46 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e01c      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2220      	movs	r2, #32
 80019c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	f63f af3b 	bhi.w	800184a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f043 0220 	orr.w	r2, r3, #32
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80019f4:	2302      	movs	r3, #2
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d103      	bne.n	8001a1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d007      	beq.n	8001a3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	619a      	str	r2, [r3, #24]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a56:	e022      	b.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5e:	d01e      	beq.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a60:	f7ff fa8a 	bl	8000f78 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d302      	bcc.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f043 0220 	orr.w	r2, r3, #32
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d0cd      	beq.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad2:	e02c      	b.n	8001b2e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f871 	bl	8001bc0 <I2C_IsAcknowledgeFailed>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e02a      	b.n	8001b3e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aee:	d01e      	beq.n	8001b2e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af0:	f7ff fa42 	bl	8000f78 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d302      	bcc.n	8001b06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d113      	bne.n	8001b2e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e007      	b.n	8001b3e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d1cb      	bne.n	8001ad4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b52:	e028      	b.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f831 	bl	8001bc0 <I2C_IsAcknowledgeFailed>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e026      	b.n	8001bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b68:	f7ff fa06 	bl	8000f78 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d302      	bcc.n	8001b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d113      	bne.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f043 0220 	orr.w	r2, r3, #32
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e007      	b.n	8001bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d1cf      	bne.n	8001b54 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d151      	bne.n	8001c7e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bda:	e022      	b.n	8001c22 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d01e      	beq.n	8001c22 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff f9c8 	bl	8000f78 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <I2C_IsAcknowledgeFailed+0x3a>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d113      	bne.n	8001c22 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e02e      	b.n	8001c80 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d1d5      	bne.n	8001bdc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2210      	movs	r2, #16
 8001c36:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7ff fedc 	bl	80019fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c52:	400b      	ands	r3, r1
 8001c54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	fe00e800 	.word	0xfe00e800

08001c8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	817b      	strh	r3, [r7, #10]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	0d5b      	lsrs	r3, r3, #21
 8001ca8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <I2C_TransferConfig+0x58>)
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	ea02 0103 	and.w	r1, r2, r3
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cbc:	7a7b      	ldrb	r3, [r7, #9]
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	03ff63ff 	.word	0x03ff63ff

08001ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d138      	bne.n	8001d70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e032      	b.n	8001d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d139      	bne.n	8001e08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e033      	b.n	8001e0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2224      	movs	r2, #36	; 0x24
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40007000 	.word	0x40007000

08001e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e42:	d130      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d038      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2232      	movs	r2, #50	; 0x32
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0c9b      	lsrs	r3, r3, #18
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e78:	e002      	b.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d102      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f2      	bne.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea0:	d110      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e00f      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb2:	d007      	beq.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e3d4      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef2:	4ba1      	ldr	r3, [pc, #644]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efc:	4b9e      	ldr	r3, [pc, #632]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80e4 	beq.w	80020dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4a>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	f040 808b 	bne.w	8002038 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	f040 8087 	bne.w	8002038 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2a:	4b93      	ldr	r3, [pc, #588]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e3ac      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_RCC_OscConfig+0x7c>
 8001f52:	4b89      	ldr	r3, [pc, #548]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5a:	e005      	b.n	8001f68 <HAL_RCC_OscConfig+0x88>
 8001f5c:	4b86      	ldr	r3, [pc, #536]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d223      	bcs.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fd5b 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e38d      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7c      	ldr	r2, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4977      	ldr	r1, [pc, #476]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9e:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	4972      	ldr	r1, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
 8001fb2:	e025      	b.n	8002000 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb4:	4b70      	ldr	r3, [pc, #448]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6f      	ldr	r2, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	496a      	ldr	r1, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd2:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	4965      	ldr	r1, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fd1b 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e34d      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002000:	f000 fc36 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8002004:	4601      	mov	r1, r0
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x29c>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa21 f303 	lsr.w	r3, r1, r3
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x2a0>)
 800201e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_RCC_OscConfig+0x2a4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fe19 	bl	8000c5c <HAL_InitTick>
 800202a:	4603      	mov	r3, r0
 800202c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d052      	beq.n	80020da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	e331      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204c:	f7fe ff94 	bl	8000f78 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002054:	f7fe ff90 	bl	8000f78 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e31a      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002066:	4b44      	ldr	r3, [pc, #272]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a40      	ldr	r2, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	493b      	ldr	r1, [pc, #236]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	4936      	ldr	r1, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e01a      	b.n	80020dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b2:	f7fe ff61 	bl	8000f78 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ba:	f7fe ff5d 	bl	8000f78 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e2e7      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x1da>
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d074      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x21a>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d10e      	bne.n	8002112 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d10b      	bne.n	8002112 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d064      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d160      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e2c4      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x24a>
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a15      	ldr	r2, [pc, #84]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e01d      	b.n	8002166 <HAL_RCC_OscConfig+0x286>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x26e>
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800213a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x286>
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x298>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7fe ff03 	bl	8000f78 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002174:	e011      	b.n	800219a <HAL_RCC_OscConfig+0x2ba>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	08006a64 	.word	0x08006a64
 8002180:	20000008 	.word	0x20000008
 8002184:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fef6 	bl	8000f78 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e280      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	4baf      	ldr	r3, [pc, #700]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x2a8>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fee6 	bl	8000f78 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe fee2 	bl	8000f78 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e26c      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c2:	4ba5      	ldr	r3, [pc, #660]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2d0>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d060      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x310>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d119      	bne.n	800221e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d116      	bne.n	800221e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b99      	ldr	r3, [pc, #612]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x328>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e249      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b93      	ldr	r3, [pc, #588]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4990      	ldr	r1, [pc, #576]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	e040      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002226:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a8b      	ldr	r2, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fea1 	bl	8000f78 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7fe fe9d 	bl	8000f78 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e227      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224c:	4b82      	ldr	r3, [pc, #520]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b7f      	ldr	r3, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	497c      	ldr	r1, [pc, #496]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e018      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a79      	ldr	r2, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fe7d 	bl	8000f78 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7fe fe79 	bl	8000f78 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e203      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002294:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03c      	beq.n	8002326 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01c      	beq.n	80022ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ba:	4a67      	ldr	r2, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fe58 	bl	8000f78 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe fe54 	bl	8000f78 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1de      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022de:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCC_OscConfig+0x3ec>
 80022ec:	e01b      	b.n	8002326 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fe3b 	bl	8000f78 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fe37 	bl	8000f78 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1c1      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80a6 	beq.w	8002480 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002338:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a43      	ldr	r2, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002360:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d118      	bne.n	800239e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800236c:	4b3b      	ldr	r3, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002378:	f7fe fdfe 	bl	8000f78 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7fe fdfa 	bl	8000f78 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e184      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_RCC_OscConfig+0x57c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4d8>
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b6:	e024      	b.n	8002402 <HAL_RCC_OscConfig+0x522>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d110      	bne.n	80023e2 <HAL_RCC_OscConfig+0x502>
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e0:	e00f      	b.n	8002402 <HAL_RCC_OscConfig+0x522>
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	4a17      	ldr	r2, [pc, #92]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe fdb5 	bl	8000f78 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fdb1 	bl	8000f78 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e139      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_OscConfig+0x578>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ed      	beq.n	8002412 <HAL_RCC_OscConfig+0x532>
 8002436:	e01a      	b.n	800246e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fd9e 	bl	8000f78 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800243e:	e00f      	b.n	8002460 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe fd9a 	bl	8000f78 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d906      	bls.n	8002460 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e122      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002460:	4b90      	ldr	r3, [pc, #576]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e8      	bne.n	8002440 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b8b      	ldr	r3, [pc, #556]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a8a      	ldr	r2, [pc, #552]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 800247a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8108 	beq.w	800269a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	2b02      	cmp	r3, #2
 8002490:	f040 80d0 	bne.w	8002634 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002494:	4b83      	ldr	r3, [pc, #524]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0203 	and.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d130      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	3b01      	subs	r3, #1
 80024b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d127      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d11f      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024d4:	2a07      	cmp	r2, #7
 80024d6:	bf14      	ite	ne
 80024d8:	2201      	movne	r2, #1
 80024da:	2200      	moveq	r2, #0
 80024dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d109      	bne.n	800250a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d06e      	beq.n	80025e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d069      	beq.n	80025e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002510:	4b64      	ldr	r3, [pc, #400]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b7      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002538:	f7fe fd1e 	bl	8000f78 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fd1a 	bl	8000f78 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0a4      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255e:	4b51      	ldr	r3, [pc, #324]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b51      	ldr	r3, [pc, #324]	; (80026a8 <HAL_RCC_OscConfig+0x7c8>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800256e:	3a01      	subs	r2, #1
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002578:	0212      	lsls	r2, r2, #8
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002580:	0852      	lsrs	r2, r2, #1
 8002582:	3a01      	subs	r2, #1
 8002584:	0552      	lsls	r2, r2, #21
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258c:	0852      	lsrs	r2, r2, #1
 800258e:	3a01      	subs	r2, #1
 8002590:	0652      	lsls	r2, r2, #25
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002598:	0912      	lsrs	r2, r2, #4
 800259a:	0452      	lsls	r2, r2, #17
 800259c:	430a      	orrs	r2, r1
 800259e:	4941      	ldr	r1, [pc, #260]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025bc:	f7fe fcdc 	bl	8000f78 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fcd8 	bl	8000f78 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e062      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e2:	e05a      	b.n	800269a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e059      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d152      	bne.n	800269a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800260c:	f7fe fcb4 	bl	8000f78 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fcb0 	bl	8000f78 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e03a      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x734>
 8002632:	e032      	b.n	800269a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d02d      	beq.n	8002696 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002644:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002658:	f023 0303 	bic.w	r3, r3, #3
 800265c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 8002664:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fc83 	bl	8000f78 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fc7f 	bl	8000f78 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_OscConfig+0x7c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x796>
 8002694:	e001      	b.n	800269a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	f99d808c 	.word	0xf99d808c

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0c8      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	4961      	ldr	r1, [pc, #388]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0b0      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04c      	beq.n	8002796 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d107      	bne.n	8002714 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002704:	4b56      	ldr	r3, [pc, #344]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d121      	bne.n	8002754 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e09e      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d107      	bne.n	800272c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d115      	bne.n	8002754 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e092      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002734:	4b4a      	ldr	r3, [pc, #296]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e086      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e07e      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 0203 	bic.w	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	493f      	ldr	r1, [pc, #252]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002766:	f7fe fc07 	bl	8000f78 <HAL_GetTick>
 800276a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276c:	e00a      	b.n	8002784 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7fe fc03 	bl	8000f78 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e066      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 020c 	and.w	r2, r3, #12
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	429a      	cmp	r2, r3
 8002794:	d1eb      	bne.n	800276e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a2:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	492c      	ldr	r1, [pc, #176]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d210      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4924      	ldr	r1, [pc, #144]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_ClockConfig+0x1b0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e036      	b.n	8002852 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4918      	ldr	r1, [pc, #96]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4910      	ldr	r1, [pc, #64]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002822:	f000 f825 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8002826:	4601      	mov	r1, r0
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	fa21 f303 	lsr.w	r3, r1, r3
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fa08 	bl	8000c5c <HAL_InitTick>
 800284c:	4603      	mov	r3, r0
 800284e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002850:	7afb      	ldrb	r3, [r7, #11]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000
 8002860:	40021000 	.word	0x40021000
 8002864:	08006a64 	.word	0x08006a64
 8002868:	20000008 	.word	0x20000008
 800286c:	2000000c 	.word	0x2000000c

08002870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d121      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d11e      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028a4:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e005      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028c0:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e004      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_GetSysClockFreq+0x110>)
 80028f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d133      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0xa4>
 800290e:	2b03      	cmp	r3, #3
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0xaa>
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002916:	617b      	str	r3, [r7, #20]
      break;
 8002918:	e005      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800291a:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_GetSysClockFreq+0x110>)
 800291c:	617b      	str	r3, [r7, #20]
      break;
 800291e:	e002      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	617b      	str	r3, [r7, #20]
      break;
 8002924:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	3301      	adds	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	fb02 f203 	mul.w	r2, r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_GetSysClockFreq+0x104>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0e5b      	lsrs	r3, r3, #25
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	3301      	adds	r3, #1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002966:	69bb      	ldr	r3, [r7, #24]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3724      	adds	r7, #36	; 0x24
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40021000 	.word	0x40021000
 8002978:	08006a7c 	.word	0x08006a7c
 800297c:	00f42400 	.word	0x00f42400
 8002980:	007a1200 	.word	0x007a1200

08002984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000008 	.word	0x20000008

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029a0:	f7ff fff0 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a4:	4601      	mov	r1, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08006a74 	.word	0x08006a74

080029c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	220f      	movs	r2, #15
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_GetClockConfig+0x5c>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a0a:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCC_GetClockConfig+0x60>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0207 	and.w	r2, r3, #7
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	601a      	str	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40022000 	.word	0x40022000

08002a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a44:	f7ff f9e8 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 8002a48:	6178      	str	r0, [r7, #20]
 8002a4a:	e014      	b.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	; 0x58
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a64:	f7ff f9d8 	bl	8001e18 <HAL_PWREx_GetVoltageRange>
 8002a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7c:	d10b      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d919      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2ba0      	cmp	r3, #160	; 0xa0
 8002a88:	d902      	bls.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e013      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2301      	movs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e010      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d902      	bls.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e00a      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d102      	bne.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e004      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b70      	cmp	r3, #112	; 0x70
 8002ab2:	d101      	bne.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d001      	beq.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af4:	2300      	movs	r3, #0
 8002af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af8:	2300      	movs	r3, #0
 8002afa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d03f      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b10:	d01c      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b16:	d802      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00e      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002b1c:	e01f      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b22:	d003      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b28:	d01c      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002b2a:	e018      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2c:	4b85      	ldr	r3, [pc, #532]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a84      	ldr	r2, [pc, #528]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b38:	e015      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fab9 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4a:	e00c      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3320      	adds	r3, #32
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fba0 	bl	8003298 <RCCEx_PLLSAI2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b5c:	e003      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	74fb      	strb	r3, [r7, #19]
      break;
 8002b62:	e000      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6c:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7a:	4972      	ldr	r1, [pc, #456]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03f      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d01c      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba2:	d802      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ba8:	e01f      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002bb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bb4:	d01c      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002bb6:	e018      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bb8:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a61      	ldr	r2, [pc, #388]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fa73 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bd6:	e00c      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3320      	adds	r3, #32
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fb5a 	bl	8003298 <RCCEx_PLLSAI2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002be8:	e003      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	74fb      	strb	r3, [r7, #19]
      break;
 8002bee:	e000      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bf8:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c06:	494f      	ldr	r1, [pc, #316]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a0 	beq.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3a      	ldr	r2, [pc, #232]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c64:	f7fe f988 	bl	8000f78 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c6a:	e009      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fe f984 	bl	8000f78 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c7e:	e005      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d15c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01f      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe f943 	bl	8000f78 <HAL_GetTick>
 8002cf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf4:	e00b      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe f93f 	bl	8000f78 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d902      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d0c:	e006      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ec      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d3a:	e009      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	74bb      	strb	r3, [r7, #18]
 8002d40:	e006      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d50:	7c7b      	ldrb	r3, [r7, #17]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b9e      	ldr	r3, [pc, #632]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	4a9d      	ldr	r2, [pc, #628]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d6e:	4b98      	ldr	r3, [pc, #608]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f023 0203 	bic.w	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	4994      	ldr	r1, [pc, #592]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d90:	4b8f      	ldr	r3, [pc, #572]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f023 020c 	bic.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	498c      	ldr	r1, [pc, #560]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db2:	4b87      	ldr	r3, [pc, #540]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	4983      	ldr	r1, [pc, #524]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	497b      	ldr	r1, [pc, #492]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	4972      	ldr	r1, [pc, #456]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e18:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	496a      	ldr	r1, [pc, #424]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e3a:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	4961      	ldr	r1, [pc, #388]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e5c:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6a:	4959      	ldr	r1, [pc, #356]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	4950      	ldr	r1, [pc, #320]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	4948      	ldr	r1, [pc, #288]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ec2:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	493f      	ldr	r1, [pc, #252]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d028      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef2:	4937      	ldr	r1, [pc, #220]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f02:	d106      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0e:	60d3      	str	r3, [r2, #12]
 8002f10:	e011      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f8c8 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d028      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	491f      	ldr	r1, [pc, #124]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f62:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6c:	60d3      	str	r3, [r2, #12]
 8002f6e:	e011      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f899 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002f86:	4603      	mov	r3, r0
 8002f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	4908      	ldr	r1, [pc, #32]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbe:	d109      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fca:	60d3      	str	r3, [r2, #12]
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f867 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003012:	4928      	ldr	r1, [pc, #160]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003022:	d10d      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2102      	movs	r1, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f844 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d014      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	74bb      	strb	r3, [r7, #18]
 800303e:	e011      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3320      	adds	r3, #32
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f921 	bl	8003298 <RCCEx_PLLSAI2_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307e:	490d      	ldr	r1, [pc, #52]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a2:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000

080030b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c6:	4b73      	ldr	r3, [pc, #460]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030d2:	4b70      	ldr	r3, [pc, #448]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
       ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
       ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d044      	beq.n	8003188 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e041      	b.n	8003188 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d00c      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0x6e>
 800310c:	2b03      	cmp	r3, #3
 800310e:	d013      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x80>
 8003110:	2b01      	cmp	r3, #1
 8003112:	d120      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003114:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e01a      	b.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003126:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003136:	e013      	b.n	8003160 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003138:	4b56      	ldr	r3, [pc, #344]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10f      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003154:	e006      	b.n	8003164 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      break;
 800315a:	e004      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003164:	bf00      	nop
    }

    if(status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10d      	bne.n	8003188 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800316c:	4b49      	ldr	r3, [pc, #292]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	3b01      	subs	r3, #1
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	430b      	orrs	r3, r1
 8003182:	4944      	ldr	r1, [pc, #272]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d17d      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a40      	ldr	r2, [pc, #256]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003194:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319a:	f7fd feed 	bl	8000f78 <HAL_GetTick>
 800319e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a0:	e009      	b.n	80031b6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a2:	f7fd fee9 	bl	8000f78 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d902      	bls.n	80031b6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	73fb      	strb	r3, [r7, #15]
        break;
 80031b4:	e005      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ef      	bne.n	80031a2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d160      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d111      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	0211      	lsls	r1, r2, #8
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68d2      	ldr	r2, [r2, #12]
 80031e4:	0912      	lsrs	r2, r2, #4
 80031e6:	0452      	lsls	r2, r2, #17
 80031e8:	430a      	orrs	r2, r1
 80031ea:	492a      	ldr	r1, [pc, #168]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	610b      	str	r3, [r1, #16]
 80031f0:	e027      	b.n	8003242 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d112      	bne.n	800321e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6912      	ldr	r2, [r2, #16]
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	0552      	lsls	r2, r2, #21
 8003214:	430a      	orrs	r2, r1
 8003216:	491f      	ldr	r1, [pc, #124]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	610b      	str	r3, [r1, #16]
 800321c:	e011      	b.n	8003242 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	0211      	lsls	r1, r2, #8
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6952      	ldr	r2, [r2, #20]
 8003234:	0852      	lsrs	r2, r2, #1
 8003236:	3a01      	subs	r2, #1
 8003238:	0652      	lsls	r2, r2, #25
 800323a:	430a      	orrs	r2, r1
 800323c:	4915      	ldr	r1, [pc, #84]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800324c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fd fe93 	bl	8000f78 <HAL_GetTick>
 8003252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003254:	e009      	b.n	800326a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003256:	f7fd fe8f 	bl	8000f78 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d902      	bls.n	800326a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	73fb      	strb	r3, [r7, #15]
          break;
 8003268:	e005      	b.n	8003276 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0ef      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000

08003298 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032a6:	4b68      	ldr	r3, [pc, #416]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0203 	and.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d10d      	bne.n	80032de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
       ||
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032ca:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
       ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d044      	beq.n	8003368 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	e041      	b.n	8003368 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d00c      	beq.n	8003306 <RCCEx_PLLSAI2_Config+0x6e>
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d013      	beq.n	8003318 <RCCEx_PLLSAI2_Config+0x80>
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d120      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032f4:	4b54      	ldr	r3, [pc, #336]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11d      	bne.n	800333c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e01a      	b.n	800333c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003316:	e013      	b.n	8003340 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003318:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10f      	bne.n	8003344 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003324:	4b48      	ldr	r3, [pc, #288]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003334:	e006      	b.n	8003344 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      break;
 800333a:	e004      	b.n	8003346 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003344:	bf00      	nop
    }

    if(status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	3b01      	subs	r3, #1
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	430b      	orrs	r3, r1
 8003362:	4939      	ldr	r1, [pc, #228]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d167      	bne.n	800343e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a35      	ldr	r2, [pc, #212]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fd fdfd 	bl	8000f78 <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003380:	e009      	b.n	8003396 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003382:	f7fd fdf9 	bl	8000f78 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	73fb      	strb	r3, [r7, #15]
        break;
 8003394:	e005      	b.n	80033a2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ef      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d14a      	bne.n	800343e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d111      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	0211      	lsls	r1, r2, #8
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	0912      	lsrs	r2, r2, #4
 80033c6:	0452      	lsls	r2, r2, #17
 80033c8:	430a      	orrs	r2, r1
 80033ca:	491f      	ldr	r1, [pc, #124]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	614b      	str	r3, [r1, #20]
 80033d0:	e011      	b.n	80033f6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6892      	ldr	r2, [r2, #8]
 80033e2:	0211      	lsls	r1, r2, #8
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6912      	ldr	r2, [r2, #16]
 80033e8:	0852      	lsrs	r2, r2, #1
 80033ea:	3a01      	subs	r2, #1
 80033ec:	0652      	lsls	r2, r2, #25
 80033ee:	430a      	orrs	r2, r1
 80033f0:	4915      	ldr	r1, [pc, #84]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd fdb9 	bl	8000f78 <HAL_GetTick>
 8003406:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003408:	e009      	b.n	800341e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800340a:	f7fd fdb5 	bl	8000f78 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d902      	bls.n	800341e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	73fb      	strb	r3, [r7, #15]
          break;
 800341c:	e005      	b.n	800342a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ef      	beq.n	800340a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <RCCEx_PLLSAI2_Config+0x1b0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e049      	b.n	80034f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f841 	bl	80034fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 f9f8 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e04f      	b.n	80035c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x76>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d018      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x76>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x76>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x76>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x76>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x76>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d115      	bne.n	80035b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_TIM_Base_Start_IT+0xdc>)
 800358e:	4013      	ands	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d015      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0xb4>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359e:	d011      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e008      	b.n	80035c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	00010007 	.word	0x00010007

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f905 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8f7 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f908 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8db 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8cd 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8de 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8b1 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8a3 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8b4 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f887 	bl	8003842 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f879 	bl	800382e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f88a 	bl	8003856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0201 	mvn.w	r2, #1
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fc ff2e 	bl	80005d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f914 	bl	80039c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ae:	d10e      	bne.n	80037ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f907 	bl	80039dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d10e      	bne.n	80037fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f838 	bl	800386a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b20      	cmp	r3, #32
 8003806:	d10e      	bne.n	8003826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b20      	cmp	r3, #32
 8003814:	d107      	bne.n	8003826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f06f 0220 	mvn.w	r2, #32
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8c7 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a40      	ldr	r2, [pc, #256]	; (8003994 <TIM_Base_SetConfig+0x114>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d00f      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3d      	ldr	r2, [pc, #244]	; (8003998 <TIM_Base_SetConfig+0x118>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3c      	ldr	r2, [pc, #240]	; (800399c <TIM_Base_SetConfig+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3b      	ldr	r2, [pc, #236]	; (80039a0 <TIM_Base_SetConfig+0x120>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <TIM_Base_SetConfig+0x124>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <TIM_Base_SetConfig+0x114>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d01b      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	; (8003998 <TIM_Base_SetConfig+0x118>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d017      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <TIM_Base_SetConfig+0x11c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <TIM_Base_SetConfig+0x120>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <TIM_Base_SetConfig+0x124>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <TIM_Base_SetConfig+0x128>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a27      	ldr	r2, [pc, #156]	; (80039ac <TIM_Base_SetConfig+0x12c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <TIM_Base_SetConfig+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <TIM_Base_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0xf8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <TIM_Base_SetConfig+0x124>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0xf8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <TIM_Base_SetConfig+0x128>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <TIM_Base_SetConfig+0x12c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0xf8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <TIM_Base_SetConfig+0x130>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d103      	bne.n	8003980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	615a      	str	r2, [r3, #20]
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a02:	2b84      	cmp	r3, #132	; 0x84
 8003a04:	d005      	beq.n	8003a12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3303      	adds	r3, #3
 8003a10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a24:	f000 fada 	bl	8003fdc <vTaskStartScheduler>
  
  return osOK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a30:	b089      	sub	sp, #36	; 0x24
 8003a32:	af04      	add	r7, sp, #16
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <osThreadCreate+0x54>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01c      	beq.n	8003a82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685c      	ldr	r4, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681d      	ldr	r5, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691e      	ldr	r6, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ffc8 	bl	80039f0 <makeFreeRtosPriority>
 8003a60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a6a:	9202      	str	r2, [sp, #8]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	9100      	str	r1, [sp, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4632      	mov	r2, r6
 8003a74:	4629      	mov	r1, r5
 8003a76:	4620      	mov	r0, r4
 8003a78:	f000 f8ed 	bl	8003c56 <xTaskCreateStatic>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e01c      	b.n	8003abc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685c      	ldr	r4, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a8e:	b29e      	uxth	r6, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ffaa 	bl	80039f0 <makeFreeRtosPriority>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	4629      	mov	r1, r5
 8003aac:	4620      	mov	r0, r4
 8003aae:	f000 f92c 	bl	8003d0a <xTaskCreate>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003abc:	68fb      	ldr	r3, [r7, #12]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ac6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <osDelay+0x16>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	e000      	b.n	8003ade <osDelay+0x18>
 8003adc:	2301      	movs	r3, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fa48 	bl	8003f74 <vTaskDelay>
  
  return osOK;
 8003ae4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 0208 	add.w	r2, r3, #8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f04f 32ff 	mov.w	r2, #4294967295
 8003b06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f103 0208 	add.w	r2, r3, #8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d103      	bne.n	8003bb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e00c      	b.n	8003bca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e002      	b.n	8003bbe <vListInsert+0x2e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d2f6      	bcs.n	8003bb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6852      	ldr	r2, [r2, #4]
 8003c22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d103      	bne.n	8003c36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08e      	sub	sp, #56	; 0x38
 8003c5a:	af04      	add	r7, sp, #16
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	e7fe      	b.n	8003c7c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <xTaskCreateStatic+0x42>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e7fe      	b.n	8003c96 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c98:	2354      	movs	r3, #84	; 0x54
 8003c9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b54      	cmp	r3, #84	; 0x54
 8003ca0:	d009      	beq.n	8003cb6 <xTaskCreateStatic+0x60>
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e7fe      	b.n	8003cb4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01e      	beq.n	8003cfc <xTaskCreateStatic+0xa6>
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01b      	beq.n	8003cfc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9303      	str	r3, [sp, #12]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9302      	str	r3, [sp, #8]
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f850 	bl	8003d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cf6:	f000 f8d3 	bl	8003ea0 <prvAddNewTaskToReadyList>
 8003cfa:	e001      	b.n	8003d00 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d00:	697b      	ldr	r3, [r7, #20]
	}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3728      	adds	r7, #40	; 0x28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08c      	sub	sp, #48	; 0x30
 8003d0e:	af04      	add	r7, sp, #16
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 feb0 	bl	8004a84 <pvPortMalloc>
 8003d24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d2c:	2054      	movs	r0, #84	; 0x54
 8003d2e:	f000 fea9 	bl	8004a84 <pvPortMalloc>
 8003d32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d40:	e005      	b.n	8003d4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f000 ff60 	bl	8004c08 <vPortFree>
 8003d48:	e001      	b.n	8003d4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d017      	beq.n	8003d84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9303      	str	r3, [sp, #12]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	9302      	str	r3, [sp, #8]
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f80e 	bl	8003d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d78:	69f8      	ldr	r0, [r7, #28]
 8003d7a:	f000 f891 	bl	8003ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e002      	b.n	8003d8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dac:	3b01      	subs	r3, #1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <prvInitialiseNewTask+0x46>
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e7fe      	b.n	8003dd8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01f      	beq.n	8003e20 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e012      	b.n	8003e0c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	7819      	ldrb	r1, [r3, #0]
 8003dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	3334      	adds	r3, #52	; 0x34
 8003df6:	460a      	mov	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d9e9      	bls.n	8003de6 <prvInitialiseNewTask+0x52>
 8003e12:	e000      	b.n	8003e16 <prvInitialiseNewTask+0x82>
			{
				break;
 8003e14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e1e:	e003      	b.n	8003e28 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d901      	bls.n	8003e32 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e2e:	2306      	movs	r3, #6
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2200      	movs	r2, #0
 8003e42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fe70 	bl	8003b2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	3318      	adds	r3, #24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fe6b 	bl	8003b2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	f1c3 0207 	rsb	r2, r3, #7
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	69b8      	ldr	r0, [r7, #24]
 8003e82:	f000 fbfd 	bl	8004680 <pxPortInitialiseStack>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e98:	bf00      	nop
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ea8:	f000 fd10 	bl	80048cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <prvAddNewTaskToReadyList+0xb8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <prvAddNewTaskToReadyList+0xb8>)
 8003eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <prvAddNewTaskToReadyList+0xbc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ebe:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <prvAddNewTaskToReadyList+0xbc>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ec4:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <prvAddNewTaskToReadyList+0xb8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d110      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ecc:	f000 fab8 	bl	8004440 <prvInitialiseTaskLists>
 8003ed0:	e00d      	b.n	8003eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <prvAddNewTaskToReadyList+0xc0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <prvAddNewTaskToReadyList+0xbc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d802      	bhi.n	8003eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <prvAddNewTaskToReadyList+0xbc>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eee:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <prvAddNewTaskToReadyList+0xc4>)
 8003ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <prvAddNewTaskToReadyList+0xc8>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <prvAddNewTaskToReadyList+0xcc>)
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f7ff fe11 	bl	8003b48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f26:	f000 fcff 	bl	8004928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <prvAddNewTaskToReadyList+0xc0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <prvAddNewTaskToReadyList+0xbc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <prvAddNewTaskToReadyList+0xd0>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	200007f8 	.word	0x200007f8
 8003f5c:	200006f8 	.word	0x200006f8
 8003f60:	20000804 	.word	0x20000804
 8003f64:	20000814 	.word	0x20000814
 8003f68:	20000800 	.word	0x20000800
 8003f6c:	200006fc 	.word	0x200006fc
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <vTaskDelay+0x60>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <vTaskDelay+0x2e>
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e7fe      	b.n	8003fa0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003fa2:	f000 f879 	bl	8004098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fb03 	bl	80045b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fae:	f000 f881 	bl	80040b4 <xTaskResumeAll>
 8003fb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <vTaskDelay+0x64>)
 8003fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000820 	.word	0x20000820
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fea:	463a      	mov	r2, r7
 8003fec:	1d39      	adds	r1, r7, #4
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc f93c 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	9202      	str	r2, [sp, #8]
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	2300      	movs	r3, #0
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2300      	movs	r3, #0
 8004008:	460a      	mov	r2, r1
 800400a:	491d      	ldr	r1, [pc, #116]	; (8004080 <vTaskStartScheduler+0xa4>)
 800400c:	481d      	ldr	r0, [pc, #116]	; (8004084 <vTaskStartScheduler+0xa8>)
 800400e:	f7ff fe22 	bl	8003c56 <xTaskCreateStatic>
 8004012:	4602      	mov	r2, r0
 8004014:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <vTaskStartScheduler+0xac>)
 8004016:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <vTaskStartScheduler+0xac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004020:	2301      	movs	r3, #1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e001      	b.n	800402a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d115      	bne.n	800405c <vTaskStartScheduler+0x80>
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <vTaskStartScheduler+0xb0>)
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <vTaskStartScheduler+0xb4>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <vTaskStartScheduler+0xb8>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004056:	f000 fb9b 	bl	8004790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800405a:	e00d      	b.n	8004078 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d109      	bne.n	8004078 <vTaskStartScheduler+0x9c>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e7fe      	b.n	8004076 <vTaskStartScheduler+0x9a>
}
 8004078:	bf00      	nop
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	08005d00 	.word	0x08005d00
 8004084:	08004411 	.word	0x08004411
 8004088:	2000081c 	.word	0x2000081c
 800408c:	20000818 	.word	0x20000818
 8004090:	20000804 	.word	0x20000804
 8004094:	200007fc 	.word	0x200007fc

08004098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <vTaskSuspendAll+0x18>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	4a03      	ldr	r2, [pc, #12]	; (80040b0 <vTaskSuspendAll+0x18>)
 80040a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000820 	.word	0x20000820

080040b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <xTaskResumeAll+0x114>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <xTaskResumeAll+0x2a>
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	e7fe      	b.n	80040dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040de:	f000 fbf5 	bl	80048cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <xTaskResumeAll+0x114>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4a37      	ldr	r2, [pc, #220]	; (80041c8 <xTaskResumeAll+0x114>)
 80040ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ec:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <xTaskResumeAll+0x114>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d161      	bne.n	80041b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040f4:	4b35      	ldr	r3, [pc, #212]	; (80041cc <xTaskResumeAll+0x118>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05d      	beq.n	80041b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040fc:	e02e      	b.n	800415c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fe:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <xTaskResumeAll+0x11c>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3318      	adds	r3, #24
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fd79 	bl	8003c02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3304      	adds	r3, #4
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fd74 	bl	8003c02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	2201      	movs	r2, #1
 8004120:	409a      	lsls	r2, r3
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <xTaskResumeAll+0x120>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <xTaskResumeAll+0x120>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <xTaskResumeAll+0x124>)
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7ff fd00 	bl	8003b48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <xTaskResumeAll+0x128>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <xTaskResumeAll+0x12c>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <xTaskResumeAll+0x11c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1cc      	bne.n	80040fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800416a:	f000 fa03 	bl	8004574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <xTaskResumeAll+0x130>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800417a:	f000 f837 	bl	80041ec <xTaskIncrementTick>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <xTaskResumeAll+0x12c>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3b01      	subs	r3, #1
 800418e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f1      	bne.n	800417a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <xTaskResumeAll+0x130>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800419c:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <xTaskResumeAll+0x12c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <xTaskResumeAll+0x134>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041b8:	f000 fbb6 	bl	8004928 <vPortExitCritical>

	return xAlreadyYielded;
 80041bc:	68bb      	ldr	r3, [r7, #8]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000820 	.word	0x20000820
 80041cc:	200007f8 	.word	0x200007f8
 80041d0:	200007b8 	.word	0x200007b8
 80041d4:	20000800 	.word	0x20000800
 80041d8:	200006fc 	.word	0x200006fc
 80041dc:	200006f8 	.word	0x200006f8
 80041e0:	2000080c 	.word	0x2000080c
 80041e4:	20000808 	.word	0x20000808
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f6:	4b4e      	ldr	r3, [pc, #312]	; (8004330 <xTaskIncrementTick+0x144>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f040 8087 	bne.w	800430e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004200:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <xTaskIncrementTick+0x148>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004208:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <xTaskIncrementTick+0x148>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11f      	bne.n	8004254 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004214:	4b48      	ldr	r3, [pc, #288]	; (8004338 <xTaskIncrementTick+0x14c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <xTaskIncrementTick+0x46>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	e7fe      	b.n	8004230 <xTaskIncrementTick+0x44>
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <xTaskIncrementTick+0x14c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	4b40      	ldr	r3, [pc, #256]	; (800433c <xTaskIncrementTick+0x150>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3e      	ldr	r2, [pc, #248]	; (8004338 <xTaskIncrementTick+0x14c>)
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4a3e      	ldr	r2, [pc, #248]	; (800433c <xTaskIncrementTick+0x150>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <xTaskIncrementTick+0x154>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a3c      	ldr	r2, [pc, #240]	; (8004340 <xTaskIncrementTick+0x154>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	f000 f990 	bl	8004574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004254:	4b3b      	ldr	r3, [pc, #236]	; (8004344 <xTaskIncrementTick+0x158>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	d348      	bcc.n	80042f0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425e:	4b36      	ldr	r3, [pc, #216]	; (8004338 <xTaskIncrementTick+0x14c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004268:	4b36      	ldr	r3, [pc, #216]	; (8004344 <xTaskIncrementTick+0x158>)
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	601a      	str	r2, [r3, #0]
					break;
 8004270:	e03e      	b.n	80042f0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004272:	4b31      	ldr	r3, [pc, #196]	; (8004338 <xTaskIncrementTick+0x14c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d203      	bcs.n	8004292 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800428a:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <xTaskIncrementTick+0x158>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004290:	e02e      	b.n	80042f0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3304      	adds	r3, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fcb3 	bl	8003c02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fcaa 	bl	8003c02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	2201      	movs	r2, #1
 80042b4:	409a      	lsls	r2, r3
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <xTaskIncrementTick+0x15c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <xTaskIncrementTick+0x15c>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <xTaskIncrementTick+0x160>)
 80042ce:	441a      	add	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7ff fc36 	bl	8003b48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <xTaskIncrementTick+0x164>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b9      	bcc.n	800425e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ee:	e7b6      	b.n	800425e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <xTaskIncrementTick+0x164>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4915      	ldr	r1, [pc, #84]	; (800434c <xTaskIncrementTick+0x160>)
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d907      	bls.n	8004318 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e004      	b.n	8004318 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <xTaskIncrementTick+0x168>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a0f      	ldr	r2, [pc, #60]	; (8004354 <xTaskIncrementTick+0x168>)
 8004316:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <xTaskIncrementTick+0x16c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000820 	.word	0x20000820
 8004334:	200007fc 	.word	0x200007fc
 8004338:	200007b0 	.word	0x200007b0
 800433c:	200007b4 	.word	0x200007b4
 8004340:	20000810 	.word	0x20000810
 8004344:	20000818 	.word	0x20000818
 8004348:	20000800 	.word	0x20000800
 800434c:	200006fc 	.word	0x200006fc
 8004350:	200006f8 	.word	0x200006f8
 8004354:	20000808 	.word	0x20000808
 8004358:	2000080c 	.word	0x2000080c

0800435c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004362:	4b26      	ldr	r3, [pc, #152]	; (80043fc <vTaskSwitchContext+0xa0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800436a:	4b25      	ldr	r3, [pc, #148]	; (8004400 <vTaskSwitchContext+0xa4>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004370:	e03e      	b.n	80043f0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <vTaskSwitchContext+0xa4>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <vTaskSwitchContext+0xa8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	f1c3 031f 	rsb	r3, r3, #31
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <vTaskSwitchContext+0xac>)
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e7fe      	b.n	80043b4 <vTaskSwitchContext+0x58>
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <vTaskSwitchContext+0xac>)
 80043c2:	4413      	add	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3308      	adds	r3, #8
 80043d8:	429a      	cmp	r2, r3
 80043da:	d104      	bne.n	80043e6 <vTaskSwitchContext+0x8a>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a07      	ldr	r2, [pc, #28]	; (800440c <vTaskSwitchContext+0xb0>)
 80043ee:	6013      	str	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000820 	.word	0x20000820
 8004400:	2000080c 	.word	0x2000080c
 8004404:	20000800 	.word	0x20000800
 8004408:	200006fc 	.word	0x200006fc
 800440c:	200006f8 	.word	0x200006f8

08004410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004418:	f000 f852 	bl	80044c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvIdleTask+0x28>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d9f9      	bls.n	8004418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <prvIdleTask+0x2c>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004434:	e7f0      	b.n	8004418 <prvIdleTask+0x8>
 8004436:	bf00      	nop
 8004438:	200006fc 	.word	0x200006fc
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	e00c      	b.n	8004466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <prvInitialiseTaskLists+0x60>)
 8004458:	4413      	add	r3, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fb47 	bl	8003aee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b06      	cmp	r3, #6
 800446a:	d9ef      	bls.n	800444c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800446c:	480d      	ldr	r0, [pc, #52]	; (80044a4 <prvInitialiseTaskLists+0x64>)
 800446e:	f7ff fb3e 	bl	8003aee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004472:	480d      	ldr	r0, [pc, #52]	; (80044a8 <prvInitialiseTaskLists+0x68>)
 8004474:	f7ff fb3b 	bl	8003aee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004478:	480c      	ldr	r0, [pc, #48]	; (80044ac <prvInitialiseTaskLists+0x6c>)
 800447a:	f7ff fb38 	bl	8003aee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800447e:	480c      	ldr	r0, [pc, #48]	; (80044b0 <prvInitialiseTaskLists+0x70>)
 8004480:	f7ff fb35 	bl	8003aee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004484:	480b      	ldr	r0, [pc, #44]	; (80044b4 <prvInitialiseTaskLists+0x74>)
 8004486:	f7ff fb32 	bl	8003aee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <prvInitialiseTaskLists+0x78>)
 800448c:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <prvInitialiseTaskLists+0x64>)
 800448e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <prvInitialiseTaskLists+0x7c>)
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <prvInitialiseTaskLists+0x68>)
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	200006fc 	.word	0x200006fc
 80044a4:	20000788 	.word	0x20000788
 80044a8:	2000079c 	.word	0x2000079c
 80044ac:	200007b8 	.word	0x200007b8
 80044b0:	200007cc 	.word	0x200007cc
 80044b4:	200007e4 	.word	0x200007e4
 80044b8:	200007b0 	.word	0x200007b0
 80044bc:	200007b4 	.word	0x200007b4

080044c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c6:	e019      	b.n	80044fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044c8:	f000 fa00 	bl	80048cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <prvCheckTasksWaitingTermination+0x4c>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fb92 	bl	8003c02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <prvCheckTasksWaitingTermination+0x50>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <prvCheckTasksWaitingTermination+0x50>)
 80044e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <prvCheckTasksWaitingTermination+0x54>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <prvCheckTasksWaitingTermination+0x54>)
 80044f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044f2:	f000 fa19 	bl	8004928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f80e 	bl	8004518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <prvCheckTasksWaitingTermination+0x54>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e1      	bne.n	80044c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	200007cc 	.word	0x200007cc
 8004510:	200007f8 	.word	0x200007f8
 8004514:	200007e0 	.word	0x200007e0

08004518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004526:	2b00      	cmp	r3, #0
 8004528:	d108      	bne.n	800453c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fb6a 	bl	8004c08 <vPortFree>
				vPortFree( pxTCB );
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fb67 	bl	8004c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800453a:	e017      	b.n	800456c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004542:	2b01      	cmp	r3, #1
 8004544:	d103      	bne.n	800454e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb5e 	bl	8004c08 <vPortFree>
	}
 800454c:	e00e      	b.n	800456c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004554:	2b02      	cmp	r3, #2
 8004556:	d009      	beq.n	800456c <prvDeleteTCB+0x54>
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e7fe      	b.n	800456a <prvDeleteTCB+0x52>
	}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <prvResetNextTaskUnblockTime+0x38>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004586:	f04f 32ff 	mov.w	r2, #4294967295
 800458a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800458c:	e008      	b.n	80045a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <prvResetNextTaskUnblockTime+0x38>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <prvResetNextTaskUnblockTime+0x3c>)
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	200007b0 	.word	0x200007b0
 80045b0:	20000818 	.word	0x20000818

080045b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c4:	4b28      	ldr	r3, [pc, #160]	; (8004668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fb19 	bl	8003c02 <uxListRemove>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	2201      	movs	r2, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43da      	mvns	r2, r3
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <prvAddCurrentTaskToDelayedList+0xb8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4013      	ands	r3, r2
 80045ea:	4a20      	ldr	r2, [pc, #128]	; (800466c <prvAddCurrentTaskToDelayedList+0xb8>)
 80045ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d10a      	bne.n	800460c <prvAddCurrentTaskToDelayedList+0x58>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	481a      	ldr	r0, [pc, #104]	; (8004670 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004606:	f7ff fa9f 	bl	8003b48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800460a:	e026      	b.n	800465a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	429a      	cmp	r2, r3
 8004622:	d209      	bcs.n	8004638 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7ff faad 	bl	8003b90 <vListInsert>
}
 8004636:	e010      	b.n	800465a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <prvAddCurrentTaskToDelayedList+0xc4>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3304      	adds	r3, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f7ff faa3 	bl	8003b90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <prvAddCurrentTaskToDelayedList+0xc8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	429a      	cmp	r2, r3
 8004652:	d202      	bcs.n	800465a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004654:	4a09      	ldr	r2, [pc, #36]	; (800467c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6013      	str	r3, [r2, #0]
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200007fc 	.word	0x200007fc
 8004668:	200006f8 	.word	0x200006f8
 800466c:	20000800 	.word	0x20000800
 8004670:	200007e4 	.word	0x200007e4
 8004674:	200007b4 	.word	0x200007b4
 8004678:	200007b0 	.word	0x200007b0
 800467c:	20000818 	.word	0x20000818

08004680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b04      	subs	r3, #4
 8004690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b04      	subs	r3, #4
 800469e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <pxPortInitialiseStack+0x64>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b14      	subs	r3, #20
 80046ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b04      	subs	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f06f 0202 	mvn.w	r2, #2
 80046ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b20      	subs	r3, #32
 80046d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	080046e9 	.word	0x080046e9

080046e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <prvTaskExitError+0x50>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d009      	beq.n	8004710 <prvTaskExitError+0x28>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e7fe      	b.n	800470e <prvTaskExitError+0x26>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004722:	bf00      	nop
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0fc      	beq.n	8004724 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000014 	.word	0x20000014
 800473c:	00000000 	.word	0x00000000

08004740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <pxCurrentTCBConst2>)
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	f380 8809 	msr	PSP, r0
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8811 	msr	BASEPRI, r0
 800475a:	4770      	bx	lr
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst2>:
 8004760:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004768:	4808      	ldr	r0, [pc, #32]	; (800478c <prvPortStartFirstTask+0x24>)
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f380 8808 	msr	MSP, r0
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8814 	msr	CONTROL, r0
 800477a:	b662      	cpsie	i
 800477c:	b661      	cpsie	f
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	df00      	svc	0
 8004788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800478a:	bf00      	nop
 800478c:	e000ed08 	.word	0xe000ed08

08004790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004796:	4b44      	ldr	r3, [pc, #272]	; (80048a8 <xPortStartScheduler+0x118>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a44      	ldr	r2, [pc, #272]	; (80048ac <xPortStartScheduler+0x11c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d109      	bne.n	80047b4 <xPortStartScheduler+0x24>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e7fe      	b.n	80047b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047b4:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <xPortStartScheduler+0x118>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <xPortStartScheduler+0x120>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d109      	bne.n	80047d2 <xPortStartScheduler+0x42>
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e7fe      	b.n	80047d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047d2:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <xPortStartScheduler+0x124>)
 80047d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <xPortStartScheduler+0x128>)
 80047f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <xPortStartScheduler+0x12c>)
 80047fc:	2207      	movs	r2, #7
 80047fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004800:	e009      	b.n	8004816 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <xPortStartScheduler+0x12c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3b01      	subs	r3, #1
 8004808:	4a2c      	ldr	r2, [pc, #176]	; (80048bc <xPortStartScheduler+0x12c>)
 800480a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d0ef      	beq.n	8004802 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004822:	4b26      	ldr	r3, [pc, #152]	; (80048bc <xPortStartScheduler+0x12c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f1c3 0307 	rsb	r3, r3, #7
 800482a:	2b04      	cmp	r3, #4
 800482c:	d009      	beq.n	8004842 <xPortStartScheduler+0xb2>
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	e7fe      	b.n	8004840 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004842:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <xPortStartScheduler+0x12c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <xPortStartScheduler+0x12c>)
 800484a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <xPortStartScheduler+0x12c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <xPortStartScheduler+0x12c>)
 8004856:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <xPortStartScheduler+0x130>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <xPortStartScheduler+0x130>)
 8004866:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800486a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800486c:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <xPortStartScheduler+0x130>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <xPortStartScheduler+0x130>)
 8004872:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004876:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004878:	f000 f8d6 	bl	8004a28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <xPortStartScheduler+0x134>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004882:	f000 f8f5 	bl	8004a70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <xPortStartScheduler+0x138>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <xPortStartScheduler+0x138>)
 800488c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004890:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004892:	f7ff ff69 	bl	8004768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004896:	f7ff fd61 	bl	800435c <vTaskSwitchContext>
	prvTaskExitError();
 800489a:	f7ff ff25 	bl	80046e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed00 	.word	0xe000ed00
 80048ac:	410fc271 	.word	0x410fc271
 80048b0:	410fc270 	.word	0x410fc270
 80048b4:	e000e400 	.word	0xe000e400
 80048b8:	20000824 	.word	0x20000824
 80048bc:	20000828 	.word	0x20000828
 80048c0:	e000ed20 	.word	0xe000ed20
 80048c4:	20000014 	.word	0x20000014
 80048c8:	e000ef34 	.word	0xe000ef34

080048cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <vPortEnterCritical+0x54>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <vPortEnterCritical+0x54>)
 80048ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <vPortEnterCritical+0x54>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10e      	bne.n	8004914 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <vPortEnterCritical+0x58>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <vPortEnterCritical+0x48>
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	e7fe      	b.n	8004912 <vPortEnterCritical+0x46>
	}
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000014 	.word	0x20000014
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <vPortExitCritical+0x4c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <vPortExitCritical+0x22>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	e7fe      	b.n	8004948 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <vPortExitCritical+0x4c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3b01      	subs	r3, #1
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <vPortExitCritical+0x4c>)
 8004952:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <vPortExitCritical+0x4c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <vPortExitCritical+0x3e>
 800495c:	2300      	movs	r3, #0
 800495e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000014 	.word	0x20000014
	...

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f01e 0f10 	tst.w	lr, #16
 8004990:	bf08      	it	eq
 8004992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049a4:	f380 8811 	msr	BASEPRI, r0
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f7ff fcd4 	bl	800435c <vTaskSwitchContext>
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f380 8811 	msr	BASEPRI, r0
 80049bc:	bc09      	pop	{r0, r3}
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	6808      	ldr	r0, [r1, #0]
 80049c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c6:	f01e 0f10 	tst.w	lr, #16
 80049ca:	bf08      	it	eq
 80049cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049d0:	f380 8809 	msr	PSP, r0
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst>:
 80049e0:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a00:	f7ff fbf4 	bl	80041ec <xTaskIncrementTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <SysTick_Handler+0x3c>)
 8004a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	2300      	movs	r3, #0
 8004a14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <vPortSetupTimerInterrupt+0x34>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <vPortSetupTimerInterrupt+0x38>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vPortSetupTimerInterrupt+0x3c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <vPortSetupTimerInterrupt+0x40>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <vPortSetupTimerInterrupt+0x44>)
 8004a46:	3b01      	subs	r3, #1
 8004a48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a4a:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <vPortSetupTimerInterrupt+0x34>)
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	601a      	str	r2, [r3, #0]
}
 8004a50:	bf00      	nop
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	e000e010 	.word	0xe000e010
 8004a60:	e000e018 	.word	0xe000e018
 8004a64:	20000008 	.word	0x20000008
 8004a68:	10624dd3 	.word	0x10624dd3
 8004a6c:	e000e014 	.word	0xe000e014

08004a70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a80 <vPortEnableVFP+0x10>
 8004a74:	6801      	ldr	r1, [r0, #0]
 8004a76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a7a:	6001      	str	r1, [r0, #0]
 8004a7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a7e:	bf00      	nop
 8004a80:	e000ed88 	.word	0xe000ed88

08004a84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a90:	f7ff fb02 	bl	8004098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a94:	4b57      	ldr	r3, [pc, #348]	; (8004bf4 <pvPortMalloc+0x170>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a9c:	f000 f90c 	bl	8004cb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004aa0:	4b55      	ldr	r3, [pc, #340]	; (8004bf8 <pvPortMalloc+0x174>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f040 808c 	bne.w	8004bc6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01c      	beq.n	8004aee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ab4:	2208      	movs	r2, #8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d013      	beq.n	8004aee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f023 0307 	bic.w	r3, r3, #7
 8004acc:	3308      	adds	r3, #8
 8004ace:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <pvPortMalloc+0x6a>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e7fe      	b.n	8004aec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d068      	beq.n	8004bc6 <pvPortMalloc+0x142>
 8004af4:	4b41      	ldr	r3, [pc, #260]	; (8004bfc <pvPortMalloc+0x178>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d863      	bhi.n	8004bc6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004afe:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <pvPortMalloc+0x17c>)
 8004b00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b02:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <pvPortMalloc+0x17c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b08:	e004      	b.n	8004b14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d903      	bls.n	8004b26 <pvPortMalloc+0xa2>
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f1      	bne.n	8004b0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b26:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <pvPortMalloc+0x170>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d04a      	beq.n	8004bc6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2208      	movs	r2, #8
 8004b36:	4413      	add	r3, r2
 8004b38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	1ad2      	subs	r2, r2, r3
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d91e      	bls.n	8004b90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <pvPortMalloc+0xf4>
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e7fe      	b.n	8004b76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b8a:	69b8      	ldr	r0, [r7, #24]
 8004b8c:	f000 f8f6 	bl	8004d7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b90:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <pvPortMalloc+0x178>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <pvPortMalloc+0x178>)
 8004b9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <pvPortMalloc+0x178>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <pvPortMalloc+0x180>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d203      	bcs.n	8004bb2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <pvPortMalloc+0x178>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <pvPortMalloc+0x180>)
 8004bb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <pvPortMalloc+0x174>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bc6:	f7ff fa75 	bl	80040b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <pvPortMalloc+0x164>
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e7fe      	b.n	8004be6 <pvPortMalloc+0x162>
	return pvReturn;
 8004be8:	69fb      	ldr	r3, [r7, #28]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3728      	adds	r7, #40	; 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200013ec 	.word	0x200013ec
 8004bf8:	200013f8 	.word	0x200013f8
 8004bfc:	200013f0 	.word	0x200013f0
 8004c00:	200013e4 	.word	0x200013e4
 8004c04:	200013f4 	.word	0x200013f4

08004c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d046      	beq.n	8004ca8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	425b      	negs	r3, r3
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4413      	add	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <vPortFree+0xa8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <vPortFree+0x42>
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e7fe      	b.n	8004c48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <vPortFree+0x5e>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	e7fe      	b.n	8004c64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <vPortFree+0xa8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d019      	beq.n	8004ca8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d115      	bne.n	8004ca8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortFree+0xa8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	401a      	ands	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c8c:	f7ff fa04 	bl	8004098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <vPortFree+0xac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	4a06      	ldr	r2, [pc, #24]	; (8004cb4 <vPortFree+0xac>)
 8004c9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c9e:	6938      	ldr	r0, [r7, #16]
 8004ca0:	f000 f86c 	bl	8004d7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ca4:	f7ff fa06 	bl	80040b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200013f8 	.word	0x200013f8
 8004cb4:	200013f0 	.word	0x200013f0

08004cb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004cc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <prvHeapInit+0xac>)
 8004cc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3307      	adds	r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <prvHeapInit+0xac>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <prvHeapInit+0xb0>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <prvHeapInit+0xb0>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4413      	add	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d04:	2208      	movs	r2, #8
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <prvHeapInit+0xb4>)
 8004d18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <prvHeapInit+0xb4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <prvHeapInit+0xb4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <prvHeapInit+0xb4>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <prvHeapInit+0xb8>)
 8004d46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <prvHeapInit+0xbc>)
 8004d4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <prvHeapInit+0xc0>)
 8004d52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d56:	601a      	str	r2, [r3, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	2000082c 	.word	0x2000082c
 8004d68:	200013e4 	.word	0x200013e4
 8004d6c:	200013ec 	.word	0x200013ec
 8004d70:	200013f4 	.word	0x200013f4
 8004d74:	200013f0 	.word	0x200013f0
 8004d78:	200013f8 	.word	0x200013f8

08004d7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d84:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <prvInsertBlockIntoFreeList+0xac>)
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e002      	b.n	8004d90 <prvInsertBlockIntoFreeList+0x14>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d8f7      	bhi.n	8004d8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4413      	add	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d108      	bne.n	8004dbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d118      	bne.n	8004e04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <prvInsertBlockIntoFreeList+0xb0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d00d      	beq.n	8004dfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e008      	b.n	8004e0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <prvInsertBlockIntoFreeList+0xb0>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e003      	b.n	8004e0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d002      	beq.n	8004e1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	200013e4 	.word	0x200013e4
 8004e2c:	200013ec 	.word	0x200013ec

08004e30 <__errno>:
 8004e30:	4b01      	ldr	r3, [pc, #4]	; (8004e38 <__errno+0x8>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000018 	.word	0x20000018

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	4e0d      	ldr	r6, [pc, #52]	; (8004e74 <__libc_init_array+0x38>)
 8004e40:	4c0d      	ldr	r4, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e42:	1ba4      	subs	r4, r4, r6
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	2500      	movs	r5, #0
 8004e48:	42a5      	cmp	r5, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	4e0b      	ldr	r6, [pc, #44]	; (8004e7c <__libc_init_array+0x40>)
 8004e4e:	4c0c      	ldr	r4, [pc, #48]	; (8004e80 <__libc_init_array+0x44>)
 8004e50:	f000 ff04 	bl	8005c5c <_init>
 8004e54:	1ba4      	subs	r4, r4, r6
 8004e56:	10a4      	asrs	r4, r4, #2
 8004e58:	2500      	movs	r5, #0
 8004e5a:	42a5      	cmp	r5, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e64:	4798      	blx	r3
 8004e66:	3501      	adds	r5, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e6e:	4798      	blx	r3
 8004e70:	3501      	adds	r5, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08006b44 	.word	0x08006b44
 8004e78:	08006b44 	.word	0x08006b44
 8004e7c:	08006b44 	.word	0x08006b44
 8004e80:	08006b48 	.word	0x08006b48

08004e84 <memset>:
 8004e84:	4402      	add	r2, r0
 8004e86:	4603      	mov	r3, r0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d100      	bne.n	8004e8e <memset+0xa>
 8004e8c:	4770      	bx	lr
 8004e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e92:	e7f9      	b.n	8004e88 <memset+0x4>

08004e94 <iprintf>:
 8004e94:	b40f      	push	{r0, r1, r2, r3}
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <iprintf+0x2c>)
 8004e98:	b513      	push	{r0, r1, r4, lr}
 8004e9a:	681c      	ldr	r4, [r3, #0]
 8004e9c:	b124      	cbz	r4, 8004ea8 <iprintf+0x14>
 8004e9e:	69a3      	ldr	r3, [r4, #24]
 8004ea0:	b913      	cbnz	r3, 8004ea8 <iprintf+0x14>
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f84e 	bl	8004f44 <__sinit>
 8004ea8:	ab05      	add	r3, sp, #20
 8004eaa:	9a04      	ldr	r2, [sp, #16]
 8004eac:	68a1      	ldr	r1, [r4, #8]
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 f955 	bl	8005160 <_vfiprintf_r>
 8004eb6:	b002      	add	sp, #8
 8004eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebc:	b004      	add	sp, #16
 8004ebe:	4770      	bx	lr
 8004ec0:	20000018 	.word	0x20000018

08004ec4 <std>:
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	b510      	push	{r4, lr}
 8004ec8:	4604      	mov	r4, r0
 8004eca:	e9c0 3300 	strd	r3, r3, [r0]
 8004ece:	6083      	str	r3, [r0, #8]
 8004ed0:	8181      	strh	r1, [r0, #12]
 8004ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ed4:	81c2      	strh	r2, [r0, #14]
 8004ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eda:	6183      	str	r3, [r0, #24]
 8004edc:	4619      	mov	r1, r3
 8004ede:	2208      	movs	r2, #8
 8004ee0:	305c      	adds	r0, #92	; 0x5c
 8004ee2:	f7ff ffcf 	bl	8004e84 <memset>
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <std+0x38>)
 8004ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <std+0x3c>)
 8004eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <std+0x40>)
 8004ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <std+0x44>)
 8004ef4:	6224      	str	r4, [r4, #32]
 8004ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	bf00      	nop
 8004efc:	080056bd 	.word	0x080056bd
 8004f00:	080056df 	.word	0x080056df
 8004f04:	08005717 	.word	0x08005717
 8004f08:	0800573b 	.word	0x0800573b

08004f0c <_cleanup_r>:
 8004f0c:	4901      	ldr	r1, [pc, #4]	; (8004f14 <_cleanup_r+0x8>)
 8004f0e:	f000 b885 	b.w	800501c <_fwalk_reent>
 8004f12:	bf00      	nop
 8004f14:	08005a15 	.word	0x08005a15

08004f18 <__sfmoreglue>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	1e4a      	subs	r2, r1, #1
 8004f1c:	2568      	movs	r5, #104	; 0x68
 8004f1e:	4355      	muls	r5, r2
 8004f20:	460e      	mov	r6, r1
 8004f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f26:	f000 f897 	bl	8005058 <_malloc_r>
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	b140      	cbz	r0, 8004f40 <__sfmoreglue+0x28>
 8004f2e:	2100      	movs	r1, #0
 8004f30:	e9c0 1600 	strd	r1, r6, [r0]
 8004f34:	300c      	adds	r0, #12
 8004f36:	60a0      	str	r0, [r4, #8]
 8004f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f3c:	f7ff ffa2 	bl	8004e84 <memset>
 8004f40:	4620      	mov	r0, r4
 8004f42:	bd70      	pop	{r4, r5, r6, pc}

08004f44 <__sinit>:
 8004f44:	6983      	ldr	r3, [r0, #24]
 8004f46:	b510      	push	{r4, lr}
 8004f48:	4604      	mov	r4, r0
 8004f4a:	bb33      	cbnz	r3, 8004f9a <__sinit+0x56>
 8004f4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f50:	6503      	str	r3, [r0, #80]	; 0x50
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <__sinit+0x58>)
 8004f54:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <__sinit+0x5c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6282      	str	r2, [r0, #40]	; 0x28
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	bf04      	itt	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	6183      	streq	r3, [r0, #24]
 8004f62:	f000 f81f 	bl	8004fa4 <__sfp>
 8004f66:	6060      	str	r0, [r4, #4]
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 f81b 	bl	8004fa4 <__sfp>
 8004f6e:	60a0      	str	r0, [r4, #8]
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 f817 	bl	8004fa4 <__sfp>
 8004f76:	2200      	movs	r2, #0
 8004f78:	60e0      	str	r0, [r4, #12]
 8004f7a:	2104      	movs	r1, #4
 8004f7c:	6860      	ldr	r0, [r4, #4]
 8004f7e:	f7ff ffa1 	bl	8004ec4 <std>
 8004f82:	2201      	movs	r2, #1
 8004f84:	2109      	movs	r1, #9
 8004f86:	68a0      	ldr	r0, [r4, #8]
 8004f88:	f7ff ff9c 	bl	8004ec4 <std>
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	2112      	movs	r1, #18
 8004f90:	68e0      	ldr	r0, [r4, #12]
 8004f92:	f7ff ff97 	bl	8004ec4 <std>
 8004f96:	2301      	movs	r3, #1
 8004f98:	61a3      	str	r3, [r4, #24]
 8004f9a:	bd10      	pop	{r4, pc}
 8004f9c:	08006aac 	.word	0x08006aac
 8004fa0:	08004f0d 	.word	0x08004f0d

08004fa4 <__sfp>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <__sfp+0x70>)
 8004fa8:	681e      	ldr	r6, [r3, #0]
 8004faa:	69b3      	ldr	r3, [r6, #24]
 8004fac:	4607      	mov	r7, r0
 8004fae:	b913      	cbnz	r3, 8004fb6 <__sfp+0x12>
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f7ff ffc7 	bl	8004f44 <__sinit>
 8004fb6:	3648      	adds	r6, #72	; 0x48
 8004fb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	d503      	bpl.n	8004fc8 <__sfp+0x24>
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	b133      	cbz	r3, 8004fd2 <__sfp+0x2e>
 8004fc4:	6836      	ldr	r6, [r6, #0]
 8004fc6:	e7f7      	b.n	8004fb8 <__sfp+0x14>
 8004fc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fcc:	b16d      	cbz	r5, 8004fea <__sfp+0x46>
 8004fce:	3468      	adds	r4, #104	; 0x68
 8004fd0:	e7f4      	b.n	8004fbc <__sfp+0x18>
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f7ff ff9f 	bl	8004f18 <__sfmoreglue>
 8004fda:	6030      	str	r0, [r6, #0]
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d1f1      	bne.n	8004fc4 <__sfp+0x20>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <__sfp+0x74>)
 8004fec:	6665      	str	r5, [r4, #100]	; 0x64
 8004fee:	e9c4 5500 	strd	r5, r5, [r4]
 8004ff2:	60a5      	str	r5, [r4, #8]
 8004ff4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ff8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	4629      	mov	r1, r5
 8005000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005004:	f7ff ff3e 	bl	8004e84 <memset>
 8005008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800500c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005010:	e7e9      	b.n	8004fe6 <__sfp+0x42>
 8005012:	bf00      	nop
 8005014:	08006aac 	.word	0x08006aac
 8005018:	ffff0001 	.word	0xffff0001

0800501c <_fwalk_reent>:
 800501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005020:	4680      	mov	r8, r0
 8005022:	4689      	mov	r9, r1
 8005024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005028:	2600      	movs	r6, #0
 800502a:	b914      	cbnz	r4, 8005032 <_fwalk_reent+0x16>
 800502c:	4630      	mov	r0, r6
 800502e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005032:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005036:	3f01      	subs	r7, #1
 8005038:	d501      	bpl.n	800503e <_fwalk_reent+0x22>
 800503a:	6824      	ldr	r4, [r4, #0]
 800503c:	e7f5      	b.n	800502a <_fwalk_reent+0xe>
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d907      	bls.n	8005054 <_fwalk_reent+0x38>
 8005044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005048:	3301      	adds	r3, #1
 800504a:	d003      	beq.n	8005054 <_fwalk_reent+0x38>
 800504c:	4629      	mov	r1, r5
 800504e:	4640      	mov	r0, r8
 8005050:	47c8      	blx	r9
 8005052:	4306      	orrs	r6, r0
 8005054:	3568      	adds	r5, #104	; 0x68
 8005056:	e7ee      	b.n	8005036 <_fwalk_reent+0x1a>

08005058 <_malloc_r>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	1ccd      	adds	r5, r1, #3
 800505c:	f025 0503 	bic.w	r5, r5, #3
 8005060:	3508      	adds	r5, #8
 8005062:	2d0c      	cmp	r5, #12
 8005064:	bf38      	it	cc
 8005066:	250c      	movcc	r5, #12
 8005068:	2d00      	cmp	r5, #0
 800506a:	4606      	mov	r6, r0
 800506c:	db01      	blt.n	8005072 <_malloc_r+0x1a>
 800506e:	42a9      	cmp	r1, r5
 8005070:	d903      	bls.n	800507a <_malloc_r+0x22>
 8005072:	230c      	movs	r3, #12
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	2000      	movs	r0, #0
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	f000 fd6b 	bl	8005b54 <__malloc_lock>
 800507e:	4a21      	ldr	r2, [pc, #132]	; (8005104 <_malloc_r+0xac>)
 8005080:	6814      	ldr	r4, [r2, #0]
 8005082:	4621      	mov	r1, r4
 8005084:	b991      	cbnz	r1, 80050ac <_malloc_r+0x54>
 8005086:	4c20      	ldr	r4, [pc, #128]	; (8005108 <_malloc_r+0xb0>)
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b91b      	cbnz	r3, 8005094 <_malloc_r+0x3c>
 800508c:	4630      	mov	r0, r6
 800508e:	f000 fb05 	bl	800569c <_sbrk_r>
 8005092:	6020      	str	r0, [r4, #0]
 8005094:	4629      	mov	r1, r5
 8005096:	4630      	mov	r0, r6
 8005098:	f000 fb00 	bl	800569c <_sbrk_r>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d124      	bne.n	80050ea <_malloc_r+0x92>
 80050a0:	230c      	movs	r3, #12
 80050a2:	6033      	str	r3, [r6, #0]
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 fd56 	bl	8005b56 <__malloc_unlock>
 80050aa:	e7e4      	b.n	8005076 <_malloc_r+0x1e>
 80050ac:	680b      	ldr	r3, [r1, #0]
 80050ae:	1b5b      	subs	r3, r3, r5
 80050b0:	d418      	bmi.n	80050e4 <_malloc_r+0x8c>
 80050b2:	2b0b      	cmp	r3, #11
 80050b4:	d90f      	bls.n	80050d6 <_malloc_r+0x7e>
 80050b6:	600b      	str	r3, [r1, #0]
 80050b8:	50cd      	str	r5, [r1, r3]
 80050ba:	18cc      	adds	r4, r1, r3
 80050bc:	4630      	mov	r0, r6
 80050be:	f000 fd4a 	bl	8005b56 <__malloc_unlock>
 80050c2:	f104 000b 	add.w	r0, r4, #11
 80050c6:	1d23      	adds	r3, r4, #4
 80050c8:	f020 0007 	bic.w	r0, r0, #7
 80050cc:	1ac3      	subs	r3, r0, r3
 80050ce:	d0d3      	beq.n	8005078 <_malloc_r+0x20>
 80050d0:	425a      	negs	r2, r3
 80050d2:	50e2      	str	r2, [r4, r3]
 80050d4:	e7d0      	b.n	8005078 <_malloc_r+0x20>
 80050d6:	428c      	cmp	r4, r1
 80050d8:	684b      	ldr	r3, [r1, #4]
 80050da:	bf16      	itet	ne
 80050dc:	6063      	strne	r3, [r4, #4]
 80050de:	6013      	streq	r3, [r2, #0]
 80050e0:	460c      	movne	r4, r1
 80050e2:	e7eb      	b.n	80050bc <_malloc_r+0x64>
 80050e4:	460c      	mov	r4, r1
 80050e6:	6849      	ldr	r1, [r1, #4]
 80050e8:	e7cc      	b.n	8005084 <_malloc_r+0x2c>
 80050ea:	1cc4      	adds	r4, r0, #3
 80050ec:	f024 0403 	bic.w	r4, r4, #3
 80050f0:	42a0      	cmp	r0, r4
 80050f2:	d005      	beq.n	8005100 <_malloc_r+0xa8>
 80050f4:	1a21      	subs	r1, r4, r0
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 fad0 	bl	800569c <_sbrk_r>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d0cf      	beq.n	80050a0 <_malloc_r+0x48>
 8005100:	6025      	str	r5, [r4, #0]
 8005102:	e7db      	b.n	80050bc <_malloc_r+0x64>
 8005104:	200013fc 	.word	0x200013fc
 8005108:	20001400 	.word	0x20001400

0800510c <__sfputc_r>:
 800510c:	6893      	ldr	r3, [r2, #8]
 800510e:	3b01      	subs	r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	b410      	push	{r4}
 8005114:	6093      	str	r3, [r2, #8]
 8005116:	da08      	bge.n	800512a <__sfputc_r+0x1e>
 8005118:	6994      	ldr	r4, [r2, #24]
 800511a:	42a3      	cmp	r3, r4
 800511c:	db01      	blt.n	8005122 <__sfputc_r+0x16>
 800511e:	290a      	cmp	r1, #10
 8005120:	d103      	bne.n	800512a <__sfputc_r+0x1e>
 8005122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005126:	f000 bb0d 	b.w	8005744 <__swbuf_r>
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	1c58      	adds	r0, r3, #1
 800512e:	6010      	str	r0, [r2, #0]
 8005130:	7019      	strb	r1, [r3, #0]
 8005132:	4608      	mov	r0, r1
 8005134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005138:	4770      	bx	lr

0800513a <__sfputs_r>:
 800513a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513c:	4606      	mov	r6, r0
 800513e:	460f      	mov	r7, r1
 8005140:	4614      	mov	r4, r2
 8005142:	18d5      	adds	r5, r2, r3
 8005144:	42ac      	cmp	r4, r5
 8005146:	d101      	bne.n	800514c <__sfputs_r+0x12>
 8005148:	2000      	movs	r0, #0
 800514a:	e007      	b.n	800515c <__sfputs_r+0x22>
 800514c:	463a      	mov	r2, r7
 800514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005152:	4630      	mov	r0, r6
 8005154:	f7ff ffda 	bl	800510c <__sfputc_r>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d1f3      	bne.n	8005144 <__sfputs_r+0xa>
 800515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005160 <_vfiprintf_r>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	460c      	mov	r4, r1
 8005166:	b09d      	sub	sp, #116	; 0x74
 8005168:	4617      	mov	r7, r2
 800516a:	461d      	mov	r5, r3
 800516c:	4606      	mov	r6, r0
 800516e:	b118      	cbz	r0, 8005178 <_vfiprintf_r+0x18>
 8005170:	6983      	ldr	r3, [r0, #24]
 8005172:	b90b      	cbnz	r3, 8005178 <_vfiprintf_r+0x18>
 8005174:	f7ff fee6 	bl	8004f44 <__sinit>
 8005178:	4b7c      	ldr	r3, [pc, #496]	; (800536c <_vfiprintf_r+0x20c>)
 800517a:	429c      	cmp	r4, r3
 800517c:	d158      	bne.n	8005230 <_vfiprintf_r+0xd0>
 800517e:	6874      	ldr	r4, [r6, #4]
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	0718      	lsls	r0, r3, #28
 8005184:	d55e      	bpl.n	8005244 <_vfiprintf_r+0xe4>
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05b      	beq.n	8005244 <_vfiprintf_r+0xe4>
 800518c:	2300      	movs	r3, #0
 800518e:	9309      	str	r3, [sp, #36]	; 0x24
 8005190:	2320      	movs	r3, #32
 8005192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005196:	2330      	movs	r3, #48	; 0x30
 8005198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800519c:	9503      	str	r5, [sp, #12]
 800519e:	f04f 0b01 	mov.w	fp, #1
 80051a2:	46b8      	mov	r8, r7
 80051a4:	4645      	mov	r5, r8
 80051a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051aa:	b10b      	cbz	r3, 80051b0 <_vfiprintf_r+0x50>
 80051ac:	2b25      	cmp	r3, #37	; 0x25
 80051ae:	d154      	bne.n	800525a <_vfiprintf_r+0xfa>
 80051b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80051b4:	d00b      	beq.n	80051ce <_vfiprintf_r+0x6e>
 80051b6:	4653      	mov	r3, sl
 80051b8:	463a      	mov	r2, r7
 80051ba:	4621      	mov	r1, r4
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffbc 	bl	800513a <__sfputs_r>
 80051c2:	3001      	adds	r0, #1
 80051c4:	f000 80c2 	beq.w	800534c <_vfiprintf_r+0x1ec>
 80051c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ca:	4453      	add	r3, sl
 80051cc:	9309      	str	r3, [sp, #36]	; 0x24
 80051ce:	f898 3000 	ldrb.w	r3, [r8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80ba 	beq.w	800534c <_vfiprintf_r+0x1ec>
 80051d8:	2300      	movs	r3, #0
 80051da:	f04f 32ff 	mov.w	r2, #4294967295
 80051de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	9307      	str	r3, [sp, #28]
 80051e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051ea:	931a      	str	r3, [sp, #104]	; 0x68
 80051ec:	46a8      	mov	r8, r5
 80051ee:	2205      	movs	r2, #5
 80051f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80051f4:	485e      	ldr	r0, [pc, #376]	; (8005370 <_vfiprintf_r+0x210>)
 80051f6:	f7fa ffeb 	bl	80001d0 <memchr>
 80051fa:	9b04      	ldr	r3, [sp, #16]
 80051fc:	bb78      	cbnz	r0, 800525e <_vfiprintf_r+0xfe>
 80051fe:	06d9      	lsls	r1, r3, #27
 8005200:	bf44      	itt	mi
 8005202:	2220      	movmi	r2, #32
 8005204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005208:	071a      	lsls	r2, r3, #28
 800520a:	bf44      	itt	mi
 800520c:	222b      	movmi	r2, #43	; 0x2b
 800520e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005212:	782a      	ldrb	r2, [r5, #0]
 8005214:	2a2a      	cmp	r2, #42	; 0x2a
 8005216:	d02a      	beq.n	800526e <_vfiprintf_r+0x10e>
 8005218:	9a07      	ldr	r2, [sp, #28]
 800521a:	46a8      	mov	r8, r5
 800521c:	2000      	movs	r0, #0
 800521e:	250a      	movs	r5, #10
 8005220:	4641      	mov	r1, r8
 8005222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005226:	3b30      	subs	r3, #48	; 0x30
 8005228:	2b09      	cmp	r3, #9
 800522a:	d969      	bls.n	8005300 <_vfiprintf_r+0x1a0>
 800522c:	b360      	cbz	r0, 8005288 <_vfiprintf_r+0x128>
 800522e:	e024      	b.n	800527a <_vfiprintf_r+0x11a>
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <_vfiprintf_r+0x214>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d101      	bne.n	800523a <_vfiprintf_r+0xda>
 8005236:	68b4      	ldr	r4, [r6, #8]
 8005238:	e7a2      	b.n	8005180 <_vfiprintf_r+0x20>
 800523a:	4b4f      	ldr	r3, [pc, #316]	; (8005378 <_vfiprintf_r+0x218>)
 800523c:	429c      	cmp	r4, r3
 800523e:	bf08      	it	eq
 8005240:	68f4      	ldreq	r4, [r6, #12]
 8005242:	e79d      	b.n	8005180 <_vfiprintf_r+0x20>
 8005244:	4621      	mov	r1, r4
 8005246:	4630      	mov	r0, r6
 8005248:	f000 fae0 	bl	800580c <__swsetup_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d09d      	beq.n	800518c <_vfiprintf_r+0x2c>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	b01d      	add	sp, #116	; 0x74
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	46a8      	mov	r8, r5
 800525c:	e7a2      	b.n	80051a4 <_vfiprintf_r+0x44>
 800525e:	4a44      	ldr	r2, [pc, #272]	; (8005370 <_vfiprintf_r+0x210>)
 8005260:	1a80      	subs	r0, r0, r2
 8005262:	fa0b f000 	lsl.w	r0, fp, r0
 8005266:	4318      	orrs	r0, r3
 8005268:	9004      	str	r0, [sp, #16]
 800526a:	4645      	mov	r5, r8
 800526c:	e7be      	b.n	80051ec <_vfiprintf_r+0x8c>
 800526e:	9a03      	ldr	r2, [sp, #12]
 8005270:	1d11      	adds	r1, r2, #4
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	9103      	str	r1, [sp, #12]
 8005276:	2a00      	cmp	r2, #0
 8005278:	db01      	blt.n	800527e <_vfiprintf_r+0x11e>
 800527a:	9207      	str	r2, [sp, #28]
 800527c:	e004      	b.n	8005288 <_vfiprintf_r+0x128>
 800527e:	4252      	negs	r2, r2
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	9207      	str	r2, [sp, #28]
 8005286:	9304      	str	r3, [sp, #16]
 8005288:	f898 3000 	ldrb.w	r3, [r8]
 800528c:	2b2e      	cmp	r3, #46	; 0x2e
 800528e:	d10e      	bne.n	80052ae <_vfiprintf_r+0x14e>
 8005290:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005294:	2b2a      	cmp	r3, #42	; 0x2a
 8005296:	d138      	bne.n	800530a <_vfiprintf_r+0x1aa>
 8005298:	9b03      	ldr	r3, [sp, #12]
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	9203      	str	r2, [sp, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bfb8      	it	lt
 80052a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a8:	f108 0802 	add.w	r8, r8, #2
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	4d33      	ldr	r5, [pc, #204]	; (800537c <_vfiprintf_r+0x21c>)
 80052b0:	f898 1000 	ldrb.w	r1, [r8]
 80052b4:	2203      	movs	r2, #3
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fa ff8a 	bl	80001d0 <memchr>
 80052bc:	b140      	cbz	r0, 80052d0 <_vfiprintf_r+0x170>
 80052be:	2340      	movs	r3, #64	; 0x40
 80052c0:	1b40      	subs	r0, r0, r5
 80052c2:	fa03 f000 	lsl.w	r0, r3, r0
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	4303      	orrs	r3, r0
 80052ca:	f108 0801 	add.w	r8, r8, #1
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	f898 1000 	ldrb.w	r1, [r8]
 80052d4:	482a      	ldr	r0, [pc, #168]	; (8005380 <_vfiprintf_r+0x220>)
 80052d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052da:	2206      	movs	r2, #6
 80052dc:	f108 0701 	add.w	r7, r8, #1
 80052e0:	f7fa ff76 	bl	80001d0 <memchr>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d037      	beq.n	8005358 <_vfiprintf_r+0x1f8>
 80052e8:	4b26      	ldr	r3, [pc, #152]	; (8005384 <_vfiprintf_r+0x224>)
 80052ea:	bb1b      	cbnz	r3, 8005334 <_vfiprintf_r+0x1d4>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	3307      	adds	r3, #7
 80052f0:	f023 0307 	bic.w	r3, r3, #7
 80052f4:	3308      	adds	r3, #8
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fa:	444b      	add	r3, r9
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	e750      	b.n	80051a2 <_vfiprintf_r+0x42>
 8005300:	fb05 3202 	mla	r2, r5, r2, r3
 8005304:	2001      	movs	r0, #1
 8005306:	4688      	mov	r8, r1
 8005308:	e78a      	b.n	8005220 <_vfiprintf_r+0xc0>
 800530a:	2300      	movs	r3, #0
 800530c:	f108 0801 	add.w	r8, r8, #1
 8005310:	9305      	str	r3, [sp, #20]
 8005312:	4619      	mov	r1, r3
 8005314:	250a      	movs	r5, #10
 8005316:	4640      	mov	r0, r8
 8005318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531c:	3a30      	subs	r2, #48	; 0x30
 800531e:	2a09      	cmp	r2, #9
 8005320:	d903      	bls.n	800532a <_vfiprintf_r+0x1ca>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0c3      	beq.n	80052ae <_vfiprintf_r+0x14e>
 8005326:	9105      	str	r1, [sp, #20]
 8005328:	e7c1      	b.n	80052ae <_vfiprintf_r+0x14e>
 800532a:	fb05 2101 	mla	r1, r5, r1, r2
 800532e:	2301      	movs	r3, #1
 8005330:	4680      	mov	r8, r0
 8005332:	e7f0      	b.n	8005316 <_vfiprintf_r+0x1b6>
 8005334:	ab03      	add	r3, sp, #12
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4622      	mov	r2, r4
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <_vfiprintf_r+0x228>)
 800533c:	a904      	add	r1, sp, #16
 800533e:	4630      	mov	r0, r6
 8005340:	f3af 8000 	nop.w
 8005344:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005348:	4681      	mov	r9, r0
 800534a:	d1d5      	bne.n	80052f8 <_vfiprintf_r+0x198>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	065b      	lsls	r3, r3, #25
 8005350:	f53f af7e 	bmi.w	8005250 <_vfiprintf_r+0xf0>
 8005354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005356:	e77d      	b.n	8005254 <_vfiprintf_r+0xf4>
 8005358:	ab03      	add	r3, sp, #12
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4622      	mov	r2, r4
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <_vfiprintf_r+0x228>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	4630      	mov	r0, r6
 8005364:	f000 f888 	bl	8005478 <_printf_i>
 8005368:	e7ec      	b.n	8005344 <_vfiprintf_r+0x1e4>
 800536a:	bf00      	nop
 800536c:	08006ad0 	.word	0x08006ad0
 8005370:	08006b10 	.word	0x08006b10
 8005374:	08006af0 	.word	0x08006af0
 8005378:	08006ab0 	.word	0x08006ab0
 800537c:	08006b16 	.word	0x08006b16
 8005380:	08006b1a 	.word	0x08006b1a
 8005384:	00000000 	.word	0x00000000
 8005388:	0800513b 	.word	0x0800513b

0800538c <_printf_common>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	4691      	mov	r9, r2
 8005392:	461f      	mov	r7, r3
 8005394:	688a      	ldr	r2, [r1, #8]
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800539c:	4293      	cmp	r3, r2
 800539e:	bfb8      	it	lt
 80053a0:	4613      	movlt	r3, r2
 80053a2:	f8c9 3000 	str.w	r3, [r9]
 80053a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053aa:	4606      	mov	r6, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	b112      	cbz	r2, 80053b6 <_printf_common+0x2a>
 80053b0:	3301      	adds	r3, #1
 80053b2:	f8c9 3000 	str.w	r3, [r9]
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	0699      	lsls	r1, r3, #26
 80053ba:	bf42      	ittt	mi
 80053bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053c0:	3302      	addmi	r3, #2
 80053c2:	f8c9 3000 	strmi.w	r3, [r9]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	f015 0506 	ands.w	r5, r5, #6
 80053cc:	d107      	bne.n	80053de <_printf_common+0x52>
 80053ce:	f104 0a19 	add.w	sl, r4, #25
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	f8d9 2000 	ldr.w	r2, [r9]
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	42ab      	cmp	r3, r5
 80053dc:	dc28      	bgt.n	8005430 <_printf_common+0xa4>
 80053de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	3300      	adds	r3, #0
 80053e6:	bf18      	it	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	0692      	lsls	r2, r2, #26
 80053ec:	d42d      	bmi.n	800544a <_printf_common+0xbe>
 80053ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f2:	4639      	mov	r1, r7
 80053f4:	4630      	mov	r0, r6
 80053f6:	47c0      	blx	r8
 80053f8:	3001      	adds	r0, #1
 80053fa:	d020      	beq.n	800543e <_printf_common+0xb2>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	68e5      	ldr	r5, [r4, #12]
 8005400:	f8d9 2000 	ldr.w	r2, [r9]
 8005404:	f003 0306 	and.w	r3, r3, #6
 8005408:	2b04      	cmp	r3, #4
 800540a:	bf08      	it	eq
 800540c:	1aad      	subeq	r5, r5, r2
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	6922      	ldr	r2, [r4, #16]
 8005412:	bf0c      	ite	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	2500      	movne	r5, #0
 800541a:	4293      	cmp	r3, r2
 800541c:	bfc4      	itt	gt
 800541e:	1a9b      	subgt	r3, r3, r2
 8005420:	18ed      	addgt	r5, r5, r3
 8005422:	f04f 0900 	mov.w	r9, #0
 8005426:	341a      	adds	r4, #26
 8005428:	454d      	cmp	r5, r9
 800542a:	d11a      	bne.n	8005462 <_printf_common+0xd6>
 800542c:	2000      	movs	r0, #0
 800542e:	e008      	b.n	8005442 <_printf_common+0xb6>
 8005430:	2301      	movs	r3, #1
 8005432:	4652      	mov	r2, sl
 8005434:	4639      	mov	r1, r7
 8005436:	4630      	mov	r0, r6
 8005438:	47c0      	blx	r8
 800543a:	3001      	adds	r0, #1
 800543c:	d103      	bne.n	8005446 <_printf_common+0xba>
 800543e:	f04f 30ff 	mov.w	r0, #4294967295
 8005442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005446:	3501      	adds	r5, #1
 8005448:	e7c3      	b.n	80053d2 <_printf_common+0x46>
 800544a:	18e1      	adds	r1, r4, r3
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	2030      	movs	r0, #48	; 0x30
 8005450:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005454:	4422      	add	r2, r4
 8005456:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800545a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800545e:	3302      	adds	r3, #2
 8005460:	e7c5      	b.n	80053ee <_printf_common+0x62>
 8005462:	2301      	movs	r3, #1
 8005464:	4622      	mov	r2, r4
 8005466:	4639      	mov	r1, r7
 8005468:	4630      	mov	r0, r6
 800546a:	47c0      	blx	r8
 800546c:	3001      	adds	r0, #1
 800546e:	d0e6      	beq.n	800543e <_printf_common+0xb2>
 8005470:	f109 0901 	add.w	r9, r9, #1
 8005474:	e7d8      	b.n	8005428 <_printf_common+0x9c>
	...

08005478 <_printf_i>:
 8005478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800547c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005480:	460c      	mov	r4, r1
 8005482:	7e09      	ldrb	r1, [r1, #24]
 8005484:	b085      	sub	sp, #20
 8005486:	296e      	cmp	r1, #110	; 0x6e
 8005488:	4617      	mov	r7, r2
 800548a:	4606      	mov	r6, r0
 800548c:	4698      	mov	r8, r3
 800548e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005490:	f000 80b3 	beq.w	80055fa <_printf_i+0x182>
 8005494:	d822      	bhi.n	80054dc <_printf_i+0x64>
 8005496:	2963      	cmp	r1, #99	; 0x63
 8005498:	d036      	beq.n	8005508 <_printf_i+0x90>
 800549a:	d80a      	bhi.n	80054b2 <_printf_i+0x3a>
 800549c:	2900      	cmp	r1, #0
 800549e:	f000 80b9 	beq.w	8005614 <_printf_i+0x19c>
 80054a2:	2958      	cmp	r1, #88	; 0x58
 80054a4:	f000 8083 	beq.w	80055ae <_printf_i+0x136>
 80054a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054b0:	e032      	b.n	8005518 <_printf_i+0xa0>
 80054b2:	2964      	cmp	r1, #100	; 0x64
 80054b4:	d001      	beq.n	80054ba <_printf_i+0x42>
 80054b6:	2969      	cmp	r1, #105	; 0x69
 80054b8:	d1f6      	bne.n	80054a8 <_printf_i+0x30>
 80054ba:	6820      	ldr	r0, [r4, #0]
 80054bc:	6813      	ldr	r3, [r2, #0]
 80054be:	0605      	lsls	r5, r0, #24
 80054c0:	f103 0104 	add.w	r1, r3, #4
 80054c4:	d52a      	bpl.n	800551c <_printf_i+0xa4>
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da03      	bge.n	80054d6 <_printf_i+0x5e>
 80054ce:	222d      	movs	r2, #45	; 0x2d
 80054d0:	425b      	negs	r3, r3
 80054d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054d6:	486f      	ldr	r0, [pc, #444]	; (8005694 <_printf_i+0x21c>)
 80054d8:	220a      	movs	r2, #10
 80054da:	e039      	b.n	8005550 <_printf_i+0xd8>
 80054dc:	2973      	cmp	r1, #115	; 0x73
 80054de:	f000 809d 	beq.w	800561c <_printf_i+0x1a4>
 80054e2:	d808      	bhi.n	80054f6 <_printf_i+0x7e>
 80054e4:	296f      	cmp	r1, #111	; 0x6f
 80054e6:	d020      	beq.n	800552a <_printf_i+0xb2>
 80054e8:	2970      	cmp	r1, #112	; 0x70
 80054ea:	d1dd      	bne.n	80054a8 <_printf_i+0x30>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	f043 0320 	orr.w	r3, r3, #32
 80054f2:	6023      	str	r3, [r4, #0]
 80054f4:	e003      	b.n	80054fe <_printf_i+0x86>
 80054f6:	2975      	cmp	r1, #117	; 0x75
 80054f8:	d017      	beq.n	800552a <_printf_i+0xb2>
 80054fa:	2978      	cmp	r1, #120	; 0x78
 80054fc:	d1d4      	bne.n	80054a8 <_printf_i+0x30>
 80054fe:	2378      	movs	r3, #120	; 0x78
 8005500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005504:	4864      	ldr	r0, [pc, #400]	; (8005698 <_printf_i+0x220>)
 8005506:	e055      	b.n	80055b4 <_printf_i+0x13c>
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	1d19      	adds	r1, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6011      	str	r1, [r2, #0]
 8005510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005518:	2301      	movs	r3, #1
 800551a:	e08c      	b.n	8005636 <_printf_i+0x1be>
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6011      	str	r1, [r2, #0]
 8005520:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005524:	bf18      	it	ne
 8005526:	b21b      	sxthne	r3, r3
 8005528:	e7cf      	b.n	80054ca <_printf_i+0x52>
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	6825      	ldr	r5, [r4, #0]
 800552e:	1d18      	adds	r0, r3, #4
 8005530:	6010      	str	r0, [r2, #0]
 8005532:	0628      	lsls	r0, r5, #24
 8005534:	d501      	bpl.n	800553a <_printf_i+0xc2>
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	e002      	b.n	8005540 <_printf_i+0xc8>
 800553a:	0668      	lsls	r0, r5, #25
 800553c:	d5fb      	bpl.n	8005536 <_printf_i+0xbe>
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	4854      	ldr	r0, [pc, #336]	; (8005694 <_printf_i+0x21c>)
 8005542:	296f      	cmp	r1, #111	; 0x6f
 8005544:	bf14      	ite	ne
 8005546:	220a      	movne	r2, #10
 8005548:	2208      	moveq	r2, #8
 800554a:	2100      	movs	r1, #0
 800554c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005550:	6865      	ldr	r5, [r4, #4]
 8005552:	60a5      	str	r5, [r4, #8]
 8005554:	2d00      	cmp	r5, #0
 8005556:	f2c0 8095 	blt.w	8005684 <_printf_i+0x20c>
 800555a:	6821      	ldr	r1, [r4, #0]
 800555c:	f021 0104 	bic.w	r1, r1, #4
 8005560:	6021      	str	r1, [r4, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d13d      	bne.n	80055e2 <_printf_i+0x16a>
 8005566:	2d00      	cmp	r5, #0
 8005568:	f040 808e 	bne.w	8005688 <_printf_i+0x210>
 800556c:	4665      	mov	r5, ip
 800556e:	2a08      	cmp	r2, #8
 8005570:	d10b      	bne.n	800558a <_printf_i+0x112>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d508      	bpl.n	800558a <_printf_i+0x112>
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	bfde      	ittt	le
 8005580:	2330      	movle	r3, #48	; 0x30
 8005582:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005586:	f105 35ff 	addle.w	r5, r5, #4294967295
 800558a:	ebac 0305 	sub.w	r3, ip, r5
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	f8cd 8000 	str.w	r8, [sp]
 8005594:	463b      	mov	r3, r7
 8005596:	aa03      	add	r2, sp, #12
 8005598:	4621      	mov	r1, r4
 800559a:	4630      	mov	r0, r6
 800559c:	f7ff fef6 	bl	800538c <_printf_common>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d14d      	bne.n	8005640 <_printf_i+0x1c8>
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	b005      	add	sp, #20
 80055aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ae:	4839      	ldr	r0, [pc, #228]	; (8005694 <_printf_i+0x21c>)
 80055b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	6821      	ldr	r1, [r4, #0]
 80055b8:	1d1d      	adds	r5, r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6015      	str	r5, [r2, #0]
 80055be:	060a      	lsls	r2, r1, #24
 80055c0:	d50b      	bpl.n	80055da <_printf_i+0x162>
 80055c2:	07ca      	lsls	r2, r1, #31
 80055c4:	bf44      	itt	mi
 80055c6:	f041 0120 	orrmi.w	r1, r1, #32
 80055ca:	6021      	strmi	r1, [r4, #0]
 80055cc:	b91b      	cbnz	r3, 80055d6 <_printf_i+0x15e>
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	f022 0220 	bic.w	r2, r2, #32
 80055d4:	6022      	str	r2, [r4, #0]
 80055d6:	2210      	movs	r2, #16
 80055d8:	e7b7      	b.n	800554a <_printf_i+0xd2>
 80055da:	064d      	lsls	r5, r1, #25
 80055dc:	bf48      	it	mi
 80055de:	b29b      	uxthmi	r3, r3
 80055e0:	e7ef      	b.n	80055c2 <_printf_i+0x14a>
 80055e2:	4665      	mov	r5, ip
 80055e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80055e8:	fb02 3311 	mls	r3, r2, r1, r3
 80055ec:	5cc3      	ldrb	r3, [r0, r3]
 80055ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80055f2:	460b      	mov	r3, r1
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d1f5      	bne.n	80055e4 <_printf_i+0x16c>
 80055f8:	e7b9      	b.n	800556e <_printf_i+0xf6>
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	6961      	ldr	r1, [r4, #20]
 8005600:	1d18      	adds	r0, r3, #4
 8005602:	6010      	str	r0, [r2, #0]
 8005604:	0628      	lsls	r0, r5, #24
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	d501      	bpl.n	800560e <_printf_i+0x196>
 800560a:	6019      	str	r1, [r3, #0]
 800560c:	e002      	b.n	8005614 <_printf_i+0x19c>
 800560e:	066a      	lsls	r2, r5, #25
 8005610:	d5fb      	bpl.n	800560a <_printf_i+0x192>
 8005612:	8019      	strh	r1, [r3, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	6123      	str	r3, [r4, #16]
 8005618:	4665      	mov	r5, ip
 800561a:	e7b9      	b.n	8005590 <_printf_i+0x118>
 800561c:	6813      	ldr	r3, [r2, #0]
 800561e:	1d19      	adds	r1, r3, #4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	681d      	ldr	r5, [r3, #0]
 8005624:	6862      	ldr	r2, [r4, #4]
 8005626:	2100      	movs	r1, #0
 8005628:	4628      	mov	r0, r5
 800562a:	f7fa fdd1 	bl	80001d0 <memchr>
 800562e:	b108      	cbz	r0, 8005634 <_printf_i+0x1bc>
 8005630:	1b40      	subs	r0, r0, r5
 8005632:	6060      	str	r0, [r4, #4]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6123      	str	r3, [r4, #16]
 8005638:	2300      	movs	r3, #0
 800563a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563e:	e7a7      	b.n	8005590 <_printf_i+0x118>
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	462a      	mov	r2, r5
 8005644:	4639      	mov	r1, r7
 8005646:	4630      	mov	r0, r6
 8005648:	47c0      	blx	r8
 800564a:	3001      	adds	r0, #1
 800564c:	d0aa      	beq.n	80055a4 <_printf_i+0x12c>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	079b      	lsls	r3, r3, #30
 8005652:	d413      	bmi.n	800567c <_printf_i+0x204>
 8005654:	68e0      	ldr	r0, [r4, #12]
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	4298      	cmp	r0, r3
 800565a:	bfb8      	it	lt
 800565c:	4618      	movlt	r0, r3
 800565e:	e7a3      	b.n	80055a8 <_printf_i+0x130>
 8005660:	2301      	movs	r3, #1
 8005662:	464a      	mov	r2, r9
 8005664:	4639      	mov	r1, r7
 8005666:	4630      	mov	r0, r6
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d09a      	beq.n	80055a4 <_printf_i+0x12c>
 800566e:	3501      	adds	r5, #1
 8005670:	68e3      	ldr	r3, [r4, #12]
 8005672:	9a03      	ldr	r2, [sp, #12]
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	42ab      	cmp	r3, r5
 8005678:	dcf2      	bgt.n	8005660 <_printf_i+0x1e8>
 800567a:	e7eb      	b.n	8005654 <_printf_i+0x1dc>
 800567c:	2500      	movs	r5, #0
 800567e:	f104 0919 	add.w	r9, r4, #25
 8005682:	e7f5      	b.n	8005670 <_printf_i+0x1f8>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1ac      	bne.n	80055e2 <_printf_i+0x16a>
 8005688:	7803      	ldrb	r3, [r0, #0]
 800568a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800568e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005692:	e76c      	b.n	800556e <_printf_i+0xf6>
 8005694:	08006b21 	.word	0x08006b21
 8005698:	08006b32 	.word	0x08006b32

0800569c <_sbrk_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4c06      	ldr	r4, [pc, #24]	; (80056b8 <_sbrk_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4605      	mov	r5, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	f7fb fba4 	bl	8000df4 <_sbrk>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_sbrk_r+0x1a>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_sbrk_r+0x1a>
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200014b0 	.word	0x200014b0

080056bc <__sread>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	460c      	mov	r4, r1
 80056c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c4:	f000 fa96 	bl	8005bf4 <_read_r>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	bfab      	itete	ge
 80056cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056ce:	89a3      	ldrhlt	r3, [r4, #12]
 80056d0:	181b      	addge	r3, r3, r0
 80056d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056d6:	bfac      	ite	ge
 80056d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056da:	81a3      	strhlt	r3, [r4, #12]
 80056dc:	bd10      	pop	{r4, pc}

080056de <__swrite>:
 80056de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e2:	461f      	mov	r7, r3
 80056e4:	898b      	ldrh	r3, [r1, #12]
 80056e6:	05db      	lsls	r3, r3, #23
 80056e8:	4605      	mov	r5, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	4616      	mov	r6, r2
 80056ee:	d505      	bpl.n	80056fc <__swrite+0x1e>
 80056f0:	2302      	movs	r3, #2
 80056f2:	2200      	movs	r2, #0
 80056f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f8:	f000 f9b6 	bl	8005a68 <_lseek_r>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	4632      	mov	r2, r6
 800570a:	463b      	mov	r3, r7
 800570c:	4628      	mov	r0, r5
 800570e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	f000 b869 	b.w	80057e8 <_write_r>

08005716 <__sseek>:
 8005716:	b510      	push	{r4, lr}
 8005718:	460c      	mov	r4, r1
 800571a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571e:	f000 f9a3 	bl	8005a68 <_lseek_r>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	bf15      	itete	ne
 8005728:	6560      	strne	r0, [r4, #84]	; 0x54
 800572a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800572e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005732:	81a3      	strheq	r3, [r4, #12]
 8005734:	bf18      	it	ne
 8005736:	81a3      	strhne	r3, [r4, #12]
 8005738:	bd10      	pop	{r4, pc}

0800573a <__sclose>:
 800573a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800573e:	f000 b8d3 	b.w	80058e8 <_close_r>
	...

08005744 <__swbuf_r>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	460e      	mov	r6, r1
 8005748:	4614      	mov	r4, r2
 800574a:	4605      	mov	r5, r0
 800574c:	b118      	cbz	r0, 8005756 <__swbuf_r+0x12>
 800574e:	6983      	ldr	r3, [r0, #24]
 8005750:	b90b      	cbnz	r3, 8005756 <__swbuf_r+0x12>
 8005752:	f7ff fbf7 	bl	8004f44 <__sinit>
 8005756:	4b21      	ldr	r3, [pc, #132]	; (80057dc <__swbuf_r+0x98>)
 8005758:	429c      	cmp	r4, r3
 800575a:	d12a      	bne.n	80057b2 <__swbuf_r+0x6e>
 800575c:	686c      	ldr	r4, [r5, #4]
 800575e:	69a3      	ldr	r3, [r4, #24]
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	071a      	lsls	r2, r3, #28
 8005766:	d52e      	bpl.n	80057c6 <__swbuf_r+0x82>
 8005768:	6923      	ldr	r3, [r4, #16]
 800576a:	b363      	cbz	r3, 80057c6 <__swbuf_r+0x82>
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	1ac0      	subs	r0, r0, r3
 8005772:	6963      	ldr	r3, [r4, #20]
 8005774:	b2f6      	uxtb	r6, r6
 8005776:	4283      	cmp	r3, r0
 8005778:	4637      	mov	r7, r6
 800577a:	dc04      	bgt.n	8005786 <__swbuf_r+0x42>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f948 	bl	8005a14 <_fflush_r>
 8005784:	bb28      	cbnz	r0, 80057d2 <__swbuf_r+0x8e>
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	3b01      	subs	r3, #1
 800578a:	60a3      	str	r3, [r4, #8]
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	701e      	strb	r6, [r3, #0]
 8005794:	6963      	ldr	r3, [r4, #20]
 8005796:	3001      	adds	r0, #1
 8005798:	4283      	cmp	r3, r0
 800579a:	d004      	beq.n	80057a6 <__swbuf_r+0x62>
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	07db      	lsls	r3, r3, #31
 80057a0:	d519      	bpl.n	80057d6 <__swbuf_r+0x92>
 80057a2:	2e0a      	cmp	r6, #10
 80057a4:	d117      	bne.n	80057d6 <__swbuf_r+0x92>
 80057a6:	4621      	mov	r1, r4
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 f933 	bl	8005a14 <_fflush_r>
 80057ae:	b190      	cbz	r0, 80057d6 <__swbuf_r+0x92>
 80057b0:	e00f      	b.n	80057d2 <__swbuf_r+0x8e>
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <__swbuf_r+0x9c>)
 80057b4:	429c      	cmp	r4, r3
 80057b6:	d101      	bne.n	80057bc <__swbuf_r+0x78>
 80057b8:	68ac      	ldr	r4, [r5, #8]
 80057ba:	e7d0      	b.n	800575e <__swbuf_r+0x1a>
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <__swbuf_r+0xa0>)
 80057be:	429c      	cmp	r4, r3
 80057c0:	bf08      	it	eq
 80057c2:	68ec      	ldreq	r4, [r5, #12]
 80057c4:	e7cb      	b.n	800575e <__swbuf_r+0x1a>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 f81f 	bl	800580c <__swsetup_r>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d0cc      	beq.n	800576c <__swbuf_r+0x28>
 80057d2:	f04f 37ff 	mov.w	r7, #4294967295
 80057d6:	4638      	mov	r0, r7
 80057d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057da:	bf00      	nop
 80057dc:	08006ad0 	.word	0x08006ad0
 80057e0:	08006af0 	.word	0x08006af0
 80057e4:	08006ab0 	.word	0x08006ab0

080057e8 <_write_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4c07      	ldr	r4, [pc, #28]	; (8005808 <_write_r+0x20>)
 80057ec:	4605      	mov	r5, r0
 80057ee:	4608      	mov	r0, r1
 80057f0:	4611      	mov	r1, r2
 80057f2:	2200      	movs	r2, #0
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f7fa fefc 	bl	80005f4 <_write>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_write_r+0x1e>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	b103      	cbz	r3, 8005806 <_write_r+0x1e>
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	200014b0 	.word	0x200014b0

0800580c <__swsetup_r>:
 800580c:	4b32      	ldr	r3, [pc, #200]	; (80058d8 <__swsetup_r+0xcc>)
 800580e:	b570      	push	{r4, r5, r6, lr}
 8005810:	681d      	ldr	r5, [r3, #0]
 8005812:	4606      	mov	r6, r0
 8005814:	460c      	mov	r4, r1
 8005816:	b125      	cbz	r5, 8005822 <__swsetup_r+0x16>
 8005818:	69ab      	ldr	r3, [r5, #24]
 800581a:	b913      	cbnz	r3, 8005822 <__swsetup_r+0x16>
 800581c:	4628      	mov	r0, r5
 800581e:	f7ff fb91 	bl	8004f44 <__sinit>
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <__swsetup_r+0xd0>)
 8005824:	429c      	cmp	r4, r3
 8005826:	d10f      	bne.n	8005848 <__swsetup_r+0x3c>
 8005828:	686c      	ldr	r4, [r5, #4]
 800582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582e:	b29a      	uxth	r2, r3
 8005830:	0715      	lsls	r5, r2, #28
 8005832:	d42c      	bmi.n	800588e <__swsetup_r+0x82>
 8005834:	06d0      	lsls	r0, r2, #27
 8005836:	d411      	bmi.n	800585c <__swsetup_r+0x50>
 8005838:	2209      	movs	r2, #9
 800583a:	6032      	str	r2, [r6, #0]
 800583c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	f04f 30ff 	mov.w	r0, #4294967295
 8005846:	e03e      	b.n	80058c6 <__swsetup_r+0xba>
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <__swsetup_r+0xd4>)
 800584a:	429c      	cmp	r4, r3
 800584c:	d101      	bne.n	8005852 <__swsetup_r+0x46>
 800584e:	68ac      	ldr	r4, [r5, #8]
 8005850:	e7eb      	b.n	800582a <__swsetup_r+0x1e>
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <__swsetup_r+0xd8>)
 8005854:	429c      	cmp	r4, r3
 8005856:	bf08      	it	eq
 8005858:	68ec      	ldreq	r4, [r5, #12]
 800585a:	e7e6      	b.n	800582a <__swsetup_r+0x1e>
 800585c:	0751      	lsls	r1, r2, #29
 800585e:	d512      	bpl.n	8005886 <__swsetup_r+0x7a>
 8005860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005862:	b141      	cbz	r1, 8005876 <__swsetup_r+0x6a>
 8005864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005868:	4299      	cmp	r1, r3
 800586a:	d002      	beq.n	8005872 <__swsetup_r+0x66>
 800586c:	4630      	mov	r0, r6
 800586e:	f000 f973 	bl	8005b58 <_free_r>
 8005872:	2300      	movs	r3, #0
 8005874:	6363      	str	r3, [r4, #52]	; 0x34
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	2300      	movs	r3, #0
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0308 	orr.w	r3, r3, #8
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	b94b      	cbnz	r3, 80058a6 <__swsetup_r+0x9a>
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589c:	d003      	beq.n	80058a6 <__swsetup_r+0x9a>
 800589e:	4621      	mov	r1, r4
 80058a0:	4630      	mov	r0, r6
 80058a2:	f000 f917 	bl	8005ad4 <__smakebuf_r>
 80058a6:	89a2      	ldrh	r2, [r4, #12]
 80058a8:	f012 0301 	ands.w	r3, r2, #1
 80058ac:	d00c      	beq.n	80058c8 <__swsetup_r+0xbc>
 80058ae:	2300      	movs	r3, #0
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	6963      	ldr	r3, [r4, #20]
 80058b4:	425b      	negs	r3, r3
 80058b6:	61a3      	str	r3, [r4, #24]
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	b953      	cbnz	r3, 80058d2 <__swsetup_r+0xc6>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80058c4:	d1ba      	bne.n	800583c <__swsetup_r+0x30>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	0792      	lsls	r2, r2, #30
 80058ca:	bf58      	it	pl
 80058cc:	6963      	ldrpl	r3, [r4, #20]
 80058ce:	60a3      	str	r3, [r4, #8]
 80058d0:	e7f2      	b.n	80058b8 <__swsetup_r+0xac>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e7f7      	b.n	80058c6 <__swsetup_r+0xba>
 80058d6:	bf00      	nop
 80058d8:	20000018 	.word	0x20000018
 80058dc:	08006ad0 	.word	0x08006ad0
 80058e0:	08006af0 	.word	0x08006af0
 80058e4:	08006ab0 	.word	0x08006ab0

080058e8 <_close_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4c06      	ldr	r4, [pc, #24]	; (8005904 <_close_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4605      	mov	r5, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	f7fb fa49 	bl	8000d8a <_close>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_close_r+0x1a>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_close_r+0x1a>
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	200014b0 	.word	0x200014b0

08005908 <__sflush_r>:
 8005908:	898a      	ldrh	r2, [r1, #12]
 800590a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590e:	4605      	mov	r5, r0
 8005910:	0710      	lsls	r0, r2, #28
 8005912:	460c      	mov	r4, r1
 8005914:	d458      	bmi.n	80059c8 <__sflush_r+0xc0>
 8005916:	684b      	ldr	r3, [r1, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dc05      	bgt.n	8005928 <__sflush_r+0x20>
 800591c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	dc02      	bgt.n	8005928 <__sflush_r+0x20>
 8005922:	2000      	movs	r0, #0
 8005924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800592a:	2e00      	cmp	r6, #0
 800592c:	d0f9      	beq.n	8005922 <__sflush_r+0x1a>
 800592e:	2300      	movs	r3, #0
 8005930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005934:	682f      	ldr	r7, [r5, #0]
 8005936:	6a21      	ldr	r1, [r4, #32]
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	d032      	beq.n	80059a2 <__sflush_r+0x9a>
 800593c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	075a      	lsls	r2, r3, #29
 8005942:	d505      	bpl.n	8005950 <__sflush_r+0x48>
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	1ac0      	subs	r0, r0, r3
 8005948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800594a:	b10b      	cbz	r3, 8005950 <__sflush_r+0x48>
 800594c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800594e:	1ac0      	subs	r0, r0, r3
 8005950:	2300      	movs	r3, #0
 8005952:	4602      	mov	r2, r0
 8005954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005956:	6a21      	ldr	r1, [r4, #32]
 8005958:	4628      	mov	r0, r5
 800595a:	47b0      	blx	r6
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	d106      	bne.n	8005970 <__sflush_r+0x68>
 8005962:	6829      	ldr	r1, [r5, #0]
 8005964:	291d      	cmp	r1, #29
 8005966:	d848      	bhi.n	80059fa <__sflush_r+0xf2>
 8005968:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <__sflush_r+0x108>)
 800596a:	40ca      	lsrs	r2, r1
 800596c:	07d6      	lsls	r6, r2, #31
 800596e:	d544      	bpl.n	80059fa <__sflush_r+0xf2>
 8005970:	2200      	movs	r2, #0
 8005972:	6062      	str	r2, [r4, #4]
 8005974:	04d9      	lsls	r1, r3, #19
 8005976:	6922      	ldr	r2, [r4, #16]
 8005978:	6022      	str	r2, [r4, #0]
 800597a:	d504      	bpl.n	8005986 <__sflush_r+0x7e>
 800597c:	1c42      	adds	r2, r0, #1
 800597e:	d101      	bne.n	8005984 <__sflush_r+0x7c>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	b903      	cbnz	r3, 8005986 <__sflush_r+0x7e>
 8005984:	6560      	str	r0, [r4, #84]	; 0x54
 8005986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005988:	602f      	str	r7, [r5, #0]
 800598a:	2900      	cmp	r1, #0
 800598c:	d0c9      	beq.n	8005922 <__sflush_r+0x1a>
 800598e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005992:	4299      	cmp	r1, r3
 8005994:	d002      	beq.n	800599c <__sflush_r+0x94>
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f8de 	bl	8005b58 <_free_r>
 800599c:	2000      	movs	r0, #0
 800599e:	6360      	str	r0, [r4, #52]	; 0x34
 80059a0:	e7c0      	b.n	8005924 <__sflush_r+0x1c>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b0      	blx	r6
 80059a8:	1c41      	adds	r1, r0, #1
 80059aa:	d1c8      	bne.n	800593e <__sflush_r+0x36>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0c5      	beq.n	800593e <__sflush_r+0x36>
 80059b2:	2b1d      	cmp	r3, #29
 80059b4:	d001      	beq.n	80059ba <__sflush_r+0xb2>
 80059b6:	2b16      	cmp	r3, #22
 80059b8:	d101      	bne.n	80059be <__sflush_r+0xb6>
 80059ba:	602f      	str	r7, [r5, #0]
 80059bc:	e7b1      	b.n	8005922 <__sflush_r+0x1a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	e7ad      	b.n	8005924 <__sflush_r+0x1c>
 80059c8:	690f      	ldr	r7, [r1, #16]
 80059ca:	2f00      	cmp	r7, #0
 80059cc:	d0a9      	beq.n	8005922 <__sflush_r+0x1a>
 80059ce:	0793      	lsls	r3, r2, #30
 80059d0:	680e      	ldr	r6, [r1, #0]
 80059d2:	bf08      	it	eq
 80059d4:	694b      	ldreq	r3, [r1, #20]
 80059d6:	600f      	str	r7, [r1, #0]
 80059d8:	bf18      	it	ne
 80059da:	2300      	movne	r3, #0
 80059dc:	eba6 0807 	sub.w	r8, r6, r7
 80059e0:	608b      	str	r3, [r1, #8]
 80059e2:	f1b8 0f00 	cmp.w	r8, #0
 80059e6:	dd9c      	ble.n	8005922 <__sflush_r+0x1a>
 80059e8:	4643      	mov	r3, r8
 80059ea:	463a      	mov	r2, r7
 80059ec:	6a21      	ldr	r1, [r4, #32]
 80059ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b0      	blx	r6
 80059f4:	2800      	cmp	r0, #0
 80059f6:	dc06      	bgt.n	8005a06 <__sflush_r+0xfe>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	e78e      	b.n	8005924 <__sflush_r+0x1c>
 8005a06:	4407      	add	r7, r0
 8005a08:	eba8 0800 	sub.w	r8, r8, r0
 8005a0c:	e7e9      	b.n	80059e2 <__sflush_r+0xda>
 8005a0e:	bf00      	nop
 8005a10:	20400001 	.word	0x20400001

08005a14 <_fflush_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	690b      	ldr	r3, [r1, #16]
 8005a18:	4605      	mov	r5, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	b1db      	cbz	r3, 8005a56 <_fflush_r+0x42>
 8005a1e:	b118      	cbz	r0, 8005a28 <_fflush_r+0x14>
 8005a20:	6983      	ldr	r3, [r0, #24]
 8005a22:	b90b      	cbnz	r3, 8005a28 <_fflush_r+0x14>
 8005a24:	f7ff fa8e 	bl	8004f44 <__sinit>
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <_fflush_r+0x48>)
 8005a2a:	429c      	cmp	r4, r3
 8005a2c:	d109      	bne.n	8005a42 <_fflush_r+0x2e>
 8005a2e:	686c      	ldr	r4, [r5, #4]
 8005a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a34:	b17b      	cbz	r3, 8005a56 <_fflush_r+0x42>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a3e:	f7ff bf63 	b.w	8005908 <__sflush_r>
 8005a42:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <_fflush_r+0x4c>)
 8005a44:	429c      	cmp	r4, r3
 8005a46:	d101      	bne.n	8005a4c <_fflush_r+0x38>
 8005a48:	68ac      	ldr	r4, [r5, #8]
 8005a4a:	e7f1      	b.n	8005a30 <_fflush_r+0x1c>
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <_fflush_r+0x50>)
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	bf08      	it	eq
 8005a52:	68ec      	ldreq	r4, [r5, #12]
 8005a54:	e7ec      	b.n	8005a30 <_fflush_r+0x1c>
 8005a56:	2000      	movs	r0, #0
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08006ad0 	.word	0x08006ad0
 8005a60:	08006af0 	.word	0x08006af0
 8005a64:	08006ab0 	.word	0x08006ab0

08005a68 <_lseek_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4c07      	ldr	r4, [pc, #28]	; (8005a88 <_lseek_r+0x20>)
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	4608      	mov	r0, r1
 8005a70:	4611      	mov	r1, r2
 8005a72:	2200      	movs	r2, #0
 8005a74:	6022      	str	r2, [r4, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f7fb f9ae 	bl	8000dd8 <_lseek>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_lseek_r+0x1e>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_lseek_r+0x1e>
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	200014b0 	.word	0x200014b0

08005a8c <__swhatbuf_r>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	460e      	mov	r6, r1
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	2900      	cmp	r1, #0
 8005a96:	b096      	sub	sp, #88	; 0x58
 8005a98:	4614      	mov	r4, r2
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	da07      	bge.n	8005aae <__swhatbuf_r+0x22>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	89b3      	ldrh	r3, [r6, #12]
 8005aa4:	061a      	lsls	r2, r3, #24
 8005aa6:	d410      	bmi.n	8005aca <__swhatbuf_r+0x3e>
 8005aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aac:	e00e      	b.n	8005acc <__swhatbuf_r+0x40>
 8005aae:	466a      	mov	r2, sp
 8005ab0:	f000 f8b2 	bl	8005c18 <_fstat_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	dbf2      	blt.n	8005a9e <__swhatbuf_r+0x12>
 8005ab8:	9a01      	ldr	r2, [sp, #4]
 8005aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ac2:	425a      	negs	r2, r3
 8005ac4:	415a      	adcs	r2, r3
 8005ac6:	602a      	str	r2, [r5, #0]
 8005ac8:	e7ee      	b.n	8005aa8 <__swhatbuf_r+0x1c>
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	2000      	movs	r0, #0
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	b016      	add	sp, #88	; 0x58
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}

08005ad4 <__smakebuf_r>:
 8005ad4:	898b      	ldrh	r3, [r1, #12]
 8005ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ad8:	079d      	lsls	r5, r3, #30
 8005ada:	4606      	mov	r6, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	d507      	bpl.n	8005af0 <__smakebuf_r+0x1c>
 8005ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	2301      	movs	r3, #1
 8005aea:	6163      	str	r3, [r4, #20]
 8005aec:	b002      	add	sp, #8
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	ab01      	add	r3, sp, #4
 8005af2:	466a      	mov	r2, sp
 8005af4:	f7ff ffca 	bl	8005a8c <__swhatbuf_r>
 8005af8:	9900      	ldr	r1, [sp, #0]
 8005afa:	4605      	mov	r5, r0
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff faab 	bl	8005058 <_malloc_r>
 8005b02:	b948      	cbnz	r0, 8005b18 <__smakebuf_r+0x44>
 8005b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b08:	059a      	lsls	r2, r3, #22
 8005b0a:	d4ef      	bmi.n	8005aec <__smakebuf_r+0x18>
 8005b0c:	f023 0303 	bic.w	r3, r3, #3
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	e7e3      	b.n	8005ae0 <__smakebuf_r+0xc>
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <__smakebuf_r+0x7c>)
 8005b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	6020      	str	r0, [r4, #0]
 8005b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	9b00      	ldr	r3, [sp, #0]
 8005b28:	6163      	str	r3, [r4, #20]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	6120      	str	r0, [r4, #16]
 8005b2e:	b15b      	cbz	r3, 8005b48 <__smakebuf_r+0x74>
 8005b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b34:	4630      	mov	r0, r6
 8005b36:	f000 f881 	bl	8005c3c <_isatty_r>
 8005b3a:	b128      	cbz	r0, 8005b48 <__smakebuf_r+0x74>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	431d      	orrs	r5, r3
 8005b4c:	81a5      	strh	r5, [r4, #12]
 8005b4e:	e7cd      	b.n	8005aec <__smakebuf_r+0x18>
 8005b50:	08004f0d 	.word	0x08004f0d

08005b54 <__malloc_lock>:
 8005b54:	4770      	bx	lr

08005b56 <__malloc_unlock>:
 8005b56:	4770      	bx	lr

08005b58 <_free_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d045      	beq.n	8005bec <_free_r+0x94>
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f0c      	subs	r4, r1, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	18e4      	addlt	r4, r4, r3
 8005b6c:	f7ff fff2 	bl	8005b54 <__malloc_lock>
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <_free_r+0x98>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	4610      	mov	r0, r2
 8005b76:	b933      	cbnz	r3, 8005b86 <_free_r+0x2e>
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	6014      	str	r4, [r2, #0]
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b82:	f7ff bfe8 	b.w	8005b56 <__malloc_unlock>
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	d90c      	bls.n	8005ba4 <_free_r+0x4c>
 8005b8a:	6821      	ldr	r1, [r4, #0]
 8005b8c:	1862      	adds	r2, r4, r1
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	bf04      	itt	eq
 8005b92:	681a      	ldreq	r2, [r3, #0]
 8005b94:	685b      	ldreq	r3, [r3, #4]
 8005b96:	6063      	str	r3, [r4, #4]
 8005b98:	bf04      	itt	eq
 8005b9a:	1852      	addeq	r2, r2, r1
 8005b9c:	6022      	streq	r2, [r4, #0]
 8005b9e:	6004      	str	r4, [r0, #0]
 8005ba0:	e7ec      	b.n	8005b7c <_free_r+0x24>
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	b10a      	cbz	r2, 8005bac <_free_r+0x54>
 8005ba8:	42a2      	cmp	r2, r4
 8005baa:	d9fa      	bls.n	8005ba2 <_free_r+0x4a>
 8005bac:	6819      	ldr	r1, [r3, #0]
 8005bae:	1858      	adds	r0, r3, r1
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d10b      	bne.n	8005bcc <_free_r+0x74>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	4401      	add	r1, r0
 8005bb8:	1858      	adds	r0, r3, r1
 8005bba:	4282      	cmp	r2, r0
 8005bbc:	6019      	str	r1, [r3, #0]
 8005bbe:	d1dd      	bne.n	8005b7c <_free_r+0x24>
 8005bc0:	6810      	ldr	r0, [r2, #0]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	6019      	str	r1, [r3, #0]
 8005bca:	e7d7      	b.n	8005b7c <_free_r+0x24>
 8005bcc:	d902      	bls.n	8005bd4 <_free_r+0x7c>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	e7d3      	b.n	8005b7c <_free_r+0x24>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	1821      	adds	r1, r4, r0
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	bf04      	itt	eq
 8005bdc:	6811      	ldreq	r1, [r2, #0]
 8005bde:	6852      	ldreq	r2, [r2, #4]
 8005be0:	6062      	str	r2, [r4, #4]
 8005be2:	bf04      	itt	eq
 8005be4:	1809      	addeq	r1, r1, r0
 8005be6:	6021      	streq	r1, [r4, #0]
 8005be8:	605c      	str	r4, [r3, #4]
 8005bea:	e7c7      	b.n	8005b7c <_free_r+0x24>
 8005bec:	bd38      	pop	{r3, r4, r5, pc}
 8005bee:	bf00      	nop
 8005bf0:	200013fc 	.word	0x200013fc

08005bf4 <_read_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4c07      	ldr	r4, [pc, #28]	; (8005c14 <_read_r+0x20>)
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	6022      	str	r2, [r4, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f7fb f8a4 	bl	8000d50 <_read>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_read_r+0x1e>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_read_r+0x1e>
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	200014b0 	.word	0x200014b0

08005c18 <_fstat_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4c07      	ldr	r4, [pc, #28]	; (8005c38 <_fstat_r+0x20>)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4605      	mov	r5, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	f7fb f8bc 	bl	8000da2 <_fstat>
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	d102      	bne.n	8005c34 <_fstat_r+0x1c>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	b103      	cbz	r3, 8005c34 <_fstat_r+0x1c>
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	bd38      	pop	{r3, r4, r5, pc}
 8005c36:	bf00      	nop
 8005c38:	200014b0 	.word	0x200014b0

08005c3c <_isatty_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4c06      	ldr	r4, [pc, #24]	; (8005c58 <_isatty_r+0x1c>)
 8005c40:	2300      	movs	r3, #0
 8005c42:	4605      	mov	r5, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	f7fb f8bb 	bl	8000dc2 <_isatty>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_isatty_r+0x1a>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_isatty_r+0x1a>
 8005c54:	602b      	str	r3, [r5, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	200014b0 	.word	0x200014b0

08005c5c <_init>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	bf00      	nop
 8005c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c62:	bc08      	pop	{r3}
 8005c64:	469e      	mov	lr, r3
 8005c66:	4770      	bx	lr

08005c68 <_fini>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr
