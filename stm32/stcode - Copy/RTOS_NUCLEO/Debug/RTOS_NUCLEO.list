
RTOS_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004114  08004114  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004114  08004114  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004114  08004114  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800411c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  20000074  08004190  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  08004190  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013387  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002913  00000000  00000000  0003342b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00035d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000040eb  00000000  00000000  00037d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2d5  00000000  00000000  0003be03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7c3b  00000000  00000000  000490d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140d13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  00140d90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fc0 	.word	0x08003fc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003fc0 	.word	0x08003fc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b5b0      	push	{r4, r5, r7, lr}
 80002c2:	b08e      	sub	sp, #56	; 0x38
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 faa4 	bl	8000812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f83d 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f881 	bl	80003d4 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0x74>)
 80002d4:	f107 041c 	add.w	r4, r7, #28
 80002d8:	461d      	mov	r5, r3
 80002da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fefb 	bl	80020e8 <osThreadCreate>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <main+0x78>)
 80002f6:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <main+0x7c>)
 80002fa:	463c      	mov	r4, r7
 80002fc:	461d      	mov	r5, r3
 80002fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800030a:	463b      	mov	r3, r7
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f001 feea 	bl	80020e8 <osThreadCreate>
 8000314:	4602      	mov	r2, r0
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <main+0x80>)
 8000318:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // PORTC, Pin PC13
 800031a:	2120      	movs	r1, #32
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 fd74 	bl	8000e0c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f000 faad 	bl	8000884 <HAL_Delay>
	  printf("I am in ");
 800032a:	4806      	ldr	r0, [pc, #24]	; (8000344 <main+0x84>)
 800032c:	f002 ff64 	bl	80031f8 <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // PORTC, Pin PC13
 8000330:	e7f3      	b.n	800031a <main+0x5a>
 8000332:	bf00      	nop
 8000334:	08003ff0 	.word	0x08003ff0
 8000338:	20000d90 	.word	0x20000d90
 800033c:	08004018 	.word	0x08004018
 8000340:	20000d94 	.word	0x20000d94
 8000344:	08003fd8 	.word	0x08003fd8

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b096      	sub	sp, #88	; 0x58
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	2244      	movs	r2, #68	; 0x44
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f002 ff46 	bl	80031e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	463b      	mov	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800036a:	2310      	movs	r3, #16
 800036c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000376:	23a0      	movs	r3, #160	; 0xa0
 8000378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800037a:	2300      	movs	r3, #0
 800037c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fdc0 	bl	8000f08 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800038e:	f000 f8b3 	bl	80004f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a6:	463b      	mov	r3, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f992 	bl	80016d4 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003b6:	f000 f89f 	bl	80004f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003be:	f000 fd4d 	bl	8000e5c <HAL_PWREx_ControlVoltageScaling>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003c8:	f000 f896 	bl	80004f8 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3758      	adds	r7, #88	; 0x58
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_GPIO_Init+0x90>)
 80003f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0x90>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_GPIO_Init+0x90>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a17      	ldr	r2, [pc, #92]	; (8000464 <MX_GPIO_Init+0x90>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_GPIO_Init+0x90>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x90>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MX_GPIO_Init+0x90>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_GPIO_Init+0x90>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2120      	movs	r1, #32
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f000 fccf 	bl	8000ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800043e:	2320      	movs	r3, #32
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fb18 	bl	8000a8c <HAL_GPIO_Init>

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000

08000468 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f001 fe85 	bl	8002180 <osDelay>
 8000476:	e7fb      	b.n	8000470 <StartDefaultTask+0x8>

08000478 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f001 fe7d 	bl	8002180 <osDelay>

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // PORTC, Pin PC13
 8000486:	2120      	movs	r1, #32
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 fcbe 	bl	8000e0c <HAL_GPIO_TogglePin>
	  printf("I am in ");
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <StartTask02+0x20>)
 8000492:	f002 feb1 	bl	80031f8 <iprintf>
    osDelay(100);
 8000496:	e7f3      	b.n	8000480 <StartTask02+0x8>
 8000498:	08003fd8 	.word	0x08003fd8

0800049c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d101      	bne.n	80004b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ae:	f000 f9c9 	bl	8000844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40012c00 	.word	0x40012c00

080004c0 <_write>:


int _write(int file,char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e009      	b.n	80004e6 <_write+0x26>
 {

 ITM_SendChar(*ptr++);
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	60ba      	str	r2, [r7, #8]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fec8 	bl	8000270 <ITM_SendChar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dbf1      	blt.n	80004d2 <_write+0x12>

 }
return len;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_MspInit+0x44>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6613      	str	r3, [r2, #96]	; 0x60
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x44>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052a:	4a08      	ldr	r2, [pc, #32]	; (800054c <HAL_MspInit+0x44>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	6593      	str	r3, [r2, #88]	; 0x58
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_MspInit+0x44>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2019      	movs	r0, #25
 8000566:	f000 fa67 	bl	8000a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800056a:	2019      	movs	r0, #25
 800056c:	f000 fa80 	bl	8000a70 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <HAL_InitTick+0x9c>)
 8000572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000574:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <HAL_InitTick+0x9c>)
 8000576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800057a:	6613      	str	r3, [r2, #96]	; 0x60
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_InitTick+0x9c>)
 800057e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000588:	f107 0210 	add.w	r2, r7, #16
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fa2c 	bl	80019f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000598:	f001 fa14 	bl	80019c4 <HAL_RCC_GetPCLK2Freq>
 800059c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <HAL_InitTick+0xa0>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	0c9b      	lsrs	r3, r3, #18
 80005a8:	3b01      	subs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_InitTick+0xa4>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <HAL_InitTick+0xa8>)
 80005b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_InitTick+0xa4>)
 80005b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <HAL_InitTick+0xa4>)
 80005bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_InitTick+0xa4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_InitTick+0xa4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HAL_InitTick+0xa4>)
 80005ce:	f001 faa1 	bl	8001b14 <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <HAL_InitTick+0xa4>)
 80005da:	f001 fafd 	bl	8001bd8 <HAL_TIM_Base_Start_IT>
 80005de:	4603      	mov	r3, r0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3730      	adds	r7, #48	; 0x30
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	431bde83 	.word	0x431bde83
 80005f4:	20000d98 	.word	0x20000d98
 80005f8:	40012c00 	.word	0x40012c00

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000636:	f001 fb3f 	bl	8001cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000d98 	.word	0x20000d98

08000644 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e00a      	b.n	800066c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000656:	f3af 8000 	nop.w
 800065a:	4601      	mov	r1, r0
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	b2ca      	uxtb	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	dbf0      	blt.n	8000656 <_read+0x12>
	}

return len;
 8000674:	687b      	ldr	r3, [r7, #4]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_close>:
	}
	return len;
}

int _close(int file)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	return -1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a6:	605a      	str	r2, [r3, #4]
	return 0;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <_isatty>:

int _isatty(int file)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <_sbrk+0x5c>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <_sbrk+0x60>)
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <_sbrk+0x64>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <_sbrk+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	429a      	cmp	r2, r3
 8000716:	d207      	bcs.n	8000728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000718:	f002 fd3c 	bl	8003194 <__errno>
 800071c:	4602      	mov	r2, r0
 800071e:	230c      	movs	r3, #12
 8000720:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	e009      	b.n	800073c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <_sbrk+0x64>)
 8000738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20018000 	.word	0x20018000
 8000748:	00000400 	.word	0x00000400
 800074c:	20000090 	.word	0x20000090
 8000750:	20000df0 	.word	0x20000df0

08000754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <SystemInit+0x64>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <SystemInit+0x64>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0x68>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <SystemInit+0x68>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <SystemInit+0x68>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <SystemInit+0x68>)
 8000780:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000784:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SystemInit+0x68>)
 800078c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000790:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <SystemInit+0x68>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <SystemInit+0x68>)
 8000798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <SystemInit+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SystemInit+0x64>)
 80007a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007aa:	609a      	str	r2, [r3, #8]
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	40021000 	.word	0x40021000

080007c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c4:	f7ff ffc6 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
	ldr	r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007e4:	f842 3b04 	str.w	r3, [r2], #4

080007e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LoopForever+0x16>)
	cmp	r2, r3
 80007ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ee:	f002 fcd7 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f2:	f7ff fd65 	bl	80002c0 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80007fc:	0800411c 	.word	0x0800411c
	ldr	r0, =_sdata
 8000800:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000804:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000808:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800080c:	20000dec 	.word	0x20000dec

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>

08000812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000818:	2300      	movs	r3, #0
 800081a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f900 	bl	8000a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fe94 	bl	8000550 <HAL_InitTick>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e001      	b.n	8000838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000834:	f7ff fe68 	bl	8000508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000838:	79fb      	ldrb	r3, [r7, #7]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x20>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_IncTick+0x24>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008
 8000868:	20000de4 	.word	0x20000de4

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000de4 	.word	0x20000de4

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff ffee 	bl	800086c <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	d005      	beq.n	80008aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_Delay+0x40>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008aa:	bf00      	nop
 80008ac:	f7ff ffde 	bl	800086c <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f7      	bhi.n	80008ac <HAL_Delay+0x28>
  {
  }
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriorityGrouping>:
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <__NVIC_EnableIRQ+0x38>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ff4c 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4a:	f7ff ff61 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	6978      	ldr	r0, [r7, #20]
 8000a56:	f7ff ffb1 	bl	80009bc <NVIC_EncodePriority>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff80 	bl	8000968 <__NVIC_SetPriority>
}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff54 	bl	800092c <__NVIC_EnableIRQ>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e17f      	b.n	8000d9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 8171 	beq.w	8000d96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d00b      	beq.n	8000ad4 <HAL_GPIO_Init+0x48>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d007      	beq.n	8000ad4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac8:	2b11      	cmp	r3, #17
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b12      	cmp	r3, #18
 8000ad2:	d130      	bne.n	8000b36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d118      	bne.n	8000b74 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	f003 0201 	and.w	r2, r3, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x128>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b12      	cmp	r3, #18
 8000bb2:	d123      	bne.n	8000bfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3208      	adds	r2, #8
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0203 	and.w	r2, r3, #3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 80ac 	beq.w	8000d96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b5e      	ldr	r3, [pc, #376]	; (8000db8 <HAL_GPIO_Init+0x32c>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a5d      	ldr	r2, [pc, #372]	; (8000db8 <HAL_GPIO_Init+0x32c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b5b      	ldr	r3, [pc, #364]	; (8000db8 <HAL_GPIO_Init+0x32c>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c56:	4a59      	ldr	r2, [pc, #356]	; (8000dbc <HAL_GPIO_Init+0x330>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c80:	d025      	beq.n	8000cce <HAL_GPIO_Init+0x242>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d01f      	beq.n	8000cca <HAL_GPIO_Init+0x23e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4d      	ldr	r2, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x338>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d019      	beq.n	8000cc6 <HAL_GPIO_Init+0x23a>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x33c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0x236>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4b      	ldr	r2, [pc, #300]	; (8000dcc <HAL_GPIO_Init+0x340>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00d      	beq.n	8000cbe <HAL_GPIO_Init+0x232>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4a      	ldr	r2, [pc, #296]	; (8000dd0 <HAL_GPIO_Init+0x344>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x22e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <HAL_GPIO_Init+0x348>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_GPIO_Init+0x22a>
 8000cb2:	2306      	movs	r3, #6
 8000cb4:	e00c      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	e00a      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e008      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e004      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e002      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_GPIO_Init+0x244>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	f002 0203 	and.w	r2, r2, #3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4093      	lsls	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce0:	4936      	ldr	r1, [pc, #216]	; (8000dbc <HAL_GPIO_Init+0x330>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cee:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d12:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d3c:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_GPIO_Init+0x34c>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa22 f303 	lsr.w	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f47f ae78 	bne.w	8000a9c <HAL_GPIO_Init+0x10>
  }
}
 8000dac:	bf00      	nop
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	48000800 	.word	0x48000800
 8000dc8:	48000c00 	.word	0x48000c00
 8000dcc:	48001000 	.word	0x48001000
 8000dd0:	48001400 	.word	0x48001400
 8000dd4:	48001800 	.word	0x48001800
 8000dd8:	40010400 	.word	0x40010400

08000ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
 8000de8:	4613      	mov	r3, r2
 8000dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dec:	787b      	ldrb	r3, [r7, #1]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4013      	ands	r3, r2
 8000e24:	041a      	lsls	r2, r3, #16
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43d9      	mvns	r1, r3
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	619a      	str	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40007000 	.word	0x40007000

08000e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e6a:	d130      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e78:	d038      	beq.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e82:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2232      	movs	r2, #50	; 0x32
 8000e90:	fb02 f303 	mul.w	r3, r2, r3
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	0c9b      	lsrs	r3, r3, #18
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea0:	e002      	b.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb4:	d102      	bne.n	8000ebc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f2      	bne.n	8000ea2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec8:	d110      	bne.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e00f      	b.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eda:	d007      	beq.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40007000 	.word	0x40007000
 8000f00:	20000000 	.word	0x20000000
 8000f04:	431bde83 	.word	0x431bde83

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e3d4      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f1a:	4ba1      	ldr	r3, [pc, #644]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f24:	4b9e      	ldr	r3, [pc, #632]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80e4 	beq.w	8001104 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <HAL_RCC_OscConfig+0x4a>
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b0c      	cmp	r3, #12
 8000f46:	f040 808b 	bne.w	8001060 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8087 	bne.w	8001060 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f52:	4b93      	ldr	r3, [pc, #588]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_RCC_OscConfig+0x62>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e3ac      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1a      	ldr	r2, [r3, #32]
 8000f6e:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_RCC_OscConfig+0x7c>
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f82:	e005      	b.n	8000f90 <HAL_RCC_OscConfig+0x88>
 8000f84:	4b86      	ldr	r3, [pc, #536]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d223      	bcs.n	8000fdc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fd5b 	bl	8001a54 <RCC_SetFlashLatencyFromMSIRange>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e38d      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa8:	4b7d      	ldr	r3, [pc, #500]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a7c      	ldr	r2, [pc, #496]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b7a      	ldr	r3, [pc, #488]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4977      	ldr	r1, [pc, #476]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc6:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	4972      	ldr	r1, [pc, #456]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
 8000fda:	e025      	b.n	8001028 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fdc:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a6f      	ldr	r2, [pc, #444]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	496a      	ldr	r1, [pc, #424]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffa:	4b69      	ldr	r3, [pc, #420]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4965      	ldr	r1, [pc, #404]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d109      	bne.n	8001028 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fd1b 	bl	8001a54 <RCC_SetFlashLatencyFromMSIRange>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e34d      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001028:	f000 fc36 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 800102c:	4601      	mov	r1, r0
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	4a5a      	ldr	r2, [pc, #360]	; (80011a4 <HAL_RCC_OscConfig+0x29c>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	fa21 f303 	lsr.w	r3, r1, r3
 8001044:	4a58      	ldr	r2, [pc, #352]	; (80011a8 <HAL_RCC_OscConfig+0x2a0>)
 8001046:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <HAL_RCC_OscConfig+0x2a4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa7f 	bl	8000550 <HAL_InitTick>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d052      	beq.n	8001102 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	e331      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d032      	beq.n	80010ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001074:	f7ff fbfa 	bl	800086c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107c:	f7ff fbf6 	bl	800086c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e31a      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800108e:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	493b      	ldr	r1, [pc, #236]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	4936      	ldr	r1, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
 80010cc:	e01a      	b.n	8001104 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a33      	ldr	r2, [pc, #204]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010da:	f7ff fbc7 	bl	800086c <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e2:	f7ff fbc3 	bl	800086c <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e2e7      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f0      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1da>
 8001100:	e000      	b.n	8001104 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001102:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d074      	beq.n	80011fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x21a>
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b0c      	cmp	r3, #12
 800111a:	d10e      	bne.n	800113a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d064      	beq.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d160      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e2c4      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x24a>
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e01d      	b.n	800118e <HAL_RCC_OscConfig+0x286>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0x26e>
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0x286>
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_RCC_OscConfig+0x298>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fb69 	bl	800086c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119c:	e011      	b.n	80011c2 <HAL_RCC_OscConfig+0x2ba>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	08004034 	.word	0x08004034
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fb5c 	bl	800086c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e280      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c2:	4baf      	ldr	r3, [pc, #700]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x2a8>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb4c 	bl	800086c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fb48 	bl	800086c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e26c      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ea:	4ba5      	ldr	r3, [pc, #660]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2d0>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d060      	beq.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d005      	beq.n	8001218 <HAL_RCC_OscConfig+0x310>
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d119      	bne.n	8001246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d116      	bne.n	8001246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001218:	4b99      	ldr	r3, [pc, #612]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_OscConfig+0x328>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e249      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b93      	ldr	r3, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	4990      	ldr	r1, [pc, #576]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001244:	e040      	b.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d023      	beq.n	8001296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124e:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a8b      	ldr	r2, [pc, #556]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125a:	f7ff fb07 	bl	800086c <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001262:	f7ff fb03 	bl	800086c <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e227      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001274:	4b82      	ldr	r3, [pc, #520]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	497c      	ldr	r1, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
 8001294:	e018      	b.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001296:	4b7a      	ldr	r3, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a79      	ldr	r2, [pc, #484]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800129c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fae3 	bl	800086c <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fadf 	bl	800086c <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e203      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012bc:	4b70      	ldr	r3, [pc, #448]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d03c      	beq.n	800134e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01c      	beq.n	8001316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80012de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e2:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fabe 	bl	800086c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff faba 	bl	800086c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1de      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ef      	beq.n	80012f4 <HAL_RCC_OscConfig+0x3ec>
 8001314:	e01b      	b.n	800134e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131c:	4a58      	ldr	r2, [pc, #352]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff faa1 	bl	800086c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fa9d 	bl	800086c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1c1      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1ef      	bne.n	800132e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a6 	beq.w	80014a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10d      	bne.n	8001388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	4a43      	ldr	r2, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6593      	str	r3, [r2, #88]	; 0x58
 8001378:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001384:	2301      	movs	r3, #1
 8001386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001388:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_RCC_OscConfig+0x57c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d118      	bne.n	80013c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x57c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a3a      	ldr	r2, [pc, #232]	; (8001484 <HAL_RCC_OscConfig+0x57c>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fa64 	bl	800086c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a8:	f7ff fa60 	bl	800086c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e184      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_RCC_OscConfig+0x57c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d108      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4d8>
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80013d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d4:	4a2a      	ldr	r2, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013de:	e024      	b.n	800142a <HAL_RCC_OscConfig+0x522>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d110      	bne.n	800140a <HAL_RCC_OscConfig+0x502>
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80013ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 80013fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001408:	e00f      	b.n	800142a <HAL_RCC_OscConfig+0x522>
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 800141c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001420:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d016      	beq.n	8001460 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fa1b 	bl	800086c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fa17 	bl	800086c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e139      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x578>)
 8001452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0ed      	beq.n	800143a <HAL_RCC_OscConfig+0x532>
 800145e:	e01a      	b.n	8001496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7ff fa04 	bl	800086c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001466:	e00f      	b.n	8001488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff fa00 	bl	800086c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d906      	bls.n	8001488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e122      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001488:	4b90      	ldr	r3, [pc, #576]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800148a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1e8      	bne.n	8001468 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	4a8a      	ldr	r2, [pc, #552]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8108 	beq.w	80016c2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	f040 80d0 	bne.w	800165c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014bc:	4b83      	ldr	r3, [pc, #524]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d130      	bne.n	8001532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	3b01      	subs	r3, #1
 80014dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	429a      	cmp	r2, r3
 80014e0:	d127      	bne.n	8001532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d11f      	bne.n	8001532 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014fc:	2a07      	cmp	r2, #7
 80014fe:	bf14      	ite	ne
 8001500:	2201      	movne	r2, #1
 8001502:	2200      	moveq	r2, #0
 8001504:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001506:	4293      	cmp	r3, r2
 8001508:	d113      	bne.n	8001532 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	3b01      	subs	r3, #1
 8001518:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d109      	bne.n	8001532 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	3b01      	subs	r3, #1
 800152c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d06e      	beq.n	8001610 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d069      	beq.n	800160c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001544:	4b61      	ldr	r3, [pc, #388]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0b7      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001554:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800155a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800155e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001560:	f7ff f984 	bl	800086c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f980 	bl	800086c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0a4      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157a:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_RCC_OscConfig+0x7c8>)
 800158c:	4013      	ands	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001596:	3a01      	subs	r2, #1
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	4311      	orrs	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015a0:	0212      	lsls	r2, r2, #8
 80015a2:	4311      	orrs	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015a8:	0852      	lsrs	r2, r2, #1
 80015aa:	3a01      	subs	r2, #1
 80015ac:	0552      	lsls	r2, r2, #21
 80015ae:	4311      	orrs	r1, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015b4:	0852      	lsrs	r2, r2, #1
 80015b6:	3a01      	subs	r2, #1
 80015b8:	0652      	lsls	r2, r2, #25
 80015ba:	4311      	orrs	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015c0:	0912      	lsrs	r2, r2, #4
 80015c2:	0452      	lsls	r2, r2, #17
 80015c4:	430a      	orrs	r2, r1
 80015c6:	4941      	ldr	r1, [pc, #260]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80015d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015d8:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80015de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015e4:	f7ff f942 	bl	800086c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff f93e 	bl	800086c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e062      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800160a:	e05a      	b.n	80016c2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e059      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d152      	bne.n	80016c2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001626:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001634:	f7ff f91a 	bl	800086c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f916 	bl	800086c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e03a      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x734>
 800165a:	e032      	b.n	80016c2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d02d      	beq.n	80016be <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800166c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001680:	f023 0303 	bic.w	r3, r3, #3
 8001684:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 800168c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff f8e9 	bl	800086c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff f8e5 	bl	800086c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e009      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_OscConfig+0x7c4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x796>
 80016bc:	e001      	b.n	80016c2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	f99d808c 	.word	0xf99d808c

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0c8      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d910      	bls.n	8001718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0207 	bic.w	r2, r3, #7
 80016fe:	4961      	ldr	r1, [pc, #388]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b0      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d04c      	beq.n	80017be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d107      	bne.n	800173c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172c:	4b56      	ldr	r3, [pc, #344]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d121      	bne.n	800177c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e09e      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d107      	bne.n	8001754 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d115      	bne.n	800177c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e092      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e086      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176c:	4b46      	ldr	r3, [pc, #280]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e07e      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800177c:	4b42      	ldr	r3, [pc, #264]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 0203 	bic.w	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	493f      	ldr	r1, [pc, #252]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800178e:	f7ff f86d 	bl	800086c <HAL_GetTick>
 8001792:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001794:	e00a      	b.n	80017ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff f869 	bl	800086c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e066      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 020c 	and.w	r2, r3, #12
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d1eb      	bne.n	8001796 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	492c      	ldr	r1, [pc, #176]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d210      	bcs.n	800180c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 0207 	bic.w	r2, r3, #7
 80017f2:	4924      	ldr	r1, [pc, #144]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1b0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e036      	b.n	800187a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4918      	ldr	r1, [pc, #96]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4910      	ldr	r1, [pc, #64]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800184a:	f000 f825 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_RCC_ClockConfig+0x1b4>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	fa21 f303 	lsr.w	r3, r1, r3
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe6e 	bl	8000550 <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	72fb      	strb	r3, [r7, #11]

  return status;
 8001878:	7afb      	ldrb	r3, [r7, #11]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000
 8001888:	40021000 	.word	0x40021000
 800188c:	08004034 	.word	0x08004034
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d121      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d11e      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e005      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018f4:	4a2a      	ldr	r2, [pc, #168]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d102      	bne.n	8001916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	e004      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b08      	cmp	r3, #8
 800191a:	d101      	bne.n	8001920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800191e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d133      	bne.n	800198e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0xa4>
 8001936:	2b03      	cmp	r3, #3
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0xaa>
 800193a:	e005      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800193e:	617b      	str	r3, [r7, #20]
      break;
 8001940:	e005      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001944:	617b      	str	r3, [r7, #20]
      break;
 8001946:	e002      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	617b      	str	r3, [r7, #20]
      break;
 800194c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	3301      	adds	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	fb02 f203 	mul.w	r2, r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_GetSysClockFreq+0x104>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0e5b      	lsrs	r3, r3, #25
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800198e:	69bb      	ldr	r3, [r7, #24]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3724      	adds	r7, #36	; 0x24
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	0800404c 	.word	0x0800404c
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	007a1200 	.word	0x007a1200

080019ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000

080019c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80019c8:	f7ff fff0 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019cc:	4601      	mov	r1, r0
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0adb      	lsrs	r3, r3, #11
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	08004044 	.word	0x08004044

080019f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	220f      	movs	r2, #15
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_RCC_GetClockConfig+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0207 	and.w	r2, r3, #7
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40022000 	.word	0x40022000

08001a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a6c:	f7ff f9e8 	bl	8000e40 <HAL_PWREx_GetVoltageRange>
 8001a70:	6178      	str	r0, [r7, #20]
 8001a72:	e014      	b.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a8c:	f7ff f9d8 	bl	8000e40 <HAL_PWREx_GetVoltageRange>
 8001a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d10b      	bne.n	8001abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d919      	bls.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2ba0      	cmp	r3, #160	; 0xa0
 8001ab0:	d902      	bls.n	8001ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e013      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	e010      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b80      	cmp	r3, #128	; 0x80
 8001ac2:	d902      	bls.n	8001aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	e00a      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b80      	cmp	r3, #128	; 0x80
 8001ace:	d102      	bne.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e004      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b70      	cmp	r3, #112	; 0x70
 8001ada:	d101      	bne.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 0207 	bic.w	r2, r3, #7
 8001ae8:	4909      	ldr	r1, [pc, #36]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e049      	b.n	8001bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f841 	bl	8001bc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 f9f8 	bl	8001f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d001      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e04f      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01d      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x76>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1a:	d018      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x76>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x76>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00e      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x76>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x76>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_TIM_Base_Start_IT+0xd4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_TIM_Base_Start_IT+0x76>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d115      	bne.n	8001c7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d015      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0xb4>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d011      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	e008      	b.n	8001c8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e000      	b.n	8001c8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40000c00 	.word	0x40000c00
 8001cac:	40013400 	.word	0x40013400
 8001cb0:	40014000 	.word	0x40014000
 8001cb4:	00010007 	.word	0x00010007

08001cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0202 	mvn.w	r2, #2
 8001ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f905 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8f7 	bl	8001ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f908 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0204 	mvn.w	r2, #4
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8db 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8cd 	bl	8001ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8de 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0208 	mvn.w	r2, #8
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8b1 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8a3 	bl	8001ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8b4 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0210 	mvn.w	r2, #16
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2208      	movs	r2, #8
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f887 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f879 	bl	8001ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f88a 	bl	8001f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0201 	mvn.w	r2, #1
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fb30 	bl	800049c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f914 	bl	8002090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d10e      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b80      	cmp	r3, #128	; 0x80
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f907 	bl	80020a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d107      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f838 	bl	8001f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d10e      	bne.n	8001eee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d107      	bne.n	8001eee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0220 	mvn.w	r2, #32
 8001ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8c7 	bl	800207c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <TIM_Base_SetConfig+0x114>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f66:	d00f      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <TIM_Base_SetConfig+0x118>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <TIM_Base_SetConfig+0x11c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <TIM_Base_SetConfig+0x120>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3a      	ldr	r2, [pc, #232]	; (800206c <TIM_Base_SetConfig+0x124>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d108      	bne.n	8001f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	; (800205c <TIM_Base_SetConfig+0x114>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d01b      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <TIM_Base_SetConfig+0x118>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d017      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <TIM_Base_SetConfig+0x11c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <TIM_Base_SetConfig+0x120>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00f      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <TIM_Base_SetConfig+0x124>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a28      	ldr	r2, [pc, #160]	; (8002070 <TIM_Base_SetConfig+0x128>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a27      	ldr	r2, [pc, #156]	; (8002074 <TIM_Base_SetConfig+0x12c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d003      	beq.n	8001fe2 <TIM_Base_SetConfig+0x9a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <TIM_Base_SetConfig+0x130>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d108      	bne.n	8001ff4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <TIM_Base_SetConfig+0x114>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0xf8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <TIM_Base_SetConfig+0x124>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0xf8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <TIM_Base_SetConfig+0x128>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0xf8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <TIM_Base_SetConfig+0x12c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0xf8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <TIM_Base_SetConfig+0x130>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	615a      	str	r2, [r3, #20]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800
 8002068:	40000c00 	.word	0x40000c00
 800206c:	40013400 	.word	0x40013400
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800

0800207c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ca:	2b84      	cmp	r3, #132	; 0x84
 80020cc:	d005      	beq.n	80020da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80020ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	3303      	adds	r3, #3
 80020d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af04      	add	r7, sp, #16
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <osThreadCreate+0x54>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01c      	beq.n	800213c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685c      	ldr	r4, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681d      	ldr	r5, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691e      	ldr	r6, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ffcf 	bl	80020b8 <makeFreeRtosPriority>
 800211a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002124:	9202      	str	r2, [sp, #8]
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9100      	str	r1, [sp, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	4632      	mov	r2, r6
 800212e:	4629      	mov	r1, r5
 8002130:	4620      	mov	r0, r4
 8002132:	f000 f8ed 	bl	8002310 <xTaskCreateStatic>
 8002136:	4603      	mov	r3, r0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e01c      	b.n	8002176 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685c      	ldr	r4, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002148:	b29e      	uxth	r6, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ffb1 	bl	80020b8 <makeFreeRtosPriority>
 8002156:	4602      	mov	r2, r0
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	9200      	str	r2, [sp, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4632      	mov	r2, r6
 8002164:	4629      	mov	r1, r5
 8002166:	4620      	mov	r0, r4
 8002168:	f000 f92c 	bl	80023c4 <xTaskCreate>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002180 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <osDelay+0x16>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	e000      	b.n	8002198 <osDelay+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fa49 	bl	8002630 <vTaskDelay>
  
  return osOK;
 800219e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 0208 	add.w	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0208 	add.w	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d103      	bne.n	800226a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e00c      	b.n	8002284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3308      	adds	r3, #8
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e002      	b.n	8002278 <vListInsert+0x2e>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d2f6      	bcs.n	8002272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6892      	ldr	r2, [r2, #8]
 80022d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6852      	ldr	r2, [r2, #4]
 80022dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d103      	bne.n	80022f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08e      	sub	sp, #56	; 0x38
 8002314:	af04      	add	r7, sp, #16
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	e7fe      	b.n	8002336 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <xTaskCreateStatic+0x42>
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	e7fe      	b.n	8002350 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002352:	2354      	movs	r3, #84	; 0x54
 8002354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b54      	cmp	r3, #84	; 0x54
 800235a:	d009      	beq.n	8002370 <xTaskCreateStatic+0x60>
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e7fe      	b.n	800236e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002370:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01e      	beq.n	80023b6 <xTaskCreateStatic+0xa6>
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01b      	beq.n	80023b6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002386:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002390:	2300      	movs	r3, #0
 8002392:	9303      	str	r3, [sp, #12]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	9302      	str	r3, [sp, #8]
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f850 	bl	800244e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b0:	f000 f8d4 	bl	800255c <prvAddNewTaskToReadyList>
 80023b4:	e001      	b.n	80023ba <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80023ba:	697b      	ldr	r3, [r7, #20]
	}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af04      	add	r7, sp, #16
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd05 	bl	8002de8 <pvPortMalloc>
 80023de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00e      	beq.n	8002404 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023e6:	2054      	movs	r0, #84	; 0x54
 80023e8:	f000 fcfe 	bl	8002de8 <pvPortMalloc>
 80023ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
 80023fa:	e005      	b.n	8002408 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f000 fdb5 	bl	8002f6c <vPortFree>
 8002402:	e001      	b.n	8002408 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d017      	beq.n	800243e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	2300      	movs	r3, #0
 800241a:	9303      	str	r3, [sp, #12]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f80e 	bl	800244e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002432:	69f8      	ldr	r0, [r7, #28]
 8002434:	f000 f892 	bl	800255c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002438:	2301      	movs	r3, #1
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	e002      	b.n	8002444 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002444:	69bb      	ldr	r3, [r7, #24]
	}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002466:	3b01      	subs	r3, #1
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f023 0307 	bic.w	r3, r3, #7
 8002474:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <prvInitialiseNewTask+0x46>
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e7fe      	b.n	8002492 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01f      	beq.n	80024da <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e012      	b.n	80024c6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	7819      	ldrb	r1, [r3, #0]
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	3334      	adds	r3, #52	; 0x34
 80024b0:	460a      	mov	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d9e9      	bls.n	80024a0 <prvInitialiseNewTask+0x52>
 80024cc:	e000      	b.n	80024d0 <prvInitialiseNewTask+0x82>
			{
				break;
 80024ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024d8:	e003      	b.n	80024e2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	2b06      	cmp	r3, #6
 80024e6:	d901      	bls.n	80024ec <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024e8:	2306      	movs	r3, #6
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	2200      	movs	r2, #0
 80024fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	3304      	adds	r3, #4
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe70 	bl	80021e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	3318      	adds	r3, #24
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fe6b 	bl	80021e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	f1c3 0207 	rsb	r2, r3, #7
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	2200      	movs	r2, #0
 800252c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	69b8      	ldr	r0, [r7, #24]
 800253c:	f000 fb2e 	bl	8002b9c <pxPortInitialiseStack>
 8002540:	4602      	mov	r2, r0
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002564:	f000 fb90 	bl	8002c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <prvAddNewTaskToReadyList+0xb8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <prvAddNewTaskToReadyList+0xb8>)
 8002570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <prvAddNewTaskToReadyList+0xbc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <prvAddNewTaskToReadyList+0xbc>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <prvAddNewTaskToReadyList+0xb8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d110      	bne.n	80025aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002588:	f000 fa42 	bl	8002a10 <prvInitialiseTaskLists>
 800258c:	e00d      	b.n	80025aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <prvAddNewTaskToReadyList+0xc0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <prvAddNewTaskToReadyList+0xbc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d802      	bhi.n	80025aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025a4:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <prvAddNewTaskToReadyList+0xbc>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <prvAddNewTaskToReadyList+0xc4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <prvAddNewTaskToReadyList+0xc4>)
 80025b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	2201      	movs	r2, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <prvAddNewTaskToReadyList+0xc8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <prvAddNewTaskToReadyList+0xc8>)
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <prvAddNewTaskToReadyList+0xcc>)
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7ff fe10 	bl	8002202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025e2:	f000 fb7f 	bl	8002ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <prvAddNewTaskToReadyList+0xc0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00e      	beq.n	800260c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <prvAddNewTaskToReadyList+0xbc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <prvAddNewTaskToReadyList+0xd0>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000190 	.word	0x20000190
 8002618:	20000094 	.word	0x20000094
 800261c:	2000019c 	.word	0x2000019c
 8002620:	200001ac 	.word	0x200001ac
 8002624:	20000198 	.word	0x20000198
 8002628:	20000098 	.word	0x20000098
 800262c:	e000ed04 	.word	0xe000ed04

08002630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <vTaskDelay+0x60>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <vTaskDelay+0x2e>
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	e7fe      	b.n	800265c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800265e:	f000 f81b 	bl	8002698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002662:	2100      	movs	r1, #0
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fa33 	bl	8002ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800266a:	f000 f823 	bl	80026b4 <xTaskResumeAll>
 800266e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <vTaskDelay+0x64>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200001b4 	.word	0x200001b4
 8002694:	e000ed04 	.word	0xe000ed04

08002698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <vTaskSuspendAll+0x18>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <vTaskSuspendAll+0x18>)
 80026a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	200001b4 	.word	0x200001b4

080026b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <xTaskResumeAll+0x114>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <xTaskResumeAll+0x2a>
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	e7fe      	b.n	80026dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80026de:	f000 fad3 	bl	8002c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <xTaskResumeAll+0x114>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	4a37      	ldr	r2, [pc, #220]	; (80027c8 <xTaskResumeAll+0x114>)
 80026ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <xTaskResumeAll+0x114>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d161      	bne.n	80027b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <xTaskResumeAll+0x118>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05d      	beq.n	80027b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026fc:	e02e      	b.n	800275c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <xTaskResumeAll+0x11c>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3318      	adds	r3, #24
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fdd6 	bl	80022bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3304      	adds	r3, #4
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fdd1 	bl	80022bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <xTaskResumeAll+0x120>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	4a2a      	ldr	r2, [pc, #168]	; (80027d4 <xTaskResumeAll+0x120>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <xTaskResumeAll+0x124>)
 800273a:	441a      	add	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3304      	adds	r3, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7ff fd5d 	bl	8002202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <xTaskResumeAll+0x128>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	429a      	cmp	r2, r3
 8002754:	d302      	bcc.n	800275c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <xTaskResumeAll+0x12c>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <xTaskResumeAll+0x11c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1cc      	bne.n	80026fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800276a:	f000 f991 	bl	8002a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <xTaskResumeAll+0x130>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d010      	beq.n	800279c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800277a:	f000 f837 	bl	80027ec <xTaskIncrementTick>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <xTaskResumeAll+0x12c>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3b01      	subs	r3, #1
 800278e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f1      	bne.n	800277a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <xTaskResumeAll+0x130>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <xTaskResumeAll+0x12c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <xTaskResumeAll+0x134>)
 80027aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027b8:	f000 fa94 	bl	8002ce4 <vPortExitCritical>

	return xAlreadyYielded;
 80027bc:	68bb      	ldr	r3, [r7, #8]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200001b4 	.word	0x200001b4
 80027cc:	20000190 	.word	0x20000190
 80027d0:	20000154 	.word	0x20000154
 80027d4:	20000198 	.word	0x20000198
 80027d8:	20000098 	.word	0x20000098
 80027dc:	20000094 	.word	0x20000094
 80027e0:	200001a4 	.word	0x200001a4
 80027e4:	200001a0 	.word	0x200001a0
 80027e8:	e000ed04 	.word	0xe000ed04

080027ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027f6:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <xTaskIncrementTick+0x144>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 8087 	bne.w	800290e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002800:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <xTaskIncrementTick+0x148>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <xTaskIncrementTick+0x148>)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11f      	bne.n	8002854 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002814:	4b48      	ldr	r3, [pc, #288]	; (8002938 <xTaskIncrementTick+0x14c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <xTaskIncrementTick+0x46>
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	e7fe      	b.n	8002830 <xTaskIncrementTick+0x44>
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <xTaskIncrementTick+0x14c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <xTaskIncrementTick+0x150>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3e      	ldr	r2, [pc, #248]	; (8002938 <xTaskIncrementTick+0x14c>)
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4a3e      	ldr	r2, [pc, #248]	; (800293c <xTaskIncrementTick+0x150>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <xTaskIncrementTick+0x154>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <xTaskIncrementTick+0x154>)
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	f000 f91e 	bl	8002a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <xTaskIncrementTick+0x158>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	429a      	cmp	r2, r3
 800285c:	d348      	bcc.n	80028f0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <xTaskIncrementTick+0x14c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <xTaskIncrementTick+0x158>)
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	601a      	str	r2, [r3, #0]
					break;
 8002870:	e03e      	b.n	80028f0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <xTaskIncrementTick+0x14c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	d203      	bcs.n	8002892 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <xTaskIncrementTick+0x158>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002890:	e02e      	b.n	80028f0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3304      	adds	r3, #4
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fd10 	bl	80022bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3318      	adds	r3, #24
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fd07 	bl	80022bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	2201      	movs	r2, #1
 80028b4:	409a      	lsls	r2, r3
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <xTaskIncrementTick+0x15c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <xTaskIncrementTick+0x15c>)
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4a1f      	ldr	r2, [pc, #124]	; (800294c <xTaskIncrementTick+0x160>)
 80028ce:	441a      	add	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7ff fc93 	bl	8002202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <xTaskIncrementTick+0x164>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d3b9      	bcc.n	800285e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ee:	e7b6      	b.n	800285e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <xTaskIncrementTick+0x164>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f6:	4915      	ldr	r1, [pc, #84]	; (800294c <xTaskIncrementTick+0x160>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d907      	bls.n	8002918 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002908:	2301      	movs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e004      	b.n	8002918 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <xTaskIncrementTick+0x168>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <xTaskIncrementTick+0x168>)
 8002916:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <xTaskIncrementTick+0x16c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002920:	2301      	movs	r3, #1
 8002922:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002924:	697b      	ldr	r3, [r7, #20]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200001b4 	.word	0x200001b4
 8002934:	20000194 	.word	0x20000194
 8002938:	2000014c 	.word	0x2000014c
 800293c:	20000150 	.word	0x20000150
 8002940:	200001a8 	.word	0x200001a8
 8002944:	200001b0 	.word	0x200001b0
 8002948:	20000198 	.word	0x20000198
 800294c:	20000098 	.word	0x20000098
 8002950:	20000094 	.word	0x20000094
 8002954:	200001a0 	.word	0x200001a0
 8002958:	200001a4 	.word	0x200001a4

0800295c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <vTaskSwitchContext+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800296a:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <vTaskSwitchContext+0xa4>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002970:	e03e      	b.n	80029f0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <vTaskSwitchContext+0xa4>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <vTaskSwitchContext+0xa8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	f1c3 031f 	rsb	r3, r3, #31
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	491e      	ldr	r1, [pc, #120]	; (8002a08 <vTaskSwitchContext+0xac>)
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	e7fe      	b.n	80029b4 <vTaskSwitchContext+0x58>
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <vTaskSwitchContext+0xac>)
 80029c2:	4413      	add	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	3308      	adds	r3, #8
 80029d8:	429a      	cmp	r2, r3
 80029da:	d104      	bne.n	80029e6 <vTaskSwitchContext+0x8a>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <vTaskSwitchContext+0xb0>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	200001b4 	.word	0x200001b4
 8002a00:	200001a4 	.word	0x200001a4
 8002a04:	20000198 	.word	0x20000198
 8002a08:	20000098 	.word	0x20000098
 8002a0c:	20000094 	.word	0x20000094

08002a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	e00c      	b.n	8002a36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <prvInitialiseTaskLists+0x60>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fbbc 	bl	80021a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d9ef      	bls.n	8002a1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <prvInitialiseTaskLists+0x64>)
 8002a3e:	f7ff fbb3 	bl	80021a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a42:	480d      	ldr	r0, [pc, #52]	; (8002a78 <prvInitialiseTaskLists+0x68>)
 8002a44:	f7ff fbb0 	bl	80021a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <prvInitialiseTaskLists+0x6c>)
 8002a4a:	f7ff fbad 	bl	80021a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a4e:	480c      	ldr	r0, [pc, #48]	; (8002a80 <prvInitialiseTaskLists+0x70>)
 8002a50:	f7ff fbaa 	bl	80021a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <prvInitialiseTaskLists+0x74>)
 8002a56:	f7ff fba7 	bl	80021a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <prvInitialiseTaskLists+0x78>)
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <prvInitialiseTaskLists+0x64>)
 8002a5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvInitialiseTaskLists+0x7c>)
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <prvInitialiseTaskLists+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000098 	.word	0x20000098
 8002a74:	20000124 	.word	0x20000124
 8002a78:	20000138 	.word	0x20000138
 8002a7c:	20000154 	.word	0x20000154
 8002a80:	20000168 	.word	0x20000168
 8002a84:	2000017c 	.word	0x2000017c
 8002a88:	2000014c 	.word	0x2000014c
 8002a8c:	20000150 	.word	0x20000150

08002a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <prvResetNextTaskUnblockTime+0x38>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <prvResetNextTaskUnblockTime+0x3c>)
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002aa8:	e008      	b.n	8002abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <prvResetNextTaskUnblockTime+0x38>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <prvResetNextTaskUnblockTime+0x3c>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	2000014c 	.word	0x2000014c
 8002acc:	200001b0 	.word	0x200001b0

08002ad0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fbe8 	bl	80022bc <uxListRemove>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10b      	bne.n	8002b0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	2201      	movs	r2, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4013      	ands	r3, r2
 8002b06:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d10a      	bne.n	8002b28 <prvAddCurrentTaskToDelayedList+0x58>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481a      	ldr	r0, [pc, #104]	; (8002b8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b22:	f7ff fb6e 	bl	8002202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b26:	e026      	b.n	8002b76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d209      	bcs.n	8002b54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f7ff fb7c 	bl	800224a <vListInsert>
}
 8002b52:	e010      	b.n	8002b76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f7ff fb72 	bl	800224a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d202      	bcs.n	8002b76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b70:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6013      	str	r3, [r2, #0]
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000194 	.word	0x20000194
 8002b84:	20000094 	.word	0x20000094
 8002b88:	20000198 	.word	0x20000198
 8002b8c:	2000017c 	.word	0x2000017c
 8002b90:	20000150 	.word	0x20000150
 8002b94:	2000014c 	.word	0x2000014c
 8002b98:	200001b0 	.word	0x200001b0

08002b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b04      	subs	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b04      	subs	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b04      	subs	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <pxPortInitialiseStack+0x64>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b14      	subs	r3, #20
 8002bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3b04      	subs	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f06f 0202 	mvn.w	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3b20      	subs	r3, #32
 8002bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	08002c05 	.word	0x08002c05

08002c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <prvTaskExitError+0x50>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d009      	beq.n	8002c2c <prvTaskExitError+0x28>
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e7fe      	b.n	8002c2a <prvTaskExitError+0x26>
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c3e:	bf00      	nop
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0fc      	beq.n	8002c40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000000c 	.word	0x2000000c
	...

08002c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <pxCurrentTCBConst2>)
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	6808      	ldr	r0, [r1, #0]
 8002c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6a:	f380 8809 	msr	PSP, r0
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f380 8811 	msr	BASEPRI, r0
 8002c7a:	4770      	bx	lr
 8002c7c:	f3af 8000 	nop.w

08002c80 <pxCurrentTCBConst2>:
 8002c80:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop

08002c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <vPortEnterCritical+0x54>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <vPortEnterCritical+0x54>)
 8002ca8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <vPortEnterCritical+0x54>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10e      	bne.n	8002cd0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <vPortEnterCritical+0x58>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <vPortEnterCritical+0x48>
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	e7fe      	b.n	8002cce <vPortEnterCritical+0x46>
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <vPortExitCritical+0x4c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <vPortExitCritical+0x22>
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	e7fe      	b.n	8002d04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <vPortExitCritical+0x4c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <vPortExitCritical+0x4c>)
 8002d0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <vPortExitCritical+0x4c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <vPortExitCritical+0x3e>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c
	...

08002d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d40:	f3ef 8009 	mrs	r0, PSP
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <pxCurrentTCBConst>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f01e 0f10 	tst.w	lr, #16
 8002d50:	bf08      	it	eq
 8002d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d64:	f380 8811 	msr	BASEPRI, r0
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f7ff fdf4 	bl	800295c <vTaskSwitchContext>
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f380 8811 	msr	BASEPRI, r0
 8002d7c:	bc09      	pop	{r0, r3}
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	6808      	ldr	r0, [r1, #0]
 8002d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d86:	f01e 0f10 	tst.w	lr, #16
 8002d8a:	bf08      	it	eq
 8002d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d90:	f380 8809 	msr	PSP, r0
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w

08002da0 <pxCurrentTCBConst>:
 8002da0:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop

08002da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002dc0:	f7ff fd14 	bl	80027ec <xTaskIncrementTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <SysTick_Handler+0x3c>)
 8002dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002df4:	f7ff fc50 	bl	8002698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002df8:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <pvPortMalloc+0x170>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e00:	f000 f90c 	bl	800301c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e04:	4b55      	ldr	r3, [pc, #340]	; (8002f5c <pvPortMalloc+0x174>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 808c 	bne.w	8002f2a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01c      	beq.n	8002e52 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002e18:	2208      	movs	r2, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d013      	beq.n	8002e52 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	3308      	adds	r3, #8
 8002e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <pvPortMalloc+0x6a>
	__asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e7fe      	b.n	8002e50 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d068      	beq.n	8002f2a <pvPortMalloc+0x142>
 8002e58:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <pvPortMalloc+0x178>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d863      	bhi.n	8002f2a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e62:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <pvPortMalloc+0x17c>)
 8002e64:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <pvPortMalloc+0x17c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e6c:	e004      	b.n	8002e78 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d903      	bls.n	8002e8a <pvPortMalloc+0xa2>
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f1      	bne.n	8002e6e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <pvPortMalloc+0x170>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d04a      	beq.n	8002f2a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	4413      	add	r3, r2
 8002e9c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad2      	subs	r2, r2, r3
 8002eae:	2308      	movs	r3, #8
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d91e      	bls.n	8002ef4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <pvPortMalloc+0xf4>
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e7fe      	b.n	8002eda <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad2      	subs	r2, r2, r3
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002eee:	69b8      	ldr	r0, [r7, #24]
 8002ef0:	f000 f8f6 	bl	80030e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <pvPortMalloc+0x178>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <pvPortMalloc+0x178>)
 8002f00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <pvPortMalloc+0x178>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <pvPortMalloc+0x180>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d203      	bcs.n	8002f16 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <pvPortMalloc+0x178>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <pvPortMalloc+0x180>)
 8002f14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <pvPortMalloc+0x174>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f2a:	f7ff fbc3 	bl	80026b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d009      	beq.n	8002f4c <pvPortMalloc+0x164>
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e7fe      	b.n	8002f4a <pvPortMalloc+0x162>
	return pvReturn;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000d78 	.word	0x20000d78
 8002f5c:	20000d84 	.word	0x20000d84
 8002f60:	20000d7c 	.word	0x20000d7c
 8002f64:	20000d70 	.word	0x20000d70
 8002f68:	20000d80 	.word	0x20000d80

08002f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d046      	beq.n	800300c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	425b      	negs	r3, r3
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4413      	add	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <vPortFree+0xa8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <vPortFree+0x42>
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e7fe      	b.n	8002fac <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <vPortFree+0x5e>
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e7fe      	b.n	8002fc8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <vPortFree+0xa8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d019      	beq.n	800300c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d115      	bne.n	800300c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <vPortFree+0xa8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ff0:	f7ff fb52 	bl	8002698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <vPortFree+0xac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a06      	ldr	r2, [pc, #24]	; (8003018 <vPortFree+0xac>)
 8003000:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003002:	6938      	ldr	r0, [r7, #16]
 8003004:	f000 f86c 	bl	80030e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003008:	f7ff fb54 	bl	80026b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800300c:	bf00      	nop
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000d84 	.word	0x20000d84
 8003018:	20000d7c 	.word	0x20000d7c

0800301c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003022:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003026:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003028:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <prvHeapInit+0xac>)
 800302a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3307      	adds	r3, #7
 800303a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0307 	bic.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <prvHeapInit+0xac>)
 800304c:	4413      	add	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003054:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <prvHeapInit+0xb0>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <prvHeapInit+0xb0>)
 800305c:	2200      	movs	r2, #0
 800305e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4413      	add	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003068:	2208      	movs	r2, #8
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0307 	bic.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <prvHeapInit+0xb4>)
 800307c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <prvHeapInit+0xb4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <prvHeapInit+0xb4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <prvHeapInit+0xb4>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <prvHeapInit+0xb8>)
 80030aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <prvHeapInit+0xbc>)
 80030b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <prvHeapInit+0xc0>)
 80030b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030ba:	601a      	str	r2, [r3, #0]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	200001b8 	.word	0x200001b8
 80030cc:	20000d70 	.word	0x20000d70
 80030d0:	20000d78 	.word	0x20000d78
 80030d4:	20000d80 	.word	0x20000d80
 80030d8:	20000d7c 	.word	0x20000d7c
 80030dc:	20000d84 	.word	0x20000d84

080030e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <prvInsertBlockIntoFreeList+0xac>)
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e002      	b.n	80030f4 <prvInsertBlockIntoFreeList+0x14>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d8f7      	bhi.n	80030ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	4413      	add	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d108      	bne.n	8003122 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	441a      	add	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	441a      	add	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d118      	bne.n	8003168 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <prvInsertBlockIntoFreeList+0xb0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d00d      	beq.n	800315e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	441a      	add	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e008      	b.n	8003170 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <prvInsertBlockIntoFreeList+0xb0>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e003      	b.n	8003170 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d002      	beq.n	800317e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000d70 	.word	0x20000d70
 8003190:	20000d78 	.word	0x20000d78

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000010 	.word	0x20000010

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4e0d      	ldr	r6, [pc, #52]	; (80031d8 <__libc_init_array+0x38>)
 80031a4:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a6:	1ba4      	subs	r4, r4, r6
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	2500      	movs	r5, #0
 80031ac:	42a5      	cmp	r5, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	4e0b      	ldr	r6, [pc, #44]	; (80031e0 <__libc_init_array+0x40>)
 80031b2:	4c0c      	ldr	r4, [pc, #48]	; (80031e4 <__libc_init_array+0x44>)
 80031b4:	f000 ff04 	bl	8003fc0 <_init>
 80031b8:	1ba4      	subs	r4, r4, r6
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	2500      	movs	r5, #0
 80031be:	42a5      	cmp	r5, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c8:	4798      	blx	r3
 80031ca:	3501      	adds	r5, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d2:	4798      	blx	r3
 80031d4:	3501      	adds	r5, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08004114 	.word	0x08004114
 80031dc:	08004114 	.word	0x08004114
 80031e0:	08004114 	.word	0x08004114
 80031e4:	08004118 	.word	0x08004118

080031e8 <memset>:
 80031e8:	4402      	add	r2, r0
 80031ea:	4603      	mov	r3, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <iprintf>:
 80031f8:	b40f      	push	{r0, r1, r2, r3}
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <iprintf+0x2c>)
 80031fc:	b513      	push	{r0, r1, r4, lr}
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	b124      	cbz	r4, 800320c <iprintf+0x14>
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	b913      	cbnz	r3, 800320c <iprintf+0x14>
 8003206:	4620      	mov	r0, r4
 8003208:	f000 f84e 	bl	80032a8 <__sinit>
 800320c:	ab05      	add	r3, sp, #20
 800320e:	9a04      	ldr	r2, [sp, #16]
 8003210:	68a1      	ldr	r1, [r4, #8]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	4620      	mov	r0, r4
 8003216:	f000 f955 	bl	80034c4 <_vfiprintf_r>
 800321a:	b002      	add	sp, #8
 800321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003220:	b004      	add	sp, #16
 8003222:	4770      	bx	lr
 8003224:	20000010 	.word	0x20000010

08003228 <std>:
 8003228:	2300      	movs	r3, #0
 800322a:	b510      	push	{r4, lr}
 800322c:	4604      	mov	r4, r0
 800322e:	e9c0 3300 	strd	r3, r3, [r0]
 8003232:	6083      	str	r3, [r0, #8]
 8003234:	8181      	strh	r1, [r0, #12]
 8003236:	6643      	str	r3, [r0, #100]	; 0x64
 8003238:	81c2      	strh	r2, [r0, #14]
 800323a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800323e:	6183      	str	r3, [r0, #24]
 8003240:	4619      	mov	r1, r3
 8003242:	2208      	movs	r2, #8
 8003244:	305c      	adds	r0, #92	; 0x5c
 8003246:	f7ff ffcf 	bl	80031e8 <memset>
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <std+0x38>)
 800324c:	6263      	str	r3, [r4, #36]	; 0x24
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <std+0x3c>)
 8003250:	62a3      	str	r3, [r4, #40]	; 0x28
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <std+0x40>)
 8003254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <std+0x44>)
 8003258:	6224      	str	r4, [r4, #32]
 800325a:	6323      	str	r3, [r4, #48]	; 0x30
 800325c:	bd10      	pop	{r4, pc}
 800325e:	bf00      	nop
 8003260:	08003a21 	.word	0x08003a21
 8003264:	08003a43 	.word	0x08003a43
 8003268:	08003a7b 	.word	0x08003a7b
 800326c:	08003a9f 	.word	0x08003a9f

08003270 <_cleanup_r>:
 8003270:	4901      	ldr	r1, [pc, #4]	; (8003278 <_cleanup_r+0x8>)
 8003272:	f000 b885 	b.w	8003380 <_fwalk_reent>
 8003276:	bf00      	nop
 8003278:	08003d79 	.word	0x08003d79

0800327c <__sfmoreglue>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	1e4a      	subs	r2, r1, #1
 8003280:	2568      	movs	r5, #104	; 0x68
 8003282:	4355      	muls	r5, r2
 8003284:	460e      	mov	r6, r1
 8003286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800328a:	f000 f897 	bl	80033bc <_malloc_r>
 800328e:	4604      	mov	r4, r0
 8003290:	b140      	cbz	r0, 80032a4 <__sfmoreglue+0x28>
 8003292:	2100      	movs	r1, #0
 8003294:	e9c0 1600 	strd	r1, r6, [r0]
 8003298:	300c      	adds	r0, #12
 800329a:	60a0      	str	r0, [r4, #8]
 800329c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032a0:	f7ff ffa2 	bl	80031e8 <memset>
 80032a4:	4620      	mov	r0, r4
 80032a6:	bd70      	pop	{r4, r5, r6, pc}

080032a8 <__sinit>:
 80032a8:	6983      	ldr	r3, [r0, #24]
 80032aa:	b510      	push	{r4, lr}
 80032ac:	4604      	mov	r4, r0
 80032ae:	bb33      	cbnz	r3, 80032fe <__sinit+0x56>
 80032b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032b4:	6503      	str	r3, [r0, #80]	; 0x50
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <__sinit+0x58>)
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <__sinit+0x5c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6282      	str	r2, [r0, #40]	; 0x28
 80032be:	4298      	cmp	r0, r3
 80032c0:	bf04      	itt	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	6183      	streq	r3, [r0, #24]
 80032c6:	f000 f81f 	bl	8003308 <__sfp>
 80032ca:	6060      	str	r0, [r4, #4]
 80032cc:	4620      	mov	r0, r4
 80032ce:	f000 f81b 	bl	8003308 <__sfp>
 80032d2:	60a0      	str	r0, [r4, #8]
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 f817 	bl	8003308 <__sfp>
 80032da:	2200      	movs	r2, #0
 80032dc:	60e0      	str	r0, [r4, #12]
 80032de:	2104      	movs	r1, #4
 80032e0:	6860      	ldr	r0, [r4, #4]
 80032e2:	f7ff ffa1 	bl	8003228 <std>
 80032e6:	2201      	movs	r2, #1
 80032e8:	2109      	movs	r1, #9
 80032ea:	68a0      	ldr	r0, [r4, #8]
 80032ec:	f7ff ff9c 	bl	8003228 <std>
 80032f0:	2202      	movs	r2, #2
 80032f2:	2112      	movs	r1, #18
 80032f4:	68e0      	ldr	r0, [r4, #12]
 80032f6:	f7ff ff97 	bl	8003228 <std>
 80032fa:	2301      	movs	r3, #1
 80032fc:	61a3      	str	r3, [r4, #24]
 80032fe:	bd10      	pop	{r4, pc}
 8003300:	0800407c 	.word	0x0800407c
 8003304:	08003271 	.word	0x08003271

08003308 <__sfp>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <__sfp+0x70>)
 800330c:	681e      	ldr	r6, [r3, #0]
 800330e:	69b3      	ldr	r3, [r6, #24]
 8003310:	4607      	mov	r7, r0
 8003312:	b913      	cbnz	r3, 800331a <__sfp+0x12>
 8003314:	4630      	mov	r0, r6
 8003316:	f7ff ffc7 	bl	80032a8 <__sinit>
 800331a:	3648      	adds	r6, #72	; 0x48
 800331c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003320:	3b01      	subs	r3, #1
 8003322:	d503      	bpl.n	800332c <__sfp+0x24>
 8003324:	6833      	ldr	r3, [r6, #0]
 8003326:	b133      	cbz	r3, 8003336 <__sfp+0x2e>
 8003328:	6836      	ldr	r6, [r6, #0]
 800332a:	e7f7      	b.n	800331c <__sfp+0x14>
 800332c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003330:	b16d      	cbz	r5, 800334e <__sfp+0x46>
 8003332:	3468      	adds	r4, #104	; 0x68
 8003334:	e7f4      	b.n	8003320 <__sfp+0x18>
 8003336:	2104      	movs	r1, #4
 8003338:	4638      	mov	r0, r7
 800333a:	f7ff ff9f 	bl	800327c <__sfmoreglue>
 800333e:	6030      	str	r0, [r6, #0]
 8003340:	2800      	cmp	r0, #0
 8003342:	d1f1      	bne.n	8003328 <__sfp+0x20>
 8003344:	230c      	movs	r3, #12
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4604      	mov	r4, r0
 800334a:	4620      	mov	r0, r4
 800334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <__sfp+0x74>)
 8003350:	6665      	str	r5, [r4, #100]	; 0x64
 8003352:	e9c4 5500 	strd	r5, r5, [r4]
 8003356:	60a5      	str	r5, [r4, #8]
 8003358:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800335c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003360:	2208      	movs	r2, #8
 8003362:	4629      	mov	r1, r5
 8003364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003368:	f7ff ff3e 	bl	80031e8 <memset>
 800336c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003374:	e7e9      	b.n	800334a <__sfp+0x42>
 8003376:	bf00      	nop
 8003378:	0800407c 	.word	0x0800407c
 800337c:	ffff0001 	.word	0xffff0001

08003380 <_fwalk_reent>:
 8003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003384:	4680      	mov	r8, r0
 8003386:	4689      	mov	r9, r1
 8003388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800338c:	2600      	movs	r6, #0
 800338e:	b914      	cbnz	r4, 8003396 <_fwalk_reent+0x16>
 8003390:	4630      	mov	r0, r6
 8003392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003396:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800339a:	3f01      	subs	r7, #1
 800339c:	d501      	bpl.n	80033a2 <_fwalk_reent+0x22>
 800339e:	6824      	ldr	r4, [r4, #0]
 80033a0:	e7f5      	b.n	800338e <_fwalk_reent+0xe>
 80033a2:	89ab      	ldrh	r3, [r5, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d907      	bls.n	80033b8 <_fwalk_reent+0x38>
 80033a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ac:	3301      	adds	r3, #1
 80033ae:	d003      	beq.n	80033b8 <_fwalk_reent+0x38>
 80033b0:	4629      	mov	r1, r5
 80033b2:	4640      	mov	r0, r8
 80033b4:	47c8      	blx	r9
 80033b6:	4306      	orrs	r6, r0
 80033b8:	3568      	adds	r5, #104	; 0x68
 80033ba:	e7ee      	b.n	800339a <_fwalk_reent+0x1a>

080033bc <_malloc_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	1ccd      	adds	r5, r1, #3
 80033c0:	f025 0503 	bic.w	r5, r5, #3
 80033c4:	3508      	adds	r5, #8
 80033c6:	2d0c      	cmp	r5, #12
 80033c8:	bf38      	it	cc
 80033ca:	250c      	movcc	r5, #12
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	4606      	mov	r6, r0
 80033d0:	db01      	blt.n	80033d6 <_malloc_r+0x1a>
 80033d2:	42a9      	cmp	r1, r5
 80033d4:	d903      	bls.n	80033de <_malloc_r+0x22>
 80033d6:	230c      	movs	r3, #12
 80033d8:	6033      	str	r3, [r6, #0]
 80033da:	2000      	movs	r0, #0
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	f000 fd6b 	bl	8003eb8 <__malloc_lock>
 80033e2:	4a21      	ldr	r2, [pc, #132]	; (8003468 <_malloc_r+0xac>)
 80033e4:	6814      	ldr	r4, [r2, #0]
 80033e6:	4621      	mov	r1, r4
 80033e8:	b991      	cbnz	r1, 8003410 <_malloc_r+0x54>
 80033ea:	4c20      	ldr	r4, [pc, #128]	; (800346c <_malloc_r+0xb0>)
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	b91b      	cbnz	r3, 80033f8 <_malloc_r+0x3c>
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 fb05 	bl	8003a00 <_sbrk_r>
 80033f6:	6020      	str	r0, [r4, #0]
 80033f8:	4629      	mov	r1, r5
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 fb00 	bl	8003a00 <_sbrk_r>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d124      	bne.n	800344e <_malloc_r+0x92>
 8003404:	230c      	movs	r3, #12
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	4630      	mov	r0, r6
 800340a:	f000 fd56 	bl	8003eba <__malloc_unlock>
 800340e:	e7e4      	b.n	80033da <_malloc_r+0x1e>
 8003410:	680b      	ldr	r3, [r1, #0]
 8003412:	1b5b      	subs	r3, r3, r5
 8003414:	d418      	bmi.n	8003448 <_malloc_r+0x8c>
 8003416:	2b0b      	cmp	r3, #11
 8003418:	d90f      	bls.n	800343a <_malloc_r+0x7e>
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	50cd      	str	r5, [r1, r3]
 800341e:	18cc      	adds	r4, r1, r3
 8003420:	4630      	mov	r0, r6
 8003422:	f000 fd4a 	bl	8003eba <__malloc_unlock>
 8003426:	f104 000b 	add.w	r0, r4, #11
 800342a:	1d23      	adds	r3, r4, #4
 800342c:	f020 0007 	bic.w	r0, r0, #7
 8003430:	1ac3      	subs	r3, r0, r3
 8003432:	d0d3      	beq.n	80033dc <_malloc_r+0x20>
 8003434:	425a      	negs	r2, r3
 8003436:	50e2      	str	r2, [r4, r3]
 8003438:	e7d0      	b.n	80033dc <_malloc_r+0x20>
 800343a:	428c      	cmp	r4, r1
 800343c:	684b      	ldr	r3, [r1, #4]
 800343e:	bf16      	itet	ne
 8003440:	6063      	strne	r3, [r4, #4]
 8003442:	6013      	streq	r3, [r2, #0]
 8003444:	460c      	movne	r4, r1
 8003446:	e7eb      	b.n	8003420 <_malloc_r+0x64>
 8003448:	460c      	mov	r4, r1
 800344a:	6849      	ldr	r1, [r1, #4]
 800344c:	e7cc      	b.n	80033e8 <_malloc_r+0x2c>
 800344e:	1cc4      	adds	r4, r0, #3
 8003450:	f024 0403 	bic.w	r4, r4, #3
 8003454:	42a0      	cmp	r0, r4
 8003456:	d005      	beq.n	8003464 <_malloc_r+0xa8>
 8003458:	1a21      	subs	r1, r4, r0
 800345a:	4630      	mov	r0, r6
 800345c:	f000 fad0 	bl	8003a00 <_sbrk_r>
 8003460:	3001      	adds	r0, #1
 8003462:	d0cf      	beq.n	8003404 <_malloc_r+0x48>
 8003464:	6025      	str	r5, [r4, #0]
 8003466:	e7db      	b.n	8003420 <_malloc_r+0x64>
 8003468:	20000d88 	.word	0x20000d88
 800346c:	20000d8c 	.word	0x20000d8c

08003470 <__sfputc_r>:
 8003470:	6893      	ldr	r3, [r2, #8]
 8003472:	3b01      	subs	r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	b410      	push	{r4}
 8003478:	6093      	str	r3, [r2, #8]
 800347a:	da08      	bge.n	800348e <__sfputc_r+0x1e>
 800347c:	6994      	ldr	r4, [r2, #24]
 800347e:	42a3      	cmp	r3, r4
 8003480:	db01      	blt.n	8003486 <__sfputc_r+0x16>
 8003482:	290a      	cmp	r1, #10
 8003484:	d103      	bne.n	800348e <__sfputc_r+0x1e>
 8003486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800348a:	f000 bb0d 	b.w	8003aa8 <__swbuf_r>
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	1c58      	adds	r0, r3, #1
 8003492:	6010      	str	r0, [r2, #0]
 8003494:	7019      	strb	r1, [r3, #0]
 8003496:	4608      	mov	r0, r1
 8003498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800349c:	4770      	bx	lr

0800349e <__sfputs_r>:
 800349e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a0:	4606      	mov	r6, r0
 80034a2:	460f      	mov	r7, r1
 80034a4:	4614      	mov	r4, r2
 80034a6:	18d5      	adds	r5, r2, r3
 80034a8:	42ac      	cmp	r4, r5
 80034aa:	d101      	bne.n	80034b0 <__sfputs_r+0x12>
 80034ac:	2000      	movs	r0, #0
 80034ae:	e007      	b.n	80034c0 <__sfputs_r+0x22>
 80034b0:	463a      	mov	r2, r7
 80034b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7ff ffda 	bl	8003470 <__sfputc_r>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d1f3      	bne.n	80034a8 <__sfputs_r+0xa>
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034c4 <_vfiprintf_r>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	460c      	mov	r4, r1
 80034ca:	b09d      	sub	sp, #116	; 0x74
 80034cc:	4617      	mov	r7, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	4606      	mov	r6, r0
 80034d2:	b118      	cbz	r0, 80034dc <_vfiprintf_r+0x18>
 80034d4:	6983      	ldr	r3, [r0, #24]
 80034d6:	b90b      	cbnz	r3, 80034dc <_vfiprintf_r+0x18>
 80034d8:	f7ff fee6 	bl	80032a8 <__sinit>
 80034dc:	4b7c      	ldr	r3, [pc, #496]	; (80036d0 <_vfiprintf_r+0x20c>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d158      	bne.n	8003594 <_vfiprintf_r+0xd0>
 80034e2:	6874      	ldr	r4, [r6, #4]
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	0718      	lsls	r0, r3, #28
 80034e8:	d55e      	bpl.n	80035a8 <_vfiprintf_r+0xe4>
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05b      	beq.n	80035a8 <_vfiprintf_r+0xe4>
 80034f0:	2300      	movs	r3, #0
 80034f2:	9309      	str	r3, [sp, #36]	; 0x24
 80034f4:	2320      	movs	r3, #32
 80034f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034fa:	2330      	movs	r3, #48	; 0x30
 80034fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003500:	9503      	str	r5, [sp, #12]
 8003502:	f04f 0b01 	mov.w	fp, #1
 8003506:	46b8      	mov	r8, r7
 8003508:	4645      	mov	r5, r8
 800350a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800350e:	b10b      	cbz	r3, 8003514 <_vfiprintf_r+0x50>
 8003510:	2b25      	cmp	r3, #37	; 0x25
 8003512:	d154      	bne.n	80035be <_vfiprintf_r+0xfa>
 8003514:	ebb8 0a07 	subs.w	sl, r8, r7
 8003518:	d00b      	beq.n	8003532 <_vfiprintf_r+0x6e>
 800351a:	4653      	mov	r3, sl
 800351c:	463a      	mov	r2, r7
 800351e:	4621      	mov	r1, r4
 8003520:	4630      	mov	r0, r6
 8003522:	f7ff ffbc 	bl	800349e <__sfputs_r>
 8003526:	3001      	adds	r0, #1
 8003528:	f000 80c2 	beq.w	80036b0 <_vfiprintf_r+0x1ec>
 800352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800352e:	4453      	add	r3, sl
 8003530:	9309      	str	r3, [sp, #36]	; 0x24
 8003532:	f898 3000 	ldrb.w	r3, [r8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80ba 	beq.w	80036b0 <_vfiprintf_r+0x1ec>
 800353c:	2300      	movs	r3, #0
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	9307      	str	r3, [sp, #28]
 800354a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800354e:	931a      	str	r3, [sp, #104]	; 0x68
 8003550:	46a8      	mov	r8, r5
 8003552:	2205      	movs	r2, #5
 8003554:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003558:	485e      	ldr	r0, [pc, #376]	; (80036d4 <_vfiprintf_r+0x210>)
 800355a:	f7fc fe39 	bl	80001d0 <memchr>
 800355e:	9b04      	ldr	r3, [sp, #16]
 8003560:	bb78      	cbnz	r0, 80035c2 <_vfiprintf_r+0xfe>
 8003562:	06d9      	lsls	r1, r3, #27
 8003564:	bf44      	itt	mi
 8003566:	2220      	movmi	r2, #32
 8003568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800356c:	071a      	lsls	r2, r3, #28
 800356e:	bf44      	itt	mi
 8003570:	222b      	movmi	r2, #43	; 0x2b
 8003572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003576:	782a      	ldrb	r2, [r5, #0]
 8003578:	2a2a      	cmp	r2, #42	; 0x2a
 800357a:	d02a      	beq.n	80035d2 <_vfiprintf_r+0x10e>
 800357c:	9a07      	ldr	r2, [sp, #28]
 800357e:	46a8      	mov	r8, r5
 8003580:	2000      	movs	r0, #0
 8003582:	250a      	movs	r5, #10
 8003584:	4641      	mov	r1, r8
 8003586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800358a:	3b30      	subs	r3, #48	; 0x30
 800358c:	2b09      	cmp	r3, #9
 800358e:	d969      	bls.n	8003664 <_vfiprintf_r+0x1a0>
 8003590:	b360      	cbz	r0, 80035ec <_vfiprintf_r+0x128>
 8003592:	e024      	b.n	80035de <_vfiprintf_r+0x11a>
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <_vfiprintf_r+0x214>)
 8003596:	429c      	cmp	r4, r3
 8003598:	d101      	bne.n	800359e <_vfiprintf_r+0xda>
 800359a:	68b4      	ldr	r4, [r6, #8]
 800359c:	e7a2      	b.n	80034e4 <_vfiprintf_r+0x20>
 800359e:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <_vfiprintf_r+0x218>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	bf08      	it	eq
 80035a4:	68f4      	ldreq	r4, [r6, #12]
 80035a6:	e79d      	b.n	80034e4 <_vfiprintf_r+0x20>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 fae0 	bl	8003b70 <__swsetup_r>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d09d      	beq.n	80034f0 <_vfiprintf_r+0x2c>
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	b01d      	add	sp, #116	; 0x74
 80035ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035be:	46a8      	mov	r8, r5
 80035c0:	e7a2      	b.n	8003508 <_vfiprintf_r+0x44>
 80035c2:	4a44      	ldr	r2, [pc, #272]	; (80036d4 <_vfiprintf_r+0x210>)
 80035c4:	1a80      	subs	r0, r0, r2
 80035c6:	fa0b f000 	lsl.w	r0, fp, r0
 80035ca:	4318      	orrs	r0, r3
 80035cc:	9004      	str	r0, [sp, #16]
 80035ce:	4645      	mov	r5, r8
 80035d0:	e7be      	b.n	8003550 <_vfiprintf_r+0x8c>
 80035d2:	9a03      	ldr	r2, [sp, #12]
 80035d4:	1d11      	adds	r1, r2, #4
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	9103      	str	r1, [sp, #12]
 80035da:	2a00      	cmp	r2, #0
 80035dc:	db01      	blt.n	80035e2 <_vfiprintf_r+0x11e>
 80035de:	9207      	str	r2, [sp, #28]
 80035e0:	e004      	b.n	80035ec <_vfiprintf_r+0x128>
 80035e2:	4252      	negs	r2, r2
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	9207      	str	r2, [sp, #28]
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	f898 3000 	ldrb.w	r3, [r8]
 80035f0:	2b2e      	cmp	r3, #46	; 0x2e
 80035f2:	d10e      	bne.n	8003612 <_vfiprintf_r+0x14e>
 80035f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035f8:	2b2a      	cmp	r3, #42	; 0x2a
 80035fa:	d138      	bne.n	800366e <_vfiprintf_r+0x1aa>
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	1d1a      	adds	r2, r3, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	9203      	str	r2, [sp, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	bfb8      	it	lt
 8003608:	f04f 33ff 	movlt.w	r3, #4294967295
 800360c:	f108 0802 	add.w	r8, r8, #2
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	4d33      	ldr	r5, [pc, #204]	; (80036e0 <_vfiprintf_r+0x21c>)
 8003614:	f898 1000 	ldrb.w	r1, [r8]
 8003618:	2203      	movs	r2, #3
 800361a:	4628      	mov	r0, r5
 800361c:	f7fc fdd8 	bl	80001d0 <memchr>
 8003620:	b140      	cbz	r0, 8003634 <_vfiprintf_r+0x170>
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	1b40      	subs	r0, r0, r5
 8003626:	fa03 f000 	lsl.w	r0, r3, r0
 800362a:	9b04      	ldr	r3, [sp, #16]
 800362c:	4303      	orrs	r3, r0
 800362e:	f108 0801 	add.w	r8, r8, #1
 8003632:	9304      	str	r3, [sp, #16]
 8003634:	f898 1000 	ldrb.w	r1, [r8]
 8003638:	482a      	ldr	r0, [pc, #168]	; (80036e4 <_vfiprintf_r+0x220>)
 800363a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800363e:	2206      	movs	r2, #6
 8003640:	f108 0701 	add.w	r7, r8, #1
 8003644:	f7fc fdc4 	bl	80001d0 <memchr>
 8003648:	2800      	cmp	r0, #0
 800364a:	d037      	beq.n	80036bc <_vfiprintf_r+0x1f8>
 800364c:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <_vfiprintf_r+0x224>)
 800364e:	bb1b      	cbnz	r3, 8003698 <_vfiprintf_r+0x1d4>
 8003650:	9b03      	ldr	r3, [sp, #12]
 8003652:	3307      	adds	r3, #7
 8003654:	f023 0307 	bic.w	r3, r3, #7
 8003658:	3308      	adds	r3, #8
 800365a:	9303      	str	r3, [sp, #12]
 800365c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800365e:	444b      	add	r3, r9
 8003660:	9309      	str	r3, [sp, #36]	; 0x24
 8003662:	e750      	b.n	8003506 <_vfiprintf_r+0x42>
 8003664:	fb05 3202 	mla	r2, r5, r2, r3
 8003668:	2001      	movs	r0, #1
 800366a:	4688      	mov	r8, r1
 800366c:	e78a      	b.n	8003584 <_vfiprintf_r+0xc0>
 800366e:	2300      	movs	r3, #0
 8003670:	f108 0801 	add.w	r8, r8, #1
 8003674:	9305      	str	r3, [sp, #20]
 8003676:	4619      	mov	r1, r3
 8003678:	250a      	movs	r5, #10
 800367a:	4640      	mov	r0, r8
 800367c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003680:	3a30      	subs	r2, #48	; 0x30
 8003682:	2a09      	cmp	r2, #9
 8003684:	d903      	bls.n	800368e <_vfiprintf_r+0x1ca>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0c3      	beq.n	8003612 <_vfiprintf_r+0x14e>
 800368a:	9105      	str	r1, [sp, #20]
 800368c:	e7c1      	b.n	8003612 <_vfiprintf_r+0x14e>
 800368e:	fb05 2101 	mla	r1, r5, r1, r2
 8003692:	2301      	movs	r3, #1
 8003694:	4680      	mov	r8, r0
 8003696:	e7f0      	b.n	800367a <_vfiprintf_r+0x1b6>
 8003698:	ab03      	add	r3, sp, #12
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4622      	mov	r2, r4
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <_vfiprintf_r+0x228>)
 80036a0:	a904      	add	r1, sp, #16
 80036a2:	4630      	mov	r0, r6
 80036a4:	f3af 8000 	nop.w
 80036a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036ac:	4681      	mov	r9, r0
 80036ae:	d1d5      	bne.n	800365c <_vfiprintf_r+0x198>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	065b      	lsls	r3, r3, #25
 80036b4:	f53f af7e 	bmi.w	80035b4 <_vfiprintf_r+0xf0>
 80036b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ba:	e77d      	b.n	80035b8 <_vfiprintf_r+0xf4>
 80036bc:	ab03      	add	r3, sp, #12
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4622      	mov	r2, r4
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <_vfiprintf_r+0x228>)
 80036c4:	a904      	add	r1, sp, #16
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 f888 	bl	80037dc <_printf_i>
 80036cc:	e7ec      	b.n	80036a8 <_vfiprintf_r+0x1e4>
 80036ce:	bf00      	nop
 80036d0:	080040a0 	.word	0x080040a0
 80036d4:	080040e0 	.word	0x080040e0
 80036d8:	080040c0 	.word	0x080040c0
 80036dc:	08004080 	.word	0x08004080
 80036e0:	080040e6 	.word	0x080040e6
 80036e4:	080040ea 	.word	0x080040ea
 80036e8:	00000000 	.word	0x00000000
 80036ec:	0800349f 	.word	0x0800349f

080036f0 <_printf_common>:
 80036f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f4:	4691      	mov	r9, r2
 80036f6:	461f      	mov	r7, r3
 80036f8:	688a      	ldr	r2, [r1, #8]
 80036fa:	690b      	ldr	r3, [r1, #16]
 80036fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003700:	4293      	cmp	r3, r2
 8003702:	bfb8      	it	lt
 8003704:	4613      	movlt	r3, r2
 8003706:	f8c9 3000 	str.w	r3, [r9]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800370e:	4606      	mov	r6, r0
 8003710:	460c      	mov	r4, r1
 8003712:	b112      	cbz	r2, 800371a <_printf_common+0x2a>
 8003714:	3301      	adds	r3, #1
 8003716:	f8c9 3000 	str.w	r3, [r9]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003724:	3302      	addmi	r3, #2
 8003726:	f8c9 3000 	strmi.w	r3, [r9]
 800372a:	6825      	ldr	r5, [r4, #0]
 800372c:	f015 0506 	ands.w	r5, r5, #6
 8003730:	d107      	bne.n	8003742 <_printf_common+0x52>
 8003732:	f104 0a19 	add.w	sl, r4, #25
 8003736:	68e3      	ldr	r3, [r4, #12]
 8003738:	f8d9 2000 	ldr.w	r2, [r9]
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	42ab      	cmp	r3, r5
 8003740:	dc28      	bgt.n	8003794 <_printf_common+0xa4>
 8003742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	3300      	adds	r3, #0
 800374a:	bf18      	it	ne
 800374c:	2301      	movne	r3, #1
 800374e:	0692      	lsls	r2, r2, #26
 8003750:	d42d      	bmi.n	80037ae <_printf_common+0xbe>
 8003752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003756:	4639      	mov	r1, r7
 8003758:	4630      	mov	r0, r6
 800375a:	47c0      	blx	r8
 800375c:	3001      	adds	r0, #1
 800375e:	d020      	beq.n	80037a2 <_printf_common+0xb2>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	68e5      	ldr	r5, [r4, #12]
 8003764:	f8d9 2000 	ldr.w	r2, [r9]
 8003768:	f003 0306 	and.w	r3, r3, #6
 800376c:	2b04      	cmp	r3, #4
 800376e:	bf08      	it	eq
 8003770:	1aad      	subeq	r5, r5, r2
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf0c      	ite	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	2500      	movne	r5, #0
 800377e:	4293      	cmp	r3, r2
 8003780:	bfc4      	itt	gt
 8003782:	1a9b      	subgt	r3, r3, r2
 8003784:	18ed      	addgt	r5, r5, r3
 8003786:	f04f 0900 	mov.w	r9, #0
 800378a:	341a      	adds	r4, #26
 800378c:	454d      	cmp	r5, r9
 800378e:	d11a      	bne.n	80037c6 <_printf_common+0xd6>
 8003790:	2000      	movs	r0, #0
 8003792:	e008      	b.n	80037a6 <_printf_common+0xb6>
 8003794:	2301      	movs	r3, #1
 8003796:	4652      	mov	r2, sl
 8003798:	4639      	mov	r1, r7
 800379a:	4630      	mov	r0, r6
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d103      	bne.n	80037aa <_printf_common+0xba>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7c3      	b.n	8003736 <_printf_common+0x46>
 80037ae:	18e1      	adds	r1, r4, r3
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	2030      	movs	r0, #48	; 0x30
 80037b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b8:	4422      	add	r2, r4
 80037ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c2:	3302      	adds	r3, #2
 80037c4:	e7c5      	b.n	8003752 <_printf_common+0x62>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4622      	mov	r2, r4
 80037ca:	4639      	mov	r1, r7
 80037cc:	4630      	mov	r0, r6
 80037ce:	47c0      	blx	r8
 80037d0:	3001      	adds	r0, #1
 80037d2:	d0e6      	beq.n	80037a2 <_printf_common+0xb2>
 80037d4:	f109 0901 	add.w	r9, r9, #1
 80037d8:	e7d8      	b.n	800378c <_printf_common+0x9c>
	...

080037dc <_printf_i>:
 80037dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037e4:	460c      	mov	r4, r1
 80037e6:	7e09      	ldrb	r1, [r1, #24]
 80037e8:	b085      	sub	sp, #20
 80037ea:	296e      	cmp	r1, #110	; 0x6e
 80037ec:	4617      	mov	r7, r2
 80037ee:	4606      	mov	r6, r0
 80037f0:	4698      	mov	r8, r3
 80037f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037f4:	f000 80b3 	beq.w	800395e <_printf_i+0x182>
 80037f8:	d822      	bhi.n	8003840 <_printf_i+0x64>
 80037fa:	2963      	cmp	r1, #99	; 0x63
 80037fc:	d036      	beq.n	800386c <_printf_i+0x90>
 80037fe:	d80a      	bhi.n	8003816 <_printf_i+0x3a>
 8003800:	2900      	cmp	r1, #0
 8003802:	f000 80b9 	beq.w	8003978 <_printf_i+0x19c>
 8003806:	2958      	cmp	r1, #88	; 0x58
 8003808:	f000 8083 	beq.w	8003912 <_printf_i+0x136>
 800380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003814:	e032      	b.n	800387c <_printf_i+0xa0>
 8003816:	2964      	cmp	r1, #100	; 0x64
 8003818:	d001      	beq.n	800381e <_printf_i+0x42>
 800381a:	2969      	cmp	r1, #105	; 0x69
 800381c:	d1f6      	bne.n	800380c <_printf_i+0x30>
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	6813      	ldr	r3, [r2, #0]
 8003822:	0605      	lsls	r5, r0, #24
 8003824:	f103 0104 	add.w	r1, r3, #4
 8003828:	d52a      	bpl.n	8003880 <_printf_i+0xa4>
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6011      	str	r1, [r2, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	da03      	bge.n	800383a <_printf_i+0x5e>
 8003832:	222d      	movs	r2, #45	; 0x2d
 8003834:	425b      	negs	r3, r3
 8003836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800383a:	486f      	ldr	r0, [pc, #444]	; (80039f8 <_printf_i+0x21c>)
 800383c:	220a      	movs	r2, #10
 800383e:	e039      	b.n	80038b4 <_printf_i+0xd8>
 8003840:	2973      	cmp	r1, #115	; 0x73
 8003842:	f000 809d 	beq.w	8003980 <_printf_i+0x1a4>
 8003846:	d808      	bhi.n	800385a <_printf_i+0x7e>
 8003848:	296f      	cmp	r1, #111	; 0x6f
 800384a:	d020      	beq.n	800388e <_printf_i+0xb2>
 800384c:	2970      	cmp	r1, #112	; 0x70
 800384e:	d1dd      	bne.n	800380c <_printf_i+0x30>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	e003      	b.n	8003862 <_printf_i+0x86>
 800385a:	2975      	cmp	r1, #117	; 0x75
 800385c:	d017      	beq.n	800388e <_printf_i+0xb2>
 800385e:	2978      	cmp	r1, #120	; 0x78
 8003860:	d1d4      	bne.n	800380c <_printf_i+0x30>
 8003862:	2378      	movs	r3, #120	; 0x78
 8003864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003868:	4864      	ldr	r0, [pc, #400]	; (80039fc <_printf_i+0x220>)
 800386a:	e055      	b.n	8003918 <_printf_i+0x13c>
 800386c:	6813      	ldr	r3, [r2, #0]
 800386e:	1d19      	adds	r1, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6011      	str	r1, [r2, #0]
 8003874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387c:	2301      	movs	r3, #1
 800387e:	e08c      	b.n	800399a <_printf_i+0x1be>
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6011      	str	r1, [r2, #0]
 8003884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003888:	bf18      	it	ne
 800388a:	b21b      	sxthne	r3, r3
 800388c:	e7cf      	b.n	800382e <_printf_i+0x52>
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	6825      	ldr	r5, [r4, #0]
 8003892:	1d18      	adds	r0, r3, #4
 8003894:	6010      	str	r0, [r2, #0]
 8003896:	0628      	lsls	r0, r5, #24
 8003898:	d501      	bpl.n	800389e <_printf_i+0xc2>
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e002      	b.n	80038a4 <_printf_i+0xc8>
 800389e:	0668      	lsls	r0, r5, #25
 80038a0:	d5fb      	bpl.n	800389a <_printf_i+0xbe>
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	4854      	ldr	r0, [pc, #336]	; (80039f8 <_printf_i+0x21c>)
 80038a6:	296f      	cmp	r1, #111	; 0x6f
 80038a8:	bf14      	ite	ne
 80038aa:	220a      	movne	r2, #10
 80038ac:	2208      	moveq	r2, #8
 80038ae:	2100      	movs	r1, #0
 80038b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038b4:	6865      	ldr	r5, [r4, #4]
 80038b6:	60a5      	str	r5, [r4, #8]
 80038b8:	2d00      	cmp	r5, #0
 80038ba:	f2c0 8095 	blt.w	80039e8 <_printf_i+0x20c>
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	f021 0104 	bic.w	r1, r1, #4
 80038c4:	6021      	str	r1, [r4, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d13d      	bne.n	8003946 <_printf_i+0x16a>
 80038ca:	2d00      	cmp	r5, #0
 80038cc:	f040 808e 	bne.w	80039ec <_printf_i+0x210>
 80038d0:	4665      	mov	r5, ip
 80038d2:	2a08      	cmp	r2, #8
 80038d4:	d10b      	bne.n	80038ee <_printf_i+0x112>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	07db      	lsls	r3, r3, #31
 80038da:	d508      	bpl.n	80038ee <_printf_i+0x112>
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	6862      	ldr	r2, [r4, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	bfde      	ittt	le
 80038e4:	2330      	movle	r3, #48	; 0x30
 80038e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ee:	ebac 0305 	sub.w	r3, ip, r5
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	f8cd 8000 	str.w	r8, [sp]
 80038f8:	463b      	mov	r3, r7
 80038fa:	aa03      	add	r2, sp, #12
 80038fc:	4621      	mov	r1, r4
 80038fe:	4630      	mov	r0, r6
 8003900:	f7ff fef6 	bl	80036f0 <_printf_common>
 8003904:	3001      	adds	r0, #1
 8003906:	d14d      	bne.n	80039a4 <_printf_i+0x1c8>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	b005      	add	sp, #20
 800390e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003912:	4839      	ldr	r0, [pc, #228]	; (80039f8 <_printf_i+0x21c>)
 8003914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	1d1d      	adds	r5, r3, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6015      	str	r5, [r2, #0]
 8003922:	060a      	lsls	r2, r1, #24
 8003924:	d50b      	bpl.n	800393e <_printf_i+0x162>
 8003926:	07ca      	lsls	r2, r1, #31
 8003928:	bf44      	itt	mi
 800392a:	f041 0120 	orrmi.w	r1, r1, #32
 800392e:	6021      	strmi	r1, [r4, #0]
 8003930:	b91b      	cbnz	r3, 800393a <_printf_i+0x15e>
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	f022 0220 	bic.w	r2, r2, #32
 8003938:	6022      	str	r2, [r4, #0]
 800393a:	2210      	movs	r2, #16
 800393c:	e7b7      	b.n	80038ae <_printf_i+0xd2>
 800393e:	064d      	lsls	r5, r1, #25
 8003940:	bf48      	it	mi
 8003942:	b29b      	uxthmi	r3, r3
 8003944:	e7ef      	b.n	8003926 <_printf_i+0x14a>
 8003946:	4665      	mov	r5, ip
 8003948:	fbb3 f1f2 	udiv	r1, r3, r2
 800394c:	fb02 3311 	mls	r3, r2, r1, r3
 8003950:	5cc3      	ldrb	r3, [r0, r3]
 8003952:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003956:	460b      	mov	r3, r1
 8003958:	2900      	cmp	r1, #0
 800395a:	d1f5      	bne.n	8003948 <_printf_i+0x16c>
 800395c:	e7b9      	b.n	80038d2 <_printf_i+0xf6>
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	6825      	ldr	r5, [r4, #0]
 8003962:	6961      	ldr	r1, [r4, #20]
 8003964:	1d18      	adds	r0, r3, #4
 8003966:	6010      	str	r0, [r2, #0]
 8003968:	0628      	lsls	r0, r5, #24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	d501      	bpl.n	8003972 <_printf_i+0x196>
 800396e:	6019      	str	r1, [r3, #0]
 8003970:	e002      	b.n	8003978 <_printf_i+0x19c>
 8003972:	066a      	lsls	r2, r5, #25
 8003974:	d5fb      	bpl.n	800396e <_printf_i+0x192>
 8003976:	8019      	strh	r1, [r3, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	4665      	mov	r5, ip
 800397e:	e7b9      	b.n	80038f4 <_printf_i+0x118>
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	1d19      	adds	r1, r3, #4
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	681d      	ldr	r5, [r3, #0]
 8003988:	6862      	ldr	r2, [r4, #4]
 800398a:	2100      	movs	r1, #0
 800398c:	4628      	mov	r0, r5
 800398e:	f7fc fc1f 	bl	80001d0 <memchr>
 8003992:	b108      	cbz	r0, 8003998 <_printf_i+0x1bc>
 8003994:	1b40      	subs	r0, r0, r5
 8003996:	6060      	str	r0, [r4, #4]
 8003998:	6863      	ldr	r3, [r4, #4]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2300      	movs	r3, #0
 800399e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a2:	e7a7      	b.n	80038f4 <_printf_i+0x118>
 80039a4:	6923      	ldr	r3, [r4, #16]
 80039a6:	462a      	mov	r2, r5
 80039a8:	4639      	mov	r1, r7
 80039aa:	4630      	mov	r0, r6
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0aa      	beq.n	8003908 <_printf_i+0x12c>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	079b      	lsls	r3, r3, #30
 80039b6:	d413      	bmi.n	80039e0 <_printf_i+0x204>
 80039b8:	68e0      	ldr	r0, [r4, #12]
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	4298      	cmp	r0, r3
 80039be:	bfb8      	it	lt
 80039c0:	4618      	movlt	r0, r3
 80039c2:	e7a3      	b.n	800390c <_printf_i+0x130>
 80039c4:	2301      	movs	r3, #1
 80039c6:	464a      	mov	r2, r9
 80039c8:	4639      	mov	r1, r7
 80039ca:	4630      	mov	r0, r6
 80039cc:	47c0      	blx	r8
 80039ce:	3001      	adds	r0, #1
 80039d0:	d09a      	beq.n	8003908 <_printf_i+0x12c>
 80039d2:	3501      	adds	r5, #1
 80039d4:	68e3      	ldr	r3, [r4, #12]
 80039d6:	9a03      	ldr	r2, [sp, #12]
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	42ab      	cmp	r3, r5
 80039dc:	dcf2      	bgt.n	80039c4 <_printf_i+0x1e8>
 80039de:	e7eb      	b.n	80039b8 <_printf_i+0x1dc>
 80039e0:	2500      	movs	r5, #0
 80039e2:	f104 0919 	add.w	r9, r4, #25
 80039e6:	e7f5      	b.n	80039d4 <_printf_i+0x1f8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ac      	bne.n	8003946 <_printf_i+0x16a>
 80039ec:	7803      	ldrb	r3, [r0, #0]
 80039ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f6:	e76c      	b.n	80038d2 <_printf_i+0xf6>
 80039f8:	080040f1 	.word	0x080040f1
 80039fc:	08004102 	.word	0x08004102

08003a00 <_sbrk_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4c06      	ldr	r4, [pc, #24]	; (8003a1c <_sbrk_r+0x1c>)
 8003a04:	2300      	movs	r3, #0
 8003a06:	4605      	mov	r5, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	f7fc fe6c 	bl	80006e8 <_sbrk>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_sbrk_r+0x1a>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_sbrk_r+0x1a>
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	20000de8 	.word	0x20000de8

08003a20 <__sread>:
 8003a20:	b510      	push	{r4, lr}
 8003a22:	460c      	mov	r4, r1
 8003a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a28:	f000 fa96 	bl	8003f58 <_read_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	bfab      	itete	ge
 8003a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a32:	89a3      	ldrhlt	r3, [r4, #12]
 8003a34:	181b      	addge	r3, r3, r0
 8003a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a3a:	bfac      	ite	ge
 8003a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a3e:	81a3      	strhlt	r3, [r4, #12]
 8003a40:	bd10      	pop	{r4, pc}

08003a42 <__swrite>:
 8003a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a46:	461f      	mov	r7, r3
 8003a48:	898b      	ldrh	r3, [r1, #12]
 8003a4a:	05db      	lsls	r3, r3, #23
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	4616      	mov	r6, r2
 8003a52:	d505      	bpl.n	8003a60 <__swrite+0x1e>
 8003a54:	2302      	movs	r3, #2
 8003a56:	2200      	movs	r2, #0
 8003a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5c:	f000 f9b6 	bl	8003dcc <_lseek_r>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	463b      	mov	r3, r7
 8003a70:	4628      	mov	r0, r5
 8003a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a76:	f000 b869 	b.w	8003b4c <_write_r>

08003a7a <__sseek>:
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a82:	f000 f9a3 	bl	8003dcc <_lseek_r>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	bf15      	itete	ne
 8003a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a96:	81a3      	strheq	r3, [r4, #12]
 8003a98:	bf18      	it	ne
 8003a9a:	81a3      	strhne	r3, [r4, #12]
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <__sclose>:
 8003a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa2:	f000 b8d3 	b.w	8003c4c <_close_r>
	...

08003aa8 <__swbuf_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	460e      	mov	r6, r1
 8003aac:	4614      	mov	r4, r2
 8003aae:	4605      	mov	r5, r0
 8003ab0:	b118      	cbz	r0, 8003aba <__swbuf_r+0x12>
 8003ab2:	6983      	ldr	r3, [r0, #24]
 8003ab4:	b90b      	cbnz	r3, 8003aba <__swbuf_r+0x12>
 8003ab6:	f7ff fbf7 	bl	80032a8 <__sinit>
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <__swbuf_r+0x98>)
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d12a      	bne.n	8003b16 <__swbuf_r+0x6e>
 8003ac0:	686c      	ldr	r4, [r5, #4]
 8003ac2:	69a3      	ldr	r3, [r4, #24]
 8003ac4:	60a3      	str	r3, [r4, #8]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	071a      	lsls	r2, r3, #28
 8003aca:	d52e      	bpl.n	8003b2a <__swbuf_r+0x82>
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	b363      	cbz	r3, 8003b2a <__swbuf_r+0x82>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	1ac0      	subs	r0, r0, r3
 8003ad6:	6963      	ldr	r3, [r4, #20]
 8003ad8:	b2f6      	uxtb	r6, r6
 8003ada:	4283      	cmp	r3, r0
 8003adc:	4637      	mov	r7, r6
 8003ade:	dc04      	bgt.n	8003aea <__swbuf_r+0x42>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f948 	bl	8003d78 <_fflush_r>
 8003ae8:	bb28      	cbnz	r0, 8003b36 <__swbuf_r+0x8e>
 8003aea:	68a3      	ldr	r3, [r4, #8]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60a3      	str	r3, [r4, #8]
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	6022      	str	r2, [r4, #0]
 8003af6:	701e      	strb	r6, [r3, #0]
 8003af8:	6963      	ldr	r3, [r4, #20]
 8003afa:	3001      	adds	r0, #1
 8003afc:	4283      	cmp	r3, r0
 8003afe:	d004      	beq.n	8003b0a <__swbuf_r+0x62>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	07db      	lsls	r3, r3, #31
 8003b04:	d519      	bpl.n	8003b3a <__swbuf_r+0x92>
 8003b06:	2e0a      	cmp	r6, #10
 8003b08:	d117      	bne.n	8003b3a <__swbuf_r+0x92>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 f933 	bl	8003d78 <_fflush_r>
 8003b12:	b190      	cbz	r0, 8003b3a <__swbuf_r+0x92>
 8003b14:	e00f      	b.n	8003b36 <__swbuf_r+0x8e>
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <__swbuf_r+0x9c>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d101      	bne.n	8003b20 <__swbuf_r+0x78>
 8003b1c:	68ac      	ldr	r4, [r5, #8]
 8003b1e:	e7d0      	b.n	8003ac2 <__swbuf_r+0x1a>
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <__swbuf_r+0xa0>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	bf08      	it	eq
 8003b26:	68ec      	ldreq	r4, [r5, #12]
 8003b28:	e7cb      	b.n	8003ac2 <__swbuf_r+0x1a>
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	f000 f81f 	bl	8003b70 <__swsetup_r>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d0cc      	beq.n	8003ad0 <__swbuf_r+0x28>
 8003b36:	f04f 37ff 	mov.w	r7, #4294967295
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	080040a0 	.word	0x080040a0
 8003b44:	080040c0 	.word	0x080040c0
 8003b48:	08004080 	.word	0x08004080

08003b4c <_write_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4c07      	ldr	r4, [pc, #28]	; (8003b6c <_write_r+0x20>)
 8003b50:	4605      	mov	r5, r0
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7fc fcb0 	bl	80004c0 <_write>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_write_r+0x1e>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_write_r+0x1e>
 8003b68:	602b      	str	r3, [r5, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	20000de8 	.word	0x20000de8

08003b70 <__swsetup_r>:
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <__swsetup_r+0xcc>)
 8003b72:	b570      	push	{r4, r5, r6, lr}
 8003b74:	681d      	ldr	r5, [r3, #0]
 8003b76:	4606      	mov	r6, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	b125      	cbz	r5, 8003b86 <__swsetup_r+0x16>
 8003b7c:	69ab      	ldr	r3, [r5, #24]
 8003b7e:	b913      	cbnz	r3, 8003b86 <__swsetup_r+0x16>
 8003b80:	4628      	mov	r0, r5
 8003b82:	f7ff fb91 	bl	80032a8 <__sinit>
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <__swsetup_r+0xd0>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d10f      	bne.n	8003bac <__swsetup_r+0x3c>
 8003b8c:	686c      	ldr	r4, [r5, #4]
 8003b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	0715      	lsls	r5, r2, #28
 8003b96:	d42c      	bmi.n	8003bf2 <__swsetup_r+0x82>
 8003b98:	06d0      	lsls	r0, r2, #27
 8003b9a:	d411      	bmi.n	8003bc0 <__swsetup_r+0x50>
 8003b9c:	2209      	movs	r2, #9
 8003b9e:	6032      	str	r2, [r6, #0]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e03e      	b.n	8003c2a <__swsetup_r+0xba>
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <__swsetup_r+0xd4>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d101      	bne.n	8003bb6 <__swsetup_r+0x46>
 8003bb2:	68ac      	ldr	r4, [r5, #8]
 8003bb4:	e7eb      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <__swsetup_r+0xd8>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	bf08      	it	eq
 8003bbc:	68ec      	ldreq	r4, [r5, #12]
 8003bbe:	e7e6      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bc0:	0751      	lsls	r1, r2, #29
 8003bc2:	d512      	bpl.n	8003bea <__swsetup_r+0x7a>
 8003bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc6:	b141      	cbz	r1, 8003bda <__swsetup_r+0x6a>
 8003bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__swsetup_r+0x66>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f973 	bl	8003ebc <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <__swsetup_r+0x9a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d003      	beq.n	8003c0a <__swsetup_r+0x9a>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f917 	bl	8003e38 <__smakebuf_r>
 8003c0a:	89a2      	ldrh	r2, [r4, #12]
 8003c0c:	f012 0301 	ands.w	r3, r2, #1
 8003c10:	d00c      	beq.n	8003c2c <__swsetup_r+0xbc>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	6963      	ldr	r3, [r4, #20]
 8003c18:	425b      	negs	r3, r3
 8003c1a:	61a3      	str	r3, [r4, #24]
 8003c1c:	6923      	ldr	r3, [r4, #16]
 8003c1e:	b953      	cbnz	r3, 8003c36 <__swsetup_r+0xc6>
 8003c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c28:	d1ba      	bne.n	8003ba0 <__swsetup_r+0x30>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	0792      	lsls	r2, r2, #30
 8003c2e:	bf58      	it	pl
 8003c30:	6963      	ldrpl	r3, [r4, #20]
 8003c32:	60a3      	str	r3, [r4, #8]
 8003c34:	e7f2      	b.n	8003c1c <__swsetup_r+0xac>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7f7      	b.n	8003c2a <__swsetup_r+0xba>
 8003c3a:	bf00      	nop
 8003c3c:	20000010 	.word	0x20000010
 8003c40:	080040a0 	.word	0x080040a0
 8003c44:	080040c0 	.word	0x080040c0
 8003c48:	08004080 	.word	0x08004080

08003c4c <_close_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4c06      	ldr	r4, [pc, #24]	; (8003c68 <_close_r+0x1c>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	4605      	mov	r5, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	f7fc fd11 	bl	800067e <_close>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_close_r+0x1a>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_close_r+0x1a>
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	20000de8 	.word	0x20000de8

08003c6c <__sflush_r>:
 8003c6c:	898a      	ldrh	r2, [r1, #12]
 8003c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	0710      	lsls	r0, r2, #28
 8003c76:	460c      	mov	r4, r1
 8003c78:	d458      	bmi.n	8003d2c <__sflush_r+0xc0>
 8003c7a:	684b      	ldr	r3, [r1, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	dc05      	bgt.n	8003c8c <__sflush_r+0x20>
 8003c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	dc02      	bgt.n	8003c8c <__sflush_r+0x20>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c8e:	2e00      	cmp	r6, #0
 8003c90:	d0f9      	beq.n	8003c86 <__sflush_r+0x1a>
 8003c92:	2300      	movs	r3, #0
 8003c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c98:	682f      	ldr	r7, [r5, #0]
 8003c9a:	6a21      	ldr	r1, [r4, #32]
 8003c9c:	602b      	str	r3, [r5, #0]
 8003c9e:	d032      	beq.n	8003d06 <__sflush_r+0x9a>
 8003ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	075a      	lsls	r2, r3, #29
 8003ca6:	d505      	bpl.n	8003cb4 <__sflush_r+0x48>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	1ac0      	subs	r0, r0, r3
 8003cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cae:	b10b      	cbz	r3, 8003cb4 <__sflush_r+0x48>
 8003cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cb2:	1ac0      	subs	r0, r0, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cba:	6a21      	ldr	r1, [r4, #32]
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b0      	blx	r6
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	d106      	bne.n	8003cd4 <__sflush_r+0x68>
 8003cc6:	6829      	ldr	r1, [r5, #0]
 8003cc8:	291d      	cmp	r1, #29
 8003cca:	d848      	bhi.n	8003d5e <__sflush_r+0xf2>
 8003ccc:	4a29      	ldr	r2, [pc, #164]	; (8003d74 <__sflush_r+0x108>)
 8003cce:	40ca      	lsrs	r2, r1
 8003cd0:	07d6      	lsls	r6, r2, #31
 8003cd2:	d544      	bpl.n	8003d5e <__sflush_r+0xf2>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	6062      	str	r2, [r4, #4]
 8003cd8:	04d9      	lsls	r1, r3, #19
 8003cda:	6922      	ldr	r2, [r4, #16]
 8003cdc:	6022      	str	r2, [r4, #0]
 8003cde:	d504      	bpl.n	8003cea <__sflush_r+0x7e>
 8003ce0:	1c42      	adds	r2, r0, #1
 8003ce2:	d101      	bne.n	8003ce8 <__sflush_r+0x7c>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	b903      	cbnz	r3, 8003cea <__sflush_r+0x7e>
 8003ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8003cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cec:	602f      	str	r7, [r5, #0]
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d0c9      	beq.n	8003c86 <__sflush_r+0x1a>
 8003cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	d002      	beq.n	8003d00 <__sflush_r+0x94>
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f8de 	bl	8003ebc <_free_r>
 8003d00:	2000      	movs	r0, #0
 8003d02:	6360      	str	r0, [r4, #52]	; 0x34
 8003d04:	e7c0      	b.n	8003c88 <__sflush_r+0x1c>
 8003d06:	2301      	movs	r3, #1
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47b0      	blx	r6
 8003d0c:	1c41      	adds	r1, r0, #1
 8003d0e:	d1c8      	bne.n	8003ca2 <__sflush_r+0x36>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0c5      	beq.n	8003ca2 <__sflush_r+0x36>
 8003d16:	2b1d      	cmp	r3, #29
 8003d18:	d001      	beq.n	8003d1e <__sflush_r+0xb2>
 8003d1a:	2b16      	cmp	r3, #22
 8003d1c:	d101      	bne.n	8003d22 <__sflush_r+0xb6>
 8003d1e:	602f      	str	r7, [r5, #0]
 8003d20:	e7b1      	b.n	8003c86 <__sflush_r+0x1a>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d28:	81a3      	strh	r3, [r4, #12]
 8003d2a:	e7ad      	b.n	8003c88 <__sflush_r+0x1c>
 8003d2c:	690f      	ldr	r7, [r1, #16]
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	d0a9      	beq.n	8003c86 <__sflush_r+0x1a>
 8003d32:	0793      	lsls	r3, r2, #30
 8003d34:	680e      	ldr	r6, [r1, #0]
 8003d36:	bf08      	it	eq
 8003d38:	694b      	ldreq	r3, [r1, #20]
 8003d3a:	600f      	str	r7, [r1, #0]
 8003d3c:	bf18      	it	ne
 8003d3e:	2300      	movne	r3, #0
 8003d40:	eba6 0807 	sub.w	r8, r6, r7
 8003d44:	608b      	str	r3, [r1, #8]
 8003d46:	f1b8 0f00 	cmp.w	r8, #0
 8003d4a:	dd9c      	ble.n	8003c86 <__sflush_r+0x1a>
 8003d4c:	4643      	mov	r3, r8
 8003d4e:	463a      	mov	r2, r7
 8003d50:	6a21      	ldr	r1, [r4, #32]
 8003d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b0      	blx	r6
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	dc06      	bgt.n	8003d6a <__sflush_r+0xfe>
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	e78e      	b.n	8003c88 <__sflush_r+0x1c>
 8003d6a:	4407      	add	r7, r0
 8003d6c:	eba8 0800 	sub.w	r8, r8, r0
 8003d70:	e7e9      	b.n	8003d46 <__sflush_r+0xda>
 8003d72:	bf00      	nop
 8003d74:	20400001 	.word	0x20400001

08003d78 <_fflush_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	690b      	ldr	r3, [r1, #16]
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	b1db      	cbz	r3, 8003dba <_fflush_r+0x42>
 8003d82:	b118      	cbz	r0, 8003d8c <_fflush_r+0x14>
 8003d84:	6983      	ldr	r3, [r0, #24]
 8003d86:	b90b      	cbnz	r3, 8003d8c <_fflush_r+0x14>
 8003d88:	f7ff fa8e 	bl	80032a8 <__sinit>
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <_fflush_r+0x48>)
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	d109      	bne.n	8003da6 <_fflush_r+0x2e>
 8003d92:	686c      	ldr	r4, [r5, #4]
 8003d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d98:	b17b      	cbz	r3, 8003dba <_fflush_r+0x42>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003da2:	f7ff bf63 	b.w	8003c6c <__sflush_r>
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <_fflush_r+0x4c>)
 8003da8:	429c      	cmp	r4, r3
 8003daa:	d101      	bne.n	8003db0 <_fflush_r+0x38>
 8003dac:	68ac      	ldr	r4, [r5, #8]
 8003dae:	e7f1      	b.n	8003d94 <_fflush_r+0x1c>
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_fflush_r+0x50>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	bf08      	it	eq
 8003db6:	68ec      	ldreq	r4, [r5, #12]
 8003db8:	e7ec      	b.n	8003d94 <_fflush_r+0x1c>
 8003dba:	2000      	movs	r0, #0
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	080040a0 	.word	0x080040a0
 8003dc4:	080040c0 	.word	0x080040c0
 8003dc8:	08004080 	.word	0x08004080

08003dcc <_lseek_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4c07      	ldr	r4, [pc, #28]	; (8003dec <_lseek_r+0x20>)
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	6022      	str	r2, [r4, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7fc fc76 	bl	80006cc <_lseek>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_lseek_r+0x1e>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_lseek_r+0x1e>
 8003de8:	602b      	str	r3, [r5, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000de8 	.word	0x20000de8

08003df0 <__swhatbuf_r>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	460e      	mov	r6, r1
 8003df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	b096      	sub	sp, #88	; 0x58
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	da07      	bge.n	8003e12 <__swhatbuf_r+0x22>
 8003e02:	2300      	movs	r3, #0
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	89b3      	ldrh	r3, [r6, #12]
 8003e08:	061a      	lsls	r2, r3, #24
 8003e0a:	d410      	bmi.n	8003e2e <__swhatbuf_r+0x3e>
 8003e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e10:	e00e      	b.n	8003e30 <__swhatbuf_r+0x40>
 8003e12:	466a      	mov	r2, sp
 8003e14:	f000 f8b2 	bl	8003f7c <_fstat_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	dbf2      	blt.n	8003e02 <__swhatbuf_r+0x12>
 8003e1c:	9a01      	ldr	r2, [sp, #4]
 8003e1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e26:	425a      	negs	r2, r3
 8003e28:	415a      	adcs	r2, r3
 8003e2a:	602a      	str	r2, [r5, #0]
 8003e2c:	e7ee      	b.n	8003e0c <__swhatbuf_r+0x1c>
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	2000      	movs	r0, #0
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	b016      	add	sp, #88	; 0x58
 8003e36:	bd70      	pop	{r4, r5, r6, pc}

08003e38 <__smakebuf_r>:
 8003e38:	898b      	ldrh	r3, [r1, #12]
 8003e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e3c:	079d      	lsls	r5, r3, #30
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	d507      	bpl.n	8003e54 <__smakebuf_r+0x1c>
 8003e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6163      	str	r3, [r4, #20]
 8003e50:	b002      	add	sp, #8
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	ab01      	add	r3, sp, #4
 8003e56:	466a      	mov	r2, sp
 8003e58:	f7ff ffca 	bl	8003df0 <__swhatbuf_r>
 8003e5c:	9900      	ldr	r1, [sp, #0]
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4630      	mov	r0, r6
 8003e62:	f7ff faab 	bl	80033bc <_malloc_r>
 8003e66:	b948      	cbnz	r0, 8003e7c <__smakebuf_r+0x44>
 8003e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6c:	059a      	lsls	r2, r3, #22
 8003e6e:	d4ef      	bmi.n	8003e50 <__smakebuf_r+0x18>
 8003e70:	f023 0303 	bic.w	r3, r3, #3
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	e7e3      	b.n	8003e44 <__smakebuf_r+0xc>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <__smakebuf_r+0x7c>)
 8003e7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	6020      	str	r0, [r4, #0]
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	9b00      	ldr	r3, [sp, #0]
 8003e8c:	6163      	str	r3, [r4, #20]
 8003e8e:	9b01      	ldr	r3, [sp, #4]
 8003e90:	6120      	str	r0, [r4, #16]
 8003e92:	b15b      	cbz	r3, 8003eac <__smakebuf_r+0x74>
 8003e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f000 f881 	bl	8003fa0 <_isatty_r>
 8003e9e:	b128      	cbz	r0, 8003eac <__smakebuf_r+0x74>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	431d      	orrs	r5, r3
 8003eb0:	81a5      	strh	r5, [r4, #12]
 8003eb2:	e7cd      	b.n	8003e50 <__smakebuf_r+0x18>
 8003eb4:	08003271 	.word	0x08003271

08003eb8 <__malloc_lock>:
 8003eb8:	4770      	bx	lr

08003eba <__malloc_unlock>:
 8003eba:	4770      	bx	lr

08003ebc <_free_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	2900      	cmp	r1, #0
 8003ec2:	d045      	beq.n	8003f50 <_free_r+0x94>
 8003ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec8:	1f0c      	subs	r4, r1, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bfb8      	it	lt
 8003ece:	18e4      	addlt	r4, r4, r3
 8003ed0:	f7ff fff2 	bl	8003eb8 <__malloc_lock>
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <_free_r+0x98>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	4610      	mov	r0, r2
 8003eda:	b933      	cbnz	r3, 8003eea <_free_r+0x2e>
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6014      	str	r4, [r2, #0]
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee6:	f7ff bfe8 	b.w	8003eba <__malloc_unlock>
 8003eea:	42a3      	cmp	r3, r4
 8003eec:	d90c      	bls.n	8003f08 <_free_r+0x4c>
 8003eee:	6821      	ldr	r1, [r4, #0]
 8003ef0:	1862      	adds	r2, r4, r1
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bf04      	itt	eq
 8003ef6:	681a      	ldreq	r2, [r3, #0]
 8003ef8:	685b      	ldreq	r3, [r3, #4]
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	bf04      	itt	eq
 8003efe:	1852      	addeq	r2, r2, r1
 8003f00:	6022      	streq	r2, [r4, #0]
 8003f02:	6004      	str	r4, [r0, #0]
 8003f04:	e7ec      	b.n	8003ee0 <_free_r+0x24>
 8003f06:	4613      	mov	r3, r2
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	b10a      	cbz	r2, 8003f10 <_free_r+0x54>
 8003f0c:	42a2      	cmp	r2, r4
 8003f0e:	d9fa      	bls.n	8003f06 <_free_r+0x4a>
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	1858      	adds	r0, r3, r1
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d10b      	bne.n	8003f30 <_free_r+0x74>
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	1858      	adds	r0, r3, r1
 8003f1e:	4282      	cmp	r2, r0
 8003f20:	6019      	str	r1, [r3, #0]
 8003f22:	d1dd      	bne.n	8003ee0 <_free_r+0x24>
 8003f24:	6810      	ldr	r0, [r2, #0]
 8003f26:	6852      	ldr	r2, [r2, #4]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	6019      	str	r1, [r3, #0]
 8003f2e:	e7d7      	b.n	8003ee0 <_free_r+0x24>
 8003f30:	d902      	bls.n	8003f38 <_free_r+0x7c>
 8003f32:	230c      	movs	r3, #12
 8003f34:	602b      	str	r3, [r5, #0]
 8003f36:	e7d3      	b.n	8003ee0 <_free_r+0x24>
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	1821      	adds	r1, r4, r0
 8003f3c:	428a      	cmp	r2, r1
 8003f3e:	bf04      	itt	eq
 8003f40:	6811      	ldreq	r1, [r2, #0]
 8003f42:	6852      	ldreq	r2, [r2, #4]
 8003f44:	6062      	str	r2, [r4, #4]
 8003f46:	bf04      	itt	eq
 8003f48:	1809      	addeq	r1, r1, r0
 8003f4a:	6021      	streq	r1, [r4, #0]
 8003f4c:	605c      	str	r4, [r3, #4]
 8003f4e:	e7c7      	b.n	8003ee0 <_free_r+0x24>
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	20000d88 	.word	0x20000d88

08003f58 <_read_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4c07      	ldr	r4, [pc, #28]	; (8003f78 <_read_r+0x20>)
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	4608      	mov	r0, r1
 8003f60:	4611      	mov	r1, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	6022      	str	r2, [r4, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7fc fb6c 	bl	8000644 <_read>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_read_r+0x1e>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_read_r+0x1e>
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	20000de8 	.word	0x20000de8

08003f7c <_fstat_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4c07      	ldr	r4, [pc, #28]	; (8003f9c <_fstat_r+0x20>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4605      	mov	r5, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	f7fc fb84 	bl	8000696 <_fstat>
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	d102      	bne.n	8003f98 <_fstat_r+0x1c>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	b103      	cbz	r3, 8003f98 <_fstat_r+0x1c>
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000de8 	.word	0x20000de8

08003fa0 <_isatty_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4c06      	ldr	r4, [pc, #24]	; (8003fbc <_isatty_r+0x1c>)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	f7fc fb83 	bl	80006b6 <_isatty>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_isatty_r+0x1a>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_isatty_r+0x1a>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000de8 	.word	0x20000de8

08003fc0 <_init>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr

08003fcc <_fini>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr
