
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000225c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d0  080024d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080024d0  080024d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024d0  080024d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  08002548  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002548  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d87  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001337  00000000  00000000  00026e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000608  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000560  00000000  00000000  00028768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025369  00000000  00000000  00028cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000050f9  00000000  00000000  0004e031  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4793  00000000  00000000  0005312a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001378bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  00137938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023d4 	.word	0x080023d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080023d4 	.word	0x080023d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  int n=0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80002ca:	f000 f9da 	bl	8000682 <HAL_Init>
  SystemClock_Config();
 80002ce:	f000 f811 	bl	80002f4 <SystemClock_Config>
  MX_GPIO_Init();
 80002d2:	f000 f855 	bl	8000380 <MX_GPIO_Init>

  while (1)
  {

	  printf("hello %d\n",n);
 80002d6:	6879      	ldr	r1, [r7, #4]
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <main+0x30>)
 80002da:	f001 f997 	bl	800160c <iprintf>
	  n++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3301      	adds	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
	  HAL_Delay(500);
 80002e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e8:	f000 fa40 	bl	800076c <HAL_Delay>
	  printf("hello %d\n",n);
 80002ec:	e7f3      	b.n	80002d6 <main+0x16>
 80002ee:	bf00      	nop
 80002f0:	080023ec 	.word	0x080023ec

080002f4 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2244      	movs	r2, #68	; 0x44
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f97a 	bl	80015fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000316:	2310      	movs	r3, #16
 8000318:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000322:	2360      	movs	r3, #96	; 0x60
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000326:	2300      	movs	r3, #0
 8000328:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fb88 	bl	8000a44 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800033a:	f000 f861 	bl	8000400 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000352:	463b      	mov	r3, r7
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f000 ff5a 	bl	8001210 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000362:	f000 f84d 	bl	8000400 <Error_Handler>
  }

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000366:	f44f 7000 	mov.w	r0, #512	; 0x200
 800036a:	f000 fb15 	bl	8000998 <HAL_PWREx_ControlVoltageScaling>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000374:	f000 f844 	bl	8000400 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3758      	adds	r7, #88	; 0x58
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_GPIO_Init+0x44>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <MX_GPIO_Init+0x44>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_GPIO_Init+0x44>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_GPIO_Init+0x44>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <MX_GPIO_Init+0x44>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_GPIO_Init+0x44>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <_write>:
int _write(int file,char *ptr, int len)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	e009      	b.n	80003ee <_write+0x26>
 {

 ITM_SendChar(*ptr++);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	60ba      	str	r2, [r7, #8]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff44 	bl	8000270 <ITM_SendChar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	dbf1      	blt.n	80003da <_write+0x12>

 }
return len;
 80003f6:	687b      	ldr	r3, [r7, #4]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <Error_Handler>:



void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
	...

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x44>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <HAL_MspInit+0x44>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6613      	str	r3, [r2, #96]	; 0x60
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x44>)
 8000424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <HAL_MspInit+0x44>)
 8000430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000432:	4a08      	ldr	r2, [pc, #32]	; (8000454 <HAL_MspInit+0x44>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	6593      	str	r3, [r2, #88]	; 0x58
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_MspInit+0x44>)
 800043c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ac:	f000 f93e 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e00a      	b.n	80004dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004c6:	f3af 8000 	nop.w
 80004ca:	4601      	mov	r1, r0
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	60ba      	str	r2, [r7, #8]
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf0      	blt.n	80004c6 <_read+0x12>
	}

return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	return -1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000516:	605a      	str	r2, [r3, #4]
	return 0;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_isatty>:

int _isatty(int file)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	return 1;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	return 0;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f001 f80e 	bl	80015a8 <__errno>
 800058c:	4602      	mov	r2, r0
 800058e:	230c      	movs	r3, #12
 8000590:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20018000 	.word	0x20018000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	200000a0 	.word	0x200000a0

080005c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <SystemInit+0x64>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <SystemInit+0x64>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <SystemInit+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <SystemInit+0x68>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <SystemInit+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <SystemInit+0x68>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <SystemInit+0x68>)
 80005f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <SystemInit+0x68>)
 80005fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000600:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <SystemInit+0x68>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <SystemInit+0x68>)
 8000608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800060c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <SystemInit+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <SystemInit+0x64>)
 8000616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800061a:	609a      	str	r2, [r3, #8]
#endif
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	40021000 	.word	0x40021000

08000630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000668 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000634:	f7ff ffc6 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000638:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800063a:	e003      	b.n	8000644 <LoopCopyDataInit>

0800063c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800063e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000640:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000642:	3104      	adds	r1, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000644:	480a      	ldr	r0, [pc, #40]	; (8000670 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000648:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800064a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800064c:	d3f6      	bcc.n	800063c <CopyDataInit>
	ldr	r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000650:	e002      	b.n	8000658 <LoopFillZerobss>

08000652 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000652:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000654:	f842 3b04 	str.w	r3, [r2], #4

08000658 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <LoopForever+0x16>)
	cmp	r2, r3
 800065a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800065c:	d3f9      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f000 ffa9 	bl	80015b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000662:	f7ff fe2d 	bl	80002c0 <main>

08000666 <LoopForever>:

LoopForever:
    b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000668:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800066c:	080024d8 	.word	0x080024d8
	ldr	r0, =_sdata
 8000670:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000674:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000678:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800067c:	200000a0 	.word	0x200000a0

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>

08000682 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068c:	2003      	movs	r0, #3
 800068e:	f000 f941 	bl	8000914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f80e 	bl	80006b4 <HAL_InitTick>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e001      	b.n	80006a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a4:	f7ff feb4 	bl	8000410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_InitTick+0x6c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d023      	beq.n	8000710 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <HAL_InitTick+0x70>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <HAL_InitTick+0x6c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f93f 	bl	8000962 <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10f      	bne.n	800070a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d809      	bhi.n	8000704 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f917 	bl	800092a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_InitTick+0x74>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	e007      	b.n	8000714 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e004      	b.n	8000714 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e001      	b.n	8000714 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008
 8000724:	20000000 	.word	0x20000000
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_IncTick+0x20>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_IncTick+0x24>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_IncTick+0x24>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000008 	.word	0x20000008
 8000750:	20000098 	.word	0x20000098

08000754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HAL_GetTick+0x14>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000098 	.word	0x20000098

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000774:	f7ff ffee 	bl	8000754 <HAL_GetTick>
 8000778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d005      	beq.n	8000792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_Delay+0x40>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000792:	bf00      	nop
 8000794:	f7ff ffde 	bl	8000754 <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d8f7      	bhi.n	8000794 <HAL_Delay+0x28>
  {
  }
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_SetPriority>:
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <SysTick_Config>:
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e0:	d301      	bcc.n	80008e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00f      	b.n	8000906 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <SysTick_Config+0x40>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ee:	210f      	movs	r1, #15
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f7ff ff8e 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <SysTick_Config+0x40>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SysTick_Config+0x40>)
 8000900:	2207      	movs	r2, #7
 8000902:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	e000e010 	.word	0xe000e010

08000914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff47 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff5c 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff8e 	bl	8000868 <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5d 	bl	8000814 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffb0 	bl	80008d0 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_PWREx_GetVoltageRange+0x18>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40007000 	.word	0x40007000

08000998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009a6:	d130      	bne.n	8000a0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b4:	d038      	beq.n	8000a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2232      	movs	r2, #50	; 0x32
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	0c9b      	lsrs	r3, r3, #18
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009dc:	e002      	b.n	80009e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f0:	d102      	bne.n	80009f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f2      	bne.n	80009de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a04:	d110      	bne.n	8000a28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000a06:	2303      	movs	r3, #3
 8000a08:	e00f      	b.n	8000a2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a16:	d007      	beq.n	8000a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40007000 	.word	0x40007000
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	431bde83 	.word	0x431bde83

08000a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e3d4      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a56:	4ba1      	ldr	r3, [pc, #644]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a60:	4b9e      	ldr	r3, [pc, #632]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80e4 	beq.w	8000c40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <HAL_RCC_OscConfig+0x4a>
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	2b0c      	cmp	r3, #12
 8000a82:	f040 808b 	bne.w	8000b9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	f040 8087 	bne.w	8000b9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a8e:	4b93      	ldr	r3, [pc, #588]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d005      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x62>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e3ac      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a1a      	ldr	r2, [r3, #32]
 8000aaa:	4b8c      	ldr	r3, [pc, #560]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x7c>
 8000ab6:	4b89      	ldr	r3, [pc, #548]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000abe:	e005      	b.n	8000acc <HAL_RCC_OscConfig+0x88>
 8000ac0:	4b86      	ldr	r3, [pc, #536]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d223      	bcs.n	8000b18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fd07 	bl	80014e8 <RCC_SetFlashLatencyFromMSIRange>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e38d      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ae4:	4b7d      	ldr	r3, [pc, #500]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a7c      	ldr	r2, [pc, #496]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	4977      	ldr	r1, [pc, #476]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b02:	4b76      	ldr	r3, [pc, #472]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	4972      	ldr	r1, [pc, #456]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	604b      	str	r3, [r1, #4]
 8000b16:	e025      	b.n	8000b64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b18:	4b70      	ldr	r3, [pc, #448]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a6f      	ldr	r2, [pc, #444]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b6d      	ldr	r3, [pc, #436]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	496a      	ldr	r1, [pc, #424]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b32:	4313      	orrs	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b36:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	4965      	ldr	r1, [pc, #404]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fcc7 	bl	80014e8 <RCC_SetFlashLatencyFromMSIRange>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e34d      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b64:	f000 fc36 	bl	80013d4 <HAL_RCC_GetSysClockFreq>
 8000b68:	4601      	mov	r1, r0
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	4a5a      	ldr	r2, [pc, #360]	; (8000ce0 <HAL_RCC_OscConfig+0x29c>)
 8000b76:	5cd3      	ldrb	r3, [r2, r3]
 8000b78:	f003 031f 	and.w	r3, r3, #31
 8000b7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b80:	4a58      	ldr	r2, [pc, #352]	; (8000ce4 <HAL_RCC_OscConfig+0x2a0>)
 8000b82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <HAL_RCC_OscConfig+0x2a4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd93 	bl	80006b4 <HAL_InitTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d052      	beq.n	8000c3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	e331      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d032      	beq.n	8000c0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ba4:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fdd0 	bl	8000754 <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fdcc 	bl	8000754 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e31a      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f0      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bd6:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a40      	ldr	r2, [pc, #256]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a1b      	ldr	r3, [r3, #32]
 8000bee:	493b      	ldr	r1, [pc, #236]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	4936      	ldr	r1, [pc, #216]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c04:	4313      	orrs	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
 8000c08:	e01a      	b.n	8000c40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a33      	ldr	r2, [pc, #204]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c16:	f7ff fd9d 	bl	8000754 <HAL_GetTick>
 8000c1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c1c:	e008      	b.n	8000c30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c1e:	f7ff fd99 	bl	8000754 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e2e7      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f0      	bne.n	8000c1e <HAL_RCC_OscConfig+0x1da>
 8000c3c:	e000      	b.n	8000c40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d074      	beq.n	8000d36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d005      	beq.n	8000c5e <HAL_RCC_OscConfig+0x21a>
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2b0c      	cmp	r3, #12
 8000c56:	d10e      	bne.n	8000c76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d10b      	bne.n	8000c76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d064      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2f0>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d160      	bne.n	8000d34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e2c4      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7e:	d106      	bne.n	8000c8e <HAL_RCC_OscConfig+0x24a>
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e01d      	b.n	8000cca <HAL_RCC_OscConfig+0x286>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c96:	d10c      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x26e>
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e00b      	b.n	8000cca <HAL_RCC_OscConfig+0x286>
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_RCC_OscConfig+0x298>)
 8000cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01c      	beq.n	8000d0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fd3f 	bl	8000754 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cd8:	e011      	b.n	8000cfe <HAL_RCC_OscConfig+0x2ba>
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	080023f8 	.word	0x080023f8
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cec:	f7ff fd32 	bl	8000754 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e280      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cfe:	4baf      	ldr	r3, [pc, #700]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0x2a8>
 8000d0a:	e014      	b.n	8000d36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fd22 	bl	8000754 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fd1e 	bl	8000754 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e26c      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d26:	4ba5      	ldr	r3, [pc, #660]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x2d0>
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d060      	beq.n	8000e04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d005      	beq.n	8000d54 <HAL_RCC_OscConfig+0x310>
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2b0c      	cmp	r3, #12
 8000d4c:	d119      	bne.n	8000d82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d116      	bne.n	8000d82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d54:	4b99      	ldr	r3, [pc, #612]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_RCC_OscConfig+0x328>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e249      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b93      	ldr	r3, [pc, #588]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	061b      	lsls	r3, r3, #24
 8000d7a:	4990      	ldr	r1, [pc, #576]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d80:	e040      	b.n	8000e04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d023      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8a:	4b8c      	ldr	r3, [pc, #560]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a8b      	ldr	r2, [pc, #556]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d96:	f7ff fcdd 	bl	8000754 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fcd9 	bl	8000754 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e227      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000db0:	4b82      	ldr	r3, [pc, #520]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbc:	4b7f      	ldr	r3, [pc, #508]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	061b      	lsls	r3, r3, #24
 8000dca:	497c      	ldr	r1, [pc, #496]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
 8000dd0:	e018      	b.n	8000e04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd2:	4b7a      	ldr	r3, [pc, #488]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a79      	ldr	r2, [pc, #484]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dde:	f7ff fcb9 	bl	8000754 <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de6:	f7ff fcb5 	bl	8000754 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e203      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000df8:	4b70      	ldr	r3, [pc, #448]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f0      	bne.n	8000de6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d03c      	beq.n	8000e8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d01c      	beq.n	8000e52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e1e:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e28:	f7ff fc94 	bl	8000754 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc90 	bl	8000754 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1de      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e42:	4b5e      	ldr	r3, [pc, #376]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0ef      	beq.n	8000e30 <HAL_RCC_OscConfig+0x3ec>
 8000e50:	e01b      	b.n	8000e8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e52:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e58:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e62:	f7ff fc77 	bl	8000754 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fc73 	bl	8000754 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e1c1      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1ef      	bne.n	8000e6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80a6 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e9c:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10d      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	4a43      	ldr	r2, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <HAL_RCC_OscConfig+0x57c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d118      	bne.n	8000f02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_RCC_OscConfig+0x57c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <HAL_RCC_OscConfig+0x57c>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc3a 	bl	8000754 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee4:	f7ff fc36 	bl	8000754 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e184      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <HAL_RCC_OscConfig+0x57c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_RCC_OscConfig+0x4d8>
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f10:	4a2a      	ldr	r2, [pc, #168]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f1a:	e024      	b.n	8000f66 <HAL_RCC_OscConfig+0x522>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d110      	bne.n	8000f46 <HAL_RCC_OscConfig+0x502>
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f2a:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f34:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f44:	e00f      	b.n	8000f66 <HAL_RCC_OscConfig+0x522>
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f4e:	f023 0301 	bic.w	r3, r3, #1
 8000f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f5e:	f023 0304 	bic.w	r3, r3, #4
 8000f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d016      	beq.n	8000f9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fbf1 	bl	8000754 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f76:	f7ff fbed 	bl	8000754 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e139      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_RCC_OscConfig+0x578>)
 8000f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0ed      	beq.n	8000f76 <HAL_RCC_OscConfig+0x532>
 8000f9a:	e01a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fbda 	bl	8000754 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fa2:	e00f      	b.n	8000fc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fbd6 	bl	8000754 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d906      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e122      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fc4:	4b90      	ldr	r3, [pc, #576]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8000fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e8      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d105      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd8:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	4a8a      	ldr	r2, [pc, #552]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8000fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8108 	beq.w	80011fe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	f040 80d0 	bne.w	8001198 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000ff8:	4b83      	ldr	r3, [pc, #524]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	429a      	cmp	r2, r3
 800100a:	d130      	bne.n	800106e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	3b01      	subs	r3, #1
 8001018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	429a      	cmp	r2, r3
 800101c:	d127      	bne.n	800106e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800102a:	429a      	cmp	r2, r3
 800102c:	d11f      	bne.n	800106e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001038:	2a07      	cmp	r2, #7
 800103a:	bf14      	ite	ne
 800103c:	2201      	movne	r2, #1
 800103e:	2200      	moveq	r2, #0
 8001040:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001042:	4293      	cmp	r3, r2
 8001044:	d113      	bne.n	800106e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001050:	085b      	lsrs	r3, r3, #1
 8001052:	3b01      	subs	r3, #1
 8001054:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001056:	429a      	cmp	r2, r3
 8001058:	d109      	bne.n	800106e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	085b      	lsrs	r3, r3, #1
 8001066:	3b01      	subs	r3, #1
 8001068:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800106a:	429a      	cmp	r2, r3
 800106c:	d06e      	beq.n	800114c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b0c      	cmp	r3, #12
 8001072:	d069      	beq.n	8001148 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001074:	4b64      	ldr	r3, [pc, #400]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d105      	bne.n	800108c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001080:	4b61      	ldr	r3, [pc, #388]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0b7      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001090:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a5c      	ldr	r2, [pc, #368]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800109a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800109c:	f7ff fb5a 	bl	8000754 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fb56 	bl	8000754 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e0a4      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010b6:	4b54      	ldr	r3, [pc, #336]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_RCC_OscConfig+0x7c8>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010d2:	3a01      	subs	r2, #1
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	4311      	orrs	r1, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010dc:	0212      	lsls	r2, r2, #8
 80010de:	4311      	orrs	r1, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80010e4:	0852      	lsrs	r2, r2, #1
 80010e6:	3a01      	subs	r2, #1
 80010e8:	0552      	lsls	r2, r2, #21
 80010ea:	4311      	orrs	r1, r2
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010f0:	0852      	lsrs	r2, r2, #1
 80010f2:	3a01      	subs	r2, #1
 80010f4:	0652      	lsls	r2, r2, #25
 80010f6:	4311      	orrs	r1, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010fc:	0912      	lsrs	r2, r2, #4
 80010fe:	0452      	lsls	r2, r2, #17
 8001100:	430a      	orrs	r2, r1
 8001102:	4941      	ldr	r1, [pc, #260]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3e      	ldr	r2, [pc, #248]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800110e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800111a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001120:	f7ff fb18 	bl	8000754 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff fb14 	bl	8000754 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e062      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001146:	e05a      	b.n	80011fe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e059      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d152      	bne.n	80011fe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800115e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001162:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800116a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800116e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001170:	f7ff faf0 	bl	8000754 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff faec 	bl	8000754 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e03a      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x734>
 8001196:	e032      	b.n	80011fe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d02d      	beq.n	80011fa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d105      	bne.n	80011c2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011bc:	f023 0303 	bic.w	r3, r3, #3
 80011c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fabf 	bl	8000754 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff fabb 	bl	8000754 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e009      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_RCC_OscConfig+0x7c4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x796>
 80011f8:	e001      	b.n	80011fe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	f99d808c 	.word	0xf99d808c

08001210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0c8      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d910      	bls.n	8001254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 0207 	bic.w	r2, r3, #7
 800123a:	4961      	ldr	r1, [pc, #388]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0b0      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d04c      	beq.n	80012fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d107      	bne.n	8001278 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001268:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d121      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e09e      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d107      	bne.n	8001290 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d115      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e092      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001298:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d109      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e086      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e07e      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 0203 	bic.w	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	493f      	ldr	r1, [pc, #252]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012ca:	f7ff fa43 	bl	8000754 <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d2:	f7ff fa3f 	bl	8000754 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e066      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 020c 	and.w	r2, r3, #12
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d1eb      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	492c      	ldr	r1, [pc, #176]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d210      	bcs.n	8001348 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4924      	ldr	r1, [pc, #144]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e036      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4918      	ldr	r1, [pc, #96]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4910      	ldr	r1, [pc, #64]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001386:	f000 f825 	bl	80013d4 <HAL_RCC_GetSysClockFreq>
 800138a:	4601      	mov	r1, r0
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_RCC_ClockConfig+0x1b4>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	fa21 f303 	lsr.w	r3, r1, r3
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f982 	bl	80006b4 <HAL_InitTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80013b4:	7afb      	ldrb	r3, [r7, #11]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	080023f8 	.word	0x080023f8
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x34>
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d121      	bne.n	8001446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d11e      	bne.n	8001446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d107      	bne.n	8001424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e005      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001430:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10d      	bne.n	800145c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001444:	e00a      	b.n	800145c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d102      	bne.n	8001452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	e004      	b.n	800145c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b08      	cmp	r3, #8
 8001456:	d101      	bne.n	800145c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800145a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d133      	bne.n	80014ca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d002      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0xa4>
 8001472:	2b03      	cmp	r3, #3
 8001474:	d003      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0xaa>
 8001476:	e005      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800147a:	617b      	str	r3, [r7, #20]
      break;
 800147c:	e005      	b.n	800148a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001480:	617b      	str	r3, [r7, #20]
      break;
 8001482:	e002      	b.n	800148a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	617b      	str	r3, [r7, #20]
      break;
 8001488:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	3301      	adds	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	fb02 f203 	mul.w	r2, r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0e5b      	lsrs	r3, r3, #25
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	3301      	adds	r3, #1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80014ca:	69bb      	ldr	r3, [r7, #24]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3724      	adds	r7, #36	; 0x24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08002408 	.word	0x08002408
 80014e0:	00f42400 	.word	0x00f42400
 80014e4:	007a1200 	.word	0x007a1200

080014e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001500:	f7ff fa3c 	bl	800097c <HAL_PWREx_GetVoltageRange>
 8001504:	6178      	str	r0, [r7, #20]
 8001506:	e014      	b.n	8001532 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800150e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001512:	6593      	str	r3, [r2, #88]	; 0x58
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001520:	f7ff fa2c 	bl	800097c <HAL_PWREx_GetVoltageRange>
 8001524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800152c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001538:	d10b      	bne.n	8001552 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b80      	cmp	r3, #128	; 0x80
 800153e:	d919      	bls.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2ba0      	cmp	r3, #160	; 0xa0
 8001544:	d902      	bls.n	800154c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001546:	2302      	movs	r3, #2
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	e013      	b.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	e010      	b.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b80      	cmp	r3, #128	; 0x80
 8001556:	d902      	bls.n	800155e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001558:	2303      	movs	r3, #3
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	e00a      	b.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b80      	cmp	r3, #128	; 0x80
 8001562:	d102      	bne.n	800156a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	e004      	b.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b70      	cmp	r3, #112	; 0x70
 800156e:	d101      	bne.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 0207 	bic.w	r2, r3, #7
 800157c:	4909      	ldr	r1, [pc, #36]	; (80015a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <__errno>:
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <__errno+0x8>)
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <__libc_init_array>:
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	4e0d      	ldr	r6, [pc, #52]	; (80015ec <__libc_init_array+0x38>)
 80015b8:	4c0d      	ldr	r4, [pc, #52]	; (80015f0 <__libc_init_array+0x3c>)
 80015ba:	1ba4      	subs	r4, r4, r6
 80015bc:	10a4      	asrs	r4, r4, #2
 80015be:	2500      	movs	r5, #0
 80015c0:	42a5      	cmp	r5, r4
 80015c2:	d109      	bne.n	80015d8 <__libc_init_array+0x24>
 80015c4:	4e0b      	ldr	r6, [pc, #44]	; (80015f4 <__libc_init_array+0x40>)
 80015c6:	4c0c      	ldr	r4, [pc, #48]	; (80015f8 <__libc_init_array+0x44>)
 80015c8:	f000 ff04 	bl	80023d4 <_init>
 80015cc:	1ba4      	subs	r4, r4, r6
 80015ce:	10a4      	asrs	r4, r4, #2
 80015d0:	2500      	movs	r5, #0
 80015d2:	42a5      	cmp	r5, r4
 80015d4:	d105      	bne.n	80015e2 <__libc_init_array+0x2e>
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015dc:	4798      	blx	r3
 80015de:	3501      	adds	r5, #1
 80015e0:	e7ee      	b.n	80015c0 <__libc_init_array+0xc>
 80015e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e6:	4798      	blx	r3
 80015e8:	3501      	adds	r5, #1
 80015ea:	e7f2      	b.n	80015d2 <__libc_init_array+0x1e>
 80015ec:	080024d0 	.word	0x080024d0
 80015f0:	080024d0 	.word	0x080024d0
 80015f4:	080024d0 	.word	0x080024d0
 80015f8:	080024d4 	.word	0x080024d4

080015fc <memset>:
 80015fc:	4402      	add	r2, r0
 80015fe:	4603      	mov	r3, r0
 8001600:	4293      	cmp	r3, r2
 8001602:	d100      	bne.n	8001606 <memset+0xa>
 8001604:	4770      	bx	lr
 8001606:	f803 1b01 	strb.w	r1, [r3], #1
 800160a:	e7f9      	b.n	8001600 <memset+0x4>

0800160c <iprintf>:
 800160c:	b40f      	push	{r0, r1, r2, r3}
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <iprintf+0x2c>)
 8001610:	b513      	push	{r0, r1, r4, lr}
 8001612:	681c      	ldr	r4, [r3, #0]
 8001614:	b124      	cbz	r4, 8001620 <iprintf+0x14>
 8001616:	69a3      	ldr	r3, [r4, #24]
 8001618:	b913      	cbnz	r3, 8001620 <iprintf+0x14>
 800161a:	4620      	mov	r0, r4
 800161c:	f000 f84e 	bl	80016bc <__sinit>
 8001620:	ab05      	add	r3, sp, #20
 8001622:	9a04      	ldr	r2, [sp, #16]
 8001624:	68a1      	ldr	r1, [r4, #8]
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	4620      	mov	r0, r4
 800162a:	f000 f955 	bl	80018d8 <_vfiprintf_r>
 800162e:	b002      	add	sp, #8
 8001630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001634:	b004      	add	sp, #16
 8001636:	4770      	bx	lr
 8001638:	2000000c 	.word	0x2000000c

0800163c <std>:
 800163c:	2300      	movs	r3, #0
 800163e:	b510      	push	{r4, lr}
 8001640:	4604      	mov	r4, r0
 8001642:	e9c0 3300 	strd	r3, r3, [r0]
 8001646:	6083      	str	r3, [r0, #8]
 8001648:	8181      	strh	r1, [r0, #12]
 800164a:	6643      	str	r3, [r0, #100]	; 0x64
 800164c:	81c2      	strh	r2, [r0, #14]
 800164e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001652:	6183      	str	r3, [r0, #24]
 8001654:	4619      	mov	r1, r3
 8001656:	2208      	movs	r2, #8
 8001658:	305c      	adds	r0, #92	; 0x5c
 800165a:	f7ff ffcf 	bl	80015fc <memset>
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <std+0x38>)
 8001660:	6263      	str	r3, [r4, #36]	; 0x24
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <std+0x3c>)
 8001664:	62a3      	str	r3, [r4, #40]	; 0x28
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <std+0x40>)
 8001668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <std+0x44>)
 800166c:	6224      	str	r4, [r4, #32]
 800166e:	6323      	str	r3, [r4, #48]	; 0x30
 8001670:	bd10      	pop	{r4, pc}
 8001672:	bf00      	nop
 8001674:	08001e35 	.word	0x08001e35
 8001678:	08001e57 	.word	0x08001e57
 800167c:	08001e8f 	.word	0x08001e8f
 8001680:	08001eb3 	.word	0x08001eb3

08001684 <_cleanup_r>:
 8001684:	4901      	ldr	r1, [pc, #4]	; (800168c <_cleanup_r+0x8>)
 8001686:	f000 b885 	b.w	8001794 <_fwalk_reent>
 800168a:	bf00      	nop
 800168c:	0800218d 	.word	0x0800218d

08001690 <__sfmoreglue>:
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	1e4a      	subs	r2, r1, #1
 8001694:	2568      	movs	r5, #104	; 0x68
 8001696:	4355      	muls	r5, r2
 8001698:	460e      	mov	r6, r1
 800169a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800169e:	f000 f897 	bl	80017d0 <_malloc_r>
 80016a2:	4604      	mov	r4, r0
 80016a4:	b140      	cbz	r0, 80016b8 <__sfmoreglue+0x28>
 80016a6:	2100      	movs	r1, #0
 80016a8:	e9c0 1600 	strd	r1, r6, [r0]
 80016ac:	300c      	adds	r0, #12
 80016ae:	60a0      	str	r0, [r4, #8]
 80016b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016b4:	f7ff ffa2 	bl	80015fc <memset>
 80016b8:	4620      	mov	r0, r4
 80016ba:	bd70      	pop	{r4, r5, r6, pc}

080016bc <__sinit>:
 80016bc:	6983      	ldr	r3, [r0, #24]
 80016be:	b510      	push	{r4, lr}
 80016c0:	4604      	mov	r4, r0
 80016c2:	bb33      	cbnz	r3, 8001712 <__sinit+0x56>
 80016c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80016c8:	6503      	str	r3, [r0, #80]	; 0x50
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <__sinit+0x58>)
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <__sinit+0x5c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6282      	str	r2, [r0, #40]	; 0x28
 80016d2:	4298      	cmp	r0, r3
 80016d4:	bf04      	itt	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	6183      	streq	r3, [r0, #24]
 80016da:	f000 f81f 	bl	800171c <__sfp>
 80016de:	6060      	str	r0, [r4, #4]
 80016e0:	4620      	mov	r0, r4
 80016e2:	f000 f81b 	bl	800171c <__sfp>
 80016e6:	60a0      	str	r0, [r4, #8]
 80016e8:	4620      	mov	r0, r4
 80016ea:	f000 f817 	bl	800171c <__sfp>
 80016ee:	2200      	movs	r2, #0
 80016f0:	60e0      	str	r0, [r4, #12]
 80016f2:	2104      	movs	r1, #4
 80016f4:	6860      	ldr	r0, [r4, #4]
 80016f6:	f7ff ffa1 	bl	800163c <std>
 80016fa:	2201      	movs	r2, #1
 80016fc:	2109      	movs	r1, #9
 80016fe:	68a0      	ldr	r0, [r4, #8]
 8001700:	f7ff ff9c 	bl	800163c <std>
 8001704:	2202      	movs	r2, #2
 8001706:	2112      	movs	r1, #18
 8001708:	68e0      	ldr	r0, [r4, #12]
 800170a:	f7ff ff97 	bl	800163c <std>
 800170e:	2301      	movs	r3, #1
 8001710:	61a3      	str	r3, [r4, #24]
 8001712:	bd10      	pop	{r4, pc}
 8001714:	08002438 	.word	0x08002438
 8001718:	08001685 	.word	0x08001685

0800171c <__sfp>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <__sfp+0x70>)
 8001720:	681e      	ldr	r6, [r3, #0]
 8001722:	69b3      	ldr	r3, [r6, #24]
 8001724:	4607      	mov	r7, r0
 8001726:	b913      	cbnz	r3, 800172e <__sfp+0x12>
 8001728:	4630      	mov	r0, r6
 800172a:	f7ff ffc7 	bl	80016bc <__sinit>
 800172e:	3648      	adds	r6, #72	; 0x48
 8001730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001734:	3b01      	subs	r3, #1
 8001736:	d503      	bpl.n	8001740 <__sfp+0x24>
 8001738:	6833      	ldr	r3, [r6, #0]
 800173a:	b133      	cbz	r3, 800174a <__sfp+0x2e>
 800173c:	6836      	ldr	r6, [r6, #0]
 800173e:	e7f7      	b.n	8001730 <__sfp+0x14>
 8001740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001744:	b16d      	cbz	r5, 8001762 <__sfp+0x46>
 8001746:	3468      	adds	r4, #104	; 0x68
 8001748:	e7f4      	b.n	8001734 <__sfp+0x18>
 800174a:	2104      	movs	r1, #4
 800174c:	4638      	mov	r0, r7
 800174e:	f7ff ff9f 	bl	8001690 <__sfmoreglue>
 8001752:	6030      	str	r0, [r6, #0]
 8001754:	2800      	cmp	r0, #0
 8001756:	d1f1      	bne.n	800173c <__sfp+0x20>
 8001758:	230c      	movs	r3, #12
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4604      	mov	r4, r0
 800175e:	4620      	mov	r0, r4
 8001760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <__sfp+0x74>)
 8001764:	6665      	str	r5, [r4, #100]	; 0x64
 8001766:	e9c4 5500 	strd	r5, r5, [r4]
 800176a:	60a5      	str	r5, [r4, #8]
 800176c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001770:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001774:	2208      	movs	r2, #8
 8001776:	4629      	mov	r1, r5
 8001778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800177c:	f7ff ff3e 	bl	80015fc <memset>
 8001780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001788:	e7e9      	b.n	800175e <__sfp+0x42>
 800178a:	bf00      	nop
 800178c:	08002438 	.word	0x08002438
 8001790:	ffff0001 	.word	0xffff0001

08001794 <_fwalk_reent>:
 8001794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001798:	4680      	mov	r8, r0
 800179a:	4689      	mov	r9, r1
 800179c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80017a0:	2600      	movs	r6, #0
 80017a2:	b914      	cbnz	r4, 80017aa <_fwalk_reent+0x16>
 80017a4:	4630      	mov	r0, r6
 80017a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80017ae:	3f01      	subs	r7, #1
 80017b0:	d501      	bpl.n	80017b6 <_fwalk_reent+0x22>
 80017b2:	6824      	ldr	r4, [r4, #0]
 80017b4:	e7f5      	b.n	80017a2 <_fwalk_reent+0xe>
 80017b6:	89ab      	ldrh	r3, [r5, #12]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d907      	bls.n	80017cc <_fwalk_reent+0x38>
 80017bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017c0:	3301      	adds	r3, #1
 80017c2:	d003      	beq.n	80017cc <_fwalk_reent+0x38>
 80017c4:	4629      	mov	r1, r5
 80017c6:	4640      	mov	r0, r8
 80017c8:	47c8      	blx	r9
 80017ca:	4306      	orrs	r6, r0
 80017cc:	3568      	adds	r5, #104	; 0x68
 80017ce:	e7ee      	b.n	80017ae <_fwalk_reent+0x1a>

080017d0 <_malloc_r>:
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	1ccd      	adds	r5, r1, #3
 80017d4:	f025 0503 	bic.w	r5, r5, #3
 80017d8:	3508      	adds	r5, #8
 80017da:	2d0c      	cmp	r5, #12
 80017dc:	bf38      	it	cc
 80017de:	250c      	movcc	r5, #12
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	4606      	mov	r6, r0
 80017e4:	db01      	blt.n	80017ea <_malloc_r+0x1a>
 80017e6:	42a9      	cmp	r1, r5
 80017e8:	d903      	bls.n	80017f2 <_malloc_r+0x22>
 80017ea:	230c      	movs	r3, #12
 80017ec:	6033      	str	r3, [r6, #0]
 80017ee:	2000      	movs	r0, #0
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
 80017f2:	f000 fd6b 	bl	80022cc <__malloc_lock>
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <_malloc_r+0xac>)
 80017f8:	6814      	ldr	r4, [r2, #0]
 80017fa:	4621      	mov	r1, r4
 80017fc:	b991      	cbnz	r1, 8001824 <_malloc_r+0x54>
 80017fe:	4c20      	ldr	r4, [pc, #128]	; (8001880 <_malloc_r+0xb0>)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	b91b      	cbnz	r3, 800180c <_malloc_r+0x3c>
 8001804:	4630      	mov	r0, r6
 8001806:	f000 fb05 	bl	8001e14 <_sbrk_r>
 800180a:	6020      	str	r0, [r4, #0]
 800180c:	4629      	mov	r1, r5
 800180e:	4630      	mov	r0, r6
 8001810:	f000 fb00 	bl	8001e14 <_sbrk_r>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d124      	bne.n	8001862 <_malloc_r+0x92>
 8001818:	230c      	movs	r3, #12
 800181a:	6033      	str	r3, [r6, #0]
 800181c:	4630      	mov	r0, r6
 800181e:	f000 fd56 	bl	80022ce <__malloc_unlock>
 8001822:	e7e4      	b.n	80017ee <_malloc_r+0x1e>
 8001824:	680b      	ldr	r3, [r1, #0]
 8001826:	1b5b      	subs	r3, r3, r5
 8001828:	d418      	bmi.n	800185c <_malloc_r+0x8c>
 800182a:	2b0b      	cmp	r3, #11
 800182c:	d90f      	bls.n	800184e <_malloc_r+0x7e>
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	50cd      	str	r5, [r1, r3]
 8001832:	18cc      	adds	r4, r1, r3
 8001834:	4630      	mov	r0, r6
 8001836:	f000 fd4a 	bl	80022ce <__malloc_unlock>
 800183a:	f104 000b 	add.w	r0, r4, #11
 800183e:	1d23      	adds	r3, r4, #4
 8001840:	f020 0007 	bic.w	r0, r0, #7
 8001844:	1ac3      	subs	r3, r0, r3
 8001846:	d0d3      	beq.n	80017f0 <_malloc_r+0x20>
 8001848:	425a      	negs	r2, r3
 800184a:	50e2      	str	r2, [r4, r3]
 800184c:	e7d0      	b.n	80017f0 <_malloc_r+0x20>
 800184e:	428c      	cmp	r4, r1
 8001850:	684b      	ldr	r3, [r1, #4]
 8001852:	bf16      	itet	ne
 8001854:	6063      	strne	r3, [r4, #4]
 8001856:	6013      	streq	r3, [r2, #0]
 8001858:	460c      	movne	r4, r1
 800185a:	e7eb      	b.n	8001834 <_malloc_r+0x64>
 800185c:	460c      	mov	r4, r1
 800185e:	6849      	ldr	r1, [r1, #4]
 8001860:	e7cc      	b.n	80017fc <_malloc_r+0x2c>
 8001862:	1cc4      	adds	r4, r0, #3
 8001864:	f024 0403 	bic.w	r4, r4, #3
 8001868:	42a0      	cmp	r0, r4
 800186a:	d005      	beq.n	8001878 <_malloc_r+0xa8>
 800186c:	1a21      	subs	r1, r4, r0
 800186e:	4630      	mov	r0, r6
 8001870:	f000 fad0 	bl	8001e14 <_sbrk_r>
 8001874:	3001      	adds	r0, #1
 8001876:	d0cf      	beq.n	8001818 <_malloc_r+0x48>
 8001878:	6025      	str	r5, [r4, #0]
 800187a:	e7db      	b.n	8001834 <_malloc_r+0x64>
 800187c:	20000090 	.word	0x20000090
 8001880:	20000094 	.word	0x20000094

08001884 <__sfputc_r>:
 8001884:	6893      	ldr	r3, [r2, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	b410      	push	{r4}
 800188c:	6093      	str	r3, [r2, #8]
 800188e:	da08      	bge.n	80018a2 <__sfputc_r+0x1e>
 8001890:	6994      	ldr	r4, [r2, #24]
 8001892:	42a3      	cmp	r3, r4
 8001894:	db01      	blt.n	800189a <__sfputc_r+0x16>
 8001896:	290a      	cmp	r1, #10
 8001898:	d103      	bne.n	80018a2 <__sfputc_r+0x1e>
 800189a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800189e:	f000 bb0d 	b.w	8001ebc <__swbuf_r>
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	1c58      	adds	r0, r3, #1
 80018a6:	6010      	str	r0, [r2, #0]
 80018a8:	7019      	strb	r1, [r3, #0]
 80018aa:	4608      	mov	r0, r1
 80018ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <__sfputs_r>:
 80018b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b4:	4606      	mov	r6, r0
 80018b6:	460f      	mov	r7, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	18d5      	adds	r5, r2, r3
 80018bc:	42ac      	cmp	r4, r5
 80018be:	d101      	bne.n	80018c4 <__sfputs_r+0x12>
 80018c0:	2000      	movs	r0, #0
 80018c2:	e007      	b.n	80018d4 <__sfputs_r+0x22>
 80018c4:	463a      	mov	r2, r7
 80018c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ca:	4630      	mov	r0, r6
 80018cc:	f7ff ffda 	bl	8001884 <__sfputc_r>
 80018d0:	1c43      	adds	r3, r0, #1
 80018d2:	d1f3      	bne.n	80018bc <__sfputs_r+0xa>
 80018d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018d8 <_vfiprintf_r>:
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	460c      	mov	r4, r1
 80018de:	b09d      	sub	sp, #116	; 0x74
 80018e0:	4617      	mov	r7, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	4606      	mov	r6, r0
 80018e6:	b118      	cbz	r0, 80018f0 <_vfiprintf_r+0x18>
 80018e8:	6983      	ldr	r3, [r0, #24]
 80018ea:	b90b      	cbnz	r3, 80018f0 <_vfiprintf_r+0x18>
 80018ec:	f7ff fee6 	bl	80016bc <__sinit>
 80018f0:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <_vfiprintf_r+0x20c>)
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d158      	bne.n	80019a8 <_vfiprintf_r+0xd0>
 80018f6:	6874      	ldr	r4, [r6, #4]
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	0718      	lsls	r0, r3, #28
 80018fc:	d55e      	bpl.n	80019bc <_vfiprintf_r+0xe4>
 80018fe:	6923      	ldr	r3, [r4, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d05b      	beq.n	80019bc <_vfiprintf_r+0xe4>
 8001904:	2300      	movs	r3, #0
 8001906:	9309      	str	r3, [sp, #36]	; 0x24
 8001908:	2320      	movs	r3, #32
 800190a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800190e:	2330      	movs	r3, #48	; 0x30
 8001910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001914:	9503      	str	r5, [sp, #12]
 8001916:	f04f 0b01 	mov.w	fp, #1
 800191a:	46b8      	mov	r8, r7
 800191c:	4645      	mov	r5, r8
 800191e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001922:	b10b      	cbz	r3, 8001928 <_vfiprintf_r+0x50>
 8001924:	2b25      	cmp	r3, #37	; 0x25
 8001926:	d154      	bne.n	80019d2 <_vfiprintf_r+0xfa>
 8001928:	ebb8 0a07 	subs.w	sl, r8, r7
 800192c:	d00b      	beq.n	8001946 <_vfiprintf_r+0x6e>
 800192e:	4653      	mov	r3, sl
 8001930:	463a      	mov	r2, r7
 8001932:	4621      	mov	r1, r4
 8001934:	4630      	mov	r0, r6
 8001936:	f7ff ffbc 	bl	80018b2 <__sfputs_r>
 800193a:	3001      	adds	r0, #1
 800193c:	f000 80c2 	beq.w	8001ac4 <_vfiprintf_r+0x1ec>
 8001940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001942:	4453      	add	r3, sl
 8001944:	9309      	str	r3, [sp, #36]	; 0x24
 8001946:	f898 3000 	ldrb.w	r3, [r8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80ba 	beq.w	8001ac4 <_vfiprintf_r+0x1ec>
 8001950:	2300      	movs	r3, #0
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	9307      	str	r3, [sp, #28]
 800195e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001962:	931a      	str	r3, [sp, #104]	; 0x68
 8001964:	46a8      	mov	r8, r5
 8001966:	2205      	movs	r2, #5
 8001968:	f818 1b01 	ldrb.w	r1, [r8], #1
 800196c:	485e      	ldr	r0, [pc, #376]	; (8001ae8 <_vfiprintf_r+0x210>)
 800196e:	f7fe fc2f 	bl	80001d0 <memchr>
 8001972:	9b04      	ldr	r3, [sp, #16]
 8001974:	bb78      	cbnz	r0, 80019d6 <_vfiprintf_r+0xfe>
 8001976:	06d9      	lsls	r1, r3, #27
 8001978:	bf44      	itt	mi
 800197a:	2220      	movmi	r2, #32
 800197c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001980:	071a      	lsls	r2, r3, #28
 8001982:	bf44      	itt	mi
 8001984:	222b      	movmi	r2, #43	; 0x2b
 8001986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800198a:	782a      	ldrb	r2, [r5, #0]
 800198c:	2a2a      	cmp	r2, #42	; 0x2a
 800198e:	d02a      	beq.n	80019e6 <_vfiprintf_r+0x10e>
 8001990:	9a07      	ldr	r2, [sp, #28]
 8001992:	46a8      	mov	r8, r5
 8001994:	2000      	movs	r0, #0
 8001996:	250a      	movs	r5, #10
 8001998:	4641      	mov	r1, r8
 800199a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800199e:	3b30      	subs	r3, #48	; 0x30
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d969      	bls.n	8001a78 <_vfiprintf_r+0x1a0>
 80019a4:	b360      	cbz	r0, 8001a00 <_vfiprintf_r+0x128>
 80019a6:	e024      	b.n	80019f2 <_vfiprintf_r+0x11a>
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <_vfiprintf_r+0x214>)
 80019aa:	429c      	cmp	r4, r3
 80019ac:	d101      	bne.n	80019b2 <_vfiprintf_r+0xda>
 80019ae:	68b4      	ldr	r4, [r6, #8]
 80019b0:	e7a2      	b.n	80018f8 <_vfiprintf_r+0x20>
 80019b2:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <_vfiprintf_r+0x218>)
 80019b4:	429c      	cmp	r4, r3
 80019b6:	bf08      	it	eq
 80019b8:	68f4      	ldreq	r4, [r6, #12]
 80019ba:	e79d      	b.n	80018f8 <_vfiprintf_r+0x20>
 80019bc:	4621      	mov	r1, r4
 80019be:	4630      	mov	r0, r6
 80019c0:	f000 fae0 	bl	8001f84 <__swsetup_r>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d09d      	beq.n	8001904 <_vfiprintf_r+0x2c>
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	b01d      	add	sp, #116	; 0x74
 80019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019d2:	46a8      	mov	r8, r5
 80019d4:	e7a2      	b.n	800191c <_vfiprintf_r+0x44>
 80019d6:	4a44      	ldr	r2, [pc, #272]	; (8001ae8 <_vfiprintf_r+0x210>)
 80019d8:	1a80      	subs	r0, r0, r2
 80019da:	fa0b f000 	lsl.w	r0, fp, r0
 80019de:	4318      	orrs	r0, r3
 80019e0:	9004      	str	r0, [sp, #16]
 80019e2:	4645      	mov	r5, r8
 80019e4:	e7be      	b.n	8001964 <_vfiprintf_r+0x8c>
 80019e6:	9a03      	ldr	r2, [sp, #12]
 80019e8:	1d11      	adds	r1, r2, #4
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	9103      	str	r1, [sp, #12]
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	db01      	blt.n	80019f6 <_vfiprintf_r+0x11e>
 80019f2:	9207      	str	r2, [sp, #28]
 80019f4:	e004      	b.n	8001a00 <_vfiprintf_r+0x128>
 80019f6:	4252      	negs	r2, r2
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	9207      	str	r2, [sp, #28]
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	f898 3000 	ldrb.w	r3, [r8]
 8001a04:	2b2e      	cmp	r3, #46	; 0x2e
 8001a06:	d10e      	bne.n	8001a26 <_vfiprintf_r+0x14e>
 8001a08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a0e:	d138      	bne.n	8001a82 <_vfiprintf_r+0x1aa>
 8001a10:	9b03      	ldr	r3, [sp, #12]
 8001a12:	1d1a      	adds	r2, r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	9203      	str	r2, [sp, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfb8      	it	lt
 8001a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a20:	f108 0802 	add.w	r8, r8, #2
 8001a24:	9305      	str	r3, [sp, #20]
 8001a26:	4d33      	ldr	r5, [pc, #204]	; (8001af4 <_vfiprintf_r+0x21c>)
 8001a28:	f898 1000 	ldrb.w	r1, [r8]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f7fe fbce 	bl	80001d0 <memchr>
 8001a34:	b140      	cbz	r0, 8001a48 <_vfiprintf_r+0x170>
 8001a36:	2340      	movs	r3, #64	; 0x40
 8001a38:	1b40      	subs	r0, r0, r5
 8001a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8001a3e:	9b04      	ldr	r3, [sp, #16]
 8001a40:	4303      	orrs	r3, r0
 8001a42:	f108 0801 	add.w	r8, r8, #1
 8001a46:	9304      	str	r3, [sp, #16]
 8001a48:	f898 1000 	ldrb.w	r1, [r8]
 8001a4c:	482a      	ldr	r0, [pc, #168]	; (8001af8 <_vfiprintf_r+0x220>)
 8001a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a52:	2206      	movs	r2, #6
 8001a54:	f108 0701 	add.w	r7, r8, #1
 8001a58:	f7fe fbba 	bl	80001d0 <memchr>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d037      	beq.n	8001ad0 <_vfiprintf_r+0x1f8>
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <_vfiprintf_r+0x224>)
 8001a62:	bb1b      	cbnz	r3, 8001aac <_vfiprintf_r+0x1d4>
 8001a64:	9b03      	ldr	r3, [sp, #12]
 8001a66:	3307      	adds	r3, #7
 8001a68:	f023 0307 	bic.w	r3, r3, #7
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a72:	444b      	add	r3, r9
 8001a74:	9309      	str	r3, [sp, #36]	; 0x24
 8001a76:	e750      	b.n	800191a <_vfiprintf_r+0x42>
 8001a78:	fb05 3202 	mla	r2, r5, r2, r3
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	4688      	mov	r8, r1
 8001a80:	e78a      	b.n	8001998 <_vfiprintf_r+0xc0>
 8001a82:	2300      	movs	r3, #0
 8001a84:	f108 0801 	add.w	r8, r8, #1
 8001a88:	9305      	str	r3, [sp, #20]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	250a      	movs	r5, #10
 8001a8e:	4640      	mov	r0, r8
 8001a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a94:	3a30      	subs	r2, #48	; 0x30
 8001a96:	2a09      	cmp	r2, #9
 8001a98:	d903      	bls.n	8001aa2 <_vfiprintf_r+0x1ca>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0c3      	beq.n	8001a26 <_vfiprintf_r+0x14e>
 8001a9e:	9105      	str	r1, [sp, #20]
 8001aa0:	e7c1      	b.n	8001a26 <_vfiprintf_r+0x14e>
 8001aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	e7f0      	b.n	8001a8e <_vfiprintf_r+0x1b6>
 8001aac:	ab03      	add	r3, sp, #12
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_vfiprintf_r+0x228>)
 8001ab4:	a904      	add	r1, sp, #16
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f3af 8000 	nop.w
 8001abc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001ac0:	4681      	mov	r9, r0
 8001ac2:	d1d5      	bne.n	8001a70 <_vfiprintf_r+0x198>
 8001ac4:	89a3      	ldrh	r3, [r4, #12]
 8001ac6:	065b      	lsls	r3, r3, #25
 8001ac8:	f53f af7e 	bmi.w	80019c8 <_vfiprintf_r+0xf0>
 8001acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ace:	e77d      	b.n	80019cc <_vfiprintf_r+0xf4>
 8001ad0:	ab03      	add	r3, sp, #12
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <_vfiprintf_r+0x228>)
 8001ad8:	a904      	add	r1, sp, #16
 8001ada:	4630      	mov	r0, r6
 8001adc:	f000 f888 	bl	8001bf0 <_printf_i>
 8001ae0:	e7ec      	b.n	8001abc <_vfiprintf_r+0x1e4>
 8001ae2:	bf00      	nop
 8001ae4:	0800245c 	.word	0x0800245c
 8001ae8:	0800249c 	.word	0x0800249c
 8001aec:	0800247c 	.word	0x0800247c
 8001af0:	0800243c 	.word	0x0800243c
 8001af4:	080024a2 	.word	0x080024a2
 8001af8:	080024a6 	.word	0x080024a6
 8001afc:	00000000 	.word	0x00000000
 8001b00:	080018b3 	.word	0x080018b3

08001b04 <_printf_common>:
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	4691      	mov	r9, r2
 8001b0a:	461f      	mov	r7, r3
 8001b0c:	688a      	ldr	r2, [r1, #8]
 8001b0e:	690b      	ldr	r3, [r1, #16]
 8001b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bfb8      	it	lt
 8001b18:	4613      	movlt	r3, r2
 8001b1a:	f8c9 3000 	str.w	r3, [r9]
 8001b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b22:	4606      	mov	r6, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	b112      	cbz	r2, 8001b2e <_printf_common+0x2a>
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f8c9 3000 	str.w	r3, [r9]
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	0699      	lsls	r1, r3, #26
 8001b32:	bf42      	ittt	mi
 8001b34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b38:	3302      	addmi	r3, #2
 8001b3a:	f8c9 3000 	strmi.w	r3, [r9]
 8001b3e:	6825      	ldr	r5, [r4, #0]
 8001b40:	f015 0506 	ands.w	r5, r5, #6
 8001b44:	d107      	bne.n	8001b56 <_printf_common+0x52>
 8001b46:	f104 0a19 	add.w	sl, r4, #25
 8001b4a:	68e3      	ldr	r3, [r4, #12]
 8001b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	42ab      	cmp	r3, r5
 8001b54:	dc28      	bgt.n	8001ba8 <_printf_common+0xa4>
 8001b56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	3300      	adds	r3, #0
 8001b5e:	bf18      	it	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	0692      	lsls	r2, r2, #26
 8001b64:	d42d      	bmi.n	8001bc2 <_printf_common+0xbe>
 8001b66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b6a:	4639      	mov	r1, r7
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	47c0      	blx	r8
 8001b70:	3001      	adds	r0, #1
 8001b72:	d020      	beq.n	8001bb6 <_printf_common+0xb2>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	68e5      	ldr	r5, [r4, #12]
 8001b78:	f8d9 2000 	ldr.w	r2, [r9]
 8001b7c:	f003 0306 	and.w	r3, r3, #6
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	bf08      	it	eq
 8001b84:	1aad      	subeq	r5, r5, r2
 8001b86:	68a3      	ldr	r3, [r4, #8]
 8001b88:	6922      	ldr	r2, [r4, #16]
 8001b8a:	bf0c      	ite	eq
 8001b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b90:	2500      	movne	r5, #0
 8001b92:	4293      	cmp	r3, r2
 8001b94:	bfc4      	itt	gt
 8001b96:	1a9b      	subgt	r3, r3, r2
 8001b98:	18ed      	addgt	r5, r5, r3
 8001b9a:	f04f 0900 	mov.w	r9, #0
 8001b9e:	341a      	adds	r4, #26
 8001ba0:	454d      	cmp	r5, r9
 8001ba2:	d11a      	bne.n	8001bda <_printf_common+0xd6>
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e008      	b.n	8001bba <_printf_common+0xb6>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	4652      	mov	r2, sl
 8001bac:	4639      	mov	r1, r7
 8001bae:	4630      	mov	r0, r6
 8001bb0:	47c0      	blx	r8
 8001bb2:	3001      	adds	r0, #1
 8001bb4:	d103      	bne.n	8001bbe <_printf_common+0xba>
 8001bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bbe:	3501      	adds	r5, #1
 8001bc0:	e7c3      	b.n	8001b4a <_printf_common+0x46>
 8001bc2:	18e1      	adds	r1, r4, r3
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	2030      	movs	r0, #48	; 0x30
 8001bc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bcc:	4422      	add	r2, r4
 8001bce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	e7c5      	b.n	8001b66 <_printf_common+0x62>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4622      	mov	r2, r4
 8001bde:	4639      	mov	r1, r7
 8001be0:	4630      	mov	r0, r6
 8001be2:	47c0      	blx	r8
 8001be4:	3001      	adds	r0, #1
 8001be6:	d0e6      	beq.n	8001bb6 <_printf_common+0xb2>
 8001be8:	f109 0901 	add.w	r9, r9, #1
 8001bec:	e7d8      	b.n	8001ba0 <_printf_common+0x9c>
	...

08001bf0 <_printf_i>:
 8001bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	7e09      	ldrb	r1, [r1, #24]
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	296e      	cmp	r1, #110	; 0x6e
 8001c00:	4617      	mov	r7, r2
 8001c02:	4606      	mov	r6, r0
 8001c04:	4698      	mov	r8, r3
 8001c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c08:	f000 80b3 	beq.w	8001d72 <_printf_i+0x182>
 8001c0c:	d822      	bhi.n	8001c54 <_printf_i+0x64>
 8001c0e:	2963      	cmp	r1, #99	; 0x63
 8001c10:	d036      	beq.n	8001c80 <_printf_i+0x90>
 8001c12:	d80a      	bhi.n	8001c2a <_printf_i+0x3a>
 8001c14:	2900      	cmp	r1, #0
 8001c16:	f000 80b9 	beq.w	8001d8c <_printf_i+0x19c>
 8001c1a:	2958      	cmp	r1, #88	; 0x58
 8001c1c:	f000 8083 	beq.w	8001d26 <_printf_i+0x136>
 8001c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c28:	e032      	b.n	8001c90 <_printf_i+0xa0>
 8001c2a:	2964      	cmp	r1, #100	; 0x64
 8001c2c:	d001      	beq.n	8001c32 <_printf_i+0x42>
 8001c2e:	2969      	cmp	r1, #105	; 0x69
 8001c30:	d1f6      	bne.n	8001c20 <_printf_i+0x30>
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	0605      	lsls	r5, r0, #24
 8001c38:	f103 0104 	add.w	r1, r3, #4
 8001c3c:	d52a      	bpl.n	8001c94 <_printf_i+0xa4>
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6011      	str	r1, [r2, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da03      	bge.n	8001c4e <_printf_i+0x5e>
 8001c46:	222d      	movs	r2, #45	; 0x2d
 8001c48:	425b      	negs	r3, r3
 8001c4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c4e:	486f      	ldr	r0, [pc, #444]	; (8001e0c <_printf_i+0x21c>)
 8001c50:	220a      	movs	r2, #10
 8001c52:	e039      	b.n	8001cc8 <_printf_i+0xd8>
 8001c54:	2973      	cmp	r1, #115	; 0x73
 8001c56:	f000 809d 	beq.w	8001d94 <_printf_i+0x1a4>
 8001c5a:	d808      	bhi.n	8001c6e <_printf_i+0x7e>
 8001c5c:	296f      	cmp	r1, #111	; 0x6f
 8001c5e:	d020      	beq.n	8001ca2 <_printf_i+0xb2>
 8001c60:	2970      	cmp	r1, #112	; 0x70
 8001c62:	d1dd      	bne.n	8001c20 <_printf_i+0x30>
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	f043 0320 	orr.w	r3, r3, #32
 8001c6a:	6023      	str	r3, [r4, #0]
 8001c6c:	e003      	b.n	8001c76 <_printf_i+0x86>
 8001c6e:	2975      	cmp	r1, #117	; 0x75
 8001c70:	d017      	beq.n	8001ca2 <_printf_i+0xb2>
 8001c72:	2978      	cmp	r1, #120	; 0x78
 8001c74:	d1d4      	bne.n	8001c20 <_printf_i+0x30>
 8001c76:	2378      	movs	r3, #120	; 0x78
 8001c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c7c:	4864      	ldr	r0, [pc, #400]	; (8001e10 <_printf_i+0x220>)
 8001c7e:	e055      	b.n	8001d2c <_printf_i+0x13c>
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	1d19      	adds	r1, r3, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6011      	str	r1, [r2, #0]
 8001c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c90:	2301      	movs	r3, #1
 8001c92:	e08c      	b.n	8001dae <_printf_i+0x1be>
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6011      	str	r1, [r2, #0]
 8001c98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c9c:	bf18      	it	ne
 8001c9e:	b21b      	sxthne	r3, r3
 8001ca0:	e7cf      	b.n	8001c42 <_printf_i+0x52>
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	6825      	ldr	r5, [r4, #0]
 8001ca6:	1d18      	adds	r0, r3, #4
 8001ca8:	6010      	str	r0, [r2, #0]
 8001caa:	0628      	lsls	r0, r5, #24
 8001cac:	d501      	bpl.n	8001cb2 <_printf_i+0xc2>
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	e002      	b.n	8001cb8 <_printf_i+0xc8>
 8001cb2:	0668      	lsls	r0, r5, #25
 8001cb4:	d5fb      	bpl.n	8001cae <_printf_i+0xbe>
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	4854      	ldr	r0, [pc, #336]	; (8001e0c <_printf_i+0x21c>)
 8001cba:	296f      	cmp	r1, #111	; 0x6f
 8001cbc:	bf14      	ite	ne
 8001cbe:	220a      	movne	r2, #10
 8001cc0:	2208      	moveq	r2, #8
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cc8:	6865      	ldr	r5, [r4, #4]
 8001cca:	60a5      	str	r5, [r4, #8]
 8001ccc:	2d00      	cmp	r5, #0
 8001cce:	f2c0 8095 	blt.w	8001dfc <_printf_i+0x20c>
 8001cd2:	6821      	ldr	r1, [r4, #0]
 8001cd4:	f021 0104 	bic.w	r1, r1, #4
 8001cd8:	6021      	str	r1, [r4, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d13d      	bne.n	8001d5a <_printf_i+0x16a>
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	f040 808e 	bne.w	8001e00 <_printf_i+0x210>
 8001ce4:	4665      	mov	r5, ip
 8001ce6:	2a08      	cmp	r2, #8
 8001ce8:	d10b      	bne.n	8001d02 <_printf_i+0x112>
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	07db      	lsls	r3, r3, #31
 8001cee:	d508      	bpl.n	8001d02 <_printf_i+0x112>
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	6862      	ldr	r2, [r4, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	bfde      	ittt	le
 8001cf8:	2330      	movle	r3, #48	; 0x30
 8001cfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d02:	ebac 0305 	sub.w	r3, ip, r5
 8001d06:	6123      	str	r3, [r4, #16]
 8001d08:	f8cd 8000 	str.w	r8, [sp]
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	aa03      	add	r2, sp, #12
 8001d10:	4621      	mov	r1, r4
 8001d12:	4630      	mov	r0, r6
 8001d14:	f7ff fef6 	bl	8001b04 <_printf_common>
 8001d18:	3001      	adds	r0, #1
 8001d1a:	d14d      	bne.n	8001db8 <_printf_i+0x1c8>
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	b005      	add	sp, #20
 8001d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d26:	4839      	ldr	r0, [pc, #228]	; (8001e0c <_printf_i+0x21c>)
 8001d28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d2c:	6813      	ldr	r3, [r2, #0]
 8001d2e:	6821      	ldr	r1, [r4, #0]
 8001d30:	1d1d      	adds	r5, r3, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6015      	str	r5, [r2, #0]
 8001d36:	060a      	lsls	r2, r1, #24
 8001d38:	d50b      	bpl.n	8001d52 <_printf_i+0x162>
 8001d3a:	07ca      	lsls	r2, r1, #31
 8001d3c:	bf44      	itt	mi
 8001d3e:	f041 0120 	orrmi.w	r1, r1, #32
 8001d42:	6021      	strmi	r1, [r4, #0]
 8001d44:	b91b      	cbnz	r3, 8001d4e <_printf_i+0x15e>
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	f022 0220 	bic.w	r2, r2, #32
 8001d4c:	6022      	str	r2, [r4, #0]
 8001d4e:	2210      	movs	r2, #16
 8001d50:	e7b7      	b.n	8001cc2 <_printf_i+0xd2>
 8001d52:	064d      	lsls	r5, r1, #25
 8001d54:	bf48      	it	mi
 8001d56:	b29b      	uxthmi	r3, r3
 8001d58:	e7ef      	b.n	8001d3a <_printf_i+0x14a>
 8001d5a:	4665      	mov	r5, ip
 8001d5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d60:	fb02 3311 	mls	r3, r2, r1, r3
 8001d64:	5cc3      	ldrb	r3, [r0, r3]
 8001d66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d1f5      	bne.n	8001d5c <_printf_i+0x16c>
 8001d70:	e7b9      	b.n	8001ce6 <_printf_i+0xf6>
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	6825      	ldr	r5, [r4, #0]
 8001d76:	6961      	ldr	r1, [r4, #20]
 8001d78:	1d18      	adds	r0, r3, #4
 8001d7a:	6010      	str	r0, [r2, #0]
 8001d7c:	0628      	lsls	r0, r5, #24
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	d501      	bpl.n	8001d86 <_printf_i+0x196>
 8001d82:	6019      	str	r1, [r3, #0]
 8001d84:	e002      	b.n	8001d8c <_printf_i+0x19c>
 8001d86:	066a      	lsls	r2, r5, #25
 8001d88:	d5fb      	bpl.n	8001d82 <_printf_i+0x192>
 8001d8a:	8019      	strh	r1, [r3, #0]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6123      	str	r3, [r4, #16]
 8001d90:	4665      	mov	r5, ip
 8001d92:	e7b9      	b.n	8001d08 <_printf_i+0x118>
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	1d19      	adds	r1, r3, #4
 8001d98:	6011      	str	r1, [r2, #0]
 8001d9a:	681d      	ldr	r5, [r3, #0]
 8001d9c:	6862      	ldr	r2, [r4, #4]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4628      	mov	r0, r5
 8001da2:	f7fe fa15 	bl	80001d0 <memchr>
 8001da6:	b108      	cbz	r0, 8001dac <_printf_i+0x1bc>
 8001da8:	1b40      	subs	r0, r0, r5
 8001daa:	6060      	str	r0, [r4, #4]
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	6123      	str	r3, [r4, #16]
 8001db0:	2300      	movs	r3, #0
 8001db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001db6:	e7a7      	b.n	8001d08 <_printf_i+0x118>
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	462a      	mov	r2, r5
 8001dbc:	4639      	mov	r1, r7
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	47c0      	blx	r8
 8001dc2:	3001      	adds	r0, #1
 8001dc4:	d0aa      	beq.n	8001d1c <_printf_i+0x12c>
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	079b      	lsls	r3, r3, #30
 8001dca:	d413      	bmi.n	8001df4 <_printf_i+0x204>
 8001dcc:	68e0      	ldr	r0, [r4, #12]
 8001dce:	9b03      	ldr	r3, [sp, #12]
 8001dd0:	4298      	cmp	r0, r3
 8001dd2:	bfb8      	it	lt
 8001dd4:	4618      	movlt	r0, r3
 8001dd6:	e7a3      	b.n	8001d20 <_printf_i+0x130>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	464a      	mov	r2, r9
 8001ddc:	4639      	mov	r1, r7
 8001dde:	4630      	mov	r0, r6
 8001de0:	47c0      	blx	r8
 8001de2:	3001      	adds	r0, #1
 8001de4:	d09a      	beq.n	8001d1c <_printf_i+0x12c>
 8001de6:	3501      	adds	r5, #1
 8001de8:	68e3      	ldr	r3, [r4, #12]
 8001dea:	9a03      	ldr	r2, [sp, #12]
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	42ab      	cmp	r3, r5
 8001df0:	dcf2      	bgt.n	8001dd8 <_printf_i+0x1e8>
 8001df2:	e7eb      	b.n	8001dcc <_printf_i+0x1dc>
 8001df4:	2500      	movs	r5, #0
 8001df6:	f104 0919 	add.w	r9, r4, #25
 8001dfa:	e7f5      	b.n	8001de8 <_printf_i+0x1f8>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ac      	bne.n	8001d5a <_printf_i+0x16a>
 8001e00:	7803      	ldrb	r3, [r0, #0]
 8001e02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e0a:	e76c      	b.n	8001ce6 <_printf_i+0xf6>
 8001e0c:	080024ad 	.word	0x080024ad
 8001e10:	080024be 	.word	0x080024be

08001e14 <_sbrk_r>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	4c06      	ldr	r4, [pc, #24]	; (8001e30 <_sbrk_r+0x1c>)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	f7fe fb9a 	bl	8000558 <_sbrk>
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	d102      	bne.n	8001e2e <_sbrk_r+0x1a>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	b103      	cbz	r3, 8001e2e <_sbrk_r+0x1a>
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
 8001e30:	2000009c 	.word	0x2000009c

08001e34 <__sread>:
 8001e34:	b510      	push	{r4, lr}
 8001e36:	460c      	mov	r4, r1
 8001e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e3c:	f000 fa96 	bl	800236c <_read_r>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	bfab      	itete	ge
 8001e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e46:	89a3      	ldrhlt	r3, [r4, #12]
 8001e48:	181b      	addge	r3, r3, r0
 8001e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e4e:	bfac      	ite	ge
 8001e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e52:	81a3      	strhlt	r3, [r4, #12]
 8001e54:	bd10      	pop	{r4, pc}

08001e56 <__swrite>:
 8001e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5a:	461f      	mov	r7, r3
 8001e5c:	898b      	ldrh	r3, [r1, #12]
 8001e5e:	05db      	lsls	r3, r3, #23
 8001e60:	4605      	mov	r5, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	4616      	mov	r6, r2
 8001e66:	d505      	bpl.n	8001e74 <__swrite+0x1e>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e70:	f000 f9b6 	bl	80021e0 <_lseek_r>
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e7e:	81a3      	strh	r3, [r4, #12]
 8001e80:	4632      	mov	r2, r6
 8001e82:	463b      	mov	r3, r7
 8001e84:	4628      	mov	r0, r5
 8001e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8a:	f000 b869 	b.w	8001f60 <_write_r>

08001e8e <__sseek>:
 8001e8e:	b510      	push	{r4, lr}
 8001e90:	460c      	mov	r4, r1
 8001e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e96:	f000 f9a3 	bl	80021e0 <_lseek_r>
 8001e9a:	1c43      	adds	r3, r0, #1
 8001e9c:	89a3      	ldrh	r3, [r4, #12]
 8001e9e:	bf15      	itete	ne
 8001ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001eaa:	81a3      	strheq	r3, [r4, #12]
 8001eac:	bf18      	it	ne
 8001eae:	81a3      	strhne	r3, [r4, #12]
 8001eb0:	bd10      	pop	{r4, pc}

08001eb2 <__sclose>:
 8001eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eb6:	f000 b8d3 	b.w	8002060 <_close_r>
	...

08001ebc <__swbuf_r>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	460e      	mov	r6, r1
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	b118      	cbz	r0, 8001ece <__swbuf_r+0x12>
 8001ec6:	6983      	ldr	r3, [r0, #24]
 8001ec8:	b90b      	cbnz	r3, 8001ece <__swbuf_r+0x12>
 8001eca:	f7ff fbf7 	bl	80016bc <__sinit>
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <__swbuf_r+0x98>)
 8001ed0:	429c      	cmp	r4, r3
 8001ed2:	d12a      	bne.n	8001f2a <__swbuf_r+0x6e>
 8001ed4:	686c      	ldr	r4, [r5, #4]
 8001ed6:	69a3      	ldr	r3, [r4, #24]
 8001ed8:	60a3      	str	r3, [r4, #8]
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	071a      	lsls	r2, r3, #28
 8001ede:	d52e      	bpl.n	8001f3e <__swbuf_r+0x82>
 8001ee0:	6923      	ldr	r3, [r4, #16]
 8001ee2:	b363      	cbz	r3, 8001f3e <__swbuf_r+0x82>
 8001ee4:	6923      	ldr	r3, [r4, #16]
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	1ac0      	subs	r0, r0, r3
 8001eea:	6963      	ldr	r3, [r4, #20]
 8001eec:	b2f6      	uxtb	r6, r6
 8001eee:	4283      	cmp	r3, r0
 8001ef0:	4637      	mov	r7, r6
 8001ef2:	dc04      	bgt.n	8001efe <__swbuf_r+0x42>
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	f000 f948 	bl	800218c <_fflush_r>
 8001efc:	bb28      	cbnz	r0, 8001f4a <__swbuf_r+0x8e>
 8001efe:	68a3      	ldr	r3, [r4, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60a3      	str	r3, [r4, #8]
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	6022      	str	r2, [r4, #0]
 8001f0a:	701e      	strb	r6, [r3, #0]
 8001f0c:	6963      	ldr	r3, [r4, #20]
 8001f0e:	3001      	adds	r0, #1
 8001f10:	4283      	cmp	r3, r0
 8001f12:	d004      	beq.n	8001f1e <__swbuf_r+0x62>
 8001f14:	89a3      	ldrh	r3, [r4, #12]
 8001f16:	07db      	lsls	r3, r3, #31
 8001f18:	d519      	bpl.n	8001f4e <__swbuf_r+0x92>
 8001f1a:	2e0a      	cmp	r6, #10
 8001f1c:	d117      	bne.n	8001f4e <__swbuf_r+0x92>
 8001f1e:	4621      	mov	r1, r4
 8001f20:	4628      	mov	r0, r5
 8001f22:	f000 f933 	bl	800218c <_fflush_r>
 8001f26:	b190      	cbz	r0, 8001f4e <__swbuf_r+0x92>
 8001f28:	e00f      	b.n	8001f4a <__swbuf_r+0x8e>
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <__swbuf_r+0x9c>)
 8001f2c:	429c      	cmp	r4, r3
 8001f2e:	d101      	bne.n	8001f34 <__swbuf_r+0x78>
 8001f30:	68ac      	ldr	r4, [r5, #8]
 8001f32:	e7d0      	b.n	8001ed6 <__swbuf_r+0x1a>
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <__swbuf_r+0xa0>)
 8001f36:	429c      	cmp	r4, r3
 8001f38:	bf08      	it	eq
 8001f3a:	68ec      	ldreq	r4, [r5, #12]
 8001f3c:	e7cb      	b.n	8001ed6 <__swbuf_r+0x1a>
 8001f3e:	4621      	mov	r1, r4
 8001f40:	4628      	mov	r0, r5
 8001f42:	f000 f81f 	bl	8001f84 <__swsetup_r>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d0cc      	beq.n	8001ee4 <__swbuf_r+0x28>
 8001f4a:	f04f 37ff 	mov.w	r7, #4294967295
 8001f4e:	4638      	mov	r0, r7
 8001f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	0800245c 	.word	0x0800245c
 8001f58:	0800247c 	.word	0x0800247c
 8001f5c:	0800243c 	.word	0x0800243c

08001f60 <_write_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4c07      	ldr	r4, [pc, #28]	; (8001f80 <_write_r+0x20>)
 8001f64:	4605      	mov	r5, r0
 8001f66:	4608      	mov	r0, r1
 8001f68:	4611      	mov	r1, r2
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6022      	str	r2, [r4, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f7fe fa2a 	bl	80003c8 <_write>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d102      	bne.n	8001f7e <_write_r+0x1e>
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	b103      	cbz	r3, 8001f7e <_write_r+0x1e>
 8001f7c:	602b      	str	r3, [r5, #0]
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	2000009c 	.word	0x2000009c

08001f84 <__swsetup_r>:
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <__swsetup_r+0xcc>)
 8001f86:	b570      	push	{r4, r5, r6, lr}
 8001f88:	681d      	ldr	r5, [r3, #0]
 8001f8a:	4606      	mov	r6, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	b125      	cbz	r5, 8001f9a <__swsetup_r+0x16>
 8001f90:	69ab      	ldr	r3, [r5, #24]
 8001f92:	b913      	cbnz	r3, 8001f9a <__swsetup_r+0x16>
 8001f94:	4628      	mov	r0, r5
 8001f96:	f7ff fb91 	bl	80016bc <__sinit>
 8001f9a:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <__swsetup_r+0xd0>)
 8001f9c:	429c      	cmp	r4, r3
 8001f9e:	d10f      	bne.n	8001fc0 <__swsetup_r+0x3c>
 8001fa0:	686c      	ldr	r4, [r5, #4]
 8001fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	0715      	lsls	r5, r2, #28
 8001faa:	d42c      	bmi.n	8002006 <__swsetup_r+0x82>
 8001fac:	06d0      	lsls	r0, r2, #27
 8001fae:	d411      	bmi.n	8001fd4 <__swsetup_r+0x50>
 8001fb0:	2209      	movs	r2, #9
 8001fb2:	6032      	str	r2, [r6, #0]
 8001fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb8:	81a3      	strh	r3, [r4, #12]
 8001fba:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbe:	e03e      	b.n	800203e <__swsetup_r+0xba>
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <__swsetup_r+0xd4>)
 8001fc2:	429c      	cmp	r4, r3
 8001fc4:	d101      	bne.n	8001fca <__swsetup_r+0x46>
 8001fc6:	68ac      	ldr	r4, [r5, #8]
 8001fc8:	e7eb      	b.n	8001fa2 <__swsetup_r+0x1e>
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <__swsetup_r+0xd8>)
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	bf08      	it	eq
 8001fd0:	68ec      	ldreq	r4, [r5, #12]
 8001fd2:	e7e6      	b.n	8001fa2 <__swsetup_r+0x1e>
 8001fd4:	0751      	lsls	r1, r2, #29
 8001fd6:	d512      	bpl.n	8001ffe <__swsetup_r+0x7a>
 8001fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fda:	b141      	cbz	r1, 8001fee <__swsetup_r+0x6a>
 8001fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d002      	beq.n	8001fea <__swsetup_r+0x66>
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	f000 f973 	bl	80022d0 <_free_r>
 8001fea:	2300      	movs	r3, #0
 8001fec:	6363      	str	r3, [r4, #52]	; 0x34
 8001fee:	89a3      	ldrh	r3, [r4, #12]
 8001ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ff4:	81a3      	strh	r3, [r4, #12]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6063      	str	r3, [r4, #4]
 8001ffa:	6923      	ldr	r3, [r4, #16]
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	89a3      	ldrh	r3, [r4, #12]
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	81a3      	strh	r3, [r4, #12]
 8002006:	6923      	ldr	r3, [r4, #16]
 8002008:	b94b      	cbnz	r3, 800201e <__swsetup_r+0x9a>
 800200a:	89a3      	ldrh	r3, [r4, #12]
 800200c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002014:	d003      	beq.n	800201e <__swsetup_r+0x9a>
 8002016:	4621      	mov	r1, r4
 8002018:	4630      	mov	r0, r6
 800201a:	f000 f917 	bl	800224c <__smakebuf_r>
 800201e:	89a2      	ldrh	r2, [r4, #12]
 8002020:	f012 0301 	ands.w	r3, r2, #1
 8002024:	d00c      	beq.n	8002040 <__swsetup_r+0xbc>
 8002026:	2300      	movs	r3, #0
 8002028:	60a3      	str	r3, [r4, #8]
 800202a:	6963      	ldr	r3, [r4, #20]
 800202c:	425b      	negs	r3, r3
 800202e:	61a3      	str	r3, [r4, #24]
 8002030:	6923      	ldr	r3, [r4, #16]
 8002032:	b953      	cbnz	r3, 800204a <__swsetup_r+0xc6>
 8002034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002038:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800203c:	d1ba      	bne.n	8001fb4 <__swsetup_r+0x30>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	0792      	lsls	r2, r2, #30
 8002042:	bf58      	it	pl
 8002044:	6963      	ldrpl	r3, [r4, #20]
 8002046:	60a3      	str	r3, [r4, #8]
 8002048:	e7f2      	b.n	8002030 <__swsetup_r+0xac>
 800204a:	2000      	movs	r0, #0
 800204c:	e7f7      	b.n	800203e <__swsetup_r+0xba>
 800204e:	bf00      	nop
 8002050:	2000000c 	.word	0x2000000c
 8002054:	0800245c 	.word	0x0800245c
 8002058:	0800247c 	.word	0x0800247c
 800205c:	0800243c 	.word	0x0800243c

08002060 <_close_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4c06      	ldr	r4, [pc, #24]	; (800207c <_close_r+0x1c>)
 8002064:	2300      	movs	r3, #0
 8002066:	4605      	mov	r5, r0
 8002068:	4608      	mov	r0, r1
 800206a:	6023      	str	r3, [r4, #0]
 800206c:	f7fe fa3f 	bl	80004ee <_close>
 8002070:	1c43      	adds	r3, r0, #1
 8002072:	d102      	bne.n	800207a <_close_r+0x1a>
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	b103      	cbz	r3, 800207a <_close_r+0x1a>
 8002078:	602b      	str	r3, [r5, #0]
 800207a:	bd38      	pop	{r3, r4, r5, pc}
 800207c:	2000009c 	.word	0x2000009c

08002080 <__sflush_r>:
 8002080:	898a      	ldrh	r2, [r1, #12]
 8002082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002086:	4605      	mov	r5, r0
 8002088:	0710      	lsls	r0, r2, #28
 800208a:	460c      	mov	r4, r1
 800208c:	d458      	bmi.n	8002140 <__sflush_r+0xc0>
 800208e:	684b      	ldr	r3, [r1, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	dc05      	bgt.n	80020a0 <__sflush_r+0x20>
 8002094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	dc02      	bgt.n	80020a0 <__sflush_r+0x20>
 800209a:	2000      	movs	r0, #0
 800209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020a2:	2e00      	cmp	r6, #0
 80020a4:	d0f9      	beq.n	800209a <__sflush_r+0x1a>
 80020a6:	2300      	movs	r3, #0
 80020a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020ac:	682f      	ldr	r7, [r5, #0]
 80020ae:	6a21      	ldr	r1, [r4, #32]
 80020b0:	602b      	str	r3, [r5, #0]
 80020b2:	d032      	beq.n	800211a <__sflush_r+0x9a>
 80020b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	075a      	lsls	r2, r3, #29
 80020ba:	d505      	bpl.n	80020c8 <__sflush_r+0x48>
 80020bc:	6863      	ldr	r3, [r4, #4]
 80020be:	1ac0      	subs	r0, r0, r3
 80020c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020c2:	b10b      	cbz	r3, 80020c8 <__sflush_r+0x48>
 80020c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020c6:	1ac0      	subs	r0, r0, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	4602      	mov	r2, r0
 80020cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020ce:	6a21      	ldr	r1, [r4, #32]
 80020d0:	4628      	mov	r0, r5
 80020d2:	47b0      	blx	r6
 80020d4:	1c43      	adds	r3, r0, #1
 80020d6:	89a3      	ldrh	r3, [r4, #12]
 80020d8:	d106      	bne.n	80020e8 <__sflush_r+0x68>
 80020da:	6829      	ldr	r1, [r5, #0]
 80020dc:	291d      	cmp	r1, #29
 80020de:	d848      	bhi.n	8002172 <__sflush_r+0xf2>
 80020e0:	4a29      	ldr	r2, [pc, #164]	; (8002188 <__sflush_r+0x108>)
 80020e2:	40ca      	lsrs	r2, r1
 80020e4:	07d6      	lsls	r6, r2, #31
 80020e6:	d544      	bpl.n	8002172 <__sflush_r+0xf2>
 80020e8:	2200      	movs	r2, #0
 80020ea:	6062      	str	r2, [r4, #4]
 80020ec:	04d9      	lsls	r1, r3, #19
 80020ee:	6922      	ldr	r2, [r4, #16]
 80020f0:	6022      	str	r2, [r4, #0]
 80020f2:	d504      	bpl.n	80020fe <__sflush_r+0x7e>
 80020f4:	1c42      	adds	r2, r0, #1
 80020f6:	d101      	bne.n	80020fc <__sflush_r+0x7c>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b903      	cbnz	r3, 80020fe <__sflush_r+0x7e>
 80020fc:	6560      	str	r0, [r4, #84]	; 0x54
 80020fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002100:	602f      	str	r7, [r5, #0]
 8002102:	2900      	cmp	r1, #0
 8002104:	d0c9      	beq.n	800209a <__sflush_r+0x1a>
 8002106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800210a:	4299      	cmp	r1, r3
 800210c:	d002      	beq.n	8002114 <__sflush_r+0x94>
 800210e:	4628      	mov	r0, r5
 8002110:	f000 f8de 	bl	80022d0 <_free_r>
 8002114:	2000      	movs	r0, #0
 8002116:	6360      	str	r0, [r4, #52]	; 0x34
 8002118:	e7c0      	b.n	800209c <__sflush_r+0x1c>
 800211a:	2301      	movs	r3, #1
 800211c:	4628      	mov	r0, r5
 800211e:	47b0      	blx	r6
 8002120:	1c41      	adds	r1, r0, #1
 8002122:	d1c8      	bne.n	80020b6 <__sflush_r+0x36>
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0c5      	beq.n	80020b6 <__sflush_r+0x36>
 800212a:	2b1d      	cmp	r3, #29
 800212c:	d001      	beq.n	8002132 <__sflush_r+0xb2>
 800212e:	2b16      	cmp	r3, #22
 8002130:	d101      	bne.n	8002136 <__sflush_r+0xb6>
 8002132:	602f      	str	r7, [r5, #0]
 8002134:	e7b1      	b.n	800209a <__sflush_r+0x1a>
 8002136:	89a3      	ldrh	r3, [r4, #12]
 8002138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213c:	81a3      	strh	r3, [r4, #12]
 800213e:	e7ad      	b.n	800209c <__sflush_r+0x1c>
 8002140:	690f      	ldr	r7, [r1, #16]
 8002142:	2f00      	cmp	r7, #0
 8002144:	d0a9      	beq.n	800209a <__sflush_r+0x1a>
 8002146:	0793      	lsls	r3, r2, #30
 8002148:	680e      	ldr	r6, [r1, #0]
 800214a:	bf08      	it	eq
 800214c:	694b      	ldreq	r3, [r1, #20]
 800214e:	600f      	str	r7, [r1, #0]
 8002150:	bf18      	it	ne
 8002152:	2300      	movne	r3, #0
 8002154:	eba6 0807 	sub.w	r8, r6, r7
 8002158:	608b      	str	r3, [r1, #8]
 800215a:	f1b8 0f00 	cmp.w	r8, #0
 800215e:	dd9c      	ble.n	800209a <__sflush_r+0x1a>
 8002160:	4643      	mov	r3, r8
 8002162:	463a      	mov	r2, r7
 8002164:	6a21      	ldr	r1, [r4, #32]
 8002166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002168:	4628      	mov	r0, r5
 800216a:	47b0      	blx	r6
 800216c:	2800      	cmp	r0, #0
 800216e:	dc06      	bgt.n	800217e <__sflush_r+0xfe>
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002176:	81a3      	strh	r3, [r4, #12]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	e78e      	b.n	800209c <__sflush_r+0x1c>
 800217e:	4407      	add	r7, r0
 8002180:	eba8 0800 	sub.w	r8, r8, r0
 8002184:	e7e9      	b.n	800215a <__sflush_r+0xda>
 8002186:	bf00      	nop
 8002188:	20400001 	.word	0x20400001

0800218c <_fflush_r>:
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	690b      	ldr	r3, [r1, #16]
 8002190:	4605      	mov	r5, r0
 8002192:	460c      	mov	r4, r1
 8002194:	b1db      	cbz	r3, 80021ce <_fflush_r+0x42>
 8002196:	b118      	cbz	r0, 80021a0 <_fflush_r+0x14>
 8002198:	6983      	ldr	r3, [r0, #24]
 800219a:	b90b      	cbnz	r3, 80021a0 <_fflush_r+0x14>
 800219c:	f7ff fa8e 	bl	80016bc <__sinit>
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <_fflush_r+0x48>)
 80021a2:	429c      	cmp	r4, r3
 80021a4:	d109      	bne.n	80021ba <_fflush_r+0x2e>
 80021a6:	686c      	ldr	r4, [r5, #4]
 80021a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ac:	b17b      	cbz	r3, 80021ce <_fflush_r+0x42>
 80021ae:	4621      	mov	r1, r4
 80021b0:	4628      	mov	r0, r5
 80021b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021b6:	f7ff bf63 	b.w	8002080 <__sflush_r>
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_fflush_r+0x4c>)
 80021bc:	429c      	cmp	r4, r3
 80021be:	d101      	bne.n	80021c4 <_fflush_r+0x38>
 80021c0:	68ac      	ldr	r4, [r5, #8]
 80021c2:	e7f1      	b.n	80021a8 <_fflush_r+0x1c>
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <_fflush_r+0x50>)
 80021c6:	429c      	cmp	r4, r3
 80021c8:	bf08      	it	eq
 80021ca:	68ec      	ldreq	r4, [r5, #12]
 80021cc:	e7ec      	b.n	80021a8 <_fflush_r+0x1c>
 80021ce:	2000      	movs	r0, #0
 80021d0:	bd38      	pop	{r3, r4, r5, pc}
 80021d2:	bf00      	nop
 80021d4:	0800245c 	.word	0x0800245c
 80021d8:	0800247c 	.word	0x0800247c
 80021dc:	0800243c 	.word	0x0800243c

080021e0 <_lseek_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4c07      	ldr	r4, [pc, #28]	; (8002200 <_lseek_r+0x20>)
 80021e4:	4605      	mov	r5, r0
 80021e6:	4608      	mov	r0, r1
 80021e8:	4611      	mov	r1, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	6022      	str	r2, [r4, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	f7fe f9a4 	bl	800053c <_lseek>
 80021f4:	1c43      	adds	r3, r0, #1
 80021f6:	d102      	bne.n	80021fe <_lseek_r+0x1e>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	b103      	cbz	r3, 80021fe <_lseek_r+0x1e>
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	2000009c 	.word	0x2000009c

08002204 <__swhatbuf_r>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	460e      	mov	r6, r1
 8002208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800220c:	2900      	cmp	r1, #0
 800220e:	b096      	sub	sp, #88	; 0x58
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	da07      	bge.n	8002226 <__swhatbuf_r+0x22>
 8002216:	2300      	movs	r3, #0
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	89b3      	ldrh	r3, [r6, #12]
 800221c:	061a      	lsls	r2, r3, #24
 800221e:	d410      	bmi.n	8002242 <__swhatbuf_r+0x3e>
 8002220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002224:	e00e      	b.n	8002244 <__swhatbuf_r+0x40>
 8002226:	466a      	mov	r2, sp
 8002228:	f000 f8b2 	bl	8002390 <_fstat_r>
 800222c:	2800      	cmp	r0, #0
 800222e:	dbf2      	blt.n	8002216 <__swhatbuf_r+0x12>
 8002230:	9a01      	ldr	r2, [sp, #4]
 8002232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800223a:	425a      	negs	r2, r3
 800223c:	415a      	adcs	r2, r3
 800223e:	602a      	str	r2, [r5, #0]
 8002240:	e7ee      	b.n	8002220 <__swhatbuf_r+0x1c>
 8002242:	2340      	movs	r3, #64	; 0x40
 8002244:	2000      	movs	r0, #0
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	b016      	add	sp, #88	; 0x58
 800224a:	bd70      	pop	{r4, r5, r6, pc}

0800224c <__smakebuf_r>:
 800224c:	898b      	ldrh	r3, [r1, #12]
 800224e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002250:	079d      	lsls	r5, r3, #30
 8002252:	4606      	mov	r6, r0
 8002254:	460c      	mov	r4, r1
 8002256:	d507      	bpl.n	8002268 <__smakebuf_r+0x1c>
 8002258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800225c:	6023      	str	r3, [r4, #0]
 800225e:	6123      	str	r3, [r4, #16]
 8002260:	2301      	movs	r3, #1
 8002262:	6163      	str	r3, [r4, #20]
 8002264:	b002      	add	sp, #8
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	ab01      	add	r3, sp, #4
 800226a:	466a      	mov	r2, sp
 800226c:	f7ff ffca 	bl	8002204 <__swhatbuf_r>
 8002270:	9900      	ldr	r1, [sp, #0]
 8002272:	4605      	mov	r5, r0
 8002274:	4630      	mov	r0, r6
 8002276:	f7ff faab 	bl	80017d0 <_malloc_r>
 800227a:	b948      	cbnz	r0, 8002290 <__smakebuf_r+0x44>
 800227c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002280:	059a      	lsls	r2, r3, #22
 8002282:	d4ef      	bmi.n	8002264 <__smakebuf_r+0x18>
 8002284:	f023 0303 	bic.w	r3, r3, #3
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	81a3      	strh	r3, [r4, #12]
 800228e:	e7e3      	b.n	8002258 <__smakebuf_r+0xc>
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <__smakebuf_r+0x7c>)
 8002292:	62b3      	str	r3, [r6, #40]	; 0x28
 8002294:	89a3      	ldrh	r3, [r4, #12]
 8002296:	6020      	str	r0, [r4, #0]
 8002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229c:	81a3      	strh	r3, [r4, #12]
 800229e:	9b00      	ldr	r3, [sp, #0]
 80022a0:	6163      	str	r3, [r4, #20]
 80022a2:	9b01      	ldr	r3, [sp, #4]
 80022a4:	6120      	str	r0, [r4, #16]
 80022a6:	b15b      	cbz	r3, 80022c0 <__smakebuf_r+0x74>
 80022a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ac:	4630      	mov	r0, r6
 80022ae:	f000 f881 	bl	80023b4 <_isatty_r>
 80022b2:	b128      	cbz	r0, 80022c0 <__smakebuf_r+0x74>
 80022b4:	89a3      	ldrh	r3, [r4, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	81a3      	strh	r3, [r4, #12]
 80022c0:	89a3      	ldrh	r3, [r4, #12]
 80022c2:	431d      	orrs	r5, r3
 80022c4:	81a5      	strh	r5, [r4, #12]
 80022c6:	e7cd      	b.n	8002264 <__smakebuf_r+0x18>
 80022c8:	08001685 	.word	0x08001685

080022cc <__malloc_lock>:
 80022cc:	4770      	bx	lr

080022ce <__malloc_unlock>:
 80022ce:	4770      	bx	lr

080022d0 <_free_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4605      	mov	r5, r0
 80022d4:	2900      	cmp	r1, #0
 80022d6:	d045      	beq.n	8002364 <_free_r+0x94>
 80022d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022dc:	1f0c      	subs	r4, r1, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	18e4      	addlt	r4, r4, r3
 80022e4:	f7ff fff2 	bl	80022cc <__malloc_lock>
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <_free_r+0x98>)
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	4610      	mov	r0, r2
 80022ee:	b933      	cbnz	r3, 80022fe <_free_r+0x2e>
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	6014      	str	r4, [r2, #0]
 80022f4:	4628      	mov	r0, r5
 80022f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022fa:	f7ff bfe8 	b.w	80022ce <__malloc_unlock>
 80022fe:	42a3      	cmp	r3, r4
 8002300:	d90c      	bls.n	800231c <_free_r+0x4c>
 8002302:	6821      	ldr	r1, [r4, #0]
 8002304:	1862      	adds	r2, r4, r1
 8002306:	4293      	cmp	r3, r2
 8002308:	bf04      	itt	eq
 800230a:	681a      	ldreq	r2, [r3, #0]
 800230c:	685b      	ldreq	r3, [r3, #4]
 800230e:	6063      	str	r3, [r4, #4]
 8002310:	bf04      	itt	eq
 8002312:	1852      	addeq	r2, r2, r1
 8002314:	6022      	streq	r2, [r4, #0]
 8002316:	6004      	str	r4, [r0, #0]
 8002318:	e7ec      	b.n	80022f4 <_free_r+0x24>
 800231a:	4613      	mov	r3, r2
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	b10a      	cbz	r2, 8002324 <_free_r+0x54>
 8002320:	42a2      	cmp	r2, r4
 8002322:	d9fa      	bls.n	800231a <_free_r+0x4a>
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	1858      	adds	r0, r3, r1
 8002328:	42a0      	cmp	r0, r4
 800232a:	d10b      	bne.n	8002344 <_free_r+0x74>
 800232c:	6820      	ldr	r0, [r4, #0]
 800232e:	4401      	add	r1, r0
 8002330:	1858      	adds	r0, r3, r1
 8002332:	4282      	cmp	r2, r0
 8002334:	6019      	str	r1, [r3, #0]
 8002336:	d1dd      	bne.n	80022f4 <_free_r+0x24>
 8002338:	6810      	ldr	r0, [r2, #0]
 800233a:	6852      	ldr	r2, [r2, #4]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	4401      	add	r1, r0
 8002340:	6019      	str	r1, [r3, #0]
 8002342:	e7d7      	b.n	80022f4 <_free_r+0x24>
 8002344:	d902      	bls.n	800234c <_free_r+0x7c>
 8002346:	230c      	movs	r3, #12
 8002348:	602b      	str	r3, [r5, #0]
 800234a:	e7d3      	b.n	80022f4 <_free_r+0x24>
 800234c:	6820      	ldr	r0, [r4, #0]
 800234e:	1821      	adds	r1, r4, r0
 8002350:	428a      	cmp	r2, r1
 8002352:	bf04      	itt	eq
 8002354:	6811      	ldreq	r1, [r2, #0]
 8002356:	6852      	ldreq	r2, [r2, #4]
 8002358:	6062      	str	r2, [r4, #4]
 800235a:	bf04      	itt	eq
 800235c:	1809      	addeq	r1, r1, r0
 800235e:	6021      	streq	r1, [r4, #0]
 8002360:	605c      	str	r4, [r3, #4]
 8002362:	e7c7      	b.n	80022f4 <_free_r+0x24>
 8002364:	bd38      	pop	{r3, r4, r5, pc}
 8002366:	bf00      	nop
 8002368:	20000090 	.word	0x20000090

0800236c <_read_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4c07      	ldr	r4, [pc, #28]	; (800238c <_read_r+0x20>)
 8002370:	4605      	mov	r5, r0
 8002372:	4608      	mov	r0, r1
 8002374:	4611      	mov	r1, r2
 8002376:	2200      	movs	r2, #0
 8002378:	6022      	str	r2, [r4, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	f7fe f89a 	bl	80004b4 <_read>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d102      	bne.n	800238a <_read_r+0x1e>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	b103      	cbz	r3, 800238a <_read_r+0x1e>
 8002388:	602b      	str	r3, [r5, #0]
 800238a:	bd38      	pop	{r3, r4, r5, pc}
 800238c:	2000009c 	.word	0x2000009c

08002390 <_fstat_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4c07      	ldr	r4, [pc, #28]	; (80023b0 <_fstat_r+0x20>)
 8002394:	2300      	movs	r3, #0
 8002396:	4605      	mov	r5, r0
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	6023      	str	r3, [r4, #0]
 800239e:	f7fe f8b2 	bl	8000506 <_fstat>
 80023a2:	1c43      	adds	r3, r0, #1
 80023a4:	d102      	bne.n	80023ac <_fstat_r+0x1c>
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	b103      	cbz	r3, 80023ac <_fstat_r+0x1c>
 80023aa:	602b      	str	r3, [r5, #0]
 80023ac:	bd38      	pop	{r3, r4, r5, pc}
 80023ae:	bf00      	nop
 80023b0:	2000009c 	.word	0x2000009c

080023b4 <_isatty_r>:
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4c06      	ldr	r4, [pc, #24]	; (80023d0 <_isatty_r+0x1c>)
 80023b8:	2300      	movs	r3, #0
 80023ba:	4605      	mov	r5, r0
 80023bc:	4608      	mov	r0, r1
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	f7fe f8b1 	bl	8000526 <_isatty>
 80023c4:	1c43      	adds	r3, r0, #1
 80023c6:	d102      	bne.n	80023ce <_isatty_r+0x1a>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	b103      	cbz	r3, 80023ce <_isatty_r+0x1a>
 80023cc:	602b      	str	r3, [r5, #0]
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
 80023d0:	2000009c 	.word	0x2000009c

080023d4 <_init>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr

080023e0 <_fini>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr
