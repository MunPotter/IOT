
DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800d398  0800d398  0001d398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d574  0800d574  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d574  0800d574  0001d574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d57c  0800d57c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d57c  0800d57c  0001d57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d580  0800d580  0001d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d24  20000094  0800d618  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008db8  0800d618  00028db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e1fe  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a9e  00000000  00000000  0004e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022c8  00000000  00000000  00053d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  00056028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c1a0  00000000  00000000  00058090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ecd3  00000000  00000000  00084230  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3d6f  00000000  00000000  000a2f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00196c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ab8  00000000  00000000  00196cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d380 	.word	0x0800d380

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800d380 	.word	0x0800d380

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000b0 	.word	0x200000b0
 80005f4:	20000108 	.word	0x20000108

080005f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000604:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	d013      	beq.n	8000638 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000614:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000618:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00b      	beq.n	8000638 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000620:	e000      	b.n	8000624 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000622:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000624:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800062e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <main>:
void StartDefaultTask(void const *argument);
void StartDefaultTask2(void const *argument);
void StartDefaultTask3(void const *argument);
const char* SerialPrint(void);

int main(void) {
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
	HAL_Init();
 800064e:	f001 f951 	bl	80018f4 <HAL_Init>
	SystemClock_Config();
 8000652:	f000 f85d 	bl	8000710 <SystemClock_Config>
	MX_GPIO_Init();
 8000656:	f000 fae5 	bl	8000c24 <MX_GPIO_Init>
	MX_CRC_Init();
 800065a:	f000 f8dd 	bl	8000818 <MX_CRC_Init>
	MX_DMA2D_Init();
 800065e:	f000 f8ef 	bl	8000840 <MX_DMA2D_Init>
	MX_FMC_Init();
 8000662:	f000 fa8f 	bl	8000b84 <MX_FMC_Init>
	MX_I2C3_Init();
 8000666:	f000 f91d 	bl	80008a4 <MX_I2C3_Init>
	MX_LTDC_Init();
 800066a:	f000 f95b 	bl	8000924 <MX_LTDC_Init>
	MX_SPI5_Init();
 800066e:	f000 f9d9 	bl	8000a24 <MX_SPI5_Init>
	MX_TIM1_Init();
 8000672:	f000 fa0d 	bl	8000a90 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000676:	f000 fa5b 	bl	8000b30 <MX_USART1_UART_Init>

	osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <main+0xb0>)
 800067c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f009 f9a8 	bl	80099ea <osThreadCreate>
 800069a:	4602      	mov	r2, r0
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <main+0xb4>)
 800069e:	601a      	str	r2, [r3, #0]

	osThreadDef(defaultTask2, StartDefaultTask2, osPriorityNormal, 0, 128);
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <main+0xb8>)
 80006a2:	f107 0420 	add.w	r4, r7, #32
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTask2Handle = osThreadCreate(osThread(defaultTask2), NULL);
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f009 f995 	bl	80099ea <osThreadCreate>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <main+0xbc>)
 80006c4:	601a      	str	r2, [r3, #0]

	osThreadDef(defaultTask3, StartDefaultTask3, osPriorityBelowNormal, 0, 128);
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <main+0xc0>)
 80006c8:	1d3c      	adds	r4, r7, #4
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTask3Handle = osThreadCreate(osThread(defaultTask3), NULL);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f009 f984 	bl	80099ea <osThreadCreate>
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <main+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]

	osKernelStart();
 80006e8:	f009 f978 	bl	80099dc <osKernelStart>
 80006ec:	2300      	movs	r3, #0

}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3758      	adds	r7, #88	; 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bdb0      	pop	{r4, r5, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	0800d3a4 	.word	0x0800d3a4
 80006fc:	2000846c 	.word	0x2000846c
 8000700:	0800d3d0 	.word	0x0800d3d0
 8000704:	200086c4 	.word	0x200086c4
 8000708:	0800d3fc 	.word	0x0800d3fc
 800070c:	2000864c 	.word	0x2000864c

08000710 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b0a0      	sub	sp, #128	; 0x80
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000716:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00b fedd 	bl	800c4de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000724:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2230      	movs	r2, #48	; 0x30
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f00b fece 	bl	800c4de <memset>

	__HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b32      	ldr	r3, [pc, #200]	; (8000810 <SystemClock_Config+0x100>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a31      	ldr	r2, [pc, #196]	; (8000810 <SystemClock_Config+0x100>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <SystemClock_Config+0x100>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <SystemClock_Config+0x104>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemClock_Config+0x104>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0x104>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000786:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000796:	2378      	movs	r3, #120	; 0x78
 8000798:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800079e:	2305      	movs	r3, #5
 80007a0:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 ffc2 	bl	8004730 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xa6>
		Error_Handler();
 80007b2:	f000 fbf7 	bl	8000fa4 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007be:	2390      	movs	r3, #144	; 0x90
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fa1c 	bl	8004c10 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xd2>
		Error_Handler();
 80007de:	f000 fbe1 	bl	8000fa4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007e2:	2308      	movs	r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80007e6:	2332      	movs	r3, #50	; 0x32
 80007e8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fc2e 	bl	8005058 <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xf6>
		Error_Handler();
 8000802:	f000 fbcf 	bl	8000fa4 <Error_Handler>
	}
}
 8000806:	bf00      	nop
 8000808:	3780      	adds	r7, #128	; 0x80
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_CRC_Init>:

static void MX_CRC_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	hcrc.Instance = CRC;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_CRC_Init+0x20>)
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <MX_CRC_Init+0x24>)
 8000820:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_CRC_Init+0x20>)
 8000824:	f001 f9ac 	bl	8001b80 <HAL_CRC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_CRC_Init+0x1a>
		Error_Handler();
 800082e:	f000 fbb9 	bl	8000fa4 <Error_Handler>
	}
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000851c 	.word	0x2000851c
 800083c:	40023000 	.word	0x40023000

08000840 <MX_DMA2D_Init>:

static void MX_DMA2D_Init(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	hdma2d.Instance = DMA2D;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_DMA2D_Init+0x60>)
 8000848:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_DMA2D_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_DMA2D_Init+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_DMA2D_Init+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000876:	f001 f99f 	bl	8001bb8 <HAL_DMA2D_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000880:	f000 fb90 	bl	8000fa4 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000884:	2101      	movs	r1, #1
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_DMA2D_Init+0x5c>)
 8000888:	f001 faf0 	bl	8001e6c <HAL_DMA2D_ConfigLayer>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000892:	f000 fb87 	bl	8000fa4 <Error_Handler>
	}
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20008650 	.word	0x20008650
 80008a0:	4002b000 	.word	0x4002b000

080008a4 <MX_I2C3_Init>:

static void MX_I2C3_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	hi2c3.Instance = I2C3;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_I2C3_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_I2C3_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_I2C3_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <MX_I2C3_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_I2C3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_I2C3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_I2C3_Init+0x74>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_I2C3_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2C3_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_I2C3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_I2C3_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_I2C3_Init+0x74>)
 80008e2:	f003 fa09 	bl	8003cf8 <HAL_I2C_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C3_Init+0x4c>
		Error_Handler();
 80008ec:	f000 fb5a 	bl	8000fa4 <Error_Handler>
	}
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_I2C3_Init+0x74>)
 80008f4:	f003 fb38 	bl	8003f68 <HAL_I2CEx_ConfigAnalogFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80008fe:	f000 fb51 	bl	8000fa4 <Error_Handler>
	}
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000902:	2100      	movs	r1, #0
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_I2C3_Init+0x74>)
 8000906:	f003 fb6b 	bl	8003fe0 <HAL_I2CEx_ConfigDigitalFilter>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C3_Init+0x70>
		Error_Handler();
 8000910:	f000 fb48 	bl	8000fa4 <Error_Handler>
	}
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20008470 	.word	0x20008470
 800091c:	40005c00 	.word	0x40005c00
 8000920:	000186a0 	.word	0x000186a0

08000924 <MX_LTDC_Init>:

static void MX_LTDC_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2234      	movs	r2, #52	; 0x34
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00b fdd4 	bl	800c4de <memset>

	hltdc.Instance = LTDC;
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000938:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <MX_LTDC_Init+0xfc>)
 800093a:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000956:	2209      	movs	r2, #9
 8000958:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800095c:	2201      	movs	r2, #1
 800095e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000960:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000962:	221d      	movs	r2, #29
 8000964:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000968:	2203      	movs	r2, #3
 800096a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800096e:	f240 120d 	movw	r2, #269	; 0x10d
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000976:	f240 1243 	movw	r2, #323	; 0x143
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 279;
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800097e:	f240 1217 	movw	r2, #279	; 0x117
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 327;
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000986:	f240 1247 	movw	r2, #327	; 0x147
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_LTDC_Init+0xf8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <MX_LTDC_Init+0xf8>)
 80009a6:	f003 fb5b 	bl	8004060 <HAL_LTDC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_LTDC_Init+0x90>
		Error_Handler();
 80009b0:	f000 faf8 	bl	8000fa4 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 80009b8:	23f0      	movs	r3, #240	; 0xf0
 80009ba:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 80009c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009c4:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009c6:	2302      	movs	r3, #2
 80009c8:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d6:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 80009dc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 240;
 80009e2:	23f0      	movs	r3, #240	; 0xf0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 320;
 80009e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_LTDC_Init+0xf8>)
 8000a06:	f003 fcbd 	bl	8004384 <HAL_LTDC_ConfigLayer>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_LTDC_Init+0xf0>
		Error_Handler();
 8000a10:	f000 fac8 	bl	8000fa4 <Error_Handler>
	}
}
 8000a14:	bf00      	nop
 8000a16:	3738      	adds	r7, #56	; 0x38
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20008524 	.word	0x20008524
 8000a20:	40016800 	.word	0x40016800

08000a24 <MX_SPI5_Init>:

static void MX_SPI5_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	hspi5.Instance = SPI5;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_SPI5_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a58:	2218      	movs	r2, #24
 8000a5a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_SPI5_Init+0x64>)
 8000a76:	f004 fce1 	bl	800543c <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI5_Init+0x60>
		Error_Handler();
 8000a80:	f000 fa90 	bl	8000fa4 <Error_Handler>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200084c4 	.word	0x200084c4
 8000a8c:	40015000 	.word	0x40015000

08000a90 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]

	htim1.Instance = TIM1;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000ab0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000ada:	f004 fd13 	bl	8005504 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000ae4:	f000 fa5e 	bl	8000fa4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000af6:	f004 fe5c 	bl	80057b2 <HAL_TIM_ConfigClockSource>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000b00:	f000 fa50 	bl	8000fa4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_TIM1_Init+0x98>)
 8000b12:	f005 f867 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b1c:	f000 fa42 	bl	8000fa4 <Error_Handler>
	}
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000860c 	.word	0x2000860c
 8000b2c:	40010000 	.word	0x40010000

08000b30 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART1_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART1_UART_Init+0x4c>)
 8000b68:	f005 f8cc 	bl	8005d04 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b72:	f000 fa17 	bl	8000fa4 <Error_Handler>
	}
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200085cc 	.word	0x200085cc
 8000b80:	40011000 	.word	0x40011000

08000b84 <MX_FMC_Init>:

static void MX_FMC_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	619a      	str	r2, [r3, #24]

	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_FMC_Init+0x98>)
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <MX_FMC_Init+0x9c>)
 8000ba0:	601a      	str	r2, [r3, #0]
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_FMC_Init+0x98>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_FMC_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bbc:	2240      	movs	r2, #64	; 0x40
 8000bbe:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bc2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000bc6:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd4:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_FMC_Init+0x98>)
 8000bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28

	SdramTiming.LoadToActiveDelay = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000be8:	2307      	movs	r3, #7
 8000bea:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_FMC_Init+0x98>)
 8000c06:	f004 fbe5 	bl	80053d4 <HAL_SDRAM_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_FMC_Init+0x90>
		Error_Handler();
 8000c10:	f000 f9c8 	bl	8000fa4 <Error_Handler>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20008690 	.word	0x20008690
 8000c20:	a0000140 	.word	0xa0000140

08000c24 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	4b7a      	ldr	r3, [pc, #488]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a79      	ldr	r2, [pc, #484]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b77      	ldr	r3, [pc, #476]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	4b73      	ldr	r3, [pc, #460]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a72      	ldr	r2, [pc, #456]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a6b      	ldr	r2, [pc, #428]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	4b65      	ldr	r3, [pc, #404]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a64      	ldr	r2, [pc, #400]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b62      	ldr	r3, [pc, #392]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b5e      	ldr	r3, [pc, #376]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a5d      	ldr	r2, [pc, #372]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a56      	ldr	r2, [pc, #344]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <MX_GPIO_Init+0x204>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2116      	movs	r1, #22
 8000d1e:	4843      	ldr	r0, [pc, #268]	; (8000e2c <MX_GPIO_Init+0x208>)
 8000d20:	f001 fae0 	bl	80022e4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	4841      	ldr	r0, [pc, #260]	; (8000e30 <MX_GPIO_Init+0x20c>)
 8000d2a:	f001 fadb 	bl	80022e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d34:	483f      	ldr	r0, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x210>)
 8000d36:	f001 fad5 	bl	80022e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d40:	483d      	ldr	r0, [pc, #244]	; (8000e38 <MX_GPIO_Init+0x214>)
 8000d42:	f001 facf 	bl	80022e4 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000d46:	2316      	movs	r3, #22
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4833      	ldr	r0, [pc, #204]	; (8000e2c <MX_GPIO_Init+0x208>)
 8000d5e:	f001 f917 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000d62:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_GPIO_Init+0x218>)
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	482e      	ldr	r0, [pc, #184]	; (8000e30 <MX_GPIO_Init+0x20c>)
 8000d78:	f001 f90a 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4827      	ldr	r0, [pc, #156]	; (8000e30 <MX_GPIO_Init+0x20c>)
 8000d94:	f001 f8fc 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <MX_GPIO_Init+0x218>)
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4820      	ldr	r0, [pc, #128]	; (8000e2c <MX_GPIO_Init+0x208>)
 8000dac:	f001 f8f0 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000db0:	2304      	movs	r3, #4
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481f      	ldr	r0, [pc, #124]	; (8000e40 <MX_GPIO_Init+0x21c>)
 8000dc4:	f001 f8e4 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = TE_Pin;
 8000dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4815      	ldr	r0, [pc, #84]	; (8000e34 <MX_GPIO_Init+0x210>)
 8000dde:	f001 f8d7 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000de2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_GPIO_Init+0x210>)
 8000dfc:	f001 f8c8 	bl	8001f90 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000e00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_GPIO_Init+0x214>)
 8000e1a:	f001 f8b9 	bl	8001f90 <HAL_GPIO_Init>
}
 8000e1e:	bf00      	nop
 8000e20:	3738      	adds	r7, #56	; 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40021800 	.word	0x40021800
 8000e3c:	10120000 	.word	0x10120000
 8000e40:	40020400 	.word	0x40020400

08000e44 <StartDefaultTask>:

void StartDefaultTask(void const *argument) {
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	MX_USB_HOST_Init();
 8000e4c:	f00a fffa 	bl	800be44 <MX_USB_HOST_Init>
	for (;;) {
		int task=1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
		const char *msg = SerialPrint();
 8000e54:	f000 f84e 	bl	8000ef4 <SerialPrint>
 8000e58:	62b8      	str	r0, [r7, #40]	; 0x28
		printf("%s %d\n", msg,task);
 8000e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <StartDefaultTask+0x40>)
 8000e60:	f00b fbee 	bl	800c640 <iprintf>
		osDelay(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f008 fe0b 	bl	8009a82 <osDelay>
		uint8_t Test[] = "discovery debug from task 1 \n"; //Data to send
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <StartDefaultTask+0x44>)
 8000e6e:	f107 0408 	add.w	r4, r7, #8
 8000e72:	461d      	mov	r5, r3
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e7c:	c407      	stmia	r4!, {r0, r1, r2}
 8000e7e:	8023      	strh	r3, [r4, #0]
	for (;;) {
 8000e80:	e7e6      	b.n	8000e50 <StartDefaultTask+0xc>
 8000e82:	bf00      	nop
 8000e84:	0800d418 	.word	0x0800d418
 8000e88:	0800d420 	.word	0x0800d420

08000e8c <StartDefaultTask2>:
//		HAL_UART_Transmit_DMA(&huart1,Test,sizeof(Test));// Sending in DMA mode
//		HAL_Delay(1000);
	}
}

void StartDefaultTask2(void const *argument) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	MX_USB_HOST_Init();
 8000e94:	f00a ffd6 	bl	800be44 <MX_USB_HOST_Init>
	for (;;) {
		int task=2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60fb      	str	r3, [r7, #12]
		const char *msg = SerialPrint();
 8000e9c:	f000 f82a 	bl	8000ef4 <SerialPrint>
 8000ea0:	60b8      	str	r0, [r7, #8]
		printf("%s %d\n", msg,task);
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <StartDefaultTask2+0x2c>)
 8000ea8:	f00b fbca 	bl	800c640 <iprintf>
		osDelay(1000);
 8000eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb0:	f008 fde7 	bl	8009a82 <osDelay>
	for (;;) {
 8000eb4:	e7f0      	b.n	8000e98 <StartDefaultTask2+0xc>
 8000eb6:	bf00      	nop
 8000eb8:	0800d418 	.word	0x0800d418

08000ebc <StartDefaultTask3>:
//		HAL_UART_Transmit_DMA(&huart1,Test,sizeof(Test));// Sending in DMA mode
//		HAL_Delay(1000);
	}
}

void StartDefaultTask3(void const *argument) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	MX_USB_HOST_Init();
 8000ec4:	f00a ffbe 	bl	800be44 <MX_USB_HOST_Init>
	for (;;) {
		int task=3;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	60fb      	str	r3, [r7, #12]
		const char *msg = SerialPrint();
 8000ecc:	f000 f812 	bl	8000ef4 <SerialPrint>
 8000ed0:	60b8      	str	r0, [r7, #8]
		printf("%s %d\n", msg,task);
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <StartDefaultTask3+0x30>)
 8000ed8:	f00b fbb2 	bl	800c640 <iprintf>
		printf("---------------------------------\n");
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <StartDefaultTask3+0x34>)
 8000ede:	f00b fc23 	bl	800c728 <puts>
		osDelay(1000);
 8000ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee6:	f008 fdcc 	bl	8009a82 <osDelay>
	for (;;) {
 8000eea:	e7ed      	b.n	8000ec8 <StartDefaultTask3+0xc>
 8000eec:	0800d418 	.word	0x0800d418
 8000ef0:	0800d440 	.word	0x0800d440

08000ef4 <SerialPrint>:
	}
}

const char* SerialPrint() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0

	char *msg = "discovery debug from Task";
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SerialPrint+0x18>)
 8000efc:	607b      	str	r3, [r7, #4]
	return msg;
 8000efe:	687b      	ldr	r3, [r7, #4]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	0800d464 	.word	0x0800d464

08000f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f22:	f000 fd09 	bl	8001938 <HAL_IncTick>
	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000

08000f34 <__io_putchar>:

//asynchronous UART transmit function
int __io_putchar(int ch) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8000f42:	f107 010c 	add.w	r1, r7, #12
 8000f46:	230a      	movs	r3, #10
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <__io_putchar+0x28>)
 8000f4c:	f004 ff27 	bl	8005d9e <HAL_UART_Transmit>
	return ch;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200085cc 	.word	0x200085cc

08000f60 <_write>:

//writing msg to com

int _write(int file, char *ptr, int len) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00f      	b.n	8000f92 <_write+0x32>
		__io_putchar(*ptr);
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffdc 	bl	8000f34 <__io_putchar>
		ITM_SendChar(*ptr);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fb39 	bl	80005f8 <ITM_SendChar>
		*ptr++;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbeb      	blt.n	8000f72 <_write+0x12>
	}
	return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Error_Handler>:

void Error_Handler(void) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
	__disable_irq();
	while (1) {
 8000faa:	e7fe      	b.n	8000faa <Error_Handler+0x6>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_MspInit+0x54>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <HAL_MspInit+0x54>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_MspInit+0x54>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_MspInit+0x54>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_MspInit+0x54>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_MspInit+0x54>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	210f      	movs	r1, #15
 8000fee:	f06f 0001 	mvn.w	r0, #1
 8000ff2:	f000 fd9b 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_CRC_MspInit+0x3c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10d      	bne.n	8001032 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_CRC_MspInit+0x40>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_CRC_MspInit+0x40>)
 8001020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_CRC_MspInit+0x40>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023000 	.word	0x40023000
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_DMA2D_MspInit+0x48>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_DMA2D_MspInit+0x4c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_DMA2D_MspInit+0x4c>)
 8001064:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_DMA2D_MspInit+0x4c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	205a      	movs	r0, #90	; 0x5a
 800107c:	f000 fd56 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001080:	205a      	movs	r0, #90	; 0x5a
 8001082:	f000 fd6f 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	4002b000 	.word	0x4002b000
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_I2C_MspInit+0xc4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d14b      	bne.n	8001152 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a27      	ldr	r2, [pc, #156]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a20      	ldr	r2, [pc, #128]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80010f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001104:	2304      	movs	r3, #4
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <HAL_I2C_MspInit+0xcc>)
 8001110:	f000 ff3e 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001126:	2304      	movs	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <HAL_I2C_MspInit+0xd0>)
 8001132:	f000 ff2d 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 8001140:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_I2C_MspInit+0xc8>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005c00 	.word	0x40005c00
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800
 8001168:	40020000 	.word	0x40020000

0800116c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a7b      	ldr	r2, [pc, #492]	; (8001378 <HAL_LTDC_MspInit+0x20c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	f040 80f0 	bne.w	8001370 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	4b79      	ldr	r3, [pc, #484]	; (800137c <HAL_LTDC_MspInit+0x210>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	4a78      	ldr	r2, [pc, #480]	; (800137c <HAL_LTDC_MspInit+0x210>)
 800119a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800119e:	6453      	str	r3, [r2, #68]	; 0x44
 80011a0:	4b76      	ldr	r3, [pc, #472]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	4b72      	ldr	r3, [pc, #456]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a71      	ldr	r2, [pc, #452]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011b6:	f043 0320 	orr.w	r3, r3, #32
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
 80011bc:	4b6f      	ldr	r3, [pc, #444]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	4b6b      	ldr	r3, [pc, #428]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a6a      	ldr	r2, [pc, #424]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <HAL_LTDC_MspInit+0x210>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_LTDC_MspInit+0x210>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a5c      	ldr	r2, [pc, #368]	; (800137c <HAL_LTDC_MspInit+0x210>)
 800120a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_LTDC_MspInit+0x210>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b56      	ldr	r3, [pc, #344]	; (800137c <HAL_LTDC_MspInit+0x210>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a55      	ldr	r2, [pc, #340]	; (800137c <HAL_LTDC_MspInit+0x210>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_LTDC_MspInit+0x210>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b4f      	ldr	r3, [pc, #316]	; (800137c <HAL_LTDC_MspInit+0x210>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_LTDC_MspInit+0x210>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_LTDC_MspInit+0x210>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001266:	230e      	movs	r3, #14
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4843      	ldr	r0, [pc, #268]	; (8001380 <HAL_LTDC_MspInit+0x214>)
 8001272:	f000 fe8d 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001276:	f641 0358 	movw	r3, #6232	; 0x1858
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001288:	230e      	movs	r3, #14
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	483c      	ldr	r0, [pc, #240]	; (8001384 <HAL_LTDC_MspInit+0x218>)
 8001294:	f000 fe7c 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001298:	2303      	movs	r3, #3
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012a8:	2309      	movs	r3, #9
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	4619      	mov	r1, r3
 80012b2:	4835      	ldr	r0, [pc, #212]	; (8001388 <HAL_LTDC_MspInit+0x21c>)
 80012b4:	f000 fe6c 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ca:	230e      	movs	r3, #14
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	4619      	mov	r1, r3
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <HAL_LTDC_MspInit+0x21c>)
 80012d6:	f000 fe5b 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80012da:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ec:	230e      	movs	r3, #14
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <HAL_LTDC_MspInit+0x220>)
 80012f8:	f000 fe4a 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012fc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800130e:	230e      	movs	r3, #14
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	481d      	ldr	r0, [pc, #116]	; (8001390 <HAL_LTDC_MspInit+0x224>)
 800131a:	f000 fe39 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800131e:	2348      	movs	r3, #72	; 0x48
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800132e:	230e      	movs	r3, #14
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <HAL_LTDC_MspInit+0x228>)
 800133a:	f000 fe29 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800133e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001350:	2309      	movs	r3, #9
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_LTDC_MspInit+0x220>)
 800135c:	f000 fe18 	bl	8001f90 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2105      	movs	r1, #5
 8001364:	2058      	movs	r0, #88	; 0x58
 8001366:	f000 fbe1 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800136a:	2058      	movs	r0, #88	; 0x58
 800136c:	f000 fbfa 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40016800 	.word	0x40016800
 800137c:	40023800 	.word	0x40023800
 8001380:	40021400 	.word	0x40021400
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40021800 	.word	0x40021800
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00

08001398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_SPI_MspInit+0x84>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12c      	bne.n	8001414 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_SPI_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013f2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001404:	2305      	movs	r3, #5
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 8001410:	f000 fdbe 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40015000 	.word	0x40015000
 8001420:	40023800 	.word	0x40023800
 8001424:	40021400 	.word	0x40021400

08001428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_TIM_Base_MspInit+0x3c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10d      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_TIM_Base_MspInit+0x40>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_TIM_Base_MspInit+0x40>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_TIM_Base_MspInit+0x40>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_UART_MspInit+0x84>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12c      	bne.n	80014e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_UART_MspInit+0x88>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_UART_MspInit+0x88>)
 8001498:	f043 0310 	orr.w	r3, r3, #16
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_UART_MspInit+0x88>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_UART_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_UART_MspInit+0x88>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_UART_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d8:	2307      	movs	r3, #7
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_MspInit+0x8c>)
 80014e4:	f000 fd54 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40011000 	.word	0x40011000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000

080014fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001510:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_FMC_MspInit+0x104>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d16f      	bne.n	80015f8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_FMC_MspInit+0x104>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_FMC_MspInit+0x108>)
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	4a37      	ldr	r2, [pc, #220]	; (8001604 <HAL_FMC_MspInit+0x108>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6393      	str	r3, [r2, #56]	; 0x38
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_FMC_MspInit+0x108>)
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800153a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800153e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154c:	230c      	movs	r3, #12
 800154e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <HAL_FMC_MspInit+0x10c>)
 8001556:	f000 fd1b 	bl	8001f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800156a:	230c      	movs	r3, #12
 800156c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4826      	ldr	r0, [pc, #152]	; (800160c <HAL_FMC_MspInit+0x110>)
 8001574:	f000 fd0c 	bl	8001f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001578:	f248 1333 	movw	r3, #33075	; 0x8133
 800157c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800158a:	230c      	movs	r3, #12
 800158c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	481f      	ldr	r0, [pc, #124]	; (8001610 <HAL_FMC_MspInit+0x114>)
 8001594:	f000 fcfc 	bl	8001f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001598:	f64f 7383 	movw	r3, #65411	; 0xff83
 800159c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015aa:	230c      	movs	r3, #12
 80015ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <HAL_FMC_MspInit+0x118>)
 80015b4:	f000 fcec 	bl	8001f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015b8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015bc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ca:	230c      	movs	r3, #12
 80015cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4811      	ldr	r0, [pc, #68]	; (8001618 <HAL_FMC_MspInit+0x11c>)
 80015d4:	f000 fcdc 	bl	8001f90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e8:	230c      	movs	r3, #12
 80015ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_FMC_MspInit+0x120>)
 80015f2:	f000 fccd 	bl	8001f90 <HAL_GPIO_Init>
 80015f6:	e000      	b.n	80015fa <HAL_FMC_MspInit+0xfe>
    return;
 80015f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000308 	.word	0x20000308
 8001604:	40023800 	.word	0x40023800
 8001608:	40021400 	.word	0x40021400
 800160c:	40020800 	.word	0x40020800
 8001610:	40021800 	.word	0x40021800
 8001614:	40021000 	.word	0x40021000
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40020400 	.word	0x40020400

08001620 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001628:	f7ff ff68 	bl	80014fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	2036      	movs	r0, #54	; 0x36
 800164a:	f000 fa6f 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800164e:	2036      	movs	r0, #54	; 0x36
 8001650:	f000 fa88 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_InitTick+0xa4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_InitTick+0xa4>)
 800165e:	f043 0310 	orr.w	r3, r3, #16
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_InitTick+0xa4>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001670:	f107 0210 	add.w	r2, r7, #16
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fcba 	bl	8004ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001680:	f003 fc90 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8001684:	4603      	mov	r3, r0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_InitTick+0xa8>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	3b01      	subs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_InitTick+0xac>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <HAL_InitTick+0xb0>)
 800169c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_InitTick+0xac>)
 80016a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_InitTick+0xac>)
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_InitTick+0xac>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_InitTick+0xac>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <HAL_InitTick+0xac>)
 80016ba:	f003 ff23 	bl	8005504 <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <HAL_InitTick+0xac>)
 80016c6:	f003 ff48 	bl	800555a <HAL_TIM_Base_Start_IT>
 80016ca:	4603      	mov	r3, r0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3730      	adds	r7, #48	; 0x30
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	200086c8 	.word	0x200086c8
 80016e4:	40001000 	.word	0x40001000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM6_DAC_IRQHandler+0x10>)
 800171a:	f003 ff42 	bl	80055a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200086c8 	.word	0x200086c8

08001728 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <OTG_HS_IRQHandler+0x10>)
 800172e:	f001 f881 	bl	8002834 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20008af0 	.word	0x20008af0

0800173c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <LTDC_IRQHandler+0x10>)
 8001742:	f002 fd5d 	bl	8004200 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20008524 	.word	0x20008524

08001750 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA2D_IRQHandler+0x10>)
 8001756:	f000 fa78 	bl	8001c4a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20008650 	.word	0x20008650

08001764 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_close>:
	}
	return len;
}

int _close(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	return -1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	605a      	str	r2, [r3, #4]
	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f00a fe0c 	bl	800c454 <__errno>
 800183c:	4602      	mov	r2, r0
 800183e:	230c      	movs	r3, #12
 8001840:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20030000 	.word	0x20030000
 8001868:	00000400 	.word	0x00000400
 800186c:	2000030c 	.word	0x2000030c
 8001870:	20008db8 	.word	0x20008db8

08001874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <SystemInit+0x28>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <SystemInit+0x28>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <SystemInit+0x28>)
 800188a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800188e:	609a      	str	r2, [r3, #8]
#endif
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018a6:	e003      	b.n	80018b0 <LoopCopyDataInit>

080018a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ae:	3104      	adds	r1, #4

080018b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018b8:	d3f6      	bcc.n	80018a8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018bc:	e002      	b.n	80018c4 <LoopFillZerobss>

080018be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c0:	f842 3b04 	str.w	r3, [r2], #4

080018c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018c8:	d3f9      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ca:	f7ff ffd3 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f00a fdc7 	bl	800c460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7fe feb9 	bl	8000648 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018d8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018dc:	0800d584 	.word	0x0800d584
  ldr  r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80018e8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80018ec:	20008db8 	.word	0x20008db8

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f8fa 	bl	8001b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fe86 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fb40 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	20008708 	.word	0x20008708

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20008708 	.word	0x20008708

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_Delay+0x40>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000008 	.word	0x20000008

080019bc <__NVIC_SetPriorityGrouping>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff4c 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3e:	f7ff ff61 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f7ff ffb1 	bl	8001ab0 <NVIC_EncodePriority>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff80 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff54 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	795b      	ldrb	r3, [r3, #5]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa2e 	bl	8001004 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e03b      	b.n	8001c42 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fa32 	bl	8001048 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c08:	f023 0107 	bic.w	r1, r3, #7
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68d1      	ldr	r1, [r2, #12]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d026      	beq.n	8001cba <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d021      	beq.n	8001cba <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d026      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d021      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cdc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	f043 0202 	orr.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d026      	beq.n	8001d6a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d021      	beq.n	8001d6a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	f043 0204 	orr.w	r2, r3, #4
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00e      	beq.n	8001d9c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2204      	movs	r2, #4
 8001d94:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f853 	bl	8001e42 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d024      	beq.n	8001df0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01f      	beq.n	8001df0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01f      	beq.n	8001e3a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01a      	beq.n	8001e3a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e12:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f80e 	bl	8001e56 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA2D_ConfigLayer+0x20>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e079      	b.n	8001f80 <HAL_DMA2D_ConfigLayer+0x114>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001eb6:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_DMA2D_ConfigLayer+0x120>)
 8001eb8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b0a      	cmp	r3, #10
 8001ec0:	d003      	beq.n	8001eca <HAL_DMA2D_ConfigLayer+0x5e>
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	d107      	bne.n	8001eda <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e005      	b.n	8001ee6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d120      	bne.n	8001f2e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	ea02 0103 	and.w	r1, r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b0a      	cmp	r3, #10
 8001f14:	d003      	beq.n	8001f1e <HAL_DMA2D_ConfigLayer+0xb2>
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	d127      	bne.n	8001f6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f2c:	e01f      	b.n	8001f6e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69da      	ldr	r2, [r3, #28]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	ea02 0103 	and.w	r1, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b0a      	cmp	r3, #10
 8001f56:	d003      	beq.n	8001f60 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b09      	cmp	r3, #9
 8001f5e:	d106      	bne.n	8001f6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f6c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	ff03000f 	.word	0xff03000f

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e177      	b.n	800229c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8166 	bne.w	8002296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d00b      	beq.n	8001fea <HAL_GPIO_Init+0x5a>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fde:	2b11      	cmp	r3, #17
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0xfc>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b12      	cmp	r3, #18
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80c0 	beq.w	8002296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_GPIO_Init+0x320>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a64      	ldr	r2, [pc, #400]	; (80022b0 <HAL_GPIO_Init+0x320>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_GPIO_Init+0x320>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a60      	ldr	r2, [pc, #384]	; (80022b4 <HAL_GPIO_Init+0x324>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <HAL_GPIO_Init+0x328>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d037      	beq.n	80021ce <HAL_GPIO_Init+0x23e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_GPIO_Init+0x32c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d031      	beq.n	80021ca <HAL_GPIO_Init+0x23a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a55      	ldr	r2, [pc, #340]	; (80022c0 <HAL_GPIO_Init+0x330>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x236>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x232>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a53      	ldr	r2, [pc, #332]	; (80022c8 <HAL_GPIO_Init+0x338>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x22e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_GPIO_Init+0x33c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x22a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_GPIO_Init+0x340>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a50      	ldr	r2, [pc, #320]	; (80022d4 <HAL_GPIO_Init+0x344>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x222>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x348>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x21e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	; (80022dc <HAL_GPIO_Init+0x34c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x21a>
 80021a6:	2309      	movs	r3, #9
 80021a8:	e012      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021aa:	230a      	movs	r3, #10
 80021ac:	e010      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021ae:	2308      	movs	r3, #8
 80021b0:	e00e      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021b2:	2307      	movs	r3, #7
 80021b4:	e00c      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021b6:	2306      	movs	r3, #6
 80021b8:	e00a      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021ba:	2305      	movs	r3, #5
 80021bc:	e008      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021be:	2304      	movs	r3, #4
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021c2:	2303      	movs	r3, #3
 80021c4:	e004      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e002      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_Init+0x240>
 80021ce:	2300      	movs	r3, #0
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f002 0203 	and.w	r2, r2, #3
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	4093      	lsls	r3, r2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e0:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_GPIO_Init+0x324>)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ee:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <HAL_GPIO_Init+0x350>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002212:	4a33      	ldr	r2, [pc, #204]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002218:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_GPIO_Init+0x350>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223c:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_GPIO_Init+0x350>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002266:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_GPIO_Init+0x350>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3301      	adds	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b0f      	cmp	r3, #15
 80022a0:	f67f ae84 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	3724      	adds	r7, #36	; 0x24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022400 	.word	0x40022400
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002318:	b08f      	sub	sp, #60	; 0x3c
 800231a:	af0a      	add	r7, sp, #40	; 0x28
 800231c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e054      	b.n	80023d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f009 fdd2 	bl	800beec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fadc 	bl	8006924 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	687e      	ldr	r6, [r7, #4]
 8002374:	466d      	mov	r5, sp
 8002376:	f106 0410 	add.w	r4, r6, #16
 800237a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002386:	e885 0003 	stmia.w	r5, {r0, r1}
 800238a:	1d33      	adds	r3, r6, #4
 800238c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800238e:	6838      	ldr	r0, [r7, #0]
 8002390:	f004 fa56 	bl	8006840 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fad3 	bl	8006946 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	687e      	ldr	r6, [r7, #4]
 80023a8:	466d      	mov	r5, sp
 80023aa:	f106 0410 	add.w	r4, r6, #16
 80023ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80023be:	1d33      	adds	r3, r6, #4
 80023c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	f004 fbe6 	bl	8006b94 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023da:	b590      	push	{r4, r7, lr}
 80023dc:	b089      	sub	sp, #36	; 0x24
 80023de:	af04      	add	r7, sp, #16
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	4608      	mov	r0, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	461a      	mov	r2, r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70bb      	strb	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_HCD_HC_Init+0x28>
 80023fe:	2302      	movs	r3, #2
 8002400:	e07f      	b.n	8002502 <HAL_HCD_HC_Init+0x128>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	333d      	adds	r3, #61	; 0x3d
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	787a      	ldrb	r2, [r7, #1]
 8002430:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	3340      	adds	r3, #64	; 0x40
 8002442:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002444:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3339      	adds	r3, #57	; 0x39
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	333f      	adds	r3, #63	; 0x3f
 800246a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800246e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	78bb      	ldrb	r3, [r7, #2]
 8002474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002478:	b2d8      	uxtb	r0, r3
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	333a      	adds	r3, #58	; 0x3a
 8002488:	4602      	mov	r2, r0
 800248a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800248c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002490:	2b00      	cmp	r3, #0
 8002492:	da0a      	bge.n	80024aa <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	333b      	adds	r3, #59	; 0x3b
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e009      	b.n	80024be <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	333b      	adds	r3, #59	; 0x3b
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	333c      	adds	r3, #60	; 0x3c
 80024ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024d2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	787c      	ldrb	r4, [r7, #1]
 80024da:	78ba      	ldrb	r2, [r7, #2]
 80024dc:	78f9      	ldrb	r1, [r7, #3]
 80024de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	4623      	mov	r3, r4
 80024f0:	f004 fcd2 	bl	8006e98 <USB_HC_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}

0800250a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_HCD_HC_Halt+0x1e>
 8002524:	2302      	movs	r3, #2
 8002526:	e00f      	b.n	8002548 <HAL_HCD_HC_Halt+0x3e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f004 ff0e 	bl	800735a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	70fb      	strb	r3, [r7, #3]
 8002562:	460b      	mov	r3, r1
 8002564:	70bb      	strb	r3, [r7, #2]
 8002566:	4613      	mov	r3, r2
 8002568:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	333b      	adds	r3, #59	; 0x3b
 800257a:	78ba      	ldrb	r2, [r7, #2]
 800257c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	333f      	adds	r3, #63	; 0x3f
 800258e:	787a      	ldrb	r2, [r7, #1]
 8002590:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002592:	7c3b      	ldrb	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d114      	bne.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2203      	movs	r2, #3
 80025aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	333d      	adds	r3, #61	; 0x3d
 80025bc:	7f3a      	ldrb	r2, [r7, #28]
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e009      	b.n	80025d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	3342      	adds	r3, #66	; 0x42
 80025d2:	2202      	movs	r2, #2
 80025d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025d6:	787b      	ldrb	r3, [r7, #1]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	f200 80d6 	bhi.w	800278a <HAL_HCD_HC_SubmitRequest+0x23a>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	08002775 	.word	0x08002775
 80025ec:	08002661 	.word	0x08002661
 80025f0:	080026eb 	.word	0x080026eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025f4:	7c3b      	ldrb	r3, [r7, #16]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 80c9 	bne.w	800278e <HAL_HCD_HC_SubmitRequest+0x23e>
 80025fc:	78bb      	ldrb	r3, [r7, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 80c5 	bne.w	800278e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002604:	8b3b      	ldrh	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	3351      	adds	r3, #81	; 0x51
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	3351      	adds	r3, #81	; 0x51
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3342      	adds	r3, #66	; 0x42
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002648:	e0a1      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	3342      	adds	r3, #66	; 0x42
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
      break;
 800265e:	e096      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002660:	78bb      	ldrb	r3, [r7, #2]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d120      	bne.n	80026a8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	3351      	adds	r3, #81	; 0x51
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3342      	adds	r3, #66	; 0x42
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002690:	e07e      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	3342      	adds	r3, #66	; 0x42
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
      break;
 80026a6:	e073      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3350      	adds	r3, #80	; 0x50
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	3342      	adds	r3, #66	; 0x42
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
      break;
 80026d2:	e05d      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	3342      	adds	r3, #66	; 0x42
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
      break;
 80026e8:	e052      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026ea:	78bb      	ldrb	r3, [r7, #2]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d120      	bne.n	8002732 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	3351      	adds	r3, #81	; 0x51
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	3342      	adds	r3, #66	; 0x42
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800271a:	e039      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	440b      	add	r3, r1
 800272a:	3342      	adds	r3, #66	; 0x42
 800272c:	2202      	movs	r2, #2
 800272e:	701a      	strb	r2, [r3, #0]
      break;
 8002730:	e02e      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	3350      	adds	r3, #80	; 0x50
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	3342      	adds	r3, #66	; 0x42
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
      break;
 800275c:	e018      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	3342      	adds	r3, #66	; 0x42
 800276e:	2202      	movs	r2, #2
 8002770:	701a      	strb	r2, [r3, #0]
      break;
 8002772:	e00d      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3342      	adds	r3, #66	; 0x42
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
      break;
 8002788:	e002      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800278e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	3344      	adds	r3, #68	; 0x44
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	8b39      	ldrh	r1, [r7, #24]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4403      	add	r3, r0
 80027b4:	3348      	adds	r3, #72	; 0x48
 80027b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	335c      	adds	r3, #92	; 0x5c
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	334c      	adds	r3, #76	; 0x4c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3339      	adds	r3, #57	; 0x39
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	335d      	adds	r3, #93	; 0x5d
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	3338      	adds	r3, #56	; 0x38
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	18d1      	adds	r1, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	f004 fc42 	bl	80070ac <USB_HC_StartXfer>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop

08002834 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f95f 	bl	8006b0e <USB_GetMode>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	f040 80ef 	bne.w	8002a36 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 f943 	bl	8006ae8 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80e5 	beq.w	8002a34 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f004 f93a 	bl	8006ae8 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800287e:	d104      	bne.n	800288a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002888:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f004 f92a 	bl	8006ae8 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289e:	d104      	bne.n	80028aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f91a 	bl	8006ae8 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028be:	d104      	bne.n	80028ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 f90a 	bl	8006ae8 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d103      	bne.n	80028e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2202      	movs	r2, #2
 80028e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 f8fc 	bl	8006ae8 <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fa:	d115      	bne.n	8002928 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002904:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f009 fb62 	bl	800bfe0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f004 f9f2 	bl	8006d0c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f004 f8db 	bl	8006ae8 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293c:	d102      	bne.n	8002944 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f001 f966 	bl	8003c10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f004 f8cd 	bl	8006ae8 <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d106      	bne.n	8002966 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f009 fb25 	bl	800bfa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2208      	movs	r2, #8
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 f8bc 	bl	8006ae8 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800297a:	d138      	bne.n	80029ee <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f004 fcd9 	bl	8007338 <USB_HC_ReadInterrupt>
 8002986:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e025      	b.n	80029da <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b8:	d106      	bne.n	80029c8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8cf 	bl	8002b64 <HCD_HC_IN_IRQHandler>
 80029c6:	e005      	b.n	80029d4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fcfd 	bl	80033ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3301      	adds	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3d4      	bcc.n	800298e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 f878 	bl	8006ae8 <USB_ReadInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d101      	bne.n	8002a06 <HAL_HCD_IRQHandler+0x1d2>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_HCD_IRQHandler+0x1d4>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d014      	beq.n	8002a36 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0210 	bic.w	r2, r2, #16
 8002a1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f001 f84b 	bl	8003ab8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0210 	orr.w	r2, r2, #16
 8002a30:	619a      	str	r2, [r3, #24]
 8002a32:	e000      	b.n	8002a36 <HAL_HCD_IRQHandler+0x202>
      return;
 8002a34:	bf00      	nop
    }
  }
}
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_HCD_Start+0x16>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e013      	b.n	8002a7a <HAL_HCD_Start+0x3e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 ff4f 	bl	8006902 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 f9b2 	bl	8006dd4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_HCD_Stop+0x16>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e00d      	b.n	8002ab4 <HAL_HCD_Stop+0x32>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f004 fd93 	bl	80075d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 f959 	bl	8006d80 <USB_ResetPort>
 8002ace:	4603      	mov	r3, r0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	334c      	adds	r3, #76	; 0x4c
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 f99b 	bl	8006e74 <USB_GetCurrentFrame>
 8002b3e:	4603      	mov	r3, r0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 f976 	bl	8006e46 <USB_GetHostSpeed>
 8002b5a:	4603      	mov	r3, r0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d119      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	60d3      	str	r3, [r2, #12]
 8002bc6:	e0ce      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	d12c      	bne.n	8002c3a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335d      	adds	r3, #93	; 0x5d
 8002c04:	2207      	movs	r2, #7
 8002c06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	0151      	lsls	r1, r2, #5
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	440a      	add	r2, r1
 8002c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fb91 	bl	800735a <USB_HC_Halt>
 8002c38:	e095      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d109      	bne.n	8002c64 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2320      	movs	r3, #32
 8002c60:	6093      	str	r3, [r2, #8]
 8002c62:	e080      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d134      	bne.n	8002ce4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	0151      	lsls	r1, r2, #5
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	440a      	add	r2, r1
 8002c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	335d      	adds	r3, #93	; 0x5d
 8002caa:	2205      	movs	r2, #5
 8002cac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2308      	movs	r3, #8
 8002cd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 fb3c 	bl	800735a <USB_HC_Halt>
 8002ce2:	e040      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfa:	d134      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d16:	f043 0302 	orr.w	r3, r3, #2
 8002d1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fb17 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	335d      	adds	r3, #93	; 0x5d
 8002d4e:	2208      	movs	r2, #8
 8002d50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d64:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	d122      	bne.n	8002dc4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	0151      	lsls	r1, r2, #5
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	440a      	add	r2, r1
 8002d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fad6 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002dc2:	e300      	b.n	80033c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	f040 80fd 	bne.w	8002fd6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3348      	adds	r3, #72	; 0x48
 8002df4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002e08:	1ad1      	subs	r1, r2, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4403      	add	r3, r0
 8002e18:	334c      	adds	r3, #76	; 0x4c
 8002e1a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	335d      	adds	r3, #93	; 0x5d
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3358      	adds	r3, #88	; 0x58
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2301      	movs	r3, #1
 8002e54:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	333f      	adds	r3, #63	; 0x3f
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	333f      	adds	r3, #63	; 0x3f
 8002e7c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d121      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	0151      	lsls	r1, r2, #5
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	440a      	add	r2, r1
 8002e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f004 fa54 	bl	800735a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	6093      	str	r3, [r2, #8]
 8002ec4:	e070      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	333f      	adds	r3, #63	; 0x3f
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d12a      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	0151      	lsls	r1, r2, #5
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	440a      	add	r2, r1
 8002ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002efa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	335c      	adds	r3, #92	; 0x5c
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	b2d8      	uxtb	r0, r3
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4601      	mov	r1, r0
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f009 f866 	bl	800bffc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f30:	e03a      	b.n	8002fa8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	333f      	adds	r3, #63	; 0x3f
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d12f      	bne.n	8002fa8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3350      	adds	r3, #80	; 0x50
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2d8      	uxtb	r0, r3
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	3350      	adds	r3, #80	; 0x50
 8002f84:	4602      	mov	r2, r0
 8002f86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	b2d8      	uxtb	r0, r3
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	335c      	adds	r3, #92	; 0x5c
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4601      	mov	r1, r0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f009 f82a 	bl	800bffc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3350      	adds	r3, #80	; 0x50
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2d8      	uxtb	r0, r3
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3350      	adds	r3, #80	; 0x50
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	701a      	strb	r2, [r3, #0]
}
 8002fd4:	e1f7      	b.n	80033c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	f040 811a 	bne.w	8003222 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	440a      	add	r2, r1
 8003004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003008:	f023 0302 	bic.w	r3, r3, #2
 800300c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	335d      	adds	r3, #93	; 0x5d
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10a      	bne.n	800303a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	335c      	adds	r3, #92	; 0x5c
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e0d9      	b.n	80031ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	335d      	adds	r3, #93	; 0x5d
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10a      	bne.n	8003066 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	335c      	adds	r3, #92	; 0x5c
 8003060:	2205      	movs	r2, #5
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e0c3      	b.n	80031ee <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	335d      	adds	r3, #93	; 0x5d
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d00a      	beq.n	8003092 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	335d      	adds	r3, #93	; 0x5d
 800308c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800308e:	2b08      	cmp	r3, #8
 8003090:	d156      	bne.n	8003140 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3358      	adds	r3, #88	; 0x58
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1c59      	adds	r1, r3, #1
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4403      	add	r3, r0
 80030b4:	3358      	adds	r3, #88	; 0x58
 80030b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	3358      	adds	r3, #88	; 0x58
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d914      	bls.n	80030f8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	3358      	adds	r3, #88	; 0x58
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	335c      	adds	r3, #92	; 0x5c
 80030f2:	2204      	movs	r2, #4
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e009      	b.n	800310c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	335c      	adds	r3, #92	; 0x5c
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003122:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800312a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e056      	b.n	80031ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	335d      	adds	r3, #93	; 0x5d
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d123      	bne.n	800319e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	335c      	adds	r3, #92	; 0x5c
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003180:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003188:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e027      	b.n	80031ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	335d      	adds	r3, #93	; 0x5d
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	d11c      	bne.n	80031ee <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	3358      	adds	r3, #88	; 0x58
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4403      	add	r3, r0
 80031d6:	3358      	adds	r3, #88	; 0x58
 80031d8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	335c      	adds	r3, #92	; 0x5c
 80031ea:	2204      	movs	r2, #4
 80031ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	461a      	mov	r2, r3
 80031fc:	2302      	movs	r3, #2
 80031fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	b2d8      	uxtb	r0, r3
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	335c      	adds	r3, #92	; 0x5c
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4601      	mov	r1, r0
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f008 feee 	bl	800bffc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003220:	e0d1      	b.n	80033c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b80      	cmp	r3, #128	; 0x80
 8003236:	d13e      	bne.n	80032b6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	440a      	add	r2, r1
 800324e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	3358      	adds	r3, #88	; 0x58
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1c59      	adds	r1, r3, #1
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4403      	add	r3, r0
 800327a:	3358      	adds	r3, #88	; 0x58
 800327c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	335d      	adds	r3, #93	; 0x5d
 800328e:	2206      	movs	r2, #6
 8003290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f004 f85c 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	6093      	str	r3, [r2, #8]
}
 80032b4:	e087      	b.n	80033c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d17c      	bne.n	80033c6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	333f      	adds	r3, #63	; 0x3f
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d122      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	3358      	adds	r3, #88	; 0x58
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	440a      	add	r2, r1
 800330c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f004 f81a 	bl	800735a <USB_HC_Halt>
 8003326:	e045      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	333f      	adds	r3, #63	; 0x3f
 800334e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003350:	2b02      	cmp	r3, #2
 8003352:	d12f      	bne.n	80033b4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	3358      	adds	r3, #88	; 0x58
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d121      	bne.n	80033b4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	335d      	adds	r3, #93	; 0x5d
 8003380:	2203      	movs	r2, #3
 8003382:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	440a      	add	r2, r1
 800339a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 ffd3 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	2310      	movs	r3, #16
 80033c4:	6093      	str	r3, [r2, #8]
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d119      	bne.n	8003432 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	461a      	mov	r2, r3
 800340c:	2304      	movs	r3, #4
 800340e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	440a      	add	r2, r1
 8003426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800342a:	f043 0302 	orr.w	r3, r3, #2
 800342e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003430:	e33e      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b20      	cmp	r3, #32
 8003446:	d141      	bne.n	80034cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003454:	461a      	mov	r2, r3
 8003456:	2320      	movs	r3, #32
 8003458:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	333d      	adds	r3, #61	; 0x3d
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	f040 831f 	bne.w	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	333d      	adds	r3, #61	; 0x3d
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	335c      	adds	r3, #92	; 0x5c
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 ff48 	bl	800735a <USB_HC_Halt>
}
 80034ca:	e2f1      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d13f      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	335d      	adds	r3, #93	; 0x5d
 80034f2:	2204      	movs	r2, #4
 80034f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	333d      	adds	r3, #61	; 0x3d
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	3358      	adds	r3, #88	; 0x58
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	0151      	lsls	r1, r2, #5
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	440a      	add	r2, r1
 8003534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f003 ff06 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	461a      	mov	r2, r3
 800355c:	2340      	movs	r3, #64	; 0x40
 800355e:	6093      	str	r3, [r2, #8]
}
 8003560:	e2a6      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d122      	bne.n	80035c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	0151      	lsls	r1, r2, #5
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	440a      	add	r2, r1
 8003590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 fed8 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	461a      	mov	r2, r3
 80035b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035bc:	6093      	str	r3, [r2, #8]
}
 80035be:	e277      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d135      	bne.n	8003642 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	3358      	adds	r3, #88	; 0x58
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f003 fea0 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	2301      	movs	r3, #1
 800362a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	335d      	adds	r3, #93	; 0x5d
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
}
 8003640:	e236      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d12b      	bne.n	80036b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	461a      	mov	r2, r3
 8003666:	2308      	movs	r3, #8
 8003668:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f003 fe60 	bl	800735a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	335d      	adds	r3, #93	; 0x5d
 80036aa:	2205      	movs	r2, #5
 80036ac:	701a      	strb	r2, [r3, #0]
}
 80036ae:	e1ff      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d155      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	3358      	adds	r3, #88	; 0x58
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	335d      	adds	r3, #93	; 0x5d
 80036ea:	2203      	movs	r2, #3
 80036ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	333d      	adds	r3, #61	; 0x3d
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d114      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	333c      	adds	r3, #60	; 0x3c
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	333d      	adds	r3, #61	; 0x3d
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	0151      	lsls	r1, r2, #5
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	440a      	add	r2, r1
 8003744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fdfe 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	461a      	mov	r2, r3
 800376c:	2310      	movs	r3, #16
 800376e:	6093      	str	r3, [r2, #8]
}
 8003770:	e19e      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d12b      	bne.n	80037e0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	440a      	add	r2, r1
 800379e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 fdd1 	bl	800735a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	335d      	adds	r3, #93	; 0x5d
 80037c8:	2206      	movs	r2, #6
 80037ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	6093      	str	r3, [r2, #8]
}
 80037de:	e167      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d135      	bne.n	8003864 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	0151      	lsls	r1, r2, #5
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	440a      	add	r2, r1
 800380e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f003 fd99 	bl	800735a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2310      	movs	r3, #16
 8003838:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	461a      	mov	r2, r3
 8003848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	335d      	adds	r3, #93	; 0x5d
 800385e:	2208      	movs	r2, #8
 8003860:	701a      	strb	r2, [r3, #0]
}
 8003862:	e125      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	f040 811a 	bne.w	8003ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	0151      	lsls	r1, r2, #5
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	440a      	add	r2, r1
 8003892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003896:	f023 0302 	bic.w	r3, r3, #2
 800389a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	335d      	adds	r3, #93	; 0x5d
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d137      	bne.n	8003922 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	335c      	adds	r3, #92	; 0x5c
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	440b      	add	r3, r1
 80038d4:	333f      	adds	r3, #63	; 0x3f
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d00b      	beq.n	80038f4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	440b      	add	r3, r1
 80038ea:	333f      	adds	r3, #63	; 0x3f
 80038ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	f040 80c5 	bne.w	8003a7e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3351      	adds	r3, #81	; 0x51
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3351      	adds	r3, #81	; 0x51
 800391c:	4602      	mov	r2, r0
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e0ad      	b.n	8003a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	335d      	adds	r3, #93	; 0x5d
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d10a      	bne.n	800394e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	335c      	adds	r3, #92	; 0x5c
 8003948:	2202      	movs	r2, #2
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e097      	b.n	8003a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	335d      	adds	r3, #93	; 0x5d
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d10a      	bne.n	800397a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	335c      	adds	r3, #92	; 0x5c
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e081      	b.n	8003a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	335d      	adds	r3, #93	; 0x5d
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d10a      	bne.n	80039a6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	335c      	adds	r3, #92	; 0x5c
 80039a0:	2205      	movs	r2, #5
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e06b      	b.n	8003a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	335d      	adds	r3, #93	; 0x5d
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d00a      	beq.n	80039d2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	335d      	adds	r3, #93	; 0x5d
 80039cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d155      	bne.n	8003a7e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	3358      	adds	r3, #88	; 0x58
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4403      	add	r3, r0
 80039f4:	3358      	adds	r3, #88	; 0x58
 80039f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	3358      	adds	r3, #88	; 0x58
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d914      	bls.n	8003a38 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3358      	adds	r3, #88	; 0x58
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	335c      	adds	r3, #92	; 0x5c
 8003a32:	2204      	movs	r2, #4
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e009      	b.n	8003a4c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	335c      	adds	r3, #92	; 0x5c
 8003a48:	2202      	movs	r2, #2
 8003a4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	b2d8      	uxtb	r0, r3
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	335c      	adds	r3, #92	; 0x5c
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f008 faa6 	bl	800bffc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	0c5b      	lsrs	r3, r3, #17
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d003      	beq.n	8003afc <HCD_RXQLVL_IRQHandler+0x44>
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	f000 8082 	beq.w	8003bfe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003afa:	e083      	b.n	8003c04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d07f      	beq.n	8003c02 <HCD_RXQLVL_IRQHandler+0x14a>
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3344      	adds	r3, #68	; 0x44
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d074      	beq.n	8003c02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3344      	adds	r3, #68	; 0x44
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	b292      	uxth	r2, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	f002 ffaf 	bl	8006a96 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	; 0x44
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	18d1      	adds	r1, r2, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4403      	add	r3, r0
 8003b5c:	3344      	adds	r3, #68	; 0x44
 8003b5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334c      	adds	r3, #76	; 0x4c
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	18d1      	adds	r1, r2, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4403      	add	r3, r0
 8003b84:	334c      	adds	r3, #76	; 0x4c
 8003b86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HCD_RXQLVL_IRQHandler+0x154>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d031      	beq.n	8003c02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	440b      	add	r3, r1
 8003bde:	3350      	adds	r3, #80	; 0x50
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3350      	adds	r3, #80	; 0x50
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	701a      	strb	r2, [r3, #0]
      break;
 8003bfc:	e001      	b.n	8003c02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003c02:	bf00      	nop
  }
}
 8003c04:	bf00      	nop
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	1ff80000 	.word	0x1ff80000

08003c10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d10b      	bne.n	8003c60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f008 f9b6 	bl	800bfc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d132      	bne.n	8003cd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d126      	bne.n	8003cca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d113      	bne.n	8003cac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c8e:	d106      	bne.n	8003c9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2102      	movs	r1, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 f838 	bl	8006d0c <USB_InitFSLSPClkSel>
 8003c9c:	e011      	b.n	8003cc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 f831 	bl	8006d0c <USB_InitFSLSPClkSel>
 8003caa:	e00a      	b.n	8003cc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f008 f9ac 	bl	800c020 <HAL_HCD_PortEnabled_Callback>
 8003cc8:	e002      	b.n	8003cd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f008 f9b6 	bl	800c03c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d103      	bne.n	8003ce2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f043 0320 	orr.w	r3, r3, #32
 8003ce0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6013      	str	r3, [r2, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e11f      	b.n	8003f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd f9ba 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f001 f922 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 8003d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a7b      	ldr	r2, [pc, #492]	; (8003f54 <HAL_I2C_Init+0x25c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d807      	bhi.n	8003d7c <HAL_I2C_Init+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a7a      	ldr	r2, [pc, #488]	; (8003f58 <HAL_I2C_Init+0x260>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e006      	b.n	8003d8a <HAL_I2C_Init+0x92>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a77      	ldr	r2, [pc, #476]	; (8003f5c <HAL_I2C_Init+0x264>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0db      	b.n	8003f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <HAL_I2C_Init+0x268>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a64      	ldr	r2, [pc, #400]	; (8003f54 <HAL_I2C_Init+0x25c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d802      	bhi.n	8003dcc <HAL_I2C_Init+0xd4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e009      	b.n	8003de0 <HAL_I2C_Init+0xe8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	4a63      	ldr	r2, [pc, #396]	; (8003f64 <HAL_I2C_Init+0x26c>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4956      	ldr	r1, [pc, #344]	; (8003f54 <HAL_I2C_Init+0x25c>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d80d      	bhi.n	8003e1c <HAL_I2C_Init+0x124>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e59      	subs	r1, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	bf38      	it	cc
 8003e18:	2304      	movcc	r3, #4
 8003e1a:	e04f      	b.n	8003ebc <HAL_I2C_Init+0x1c4>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_I2C_Init+0x150>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e012      	b.n	8003e6e <HAL_I2C_Init+0x176>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x17e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e022      	b.n	8003ebc <HAL_I2C_Init+0x1c4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <HAL_I2C_Init+0x1a4>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e58      	subs	r0, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	440b      	add	r3, r1
 8003e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Init+0x1c4>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	6809      	ldr	r1, [r1, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6911      	ldr	r1, [r2, #16]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68d2      	ldr	r2, [r2, #12]
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	000186a0 	.word	0x000186a0
 8003f58:	001e847f 	.word	0x001e847f
 8003f5c:	003d08ff 	.word	0x003d08ff
 8003f60:	431bde83 	.word	0x431bde83
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d129      	bne.n	8003fd2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2224      	movs	r2, #36	; 0x24
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0210 	bic.w	r2, r2, #16
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d12a      	bne.n	8004050 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2224      	movs	r2, #36	; 0x24
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800401a:	89fb      	ldrh	r3, [r7, #14]
 800401c:	f023 030f 	bic.w	r3, r3, #15
 8004020:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	4313      	orrs	r3, r2
 800402a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	89fa      	ldrh	r2, [r7, #14]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0bf      	b.n	80041f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd f870 	bl	800116c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80040a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6999      	ldr	r1, [r3, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_LTDC_Init+0x19c>)
 80040d4:	400b      	ands	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68d9      	ldr	r1, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b3e      	ldr	r3, [pc, #248]	; (80041fc <HAL_LTDC_Init+0x19c>)
 8004102:	400b      	ands	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_LTDC_Init+0x19c>)
 8004130:	400b      	ands	r3, r1
 8004132:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6959      	ldr	r1, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_LTDC_Init+0x19c>)
 800415e:	400b      	ands	r3, r1
 8004160:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6959      	ldr	r1, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0206 	orr.w	r2, r2, #6
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	f000f800 	.word	0xf000f800

08004200 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d023      	beq.n	800426a <HAL_LTDC_IRQHandler+0x6a>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01e      	beq.n	800426a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0204 	bic.w	r2, r2, #4
 800423a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2204      	movs	r2, #4
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800424a:	f043 0201 	orr.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2204      	movs	r2, #4
 8004258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f86f 	bl	8004348 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_LTDC_IRQHandler+0xbc>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01e      	beq.n	80042bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0202 	bic.w	r2, r2, #2
 800428c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2202      	movs	r2, #2
 8004294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800429c:	f043 0202 	orr.w	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2204      	movs	r2, #4
 80042aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f846 	bl	8004348 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01b      	beq.n	80042fe <HAL_LTDC_IRQHandler+0xfe>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d016      	beq.n	80042fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f82f 	bl	800435c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_LTDC_IRQHandler+0x140>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0208 	bic.w	r2, r2, #8
 8004320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2208      	movs	r2, #8
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f818 	bl	8004370 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004384:	b5b0      	push	{r4, r5, r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_LTDC_ConfigLayer+0x1a>
 800439a:	2302      	movs	r3, #2
 800439c:	e02c      	b.n	80043f8 <HAL_LTDC_ConfigLayer+0x74>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2134      	movs	r1, #52	; 0x34
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4614      	mov	r4, r2
 80043c2:	461d      	mov	r5, r3
 80043c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f811 	bl	8004400 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bdb0      	pop	{r4, r5, r7, pc}

08004400 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	4413      	add	r3, r2
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	01db      	lsls	r3, r3, #7
 800442c:	4413      	add	r3, r2
 800442e:	3384      	adds	r3, #132	; 0x84
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	4611      	mov	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	01d2      	lsls	r2, r2, #7
 800443c:	440a      	add	r2, r1
 800443e:	3284      	adds	r2, #132	; 0x84
 8004440:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004444:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	4413      	add	r3, r2
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	01db      	lsls	r3, r3, #7
 8004464:	440b      	add	r3, r1
 8004466:	3384      	adds	r3, #132	; 0x84
 8004468:	4619      	mov	r1, r3
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447e:	4413      	add	r3, r2
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	01db      	lsls	r3, r3, #7
 800448e:	4413      	add	r3, r2
 8004490:	3384      	adds	r3, #132	; 0x84
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	4611      	mov	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	01d2      	lsls	r2, r2, #7
 800449e:	440a      	add	r2, r1
 80044a0:	3284      	adds	r2, #132	; 0x84
 80044a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044b6:	4413      	add	r3, r2
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	01db      	lsls	r3, r3, #7
 80044c4:	440b      	add	r3, r1
 80044c6:	3384      	adds	r3, #132	; 0x84
 80044c8:	4619      	mov	r1, r3
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	01db      	lsls	r3, r3, #7
 80044da:	4413      	add	r3, r2
 80044dc:	3384      	adds	r3, #132	; 0x84
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	4611      	mov	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	01d2      	lsls	r2, r2, #7
 80044ea:	440a      	add	r2, r1
 80044ec:	3284      	adds	r2, #132	; 0x84
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	4413      	add	r3, r2
 8004500:	3384      	adds	r3, #132	; 0x84
 8004502:	461a      	mov	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	01db      	lsls	r3, r3, #7
 8004530:	4413      	add	r3, r2
 8004532:	3384      	adds	r3, #132	; 0x84
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	01db      	lsls	r3, r3, #7
 8004540:	4413      	add	r3, r2
 8004542:	3384      	adds	r3, #132	; 0x84
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004550:	461a      	mov	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	431a      	orrs	r2, r3
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	440b      	add	r3, r1
 8004566:	3384      	adds	r3, #132	; 0x84
 8004568:	4619      	mov	r1, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	01db      	lsls	r3, r3, #7
 800457a:	4413      	add	r3, r2
 800457c:	3384      	adds	r3, #132	; 0x84
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	4611      	mov	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	01d2      	lsls	r2, r2, #7
 800458a:	440a      	add	r2, r1
 800458c:	3284      	adds	r2, #132	; 0x84
 800458e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004592:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	4413      	add	r3, r2
 80045a0:	3384      	adds	r3, #132	; 0x84
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4413      	add	r3, r2
 80045b6:	3384      	adds	r3, #132	; 0x84
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	4611      	mov	r1, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	01d2      	lsls	r2, r2, #7
 80045c4:	440a      	add	r2, r1
 80045c6:	3284      	adds	r2, #132	; 0x84
 80045c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045cc:	f023 0307 	bic.w	r3, r3, #7
 80045d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	6809      	ldr	r1, [r1, #0]
 80045de:	4608      	mov	r0, r1
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	01c9      	lsls	r1, r1, #7
 80045e4:	4401      	add	r1, r0
 80045e6:	3184      	adds	r1, #132	; 0x84
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	01db      	lsls	r3, r3, #7
 80045f6:	4413      	add	r3, r2
 80045f8:	3384      	adds	r3, #132	; 0x84
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	01db      	lsls	r3, r3, #7
 8004606:	4413      	add	r3, r2
 8004608:	3384      	adds	r3, #132	; 0x84
 800460a:	461a      	mov	r2, r3
 800460c:	2300      	movs	r3, #0
 800460e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	01db      	lsls	r3, r3, #7
 800461a:	4413      	add	r3, r2
 800461c:	3384      	adds	r3, #132	; 0x84
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800462e:	2304      	movs	r3, #4
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	e01b      	b.n	800466c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800463c:	2303      	movs	r3, #3
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	e014      	b.n	800466c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00b      	beq.n	8004662 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800464e:	2b02      	cmp	r3, #2
 8004650:	d007      	beq.n	8004662 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004656:	2b03      	cmp	r3, #3
 8004658:	d003      	beq.n	8004662 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800465e:	2b07      	cmp	r3, #7
 8004660:	d102      	bne.n	8004668 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004662:	2302      	movs	r3, #2
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e001      	b.n	800466c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004668:	2301      	movs	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	01db      	lsls	r3, r3, #7
 8004676:	4413      	add	r3, r2
 8004678:	3384      	adds	r3, #132	; 0x84
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	4611      	mov	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	01d2      	lsls	r2, r2, #7
 8004686:	440a      	add	r2, r1
 8004688:	3284      	adds	r2, #132	; 0x84
 800468a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800468e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	041a      	lsls	r2, r3, #16
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1acb      	subs	r3, r1, r3
 80046a6:	69f9      	ldr	r1, [r7, #28]
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	3303      	adds	r3, #3
 80046ae:	68f9      	ldr	r1, [r7, #12]
 80046b0:	6809      	ldr	r1, [r1, #0]
 80046b2:	4608      	mov	r0, r1
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	01c9      	lsls	r1, r1, #7
 80046b8:	4401      	add	r1, r0
 80046ba:	3184      	adds	r1, #132	; 0x84
 80046bc:	4313      	orrs	r3, r2
 80046be:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	01db      	lsls	r3, r3, #7
 80046ca:	4413      	add	r3, r2
 80046cc:	3384      	adds	r3, #132	; 0x84
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4611      	mov	r1, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	01d2      	lsls	r2, r2, #7
 80046da:	440a      	add	r2, r1
 80046dc:	3284      	adds	r2, #132	; 0x84
 80046de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	01db      	lsls	r3, r3, #7
 80046f2:	4413      	add	r3, r2
 80046f4:	3384      	adds	r3, #132	; 0x84
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	01db      	lsls	r3, r3, #7
 8004708:	4413      	add	r3, r2
 800470a:	3384      	adds	r3, #132	; 0x84
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	4611      	mov	r1, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	01d2      	lsls	r2, r2, #7
 8004718:	440a      	add	r2, r1
 800471a:	3284      	adds	r2, #132	; 0x84
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6013      	str	r3, [r2, #0]
}
 8004722:	bf00      	nop
 8004724:	3724      	adds	r7, #36	; 0x24
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e25b      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d075      	beq.n	800483a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	4ba3      	ldr	r3, [pc, #652]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b04      	cmp	r3, #4
 8004758:	d00c      	beq.n	8004774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800475a:	4ba0      	ldr	r3, [pc, #640]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004762:	2b08      	cmp	r3, #8
 8004764:	d112      	bne.n	800478c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004766:	4b9d      	ldr	r3, [pc, #628]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004772:	d10b      	bne.n	800478c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d05b      	beq.n	8004838 <HAL_RCC_OscConfig+0x108>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d157      	bne.n	8004838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e236      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d106      	bne.n	80047a4 <HAL_RCC_OscConfig+0x74>
 8004796:	4b91      	ldr	r3, [pc, #580]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a90      	ldr	r2, [pc, #576]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800479c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e01d      	b.n	80047e0 <HAL_RCC_OscConfig+0xb0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x98>
 80047ae:	4b8b      	ldr	r3, [pc, #556]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a8a      	ldr	r2, [pc, #552]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	4b88      	ldr	r3, [pc, #544]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a87      	ldr	r2, [pc, #540]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e00b      	b.n	80047e0 <HAL_RCC_OscConfig+0xb0>
 80047c8:	4b84      	ldr	r3, [pc, #528]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a83      	ldr	r2, [pc, #524]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	4b81      	ldr	r3, [pc, #516]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a80      	ldr	r2, [pc, #512]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80047da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d013      	beq.n	8004810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fd f8ba 	bl	8001960 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f0:	f7fd f8b6 	bl	8001960 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e1fb      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0xc0>
 800480e:	e014      	b.n	800483a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fd f8a6 	bl	8001960 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004818:	f7fd f8a2 	bl	8001960 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e1e7      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482a:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0xe8>
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d063      	beq.n	800490e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004852:	4b62      	ldr	r3, [pc, #392]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800485a:	2b08      	cmp	r3, #8
 800485c:	d11c      	bne.n	8004898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485e:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d116      	bne.n	8004898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486a:	4b5c      	ldr	r3, [pc, #368]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_RCC_OscConfig+0x152>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e1bb      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004882:	4b56      	ldr	r3, [pc, #344]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4952      	ldr	r1, [pc, #328]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004896:	e03a      	b.n	800490e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a0:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <HAL_RCC_OscConfig+0x2b0>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fd f85b 	bl	8001960 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ae:	f7fd f857 	bl	8001960 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e19c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c0:	4b46      	ldr	r3, [pc, #280]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048cc:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4940      	ldr	r1, [pc, #256]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]
 80048e0:	e015      	b.n	800490e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_OscConfig+0x2b0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd f83a 	bl	8001960 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fd f836 	bl	8001960 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e17b      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d030      	beq.n	800497c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004922:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_RCC_OscConfig+0x2b4>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fd f81a 	bl	8001960 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004930:	f7fd f816 	bl	8001960 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e15b      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004942:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x200>
 800494e:	e015      	b.n	800497c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004950:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCC_OscConfig+0x2b4>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004956:	f7fd f803 	bl	8001960 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800495e:	f7fc ffff 	bl	8001960 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e144      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004970:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80a0 	beq.w	8004aca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a8:	6413      	str	r3, [r2, #64]	; 0x40
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x2b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d121      	bne.n	8004a0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049c6:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_RCC_OscConfig+0x2b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <HAL_RCC_OscConfig+0x2b8>)
 80049cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d2:	f7fc ffc5 	bl	8001960 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d8:	e011      	b.n	80049fe <HAL_RCC_OscConfig+0x2ce>
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	42470000 	.word	0x42470000
 80049e4:	42470e80 	.word	0x42470e80
 80049e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ec:	f7fc ffb8 	bl	8001960 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0fd      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x4d4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2f0>
 8004a12:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a7c      	ldr	r2, [pc, #496]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	e01c      	b.n	8004a5a <HAL_RCC_OscConfig+0x32a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	d10c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x312>
 8004a28:	4b77      	ldr	r3, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4a76      	ldr	r2, [pc, #472]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	6713      	str	r3, [r2, #112]	; 0x70
 8004a34:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a40:	e00b      	b.n	8004a5a <HAL_RCC_OscConfig+0x32a>
 8004a42:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a70      	ldr	r2, [pc, #448]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4e:	4b6e      	ldr	r3, [pc, #440]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	4a6d      	ldr	r2, [pc, #436]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d015      	beq.n	8004a8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fc ff7d 	bl	8001960 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fc ff79 	bl	8001960 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0bc      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	4b61      	ldr	r3, [pc, #388]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ee      	beq.n	8004a6a <HAL_RCC_OscConfig+0x33a>
 8004a8c:	e014      	b.n	8004ab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8e:	f7fc ff67 	bl	8001960 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fc ff63 	bl	8001960 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0a6      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aac:	4b56      	ldr	r3, [pc, #344]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1ee      	bne.n	8004a96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d105      	bne.n	8004aca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abe:	4b52      	ldr	r3, [pc, #328]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	4a51      	ldr	r2, [pc, #324]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8092 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ad4:	4b4c      	ldr	r3, [pc, #304]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d05c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d141      	bne.n	8004b6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae8:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <HAL_RCC_OscConfig+0x4dc>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aee:	f7fc ff37 	bl	8001960 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af6:	f7fc ff33 	bl	8001960 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e078      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b08:	4b3f      	ldr	r3, [pc, #252]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	019b      	lsls	r3, r3, #6
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	4933      	ldr	r1, [pc, #204]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b3e:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <HAL_RCC_OscConfig+0x4dc>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fc ff0c 	bl	8001960 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fc ff08 	bl	8001960 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04d      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x41c>
 8004b6a:	e045      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCC_OscConfig+0x4dc>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b72:	f7fc fef5 	bl	8001960 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7a:	f7fc fef1 	bl	8001960 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e036      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <HAL_RCC_OscConfig+0x44a>
 8004b98:	e02e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e029      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <HAL_RCC_OscConfig+0x4d8>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d11c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d115      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bce:	4013      	ands	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d106      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40007000 	.word	0x40007000
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470060 	.word	0x42470060

08004c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0cc      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d90c      	bls.n	8004c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b63      	ldr	r3, [pc, #396]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0b8      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c64:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a58      	ldr	r2, [pc, #352]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c7c:	4b53      	ldr	r3, [pc, #332]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a52      	ldr	r2, [pc, #328]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b50      	ldr	r3, [pc, #320]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	494d      	ldr	r1, [pc, #308]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d044      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d119      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d003      	beq.n	8004cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e067      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cee:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4934      	ldr	r1, [pc, #208]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d00:	f7fc fe2e 	bl	8001960 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fc fe2a 	bl	8001960 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e04f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 020c 	and.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1eb      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d20c      	bcs.n	8004d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e032      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4916      	ldr	r1, [pc, #88]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	490e      	ldr	r1, [pc, #56]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d96:	f000 f821 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8004d9a:	4601      	mov	r1, r0
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	5cd3      	ldrb	r3, [r2, r3]
 8004daa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc fc3c 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023c00 	.word	0x40023c00
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0800d4c4 	.word	0x0800d4c4
 8004dd4:	20000000 	.word	0x20000000
 8004dd8:	20000004 	.word	0x20000004

08004ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df2:	4b63      	ldr	r3, [pc, #396]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d007      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x32>
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d008      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x38>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f040 80b4 	bne.w	8004f70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e0a:	60bb      	str	r3, [r7, #8]
       break;
 8004e0c:	e0b3      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0e:	4b5e      	ldr	r3, [pc, #376]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e10:	60bb      	str	r3, [r7, #8]
      break;
 8004e12:	e0b0      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e14:	4b5a      	ldr	r3, [pc, #360]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1e:	4b58      	ldr	r3, [pc, #352]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04a      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	f04f 0400 	mov.w	r4, #0
 8004e34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	ea03 0501 	and.w	r5, r3, r1
 8004e40:	ea04 0602 	and.w	r6, r4, r2
 8004e44:	4629      	mov	r1, r5
 8004e46:	4632      	mov	r2, r6
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f04f 0400 	mov.w	r4, #0
 8004e50:	0154      	lsls	r4, r2, #5
 8004e52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e56:	014b      	lsls	r3, r1, #5
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	1b49      	subs	r1, r1, r5
 8004e5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	f04f 0400 	mov.w	r4, #0
 8004e6a:	0194      	lsls	r4, r2, #6
 8004e6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e70:	018b      	lsls	r3, r1, #6
 8004e72:	1a5b      	subs	r3, r3, r1
 8004e74:	eb64 0402 	sbc.w	r4, r4, r2
 8004e78:	f04f 0100 	mov.w	r1, #0
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	00e2      	lsls	r2, r4, #3
 8004e82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e86:	00d9      	lsls	r1, r3, #3
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	195b      	adds	r3, r3, r5
 8004e8e:	eb44 0406 	adc.w	r4, r4, r6
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	0262      	lsls	r2, r4, #9
 8004e9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ea0:	0259      	lsls	r1, r3, #9
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f04f 0400 	mov.w	r4, #0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	f7fb f9ec 	bl	8000290 <__aeabi_uldivmod>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e049      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec0:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	099b      	lsrs	r3, r3, #6
 8004ec6:	f04f 0400 	mov.w	r4, #0
 8004eca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	ea03 0501 	and.w	r5, r3, r1
 8004ed6:	ea04 0602 	and.w	r6, r4, r2
 8004eda:	4629      	mov	r1, r5
 8004edc:	4632      	mov	r2, r6
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	f04f 0400 	mov.w	r4, #0
 8004ee6:	0154      	lsls	r4, r2, #5
 8004ee8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004eec:	014b      	lsls	r3, r1, #5
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	1b49      	subs	r1, r1, r5
 8004ef4:	eb62 0206 	sbc.w	r2, r2, r6
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	0194      	lsls	r4, r2, #6
 8004f02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f06:	018b      	lsls	r3, r1, #6
 8004f08:	1a5b      	subs	r3, r3, r1
 8004f0a:	eb64 0402 	sbc.w	r4, r4, r2
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	00e2      	lsls	r2, r4, #3
 8004f18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f1c:	00d9      	lsls	r1, r3, #3
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4614      	mov	r4, r2
 8004f22:	195b      	adds	r3, r3, r5
 8004f24:	eb44 0406 	adc.w	r4, r4, r6
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	02a2      	lsls	r2, r4, #10
 8004f32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f36:	0299      	lsls	r1, r3, #10
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4621      	mov	r1, r4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f04f 0400 	mov.w	r4, #0
 8004f46:	461a      	mov	r2, r3
 8004f48:	4623      	mov	r3, r4
 8004f4a:	f7fb f9a1 	bl	8000290 <__aeabi_uldivmod>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	3301      	adds	r3, #1
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	60bb      	str	r3, [r7, #8]
      break;
 8004f6e:	e002      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f72:	60bb      	str	r3, [r7, #8]
      break;
 8004f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f76:	68bb      	ldr	r3, [r7, #8]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f80:	40023800 	.word	0x40023800
 8004f84:	00f42400 	.word	0x00f42400
 8004f88:	007a1200 	.word	0x007a1200

08004f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000000 	.word	0x20000000

08004fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fa8:	f7ff fff0 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fac:	4601      	mov	r1, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0a9b      	lsrs	r3, r3, #10
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4a03      	ldr	r2, [pc, #12]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800d4d4 	.word	0x0800d4d4

08004fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fd0:	f7ff ffdc 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd4:	4601      	mov	r1, r0
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	0b5b      	lsrs	r3, r3, #13
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4a03      	ldr	r2, [pc, #12]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	0800d4d4 	.word	0x0800d4d4

08004ff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	220f      	movs	r2, #15
 8005002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005004:	4b12      	ldr	r3, [pc, #72]	; (8005050 <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0203 	and.w	r2, r3, #3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <HAL_RCC_GetClockConfig+0x5c>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_RCC_GetClockConfig+0x5c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCC_GetClockConfig+0x5c>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	08db      	lsrs	r3, r3, #3
 800502e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCC_GetClockConfig+0x60>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	40023c00 	.word	0x40023c00

08005058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005088:	2b00      	cmp	r3, #0
 800508a:	d075      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800508c:	4bad      	ldr	r3, [pc, #692]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005092:	f7fc fc65 	bl	8001960 <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800509a:	f7fc fc61 	bl	8001960 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e18b      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050ac:	4ba6      	ldr	r3, [pc, #664]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	019a      	lsls	r2, r3, #6
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	071b      	lsls	r3, r3, #28
 80050d0:	499d      	ldr	r1, [pc, #628]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01f      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050e4:	4b98      	ldr	r3, [pc, #608]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ea:	0f1b      	lsrs	r3, r3, #28
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	019a      	lsls	r2, r3, #6
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	431a      	orrs	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	071b      	lsls	r3, r3, #28
 8005104:	4990      	ldr	r1, [pc, #576]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800510c:	4b8e      	ldr	r3, [pc, #568]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800510e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005112:	f023 021f 	bic.w	r2, r3, #31
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	3b01      	subs	r3, #1
 800511c:	498a      	ldr	r1, [pc, #552]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	019a      	lsls	r2, r3, #6
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	061b      	lsls	r3, r3, #24
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	071b      	lsls	r3, r3, #28
 8005144:	4980      	ldr	r1, [pc, #512]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800514c:	4b7d      	ldr	r3, [pc, #500]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005152:	f7fc fc05 	bl	8001960 <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005158:	e008      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800515a:	f7fc fc01 	bl	8001960 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e12b      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800516c:	4b76      	ldr	r3, [pc, #472]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800518c:	2b00      	cmp	r3, #0
 800518e:	d079      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005190:	4b6e      	ldr	r3, [pc, #440]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005196:	f7fc fbe3 	bl	8001960 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800519e:	f7fc fbdf 	bl	8001960 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e109      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051b0:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051bc:	d0ef      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d020      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	0f1b      	lsrs	r3, r3, #28
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	019a      	lsls	r2, r3, #6
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	061b      	lsls	r3, r3, #24
 80051e4:	431a      	orrs	r2, r3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	071b      	lsls	r3, r3, #28
 80051ea:	4957      	ldr	r1, [pc, #348]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051f2:	4b55      	ldr	r3, [pc, #340]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	3b01      	subs	r3, #1
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	4950      	ldr	r1, [pc, #320]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01e      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005218:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	0e1b      	lsrs	r3, r3, #24
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	061b      	lsls	r3, r3, #24
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	071b      	lsls	r3, r3, #28
 8005238:	4943      	ldr	r1, [pc, #268]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005240:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005246:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	493e      	ldr	r1, [pc, #248]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800525c:	f7fc fb80 	bl	8001960 <HAL_GetTick>
 8005260:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005264:	f7fc fb7c 	bl	8001960 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e0a6      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005276:	4b34      	ldr	r3, [pc, #208]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005282:	d1ef      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 808d 	beq.w	80053ac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052ae:	4b28      	ldr	r3, [pc, #160]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a27      	ldr	r2, [pc, #156]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052ba:	f7fc fb51 	bl	8001960 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052c2:	f7fc fb4d 	bl	8001960 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e077      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052d4:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d039      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d032      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005308:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005314:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d11e      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005326:	f7fc fb1b 	bl	8001960 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	e014      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fc fb17 	bl	8001960 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d90b      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e03f      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005344:	42470068 	.word	0x42470068
 8005348:	40023800 	.word	0x40023800
 800534c:	42470070 	.word	0x42470070
 8005350:	40007000 	.word	0x40007000
 8005354:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005358:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0e4      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005370:	d10d      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005386:	4911      	ldr	r1, [pc, #68]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]
 800538c:	e005      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005394:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005398:	6093      	str	r3, [r2, #8]
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800539c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	4909      	ldr	r1, [pc, #36]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	424711e0 	.word	0x424711e0

080053d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e025      	b.n	8005434 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fc f90f 	bl	8001620 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f001 f921 	bl	800665c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	461a      	mov	r2, r3
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	f001 f98c 	bl	8006742 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e056      	b.n	80054fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fb ff95 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005484:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	ea42 0103 	orr.w	r1, r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	f003 0104 	and.w	r1, r3, #4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e01d      	b.n	8005552 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb ff7c 	bl	8001428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 fa14 	bl	8005970 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d007      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d122      	bne.n	80055fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d11b      	bne.n	80055fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0202 	mvn.w	r2, #2
 80055ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f9a5 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 80055ea:	e005      	b.n	80055f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f997 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9a8 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d122      	bne.n	8005652 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b04      	cmp	r3, #4
 8005618:	d11b      	bne.n	8005652 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0204 	mvn.w	r2, #4
 8005622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f97b 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 800563e:	e005      	b.n	800564c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f96d 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f97e 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d122      	bne.n	80056a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b08      	cmp	r3, #8
 800566c:	d11b      	bne.n	80056a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f06f 0208 	mvn.w	r2, #8
 8005676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2204      	movs	r2, #4
 800567c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f951 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 8005692:	e005      	b.n	80056a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f943 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f954 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d122      	bne.n	80056fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2b10      	cmp	r3, #16
 80056c0:	d11b      	bne.n	80056fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f06f 0210 	mvn.w	r2, #16
 80056ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2208      	movs	r2, #8
 80056d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f927 	bl	8005934 <HAL_TIM_IC_CaptureCallback>
 80056e6:	e005      	b.n	80056f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f919 	bl	8005920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f92a 	bl	8005948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10e      	bne.n	8005726 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0201 	mvn.w	r2, #1
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fb fbf5 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d10e      	bne.n	8005752 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d107      	bne.n	8005752 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 facf 	bl	8005cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d10e      	bne.n	800577e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f8ef 	bl	800595c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b20      	cmp	r3, #32
 800578a:	d10e      	bne.n	80057aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b20      	cmp	r3, #32
 8005798:	d107      	bne.n	80057aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f06f 0220 	mvn.w	r2, #32
 80057a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa99 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_ConfigClockSource+0x18>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e0a6      	b.n	8005918 <HAL_TIM_ConfigClockSource+0x166>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d067      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x120>
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d80b      	bhi.n	800581e <HAL_TIM_ConfigClockSource+0x6c>
 8005806:	2b10      	cmp	r3, #16
 8005808:	d073      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x140>
 800580a:	2b10      	cmp	r3, #16
 800580c:	d802      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x62>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d06f      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005812:	e078      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005814:	2b20      	cmp	r3, #32
 8005816:	d06c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x140>
 8005818:	2b30      	cmp	r3, #48	; 0x30
 800581a:	d06a      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800581c:	e073      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800581e:	2b70      	cmp	r3, #112	; 0x70
 8005820:	d00d      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x8c>
 8005822:	2b70      	cmp	r3, #112	; 0x70
 8005824:	d804      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x7e>
 8005826:	2b50      	cmp	r3, #80	; 0x50
 8005828:	d033      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0xe0>
 800582a:	2b60      	cmp	r3, #96	; 0x60
 800582c:	d041      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800582e:	e06a      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005834:	d066      	beq.n	8005904 <HAL_TIM_ConfigClockSource+0x152>
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583a:	d017      	beq.n	800586c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800583c:	e063      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6899      	ldr	r1, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f000 f9a9 	bl	8005ba4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005860:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	609a      	str	r2, [r3, #8]
      break;
 800586a:	e04c      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6899      	ldr	r1, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f000 f992 	bl	8005ba4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588e:	609a      	str	r2, [r3, #8]
      break;
 8005890:	e039      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 f906 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2150      	movs	r1, #80	; 0x50
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f95f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80058b0:	e029      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f925 	bl	8005b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2160      	movs	r1, #96	; 0x60
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f94f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80058d0:	e019      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f8e6 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2140      	movs	r1, #64	; 0x40
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f93f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80058f0:	e009      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f000 f936 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005902:	e000      	b.n	8005906 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005904:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <TIM_Base_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d00f      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3d      	ldr	r2, [pc, #244]	; (8005a88 <TIM_Base_SetConfig+0x118>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3c      	ldr	r2, [pc, #240]	; (8005a8c <TIM_Base_SetConfig+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3b      	ldr	r2, [pc, #236]	; (8005a90 <TIM_Base_SetConfig+0x120>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3a      	ldr	r2, [pc, #232]	; (8005a94 <TIM_Base_SetConfig+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d108      	bne.n	80059c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2f      	ldr	r2, [pc, #188]	; (8005a84 <TIM_Base_SetConfig+0x114>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02b      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d027      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2c      	ldr	r2, [pc, #176]	; (8005a88 <TIM_Base_SetConfig+0x118>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d023      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <TIM_Base_SetConfig+0x11c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01f      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <TIM_Base_SetConfig+0x120>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01b      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <TIM_Base_SetConfig+0x124>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d017      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <TIM_Base_SetConfig+0x128>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <TIM_Base_SetConfig+0x12c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a26      	ldr	r2, [pc, #152]	; (8005aa0 <TIM_Base_SetConfig+0x130>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <TIM_Base_SetConfig+0x134>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <TIM_Base_SetConfig+0x138>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a23      	ldr	r2, [pc, #140]	; (8005aac <TIM_Base_SetConfig+0x13c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <TIM_Base_SetConfig+0x114>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_Base_SetConfig+0xf8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <TIM_Base_SetConfig+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d103      	bne.n	8005a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	615a      	str	r2, [r3, #20]
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40010400 	.word	0x40010400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40001800 	.word	0x40001800
 8005aa8:	40001c00 	.word	0x40001c00
 8005aac:	40002000 	.word	0x40002000

08005ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 030a 	bic.w	r3, r3, #10
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f023 0210 	bic.w	r2, r3, #16
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f043 0307 	orr.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e05a      	b.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d01d      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1a      	ldr	r2, [pc, #104]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10c      	bne.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40001800 	.word	0x40001800

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e03f      	b.n	8005d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fb9e 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	; 0x24
 8005d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f90b 	bl	8005f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af02      	add	r7, sp, #8
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	f040 8083 	bne.w	8005ec6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_UART_Transmit+0x2e>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e07b      	b.n	8005ec8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Transmit+0x40>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e074      	b.n	8005ec8 <HAL_UART_Transmit+0x12a>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2221      	movs	r2, #33	; 0x21
 8005df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005df4:	f7fb fdb4 	bl	8001960 <HAL_GetTick>
 8005df8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005e0e:	e042      	b.n	8005e96 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e26:	d122      	bne.n	8005e6e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f84c 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e042      	b.n	8005ec8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	3302      	adds	r3, #2
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	e017      	b.n	8005e96 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	e013      	b.n	8005e96 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2200      	movs	r2, #0
 8005e76:	2180      	movs	r1, #128	; 0x80
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f829 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e01f      	b.n	8005ec8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	60ba      	str	r2, [r7, #8]
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1b7      	bne.n	8005e10 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2140      	movs	r1, #64	; 0x40
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f810 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e006      	b.n	8005ec8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e000      	b.n	8005ec8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ec6:	2302      	movs	r3, #2
  }
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee0:	e02c      	b.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d028      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef0:	f7fb fd36 	bl	8001960 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d21d      	bcs.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e00f      	b.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d0c3      	beq.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005fa6:	f023 030c 	bic.w	r3, r3, #12
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd2:	f040 818b 	bne.w	80062ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4ac1      	ldr	r2, [pc, #772]	; (80062e0 <UART_SetConfig+0x37c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d005      	beq.n	8005fec <UART_SetConfig+0x88>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4abf      	ldr	r2, [pc, #764]	; (80062e4 <UART_SetConfig+0x380>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	f040 80bd 	bne.w	8006166 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fe ffee 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8005ff0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	461d      	mov	r5, r3
 8005ff6:	f04f 0600 	mov.w	r6, #0
 8005ffa:	46a8      	mov	r8, r5
 8005ffc:	46b1      	mov	r9, r6
 8005ffe:	eb18 0308 	adds.w	r3, r8, r8
 8006002:	eb49 0409 	adc.w	r4, r9, r9
 8006006:	4698      	mov	r8, r3
 8006008:	46a1      	mov	r9, r4
 800600a:	eb18 0805 	adds.w	r8, r8, r5
 800600e:	eb49 0906 	adc.w	r9, r9, r6
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800601e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006022:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006026:	4688      	mov	r8, r1
 8006028:	4691      	mov	r9, r2
 800602a:	eb18 0005 	adds.w	r0, r8, r5
 800602e:	eb49 0106 	adc.w	r1, r9, r6
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	461d      	mov	r5, r3
 8006038:	f04f 0600 	mov.w	r6, #0
 800603c:	196b      	adds	r3, r5, r5
 800603e:	eb46 0406 	adc.w	r4, r6, r6
 8006042:	461a      	mov	r2, r3
 8006044:	4623      	mov	r3, r4
 8006046:	f7fa f923 	bl	8000290 <__aeabi_uldivmod>
 800604a:	4603      	mov	r3, r0
 800604c:	460c      	mov	r4, r1
 800604e:	461a      	mov	r2, r3
 8006050:	4ba5      	ldr	r3, [pc, #660]	; (80062e8 <UART_SetConfig+0x384>)
 8006052:	fba3 2302 	umull	r2, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	461d      	mov	r5, r3
 8006060:	f04f 0600 	mov.w	r6, #0
 8006064:	46a9      	mov	r9, r5
 8006066:	46b2      	mov	sl, r6
 8006068:	eb19 0309 	adds.w	r3, r9, r9
 800606c:	eb4a 040a 	adc.w	r4, sl, sl
 8006070:	4699      	mov	r9, r3
 8006072:	46a2      	mov	sl, r4
 8006074:	eb19 0905 	adds.w	r9, r9, r5
 8006078:	eb4a 0a06 	adc.w	sl, sl, r6
 800607c:	f04f 0100 	mov.w	r1, #0
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800608c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006090:	4689      	mov	r9, r1
 8006092:	4692      	mov	sl, r2
 8006094:	eb19 0005 	adds.w	r0, r9, r5
 8006098:	eb4a 0106 	adc.w	r1, sl, r6
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	461d      	mov	r5, r3
 80060a2:	f04f 0600 	mov.w	r6, #0
 80060a6:	196b      	adds	r3, r5, r5
 80060a8:	eb46 0406 	adc.w	r4, r6, r6
 80060ac:	461a      	mov	r2, r3
 80060ae:	4623      	mov	r3, r4
 80060b0:	f7fa f8ee 	bl	8000290 <__aeabi_uldivmod>
 80060b4:	4603      	mov	r3, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b8b      	ldr	r3, [pc, #556]	; (80062e8 <UART_SetConfig+0x384>)
 80060bc:	fba3 1302 	umull	r1, r3, r3, r2
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	2164      	movs	r1, #100	; 0x64
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	3332      	adds	r3, #50	; 0x32
 80060ce:	4a86      	ldr	r2, [pc, #536]	; (80062e8 <UART_SetConfig+0x384>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060dc:	4498      	add	r8, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	461d      	mov	r5, r3
 80060e2:	f04f 0600 	mov.w	r6, #0
 80060e6:	46a9      	mov	r9, r5
 80060e8:	46b2      	mov	sl, r6
 80060ea:	eb19 0309 	adds.w	r3, r9, r9
 80060ee:	eb4a 040a 	adc.w	r4, sl, sl
 80060f2:	4699      	mov	r9, r3
 80060f4:	46a2      	mov	sl, r4
 80060f6:	eb19 0905 	adds.w	r9, r9, r5
 80060fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800610e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006112:	4689      	mov	r9, r1
 8006114:	4692      	mov	sl, r2
 8006116:	eb19 0005 	adds.w	r0, r9, r5
 800611a:	eb4a 0106 	adc.w	r1, sl, r6
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	461d      	mov	r5, r3
 8006124:	f04f 0600 	mov.w	r6, #0
 8006128:	196b      	adds	r3, r5, r5
 800612a:	eb46 0406 	adc.w	r4, r6, r6
 800612e:	461a      	mov	r2, r3
 8006130:	4623      	mov	r3, r4
 8006132:	f7fa f8ad 	bl	8000290 <__aeabi_uldivmod>
 8006136:	4603      	mov	r3, r0
 8006138:	460c      	mov	r4, r1
 800613a:	461a      	mov	r2, r3
 800613c:	4b6a      	ldr	r3, [pc, #424]	; (80062e8 <UART_SetConfig+0x384>)
 800613e:	fba3 1302 	umull	r1, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2164      	movs	r1, #100	; 0x64
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	3332      	adds	r3, #50	; 0x32
 8006150:	4a65      	ldr	r2, [pc, #404]	; (80062e8 <UART_SetConfig+0x384>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f003 0207 	and.w	r2, r3, #7
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4442      	add	r2, r8
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	e26f      	b.n	8006646 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006166:	f7fe ff1d 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 800616a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	461d      	mov	r5, r3
 8006170:	f04f 0600 	mov.w	r6, #0
 8006174:	46a8      	mov	r8, r5
 8006176:	46b1      	mov	r9, r6
 8006178:	eb18 0308 	adds.w	r3, r8, r8
 800617c:	eb49 0409 	adc.w	r4, r9, r9
 8006180:	4698      	mov	r8, r3
 8006182:	46a1      	mov	r9, r4
 8006184:	eb18 0805 	adds.w	r8, r8, r5
 8006188:	eb49 0906 	adc.w	r9, r9, r6
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006198:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800619c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061a0:	4688      	mov	r8, r1
 80061a2:	4691      	mov	r9, r2
 80061a4:	eb18 0005 	adds.w	r0, r8, r5
 80061a8:	eb49 0106 	adc.w	r1, r9, r6
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	461d      	mov	r5, r3
 80061b2:	f04f 0600 	mov.w	r6, #0
 80061b6:	196b      	adds	r3, r5, r5
 80061b8:	eb46 0406 	adc.w	r4, r6, r6
 80061bc:	461a      	mov	r2, r3
 80061be:	4623      	mov	r3, r4
 80061c0:	f7fa f866 	bl	8000290 <__aeabi_uldivmod>
 80061c4:	4603      	mov	r3, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	461a      	mov	r2, r3
 80061ca:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <UART_SetConfig+0x384>)
 80061cc:	fba3 2302 	umull	r2, r3, r3, r2
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	461d      	mov	r5, r3
 80061da:	f04f 0600 	mov.w	r6, #0
 80061de:	46a9      	mov	r9, r5
 80061e0:	46b2      	mov	sl, r6
 80061e2:	eb19 0309 	adds.w	r3, r9, r9
 80061e6:	eb4a 040a 	adc.w	r4, sl, sl
 80061ea:	4699      	mov	r9, r3
 80061ec:	46a2      	mov	sl, r4
 80061ee:	eb19 0905 	adds.w	r9, r9, r5
 80061f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80061f6:	f04f 0100 	mov.w	r1, #0
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800620a:	4689      	mov	r9, r1
 800620c:	4692      	mov	sl, r2
 800620e:	eb19 0005 	adds.w	r0, r9, r5
 8006212:	eb4a 0106 	adc.w	r1, sl, r6
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	461d      	mov	r5, r3
 800621c:	f04f 0600 	mov.w	r6, #0
 8006220:	196b      	adds	r3, r5, r5
 8006222:	eb46 0406 	adc.w	r4, r6, r6
 8006226:	461a      	mov	r2, r3
 8006228:	4623      	mov	r3, r4
 800622a:	f7fa f831 	bl	8000290 <__aeabi_uldivmod>
 800622e:	4603      	mov	r3, r0
 8006230:	460c      	mov	r4, r1
 8006232:	461a      	mov	r2, r3
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <UART_SetConfig+0x384>)
 8006236:	fba3 1302 	umull	r1, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2164      	movs	r1, #100	; 0x64
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	3332      	adds	r3, #50	; 0x32
 8006248:	4a27      	ldr	r2, [pc, #156]	; (80062e8 <UART_SetConfig+0x384>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006256:	4498      	add	r8, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	461d      	mov	r5, r3
 800625c:	f04f 0600 	mov.w	r6, #0
 8006260:	46a9      	mov	r9, r5
 8006262:	46b2      	mov	sl, r6
 8006264:	eb19 0309 	adds.w	r3, r9, r9
 8006268:	eb4a 040a 	adc.w	r4, sl, sl
 800626c:	4699      	mov	r9, r3
 800626e:	46a2      	mov	sl, r4
 8006270:	eb19 0905 	adds.w	r9, r9, r5
 8006274:	eb4a 0a06 	adc.w	sl, sl, r6
 8006278:	f04f 0100 	mov.w	r1, #0
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006284:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006288:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800628c:	4689      	mov	r9, r1
 800628e:	4692      	mov	sl, r2
 8006290:	eb19 0005 	adds.w	r0, r9, r5
 8006294:	eb4a 0106 	adc.w	r1, sl, r6
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	461d      	mov	r5, r3
 800629e:	f04f 0600 	mov.w	r6, #0
 80062a2:	196b      	adds	r3, r5, r5
 80062a4:	eb46 0406 	adc.w	r4, r6, r6
 80062a8:	461a      	mov	r2, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	f7f9 fff0 	bl	8000290 <__aeabi_uldivmod>
 80062b0:	4603      	mov	r3, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	461a      	mov	r2, r3
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <UART_SetConfig+0x384>)
 80062b8:	fba3 1302 	umull	r1, r3, r3, r2
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	2164      	movs	r1, #100	; 0x64
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	3332      	adds	r3, #50	; 0x32
 80062ca:	4a07      	ldr	r2, [pc, #28]	; (80062e8 <UART_SetConfig+0x384>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	f003 0207 	and.w	r2, r3, #7
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4442      	add	r2, r8
 80062dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80062de:	e1b2      	b.n	8006646 <UART_SetConfig+0x6e2>
 80062e0:	40011000 	.word	0x40011000
 80062e4:	40011400 	.word	0x40011400
 80062e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4ad7      	ldr	r2, [pc, #860]	; (8006650 <UART_SetConfig+0x6ec>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d005      	beq.n	8006302 <UART_SetConfig+0x39e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4ad6      	ldr	r2, [pc, #856]	; (8006654 <UART_SetConfig+0x6f0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	f040 80d1 	bne.w	80064a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006302:	f7fe fe63 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 8006306:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	469a      	mov	sl, r3
 800630c:	f04f 0b00 	mov.w	fp, #0
 8006310:	46d0      	mov	r8, sl
 8006312:	46d9      	mov	r9, fp
 8006314:	eb18 0308 	adds.w	r3, r8, r8
 8006318:	eb49 0409 	adc.w	r4, r9, r9
 800631c:	4698      	mov	r8, r3
 800631e:	46a1      	mov	r9, r4
 8006320:	eb18 080a 	adds.w	r8, r8, sl
 8006324:	eb49 090b 	adc.w	r9, r9, fp
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006334:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006338:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800633c:	4688      	mov	r8, r1
 800633e:	4691      	mov	r9, r2
 8006340:	eb1a 0508 	adds.w	r5, sl, r8
 8006344:	eb4b 0609 	adc.w	r6, fp, r9
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4619      	mov	r1, r3
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	f04f 0400 	mov.w	r4, #0
 800635a:	0094      	lsls	r4, r2, #2
 800635c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006360:	008b      	lsls	r3, r1, #2
 8006362:	461a      	mov	r2, r3
 8006364:	4623      	mov	r3, r4
 8006366:	4628      	mov	r0, r5
 8006368:	4631      	mov	r1, r6
 800636a:	f7f9 ff91 	bl	8000290 <__aeabi_uldivmod>
 800636e:	4603      	mov	r3, r0
 8006370:	460c      	mov	r4, r1
 8006372:	461a      	mov	r2, r3
 8006374:	4bb8      	ldr	r3, [pc, #736]	; (8006658 <UART_SetConfig+0x6f4>)
 8006376:	fba3 2302 	umull	r2, r3, r3, r2
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	469b      	mov	fp, r3
 8006384:	f04f 0c00 	mov.w	ip, #0
 8006388:	46d9      	mov	r9, fp
 800638a:	46e2      	mov	sl, ip
 800638c:	eb19 0309 	adds.w	r3, r9, r9
 8006390:	eb4a 040a 	adc.w	r4, sl, sl
 8006394:	4699      	mov	r9, r3
 8006396:	46a2      	mov	sl, r4
 8006398:	eb19 090b 	adds.w	r9, r9, fp
 800639c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063a0:	f04f 0100 	mov.w	r1, #0
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063b4:	4689      	mov	r9, r1
 80063b6:	4692      	mov	sl, r2
 80063b8:	eb1b 0509 	adds.w	r5, fp, r9
 80063bc:	eb4c 060a 	adc.w	r6, ip, sl
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4619      	mov	r1, r3
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	f04f 0400 	mov.w	r4, #0
 80063d2:	0094      	lsls	r4, r2, #2
 80063d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063d8:	008b      	lsls	r3, r1, #2
 80063da:	461a      	mov	r2, r3
 80063dc:	4623      	mov	r3, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	4631      	mov	r1, r6
 80063e2:	f7f9 ff55 	bl	8000290 <__aeabi_uldivmod>
 80063e6:	4603      	mov	r3, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	461a      	mov	r2, r3
 80063ec:	4b9a      	ldr	r3, [pc, #616]	; (8006658 <UART_SetConfig+0x6f4>)
 80063ee:	fba3 1302 	umull	r1, r3, r3, r2
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2164      	movs	r1, #100	; 0x64
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	3332      	adds	r3, #50	; 0x32
 8006400:	4a95      	ldr	r2, [pc, #596]	; (8006658 <UART_SetConfig+0x6f4>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800640c:	4498      	add	r8, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	469b      	mov	fp, r3
 8006412:	f04f 0c00 	mov.w	ip, #0
 8006416:	46d9      	mov	r9, fp
 8006418:	46e2      	mov	sl, ip
 800641a:	eb19 0309 	adds.w	r3, r9, r9
 800641e:	eb4a 040a 	adc.w	r4, sl, sl
 8006422:	4699      	mov	r9, r3
 8006424:	46a2      	mov	sl, r4
 8006426:	eb19 090b 	adds.w	r9, r9, fp
 800642a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800642e:	f04f 0100 	mov.w	r1, #0
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800643a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800643e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006442:	4689      	mov	r9, r1
 8006444:	4692      	mov	sl, r2
 8006446:	eb1b 0509 	adds.w	r5, fp, r9
 800644a:	eb4c 060a 	adc.w	r6, ip, sl
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4619      	mov	r1, r3
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	f04f 0400 	mov.w	r4, #0
 8006460:	0094      	lsls	r4, r2, #2
 8006462:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006466:	008b      	lsls	r3, r1, #2
 8006468:	461a      	mov	r2, r3
 800646a:	4623      	mov	r3, r4
 800646c:	4628      	mov	r0, r5
 800646e:	4631      	mov	r1, r6
 8006470:	f7f9 ff0e 	bl	8000290 <__aeabi_uldivmod>
 8006474:	4603      	mov	r3, r0
 8006476:	460c      	mov	r4, r1
 8006478:	461a      	mov	r2, r3
 800647a:	4b77      	ldr	r3, [pc, #476]	; (8006658 <UART_SetConfig+0x6f4>)
 800647c:	fba3 1302 	umull	r1, r3, r3, r2
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	2164      	movs	r1, #100	; 0x64
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	3332      	adds	r3, #50	; 0x32
 800648e:	4a72      	ldr	r2, [pc, #456]	; (8006658 <UART_SetConfig+0x6f4>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4442      	add	r2, r8
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	e0d0      	b.n	8006646 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80064a4:	f7fe fd7e 	bl	8004fa4 <HAL_RCC_GetPCLK1Freq>
 80064a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	469a      	mov	sl, r3
 80064ae:	f04f 0b00 	mov.w	fp, #0
 80064b2:	46d0      	mov	r8, sl
 80064b4:	46d9      	mov	r9, fp
 80064b6:	eb18 0308 	adds.w	r3, r8, r8
 80064ba:	eb49 0409 	adc.w	r4, r9, r9
 80064be:	4698      	mov	r8, r3
 80064c0:	46a1      	mov	r9, r4
 80064c2:	eb18 080a 	adds.w	r8, r8, sl
 80064c6:	eb49 090b 	adc.w	r9, r9, fp
 80064ca:	f04f 0100 	mov.w	r1, #0
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064de:	4688      	mov	r8, r1
 80064e0:	4691      	mov	r9, r2
 80064e2:	eb1a 0508 	adds.w	r5, sl, r8
 80064e6:	eb4b 0609 	adc.w	r6, fp, r9
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4619      	mov	r1, r3
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	f04f 0400 	mov.w	r4, #0
 80064fc:	0094      	lsls	r4, r2, #2
 80064fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006502:	008b      	lsls	r3, r1, #2
 8006504:	461a      	mov	r2, r3
 8006506:	4623      	mov	r3, r4
 8006508:	4628      	mov	r0, r5
 800650a:	4631      	mov	r1, r6
 800650c:	f7f9 fec0 	bl	8000290 <__aeabi_uldivmod>
 8006510:	4603      	mov	r3, r0
 8006512:	460c      	mov	r4, r1
 8006514:	461a      	mov	r2, r3
 8006516:	4b50      	ldr	r3, [pc, #320]	; (8006658 <UART_SetConfig+0x6f4>)
 8006518:	fba3 2302 	umull	r2, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	469b      	mov	fp, r3
 8006526:	f04f 0c00 	mov.w	ip, #0
 800652a:	46d9      	mov	r9, fp
 800652c:	46e2      	mov	sl, ip
 800652e:	eb19 0309 	adds.w	r3, r9, r9
 8006532:	eb4a 040a 	adc.w	r4, sl, sl
 8006536:	4699      	mov	r9, r3
 8006538:	46a2      	mov	sl, r4
 800653a:	eb19 090b 	adds.w	r9, r9, fp
 800653e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800654e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006552:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006556:	4689      	mov	r9, r1
 8006558:	4692      	mov	sl, r2
 800655a:	eb1b 0509 	adds.w	r5, fp, r9
 800655e:	eb4c 060a 	adc.w	r6, ip, sl
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4619      	mov	r1, r3
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	f04f 0400 	mov.w	r4, #0
 8006574:	0094      	lsls	r4, r2, #2
 8006576:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800657a:	008b      	lsls	r3, r1, #2
 800657c:	461a      	mov	r2, r3
 800657e:	4623      	mov	r3, r4
 8006580:	4628      	mov	r0, r5
 8006582:	4631      	mov	r1, r6
 8006584:	f7f9 fe84 	bl	8000290 <__aeabi_uldivmod>
 8006588:	4603      	mov	r3, r0
 800658a:	460c      	mov	r4, r1
 800658c:	461a      	mov	r2, r3
 800658e:	4b32      	ldr	r3, [pc, #200]	; (8006658 <UART_SetConfig+0x6f4>)
 8006590:	fba3 1302 	umull	r1, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	2164      	movs	r1, #100	; 0x64
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	3332      	adds	r3, #50	; 0x32
 80065a2:	4a2d      	ldr	r2, [pc, #180]	; (8006658 <UART_SetConfig+0x6f4>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ae:	4498      	add	r8, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	469b      	mov	fp, r3
 80065b4:	f04f 0c00 	mov.w	ip, #0
 80065b8:	46d9      	mov	r9, fp
 80065ba:	46e2      	mov	sl, ip
 80065bc:	eb19 0309 	adds.w	r3, r9, r9
 80065c0:	eb4a 040a 	adc.w	r4, sl, sl
 80065c4:	4699      	mov	r9, r3
 80065c6:	46a2      	mov	sl, r4
 80065c8:	eb19 090b 	adds.w	r9, r9, fp
 80065cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065e4:	4689      	mov	r9, r1
 80065e6:	4692      	mov	sl, r2
 80065e8:	eb1b 0509 	adds.w	r5, fp, r9
 80065ec:	eb4c 060a 	adc.w	r6, ip, sl
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4619      	mov	r1, r3
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	f04f 0400 	mov.w	r4, #0
 8006602:	0094      	lsls	r4, r2, #2
 8006604:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006608:	008b      	lsls	r3, r1, #2
 800660a:	461a      	mov	r2, r3
 800660c:	4623      	mov	r3, r4
 800660e:	4628      	mov	r0, r5
 8006610:	4631      	mov	r1, r6
 8006612:	f7f9 fe3d 	bl	8000290 <__aeabi_uldivmod>
 8006616:	4603      	mov	r3, r0
 8006618:	460c      	mov	r4, r1
 800661a:	461a      	mov	r2, r3
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <UART_SetConfig+0x6f4>)
 800661e:	fba3 1302 	umull	r1, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2164      	movs	r1, #100	; 0x64
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	3332      	adds	r3, #50	; 0x32
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <UART_SetConfig+0x6f4>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4442      	add	r2, r8
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	e7ff      	b.n	8006646 <UART_SetConfig+0x6e2>
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	40011000 	.word	0x40011000
 8006654:	40011400 	.word	0x40011400
 8006658:	51eb851f 	.word	0x51eb851f

0800665c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d029      	beq.n	80066ca <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006686:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006690:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006696:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800669c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80066a2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80066a8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80066ae:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80066b4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80066ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e034      	b.n	8006734 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80066e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80066e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80066fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066fe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006708:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800670e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006714:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800671a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006720:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	4313      	orrs	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006742:	b480      	push	{r7}
 8006744:	b087      	sub	sp, #28
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d02e      	beq.n	80067ba <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006768:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	3b01      	subs	r3, #1
 8006776:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006778:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	3b01      	subs	r3, #1
 8006780:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006782:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	3b01      	subs	r3, #1
 800678a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800678c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	3b01      	subs	r3, #1
 8006794:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006796:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	3b01      	subs	r3, #1
 800679e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80067a0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80067aa:	4313      	orrs	r3, r2
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	e03b      	b.n	8006832 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ca:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	3b01      	subs	r3, #1
 80067da:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80067dc:	4313      	orrs	r3, r2
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80067f0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006800:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	3b01      	subs	r3, #1
 8006808:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800680a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	3b01      	subs	r3, #1
 8006812:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006814:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	3b01      	subs	r3, #1
 800681c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800681e:	4313      	orrs	r3, r2
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006840:	b084      	sub	sp, #16
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	f107 001c 	add.w	r0, r7, #28
 800684e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2b01      	cmp	r3, #1
 8006856:	d122      	bne.n	800689e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800686c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d105      	bne.n	8006892 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f94a 	bl	8006b2c <USB_CoreReset>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
 800689c:	e01a      	b.n	80068d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f93e 	bl	8006b2c <USB_CoreReset>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
 80068c6:	e005      	b.n	80068d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d10b      	bne.n	80068f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f043 0206 	orr.w	r2, r3, #6
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068fe:	b004      	add	sp, #16
 8006900:	4770      	bx	lr

08006902 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f043 0201 	orr.w	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f023 0201 	bic.w	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d106      	bne.n	8006972 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	e00b      	b.n	800698a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60da      	str	r2, [r3, #12]
 8006984:	e001      	b.n	800698a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e003      	b.n	8006992 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800698a:	2032      	movs	r0, #50	; 0x32
 800698c:	f7fa fff4 	bl	8001978 <HAL_Delay>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	019b      	lsls	r3, r3, #6
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <USB_FlushTxFifo+0x48>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d0f0      	beq.n	80069b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	00030d40 	.word	0x00030d40

080069e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2210      	movs	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <USB_FlushRxFifo+0x40>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e006      	b.n	8006a1a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d0f0      	beq.n	80069fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	00030d40 	.word	0x00030d40

08006a2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	4611      	mov	r1, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	71fb      	strb	r3, [r7, #7]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d11a      	bne.n	8006a88 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a52:	88bb      	ldrh	r3, [r7, #4]
 8006a54:	3303      	adds	r3, #3
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e00f      	b.n	8006a80 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	031a      	lsls	r2, r3, #12
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	3304      	adds	r3, #4
 8006a78:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d3eb      	bcc.n	8006a60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3724      	adds	r7, #36	; 0x24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b089      	sub	sp, #36	; 0x24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	e00b      	b.n	8006ad2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3ef      	bcc.n	8006aba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3724      	adds	r7, #36	; 0x24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4013      	ands	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <USB_CoreReset+0x64>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e01b      	b.n	8006b82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	daf2      	bge.n	8006b38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f043 0201 	orr.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <USB_CoreReset+0x64>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e006      	b.n	8006b82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d0f0      	beq.n	8006b62 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	00030d40 	.word	0x00030d40

08006b94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b94:	b084      	sub	sp, #16
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	f107 001c 	add.w	r0, r7, #28
 8006ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10a      	bne.n	8006c02 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e014      	b.n	8006c2c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c10:	f023 0304 	bic.w	r3, r3, #4
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e009      	b.n	8006c2c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c26:	f023 0304 	bic.w	r3, r3, #4
 8006c2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006c2c:	2110      	movs	r1, #16
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff feb4 	bl	800699c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fed7 	bl	80069e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	e015      	b.n	8006c6c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c60:	461a      	mov	r2, r3
 8006c62:	2300      	movs	r3, #0
 8006c64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d3e5      	bcc.n	8006c40 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8ac 	bl	8006dd4 <USB_DriveVbus>

  HAL_Delay(200U);
 8006c7c:	20c8      	movs	r0, #200	; 0xc8
 8006c7e:	f7fa fe7b 	bl	8001978 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ca2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <USB_HostInit+0x164>)
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <USB_HostInit+0x168>)
 8006cae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006cb2:	e009      	b.n	8006cc8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a10      	ldr	r2, [pc, #64]	; (8006d00 <USB_HostInit+0x16c>)
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <USB_HostInit+0x170>)
 8006cc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f043 0210 	orr.w	r2, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <USB_HostInit+0x174>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cf2:	b004      	add	sp, #16
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	01000200 	.word	0x01000200
 8006cfc:	00e00300 	.word	0x00e00300
 8006d00:	00600080 	.word	0x00600080
 8006d04:	004000e0 	.word	0x004000e0
 8006d08:	a3200008 	.word	0xa3200008

08006d0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d44:	4313      	orrs	r3, r2
 8006d46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d54:	461a      	mov	r2, r3
 8006d56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d5a:	6053      	str	r3, [r2, #4]
 8006d5c:	e009      	b.n	8006d72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d106      	bne.n	8006d72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006d70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006da0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006db0:	2064      	movs	r0, #100	; 0x64
 8006db2:	f7fa fde1 	bl	8001978 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006dc4:	200a      	movs	r0, #10
 8006dc6:	f7fa fdd7 	bl	8001978 <HAL_Delay>

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006df8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <USB_DriveVbus+0x44>
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d106      	bne.n	8006e18 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e16:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e22:	d109      	bne.n	8006e38 <USB_DriveVbus+0x64>
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e36:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	0c5b      	lsrs	r3, r3, #17
 8006e64:	f003 0303 	and.w	r3, r3, #3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	b29b      	uxth	r3, r3
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	70fb      	strb	r3, [r7, #3]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70bb      	strb	r3, [r7, #2]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d87e      	bhi.n	8006fd4 <USB_HC_Init+0x13c>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <USB_HC_Init+0x44>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006f97 	.word	0x08006f97
 8006ee4:	08006eed 	.word	0x08006eed
 8006ee8:	08006f59 	.word	0x08006f59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f240 439d 	movw	r3, #1181	; 0x49d
 8006efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da10      	bge.n	8006f2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f26:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006f28:	e057      	b.n	8006fda <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d051      	beq.n	8006fda <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f54:	60d3      	str	r3, [r2, #12]
      break;
 8006f56:	e040      	b.n	8006fda <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f64:	461a      	mov	r2, r3
 8006f66:	f240 639d 	movw	r3, #1693	; 0x69d
 8006f6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da34      	bge.n	8006fde <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f92:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006f94:	e023      	b.n	8006fde <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f240 2325 	movw	r3, #549	; 0x225
 8006fa8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006faa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da17      	bge.n	8006fe2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	78fa      	ldrb	r2, [r7, #3]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fcc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006fd0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006fd2:	e006      	b.n	8006fe2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd8:	e004      	b.n	8006fe4 <USB_HC_Init+0x14c>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <USB_HC_Init+0x14c>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <USB_HC_Init+0x14c>
      break;
 8006fe2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff8:	68b9      	ldr	r1, [r7, #8]
 8006ffa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ffe:	4313      	orrs	r3, r2
 8007000:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800700e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007012:	2b00      	cmp	r3, #0
 8007014:	da03      	bge.n	800701e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	e001      	b.n	8007022 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d103      	bne.n	8007032 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800702a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e001      	b.n	8007036 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007036:	787b      	ldrb	r3, [r7, #1]
 8007038:	059b      	lsls	r3, r3, #22
 800703a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800703e:	78bb      	ldrb	r3, [r7, #2]
 8007040:	02db      	lsls	r3, r3, #11
 8007042:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007046:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007048:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800704c:	049b      	lsls	r3, r3, #18
 800704e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007052:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007056:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800705a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	0159      	lsls	r1, r3, #5
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	440b      	add	r3, r1
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007072:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007078:	2b03      	cmp	r3, #3
 800707a:	d10f      	bne.n	800709c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4413      	add	r3, r2
 8007084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	440a      	add	r2, r1
 8007092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800709a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop

080070ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80070c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d028      	beq.n	8007128 <USB_HC_StartXfer+0x7c>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	791b      	ldrb	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d124      	bne.n	8007128 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <USB_HC_StartXfer+0x50>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	795b      	ldrb	r3, [r3, #5]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d107      	bne.n	80070fc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	4619      	mov	r1, r3
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fa30 	bl	8007558 <USB_DoPing>
      return HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e114      	b.n	8007326 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d112      	bne.n	8007128 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	4413      	add	r3, r2
 800710a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	440a      	add	r2, r1
 8007118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007120:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d018      	beq.n	8007162 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	8912      	ldrh	r2, [r2, #8]
 8007138:	4413      	add	r3, r2
 800713a:	3b01      	subs	r3, #1
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	8912      	ldrh	r2, [r2, #8]
 8007140:	fbb3 f3f2 	udiv	r3, r3, r2
 8007144:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007146:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007148:	8b7b      	ldrh	r3, [r7, #26]
 800714a:	429a      	cmp	r2, r3
 800714c:	d90b      	bls.n	8007166 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800714e:	8b7b      	ldrh	r3, [r7, #26]
 8007150:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	8912      	ldrh	r2, [r2, #8]
 8007158:	fb02 f203 	mul.w	r2, r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	611a      	str	r2, [r3, #16]
 8007160:	e001      	b.n	8007166 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007162:	2301      	movs	r3, #1
 8007164:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	78db      	ldrb	r3, [r3, #3]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800716e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	8912      	ldrh	r2, [r2, #8]
 8007174:	fb02 f203 	mul.w	r2, r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007186:	04d9      	lsls	r1, r3, #19
 8007188:	4b69      	ldr	r3, [pc, #420]	; (8007330 <USB_HC_StartXfer+0x284>)
 800718a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800718c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7a9b      	ldrb	r3, [r3, #10]
 8007192:	075b      	lsls	r3, r3, #29
 8007194:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007198:	69f9      	ldr	r1, [r7, #28]
 800719a:	0148      	lsls	r0, r1, #5
 800719c:	6a39      	ldr	r1, [r7, #32]
 800719e:	4401      	add	r1, r0
 80071a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80071a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68d9      	ldr	r1, [r3, #12]
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071be:	460a      	mov	r2, r1
 80071c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	0151      	lsls	r1, r2, #5
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	440a      	add	r2, r1
 80071f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	4413      	add	r3, r2
 8007202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	7e7b      	ldrb	r3, [r7, #25]
 800720a:	075b      	lsls	r3, r3, #29
 800720c:	69f9      	ldr	r1, [r7, #28]
 800720e:	0148      	lsls	r0, r1, #5
 8007210:	6a39      	ldr	r1, [r7, #32]
 8007212:	4401      	add	r1, r0
 8007214:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007218:	4313      	orrs	r3, r2
 800721a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	4413      	add	r3, r2
 8007224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a42      	ldr	r2, [pc, #264]	; (8007334 <USB_HC_StartXfer+0x288>)
 800722c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800722e:	4b41      	ldr	r3, [pc, #260]	; (8007334 <USB_HC_StartXfer+0x288>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007236:	4a3f      	ldr	r2, [pc, #252]	; (8007334 <USB_HC_StartXfer+0x288>)
 8007238:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	78db      	ldrb	r3, [r3, #3]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d006      	beq.n	8007250 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007242:	4b3c      	ldr	r3, [pc, #240]	; (8007334 <USB_HC_StartXfer+0x288>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724a:	4a3a      	ldr	r2, [pc, #232]	; (8007334 <USB_HC_StartXfer+0x288>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e005      	b.n	800725c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007250:	4b38      	ldr	r3, [pc, #224]	; (8007334 <USB_HC_StartXfer+0x288>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007258:	4a36      	ldr	r2, [pc, #216]	; (8007334 <USB_HC_StartXfer+0x288>)
 800725a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800725c:	4b35      	ldr	r3, [pc, #212]	; (8007334 <USB_HC_StartXfer+0x288>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007264:	4a33      	ldr	r2, [pc, #204]	; (8007334 <USB_HC_StartXfer+0x288>)
 8007266:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007274:	461a      	mov	r2, r3
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <USB_HC_StartXfer+0x288>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e04f      	b.n	8007326 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	78db      	ldrb	r3, [r3, #3]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d14a      	bne.n	8007324 <USB_HC_StartXfer+0x278>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d046      	beq.n	8007324 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	79db      	ldrb	r3, [r3, #7]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d830      	bhi.n	8007300 <USB_HC_StartXfer+0x254>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <USB_HC_StartXfer+0x1f8>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072b5 	.word	0x080072b5
 80072a8:	080072d9 	.word	0x080072d9
 80072ac:	080072b5 	.word	0x080072b5
 80072b0:	080072d9 	.word	0x080072d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	3303      	adds	r3, #3
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80072be:	8afa      	ldrh	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d91c      	bls.n	8007304 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f043 0220 	orr.w	r2, r3, #32
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80072d6:	e015      	b.n	8007304 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	3303      	adds	r3, #3
 80072de:	089b      	lsrs	r3, r3, #2
 80072e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80072e2:	8afa      	ldrh	r2, [r7, #22]
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d90a      	bls.n	8007308 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80072fe:	e003      	b.n	8007308 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007300:	bf00      	nop
 8007302:	e002      	b.n	800730a <USB_HC_StartXfer+0x25e>
        break;
 8007304:	bf00      	nop
 8007306:	e000      	b.n	800730a <USB_HC_StartXfer+0x25e>
        break;
 8007308:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	68d9      	ldr	r1, [r3, #12]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	785a      	ldrb	r2, [r3, #1]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	b298      	uxth	r0, r3
 8007318:	2300      	movs	r3, #0
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4603      	mov	r3, r0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fb84 	bl	8006a2c <USB_WritePacket>
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3728      	adds	r7, #40	; 0x28
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	1ff80000 	.word	0x1ff80000
 8007334:	20000310 	.word	0x20000310

08007338 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	b29b      	uxth	r3, r3
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800735a:	b480      	push	{r7}
 800735c:	b087      	sub	sp, #28
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	0c9b      	lsrs	r3, r3, #18
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <USB_HC_Halt+0x3a>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d16c      	bne.n	800746e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d143      	bne.n	8007448 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4413      	add	r3, r2
 8007408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	440a      	add	r2, r1
 8007416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800741a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800741e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3301      	adds	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742c:	d81d      	bhi.n	800746a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007444:	d0ec      	beq.n	8007420 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007446:	e080      	b.n	800754a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4413      	add	r3, r2
 8007450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	0151      	lsls	r1, r2, #5
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	440a      	add	r2, r1
 800745e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007466:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007468:	e06f      	b.n	800754a <USB_HC_Halt+0x1f0>
          break;
 800746a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800746c:	e06d      	b.n	800754a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	4413      	add	r3, r2
 8007476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	440a      	add	r2, r1
 8007484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800748c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d143      	bne.n	8007526 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074fc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	3301      	adds	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750a:	d81d      	bhi.n	8007548 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	4413      	add	r3, r2
 8007514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800751e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007522:	d0ec      	beq.n	80074fe <USB_HC_Halt+0x1a4>
 8007524:	e011      	b.n	800754a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4413      	add	r3, r2
 800752e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	440a      	add	r2, r1
 800753c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	e000      	b.n	800754a <USB_HC_Halt+0x1f0>
          break;
 8007548:	bf00      	nop
    }
  }

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800756c:	2301      	movs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	04da      	lsls	r2, r3, #19
 8007574:	4b15      	ldr	r3, [pc, #84]	; (80075cc <USB_DoPing+0x74>)
 8007576:	4013      	ands	r3, r2
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	440a      	add	r2, r1
 8007580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007588:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	461a      	mov	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	1ff80000 	.word	0x1ff80000

080075d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff f99f 	bl	8006924 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80075e6:	2110      	movs	r1, #16
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff f9d7 	bl	800699c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff f9fa 	bl	80069e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	e01f      	b.n	800763a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007610:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007618:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007620:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762e:	461a      	mov	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3301      	adds	r3, #1
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b0f      	cmp	r3, #15
 800763e:	d9dc      	bls.n	80075fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	e034      	b.n	80076b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800765c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007664:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800766c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	461a      	mov	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	3301      	adds	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800768c:	d80c      	bhi.n	80076a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a4:	d0ec      	beq.n	8007680 <USB_StopHost+0xb0>
 80076a6:	e000      	b.n	80076aa <USB_StopHost+0xda>
        break;
 80076a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	3301      	adds	r3, #1
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d9c7      	bls.n	8007646 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076bc:	461a      	mov	r2, r3
 80076be:	f04f 33ff 	mov.w	r3, #4294967295
 80076c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff f918 	bl	8006902 <USB_EnableGlobalInt>

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b089      	sub	sp, #36	; 0x24
 80076e0:	af04      	add	r7, sp, #16
 80076e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80076e4:	2301      	movs	r3, #1
 80076e6:	2202      	movs	r2, #2
 80076e8:	2102      	movs	r1, #2
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fcba 	bl	8008064 <USBH_FindInterface>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d002      	beq.n	8007700 <USBH_CDC_InterfaceInit+0x24>
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d901      	bls.n	8007704 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007700:	2302      	movs	r3, #2
 8007702:	e13d      	b.n	8007980 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fc8f 	bl	800802c <USBH_SelectInterface>
 800770e:	4603      	mov	r3, r0
 8007710:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007718:	2302      	movs	r3, #2
 800771a:	e131      	b.n	8007980 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007722:	2050      	movs	r0, #80	; 0x50
 8007724:	f004 fec0 	bl	800c4a8 <malloc>
 8007728:	4603      	mov	r3, r0
 800772a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800773c:	2302      	movs	r3, #2
 800773e:	e11f      	b.n	8007980 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007740:	2250      	movs	r2, #80	; 0x50
 8007742:	2100      	movs	r1, #0
 8007744:	68b8      	ldr	r0, [r7, #8]
 8007746:	f004 feca 	bl	800c4de <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	211a      	movs	r1, #26
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	4413      	add	r3, r2
 8007756:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b25b      	sxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	da15      	bge.n	800778e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	211a      	movs	r1, #26
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	211a      	movs	r1, #26
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	4413      	add	r3, r2
 8007784:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f002 f894 	bl	80098c2 <USBH_AllocPipe>
 800779a:	4603      	mov	r3, r0
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	7819      	ldrb	r1, [r3, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	7858      	ldrb	r0, [r3, #1]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	8952      	ldrh	r2, [r2, #10]
 80077ba:	9202      	str	r2, [sp, #8]
 80077bc:	2203      	movs	r2, #3
 80077be:	9201      	str	r2, [sp, #4]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4623      	mov	r3, r4
 80077c4:	4602      	mov	r2, r0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 f84c 	bl	8009864 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2200      	movs	r2, #0
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f004 fdb7 	bl	800c348 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80077da:	2300      	movs	r3, #0
 80077dc:	2200      	movs	r2, #0
 80077de:	210a      	movs	r1, #10
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fc3f 	bl	8008064 <USBH_FindInterface>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2bff      	cmp	r3, #255	; 0xff
 80077ee:	d002      	beq.n	80077f6 <USBH_CDC_InterfaceInit+0x11a>
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d901      	bls.n	80077fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077f6:	2302      	movs	r3, #2
 80077f8:	e0c2      	b.n	8007980 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	211a      	movs	r1, #26
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	4413      	add	r3, r2
 8007806:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b25b      	sxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	da16      	bge.n	8007840 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	211a      	movs	r1, #26
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	211a      	movs	r1, #26
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	835a      	strh	r2, [r3, #26]
 800783e:	e015      	b.n	800786c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	211a      	movs	r1, #26
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	4413      	add	r3, r2
 800784c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	211a      	movs	r1, #26
 800785c:	fb01 f303 	mul.w	r3, r1, r3
 8007860:	4413      	add	r3, r2
 8007862:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007866:	881a      	ldrh	r2, [r3, #0]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	211a      	movs	r1, #26
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	4413      	add	r3, r2
 8007878:	f203 3356 	addw	r3, r3, #854	; 0x356
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b25b      	sxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	da16      	bge.n	80078b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	211a      	movs	r1, #26
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	4413      	add	r3, r2
 8007890:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	211a      	movs	r1, #26
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80078aa:	881a      	ldrh	r2, [r3, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	835a      	strh	r2, [r3, #26]
 80078b0:	e015      	b.n	80078de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	211a      	movs	r1, #26
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	211a      	movs	r1, #26
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80078d8:	881a      	ldrh	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	7b9b      	ldrb	r3, [r3, #14]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 ffec 	bl	80098c2 <USBH_AllocPipe>
 80078ea:	4603      	mov	r3, r0
 80078ec:	461a      	mov	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	7bdb      	ldrb	r3, [r3, #15]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 ffe2 	bl	80098c2 <USBH_AllocPipe>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	7b59      	ldrb	r1, [r3, #13]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	7b98      	ldrb	r0, [r3, #14]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	8b12      	ldrh	r2, [r2, #24]
 800791e:	9202      	str	r2, [sp, #8]
 8007920:	2202      	movs	r2, #2
 8007922:	9201      	str	r2, [sp, #4]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4623      	mov	r3, r4
 8007928:	4602      	mov	r2, r0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 ff9a 	bl	8009864 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	7b19      	ldrb	r1, [r3, #12]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	7bd8      	ldrb	r0, [r3, #15]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	8b52      	ldrh	r2, [r2, #26]
 8007948:	9202      	str	r2, [sp, #8]
 800794a:	2202      	movs	r2, #2
 800794c:	9201      	str	r2, [sp, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4623      	mov	r3, r4
 8007952:	4602      	mov	r2, r0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 ff85 	bl	8009864 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	7b5b      	ldrb	r3, [r3, #13]
 8007966:	2200      	movs	r2, #0
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f004 fcec 	bl	800c348 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	7b1b      	ldrb	r3, [r3, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f004 fce5 	bl	800c348 <USBH_LL_SetToggle>

  return USBH_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	bd90      	pop	{r4, r7, pc}

08007988 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 ff7a 	bl	80098a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 ffa5 	bl	8009904 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7b1b      	ldrb	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00e      	beq.n	80079e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	7b1b      	ldrb	r3, [r3, #12]
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 ff67 	bl	80098a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	7b1b      	ldrb	r3, [r3, #12]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 ff92 	bl	8009904 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	7b5b      	ldrb	r3, [r3, #13]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	7b5b      	ldrb	r3, [r3, #13]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 ff54 	bl	80098a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	7b5b      	ldrb	r3, [r3, #13]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 ff7f 	bl	8009904 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f004 fd49 	bl	800c4b8 <free>
    phost->pActiveClass->pData = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3340      	adds	r3, #64	; 0x40
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8b1 	bl	8007bba <GetLineCoding>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a68:	2102      	movs	r1, #2
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d877      	bhi.n	8007b8c <USBH_CDC_Process+0x114>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <USBH_CDC_Process+0x2c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ab9 	.word	0x08007ab9
 8007aa8:	08007abf 	.word	0x08007abf
 8007aac:	08007aef 	.word	0x08007aef
 8007ab0:	08007b63 	.word	0x08007b63
 8007ab4:	08007b71 	.word	0x08007b71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
      break;
 8007abc:	e06d      	b.n	8007b9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f897 	bl	8007bf8 <SetLineCoding>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007adc:	e058      	b.n	8007b90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d055      	beq.n	8007b90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007aec:	e050      	b.n	8007b90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	3340      	adds	r3, #64	; 0x40
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f860 	bl	8007bba <GetLineCoding>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d126      	bne.n	8007b52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b16:	791b      	ldrb	r3, [r3, #4]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d13b      	bne.n	8007b94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d133      	bne.n	8007b94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d12b      	bne.n	8007b94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d124      	bne.n	8007b94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f984 	bl	8007e58 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b50:	e020      	b.n	8007b94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d01d      	beq.n	8007b94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b60:	e018      	b.n	8007b94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f867 	bl	8007c36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8f8 	bl	8007d5e <CDC_ProcessReception>
      break;
 8007b6e:	e014      	b.n	8007b9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 f953 	bl	8008e1e <USBH_ClrFeature>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007b8a:	e005      	b.n	8007b98 <USBH_CDC_Process+0x120>

    default:
      break;
 8007b8c:	bf00      	nop
 8007b8e:	e004      	b.n	8007b9a <USBH_CDC_Process+0x122>
      break;
 8007b90:	bf00      	nop
 8007b92:	e002      	b.n	8007b9a <USBH_CDC_Process+0x122>
      break;
 8007b94:	bf00      	nop
 8007b96:	e000      	b.n	8007b9a <USBH_CDC_Process+0x122>
      break;
 8007b98:	bf00      	nop

  }

  return status;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	22a1      	movs	r2, #161	; 0xa1
 8007bc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2221      	movs	r2, #33	; 0x21
 8007bce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2207      	movs	r2, #7
 8007be0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2207      	movs	r2, #7
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 faf8 	bl	80091de <USBH_CtlReq>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2221      	movs	r2, #33	; 0x21
 8007c06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2207      	movs	r2, #7
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f001 fad9 	bl	80091de <USBH_CtlReq>
 8007c2c:	4603      	mov	r3, r0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af02      	add	r7, sp, #8
 8007c3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d002      	beq.n	8007c5c <CDC_ProcessTransmission+0x26>
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d025      	beq.n	8007ca6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007c5a:	e07c      	b.n	8007d56 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	8b12      	ldrh	r2, [r2, #24]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d90c      	bls.n	8007c82 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	69d9      	ldr	r1, [r3, #28]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8b1a      	ldrh	r2, [r3, #24]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	7b58      	ldrb	r0, [r3, #13]
 8007c74:	2301      	movs	r3, #1
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fdaf 	bl	80097de <USBH_BulkSendData>
 8007c80:	e00c      	b.n	8007c9c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	7b58      	ldrb	r0, [r3, #13]
 8007c90:	2301      	movs	r3, #1
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4603      	mov	r3, r0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fda1 	bl	80097de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ca4:	e057      	b.n	8007d56 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	7b5b      	ldrb	r3, [r3, #13]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f004 fb21 	bl	800c2f4 <USBH_LL_GetURBState>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d136      	bne.n	8007d2a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	8b12      	ldrh	r2, [r2, #24]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d90e      	bls.n	8007ce6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	8b12      	ldrh	r2, [r2, #24]
 8007cd0:	1a9a      	subs	r2, r3, r2
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	8b12      	ldrh	r2, [r2, #24]
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	61da      	str	r2, [r3, #28]
 8007ce4:	e002      	b.n	8007cec <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007cfc:	e006      	b.n	8007d0c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f892 	bl	8007e30 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d20:	2200      	movs	r2, #0
 8007d22:	4619      	mov	r1, r3
 8007d24:	f001 feea 	bl	8009afc <osMessagePut>
      break;
 8007d28:	e014      	b.n	8007d54 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d111      	bne.n	8007d54 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f001 fed4 	bl	8009afc <osMessagePut>
      break;
 8007d54:	bf00      	nop
  }
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d002      	beq.n	8007d84 <CDC_ProcessReception+0x26>
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d00e      	beq.n	8007da0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007d82:	e051      	b.n	8007e28 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6a19      	ldr	r1, [r3, #32]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	8b5a      	ldrh	r2, [r3, #26]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	7b1b      	ldrb	r3, [r3, #12]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fd49 	bl	8009828 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2204      	movs	r2, #4
 8007d9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d9e:	e043      	b.n	8007e28 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	7b1b      	ldrb	r3, [r3, #12]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f004 faa4 	bl	800c2f4 <USBH_LL_GetURBState>
 8007dac:	4603      	mov	r3, r0
 8007dae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007db0:	7cfb      	ldrb	r3, [r7, #19]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d137      	bne.n	8007e26 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	7b1b      	ldrb	r3, [r3, #12]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f004 fa07 	bl	800c1d0 <USBH_LL_GetLastXferSize>
 8007dc2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d016      	beq.n	8007dfc <CDC_ProcessReception+0x9e>
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	8b5b      	ldrh	r3, [r3, #26]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d910      	bls.n	8007dfc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	6a1a      	ldr	r2, [r3, #32]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	441a      	add	r2, r3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2203      	movs	r2, #3
 8007df6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007dfa:	e006      	b.n	8007e0a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f81d 	bl	8007e44 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4619      	mov	r1, r3
 8007e22:	f001 fe6b 	bl	8009afc <osMessagePut>
      break;
 8007e26:	bf00      	nop
  }
}
 8007e28:	bf00      	nop
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007e6c:	b5b0      	push	{r4, r5, r7, lr}
 8007e6e:	b090      	sub	sp, #64	; 0x40
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e04d      	b.n	8007f20 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	79fa      	ldrb	r2, [r7, #7]
 8007e88:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f847 	bl	8007f30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007ed0:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <USBH_Init+0xbc>)
 8007ed2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007edc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fde1 	bl	8009aaa <osMessageCreate>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <USBH_Init+0xc0>)
 8007ef2:	f107 0414 	add.w	r4, r7, #20
 8007ef6:	461d      	mov	r5, r3
 8007ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007f04:	f107 0314 	add.w	r3, r7, #20
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fd6d 	bl	80099ea <osThreadCreate>
 8007f10:	4602      	mov	r2, r0
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f004 f89d 	bl	800c058 <USBH_LL_Init>

  return USBH_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3740      	adds	r7, #64	; 0x40
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bdb0      	pop	{r4, r5, r7, pc}
 8007f28:	0800d484 	.word	0x0800d484
 8007f2c:	0800d4a0 	.word	0x0800d4a0

08007f30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e009      	b.n	8007f56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	33e0      	adds	r3, #224	; 0xe0
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b0e      	cmp	r3, #14
 8007f5a:	d9f2      	bls.n	8007f42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e009      	b.n	8007f76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f7c:	d3f1      	bcc.n	8007f62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2240      	movs	r2, #64	; 0x40
 8007fa2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d016      	beq.n	800801a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10e      	bne.n	8008014 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ffc:	1c59      	adds	r1, r3, #1
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	33de      	adds	r3, #222	; 0xde
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
 8008012:	e004      	b.n	800801e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008014:	2302      	movs	r3, #2
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e001      	b.n	800801e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800801a:	2302      	movs	r3, #2
 800801c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	429a      	cmp	r2, r3
 8008046:	d204      	bcs.n	8008052 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008050:	e001      	b.n	8008056 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008052:	2302      	movs	r3, #2
 8008054:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008056:	7bfb      	ldrb	r3, [r7, #15]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	461a      	mov	r2, r3
 8008072:	4603      	mov	r3, r0
 8008074:	70fb      	strb	r3, [r7, #3]
 8008076:	460b      	mov	r3, r1
 8008078:	70bb      	strb	r3, [r7, #2]
 800807a:	4613      	mov	r3, r2
 800807c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008082:	2300      	movs	r3, #0
 8008084:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800808c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800808e:	e025      	b.n	80080dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	221a      	movs	r2, #26
 8008094:	fb02 f303 	mul.w	r3, r2, r3
 8008098:	3308      	adds	r3, #8
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4413      	add	r3, r2
 800809e:	3302      	adds	r3, #2
 80080a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	795b      	ldrb	r3, [r3, #5]
 80080a6:	78fa      	ldrb	r2, [r7, #3]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d002      	beq.n	80080b2 <USBH_FindInterface+0x4e>
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	2bff      	cmp	r3, #255	; 0xff
 80080b0:	d111      	bne.n	80080d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080b6:	78ba      	ldrb	r2, [r7, #2]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d002      	beq.n	80080c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080bc:	78bb      	ldrb	r3, [r7, #2]
 80080be:	2bff      	cmp	r3, #255	; 0xff
 80080c0:	d109      	bne.n	80080d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080c6:	787a      	ldrb	r2, [r7, #1]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d002      	beq.n	80080d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80080cc:	787b      	ldrb	r3, [r7, #1]
 80080ce:	2bff      	cmp	r3, #255	; 0xff
 80080d0:	d101      	bne.n	80080d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	e006      	b.n	80080e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	3301      	adds	r3, #1
 80080da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d9d6      	bls.n	8008090 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80080e2:	23ff      	movs	r3, #255	; 0xff
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f003 fff3 	bl	800c0e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80080fe:	2101      	movs	r1, #1
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f004 f90a 	bl	800c31a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af04      	add	r7, sp, #16
 8008116:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008118:	2302      	movs	r3, #2
 800811a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	d102      	bne.n	8008132 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2203      	movs	r2, #3
 8008130:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b0b      	cmp	r3, #11
 800813a:	f200 823c 	bhi.w	80085b6 <USBH_Process+0x4a6>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <USBH_Process+0x34>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	08008175 	.word	0x08008175
 8008148:	080081c3 	.word	0x080081c3
 800814c:	08008247 	.word	0x08008247
 8008150:	08008535 	.word	0x08008535
 8008154:	080085b7 	.word	0x080085b7
 8008158:	08008307 	.word	0x08008307
 800815c:	080084bf 	.word	0x080084bf
 8008160:	08008359 	.word	0x08008359
 8008164:	08008395 	.word	0x08008395
 8008168:	080083cf 	.word	0x080083cf
 800816c:	08008417 	.word	0x08008417
 8008170:	0800851d 	.word	0x0800851d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 821c 	beq.w	80085ba <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008188:	20c8      	movs	r0, #200	; 0xc8
 800818a:	f004 f910 	bl	800c3ae <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f004 f803 	bl	800c19a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081b8:	2200      	movs	r2, #0
 80081ba:	4619      	mov	r1, r3
 80081bc:	f001 fc9e 	bl	8009afc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081c0:	e1fb      	b.n	80085ba <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d107      	bne.n	80081dc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e025      	b.n	8008228 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80081e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081e6:	d914      	bls.n	8008212 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081ee:	3301      	adds	r3, #1
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d903      	bls.n	800820a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	220d      	movs	r2, #13
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	e00e      	b.n	8008228 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	e00a      	b.n	8008228 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008218:	f103 020a 	add.w	r2, r3, #10
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008222:	200a      	movs	r0, #10
 8008224:	f004 f8c3 	bl	800c3ae <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800823c:	2200      	movs	r2, #0
 800823e:	4619      	mov	r1, r3
 8008240:	f001 fc5c 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008244:	e1c0      	b.n	80085c8 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008256:	2104      	movs	r1, #4
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800825c:	2064      	movs	r0, #100	; 0x64
 800825e:	f004 f8a6 	bl	800c3ae <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f003 ff74 	bl	800c150 <USBH_LL_GetSpeed>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2205      	movs	r2, #5
 8008276:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fb21 	bl	80098c2 <USBH_AllocPipe>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fb19 	bl	80098c2 <USBH_AllocPipe>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7919      	ldrb	r1, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082ac:	b292      	uxth	r2, r2
 80082ae:	9202      	str	r2, [sp, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	9201      	str	r2, [sp, #4]
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	4603      	mov	r3, r0
 80082b8:	2280      	movs	r2, #128	; 0x80
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fad2 	bl	8009864 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7959      	ldrb	r1, [r3, #5]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082d4:	b292      	uxth	r2, r2
 80082d6:	9202      	str	r2, [sp, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	9201      	str	r2, [sp, #4]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4603      	mov	r3, r0
 80082e0:	2200      	movs	r2, #0
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fabe 	bl	8009864 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082fc:	2200      	movs	r2, #0
 80082fe:	4619      	mov	r1, r3
 8008300:	f001 fbfc 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008304:	e160      	b.n	80085c8 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f964 	bl	80085d4 <USBH_HandleEnum>
 800830c:	4603      	mov	r3, r0
 800830e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 8152 	bne.w	80085be <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008328:	2b01      	cmp	r3, #1
 800832a:	d103      	bne.n	8008334 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2208      	movs	r2, #8
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e002      	b.n	800833a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2207      	movs	r2, #7
 8008338:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2205      	movs	r2, #5
 800833e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800834e:	2200      	movs	r2, #0
 8008350:	4619      	mov	r1, r3
 8008352:	f001 fbd3 	bl	8009afc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008356:	e132      	b.n	80085be <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 812f 	beq.w	80085c2 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800836a:	2101      	movs	r1, #1
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2208      	movs	r2, #8
 8008374:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2205      	movs	r2, #5
 800837a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800838a:	2200      	movs	r2, #0
 800838c:	4619      	mov	r1, r3
 800838e:	f001 fbb5 	bl	8009afc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008392:	e116      	b.n	80085c2 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800839a:	b29b      	uxth	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fcf6 	bl	8008d90 <USBH_SetCfg>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2209      	movs	r2, #9
 80083ae:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083c4:	2200      	movs	r2, #0
 80083c6:	4619      	mov	r1, r3
 80083c8:	f001 fb98 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80083cc:	e0fc      	b.n	80085c8 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00a      	beq.n	80083f2 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80083dc:	2101      	movs	r1, #1
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fcf9 	bl	8008dd6 <USBH_SetFeature>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	220a      	movs	r2, #10
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	e002      	b.n	80083f8 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	220a      	movs	r2, #10
 80083f6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800840c:	2200      	movs	r2, #0
 800840e:	4619      	mov	r1, r3
 8008410:	f001 fb74 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008414:	e0d8      	b.n	80085c8 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800841c:	2b00      	cmp	r3, #0
 800841e:	d03f      	beq.n	80084a0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
 800842c:	e016      	b.n	800845c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800842e:	7bfa      	ldrb	r2, [r7, #15]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	32de      	adds	r2, #222	; 0xde
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	791a      	ldrb	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008440:	429a      	cmp	r2, r3
 8008442:	d108      	bne.n	8008456 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008444:	7bfa      	ldrb	r2, [r7, #15]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32de      	adds	r2, #222	; 0xde
 800844a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008454:	e005      	b.n	8008462 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	3301      	adds	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0e5      	beq.n	800842e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d016      	beq.n	800849a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2206      	movs	r2, #6
 8008482:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800848a:	2103      	movs	r1, #3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
 8008490:	e006      	b.n	80084a0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	220d      	movs	r2, #13
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e002      	b.n	80084a0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	220d      	movs	r2, #13
 800849e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2205      	movs	r2, #5
 80084a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084b4:	2200      	movs	r2, #0
 80084b6:	4619      	mov	r1, r3
 80084b8:	f001 fb20 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084bc:	e084      	b.n	80085c8 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d017      	beq.n	80084f8 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
 80084d4:	4603      	mov	r3, r0
 80084d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	220b      	movs	r2, #11
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	e00a      	b.n	80084fe <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d106      	bne.n	80084fe <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	220d      	movs	r2, #13
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e002      	b.n	80084fe <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	220d      	movs	r2, #13
 80084fc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2205      	movs	r2, #5
 8008502:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008512:	2200      	movs	r2, #0
 8008514:	4619      	mov	r1, r3
 8008516:	f001 faf1 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800851a:	e055      	b.n	80085c8 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d04f      	beq.n	80085c6 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
      }
      break;
 8008532:	e048      	b.n	80085c6 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff fcf7 	bl	8007f30 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008570:	2105      	movs	r1, #5
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b01      	cmp	r3, #1
 8008580:	d107      	bne.n	8008592 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fdb0 	bl	80080f0 <USBH_Start>
 8008590:	e002      	b.n	8008598 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f003 fda6 	bl	800c0e4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085ac:	2200      	movs	r2, #0
 80085ae:	4619      	mov	r1, r3
 80085b0:	f001 faa4 	bl	8009afc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085b4:	e008      	b.n	80085c8 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80085b6:	bf00      	nop
 80085b8:	e006      	b.n	80085c8 <USBH_Process+0x4b8>
      break;
 80085ba:	bf00      	nop
 80085bc:	e004      	b.n	80085c8 <USBH_Process+0x4b8>
      break;
 80085be:	bf00      	nop
 80085c0:	e002      	b.n	80085c8 <USBH_Process+0x4b8>
    break;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <USBH_Process+0x4b8>
      break;
 80085c6:	bf00      	nop
  }
  return USBH_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop

080085d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af04      	add	r7, sp, #16
 80085da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	2b07      	cmp	r3, #7
 80085ea:	f200 8208 	bhi.w	80089fe <USBH_HandleEnum+0x42a>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <USBH_HandleEnum+0x20>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008615 	.word	0x08008615
 80085f8:	080086d3 	.word	0x080086d3
 80085fc:	0800873d 	.word	0x0800873d
 8008600:	080087cb 	.word	0x080087cb
 8008604:	08008835 	.word	0x08008835
 8008608:	080088a5 	.word	0x080088a5
 800860c:	08008941 	.word	0x08008941
 8008610:	080089bf 	.word	0x080089bf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008614:	2108      	movs	r1, #8
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 faea 	bl	8008bf0 <USBH_Get_DevDesc>
 800861c:	4603      	mov	r3, r0
 800861e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d130      	bne.n	8008688 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7919      	ldrb	r1, [r3, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800864a:	b292      	uxth	r2, r2
 800864c:	9202      	str	r2, [sp, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	9201      	str	r2, [sp, #4]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	2280      	movs	r2, #128	; 0x80
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f903 	bl	8009864 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7959      	ldrb	r1, [r3, #5]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008672:	b292      	uxth	r2, r2
 8008674:	9202      	str	r2, [sp, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	9201      	str	r2, [sp, #4]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	2200      	movs	r2, #0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f8ef 	bl	8009864 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008686:	e1bc      	b.n	8008a02 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b03      	cmp	r3, #3
 800868c:	f040 81b9 	bne.w	8008a02 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008696:	3301      	adds	r3, #1
 8008698:	b2da      	uxtb	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d903      	bls.n	80086b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	220d      	movs	r2, #13
 80086ae:	701a      	strb	r2, [r3, #0]
      break;
 80086b0:	e1a7      	b.n	8008a02 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	795b      	ldrb	r3, [r3, #5]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f923 	bl	8009904 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	791b      	ldrb	r3, [r3, #4]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f91d 	bl	8009904 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]
      break;
 80086d0:	e197      	b.n	8008a02 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80086d2:	2112      	movs	r1, #18
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa8b 	bl	8008bf0 <USBH_Get_DevDesc>
 80086da:	4603      	mov	r3, r0
 80086dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086ea:	e18c      	b.n	8008a06 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	f040 8189 	bne.w	8008a06 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086fa:	3301      	adds	r3, #1
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800870a:	2b03      	cmp	r3, #3
 800870c:	d903      	bls.n	8008716 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	220d      	movs	r2, #13
 8008712:	701a      	strb	r2, [r3, #0]
      break;
 8008714:	e177      	b.n	8008a06 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	795b      	ldrb	r3, [r3, #5]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 f8f1 	bl	8009904 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	791b      	ldrb	r3, [r3, #4]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 f8eb 	bl	8009904 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
      break;
 800873a:	e164      	b.n	8008a06 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800873c:	2101      	movs	r1, #1
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fb02 	bl	8008d48 <USBH_SetAddress>
 8008744:	4603      	mov	r3, r0
 8008746:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d132      	bne.n	80087b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800874e:	2002      	movs	r0, #2
 8008750:	f003 fe2d 	bl	800c3ae <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2203      	movs	r2, #3
 8008760:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7919      	ldrb	r1, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008776:	b292      	uxth	r2, r2
 8008778:	9202      	str	r2, [sp, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4603      	mov	r3, r0
 8008782:	2280      	movs	r2, #128	; 0x80
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f86d 	bl	8009864 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7959      	ldrb	r1, [r3, #5]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800879e:	b292      	uxth	r2, r2
 80087a0:	9202      	str	r2, [sp, #8]
 80087a2:	2200      	movs	r2, #0
 80087a4:	9201      	str	r2, [sp, #4]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4603      	mov	r3, r0
 80087aa:	2200      	movs	r2, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 f859 	bl	8009864 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80087b2:	e12a      	b.n	8008a0a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	f040 8127 	bne.w	8008a0a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	220d      	movs	r2, #13
 80087c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	705a      	strb	r2, [r3, #1]
      break;
 80087c8:	e11f      	b.n	8008a0a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80087ca:	2109      	movs	r1, #9
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa37 	bl	8008c40 <USBH_Get_CfgDesc>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d103      	bne.n	80087e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2204      	movs	r2, #4
 80087e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087e2:	e114      	b.n	8008a0e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	f040 8111 	bne.w	8008a0e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087f2:	3301      	adds	r3, #1
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008802:	2b03      	cmp	r3, #3
 8008804:	d903      	bls.n	800880e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	220d      	movs	r2, #13
 800880a:	701a      	strb	r2, [r3, #0]
      break;
 800880c:	e0ff      	b.n	8008a0e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	795b      	ldrb	r3, [r3, #5]
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f875 	bl	8009904 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	791b      	ldrb	r3, [r3, #4]
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f86f 	bl	8009904 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
      break;
 8008832:	e0ec      	b.n	8008a0e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f9ff 	bl	8008c40 <USBH_Get_CfgDesc>
 8008842:	4603      	mov	r3, r0
 8008844:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2205      	movs	r2, #5
 8008850:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008852:	e0de      	b.n	8008a12 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b03      	cmp	r3, #3
 8008858:	f040 80db 	bne.w	8008a12 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008862:	3301      	adds	r3, #1
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008872:	2b03      	cmp	r3, #3
 8008874:	d903      	bls.n	800887e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	220d      	movs	r2, #13
 800887a:	701a      	strb	r2, [r3, #0]
      break;
 800887c:	e0c9      	b.n	8008a12 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	795b      	ldrb	r3, [r3, #5]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 f83d 	bl	8009904 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	791b      	ldrb	r3, [r3, #4]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f837 	bl	8009904 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
      break;
 80088a2:	e0b6      	b.n	8008a12 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d036      	beq.n	800891c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80088ba:	23ff      	movs	r3, #255	; 0xff
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9e3 	bl	8008c88 <USBH_Get_StringDesc>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d111      	bne.n	80088f0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2206      	movs	r2, #6
 80088d0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2205      	movs	r2, #5
 80088d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088e6:	2200      	movs	r2, #0
 80088e8:	4619      	mov	r1, r3
 80088ea:	f001 f907 	bl	8009afc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80088ee:	e092      	b.n	8008a16 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	f040 808f 	bne.w	8008a16 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2206      	movs	r2, #6
 80088fc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2205      	movs	r2, #5
 8008902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008912:	2200      	movs	r2, #0
 8008914:	4619      	mov	r1, r3
 8008916:	f001 f8f1 	bl	8009afc <osMessagePut>
      break;
 800891a:	e07c      	b.n	8008a16 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2206      	movs	r2, #6
 8008920:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2205      	movs	r2, #5
 8008926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008936:	2200      	movs	r2, #0
 8008938:	4619      	mov	r1, r3
 800893a:	f001 f8df 	bl	8009afc <osMessagePut>
      break;
 800893e:	e06a      	b.n	8008a16 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008946:	2b00      	cmp	r3, #0
 8008948:	d027      	beq.n	800899a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008956:	23ff      	movs	r3, #255	; 0xff
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f995 	bl	8008c88 <USBH_Get_StringDesc>
 800895e:	4603      	mov	r3, r0
 8008960:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d103      	bne.n	8008970 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2207      	movs	r2, #7
 800896c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800896e:	e054      	b.n	8008a1a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b03      	cmp	r3, #3
 8008974:	d151      	bne.n	8008a1a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2207      	movs	r2, #7
 800897a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2205      	movs	r2, #5
 8008980:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008990:	2200      	movs	r2, #0
 8008992:	4619      	mov	r1, r3
 8008994:	f001 f8b2 	bl	8009afc <osMessagePut>
      break;
 8008998:	e03f      	b.n	8008a1a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2207      	movs	r2, #7
 800899e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2205      	movs	r2, #5
 80089a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089b4:	2200      	movs	r2, #0
 80089b6:	4619      	mov	r1, r3
 80089b8:	f001 f8a0 	bl	8009afc <osMessagePut>
      break;
 80089bc:	e02d      	b.n	8008a1a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d017      	beq.n	80089f8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089d4:	23ff      	movs	r3, #255	; 0xff
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f956 	bl	8008c88 <USBH_Get_StringDesc>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80089ea:	e018      	b.n	8008a1e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d115      	bne.n	8008a1e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
      break;
 80089f6:	e012      	b.n	8008a1e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
      break;
 80089fc:	e00f      	b.n	8008a1e <USBH_HandleEnum+0x44a>

    default:
      break;
 80089fe:	bf00      	nop
 8008a00:	e00e      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a02:	bf00      	nop
 8008a04:	e00c      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a06:	bf00      	nop
 8008a08:	e00a      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e008      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e006      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a12:	bf00      	nop
 8008a14:	e004      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <USBH_HandleEnum+0x44c>
      break;
 8008a1e:	bf00      	nop
  }
  return Status;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop

08008a2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f804 	bl	8008a6e <USBH_HandleSof>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b0b      	cmp	r3, #11
 8008a7e:	d10a      	bne.n	8008a96 <USBH_HandleSof+0x28>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d005      	beq.n	8008a96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
  }
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f001 f819 	bl	8009afc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008aca:	bf00      	nop
}
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008ae2:	bf00      	nop
}
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b22:	2200      	movs	r2, #0
 8008b24:	4619      	mov	r1, r3
 8008b26:	f000 ffe9 	bl	8009afc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f003 fae0 	bl	800c11a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	791b      	ldrb	r3, [r3, #4]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fecf 	bl	8009904 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	795b      	ldrb	r3, [r3, #5]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fec9 	bl	8009904 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b86:	2200      	movs	r2, #0
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f000 ffb7 	bl	8009afc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008ba6:	f107 030c 	add.w	r3, r7, #12
 8008baa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 ffe4 	bl	8009b7c <osMessageGet>
    if (event.status == osEventMessage)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d1f2      	bne.n	8008ba0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff faa8 	bl	8008110 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008bc0:	e7ee      	b.n	8008ba0 <USBH_Process_OS+0x8>

08008bc2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bde:	2200      	movs	r2, #0
 8008be0:	4619      	mov	r1, r3
 8008be2:	f000 ff8b 	bl	8009afc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c0e:	2100      	movs	r1, #0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f864 	bl	8008cde <USBH_GetDescriptor>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	b292      	uxth	r2, r2
 8008c30:	4619      	mov	r1, r3
 8008c32:	f000 f918 	bl	8008e66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	331c      	adds	r3, #28
 8008c50:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008c52:	887b      	ldrh	r3, [r7, #2]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f83d 	bl	8008cde <USBH_GetDescriptor>
 8008c64:	4603      	mov	r3, r0
 8008c66:	72fb      	strb	r3, [r7, #11]
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d107      	bne.n	8008c7e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c74:	887a      	ldrh	r2, [r7, #2]
 8008c76:	68f9      	ldr	r1, [r7, #12]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 f964 	bl	8008f46 <USBH_ParseCfgDesc>
  }

  return status;
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	461a      	mov	r2, r3
 8008c94:	460b      	mov	r3, r1
 8008c96:	72fb      	strb	r3, [r7, #11]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008ca4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008cac:	893b      	ldrh	r3, [r7, #8]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f812 	bl	8008cde <USBH_GetDescriptor>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d107      	bne.n	8008cd4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008cca:	893a      	ldrh	r2, [r7, #8]
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fa37 	bl	8009142 <USBH_ParseStringDesc>
  }

  return status;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	607b      	str	r3, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	72fb      	strb	r3, [r7, #11]
 8008cec:	4613      	mov	r3, r2
 8008cee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	789b      	ldrb	r3, [r3, #2]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d11c      	bne.n	8008d32 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2206      	movs	r2, #6
 8008d08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	893a      	ldrh	r2, [r7, #8]
 8008d0e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008d10:	893b      	ldrh	r3, [r7, #8]
 8008d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d1a:	d104      	bne.n	8008d26 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f240 4209 	movw	r2, #1033	; 0x409
 8008d22:	829a      	strh	r2, [r3, #20]
 8008d24:	e002      	b.n	8008d2c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8b3a      	ldrh	r2, [r7, #24]
 8008d30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008d32:	8b3b      	ldrh	r3, [r7, #24]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 fa50 	bl	80091de <USBH_CtlReq>
 8008d3e:	4603      	mov	r3, r0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	789b      	ldrb	r3, [r3, #2]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d10f      	bne.n	8008d7c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2205      	movs	r2, #5
 8008d66:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fa2c 	bl	80091de <USBH_CtlReq>
 8008d86:	4603      	mov	r3, r0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d10e      	bne.n	8008dc2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2209      	movs	r2, #9
 8008dae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	887a      	ldrh	r2, [r7, #2]
 8008db4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa09 	bl	80091de <USBH_CtlReq>
 8008dcc:	4603      	mov	r3, r0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	789b      	ldrb	r3, [r3, #2]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10f      	bne.n	8008e0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2203      	movs	r2, #3
 8008df4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f9e5 	bl	80091de <USBH_CtlReq>
 8008e14:	4603      	mov	r3, r0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	789b      	ldrb	r3, [r3, #2]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d10f      	bne.n	8008e52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008e52:	2200      	movs	r2, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f9c1 	bl	80091de <USBH_CtlReq>
 8008e5c:	4603      	mov	r3, r0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	4613      	mov	r3, r2
 8008e72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	785a      	ldrb	r2, [r3, #1]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	3302      	adds	r3, #2
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	3303      	adds	r3, #3
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	021b      	lsls	r3, r3, #8
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	791a      	ldrb	r2, [r3, #4]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	795a      	ldrb	r2, [r3, #5]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	799a      	ldrb	r2, [r3, #6]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	79da      	ldrb	r2, [r3, #7]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d939      	bls.n	8008f3a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	3309      	adds	r3, #9
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4313      	orrs	r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	330a      	adds	r3, #10
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	330b      	adds	r3, #11
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	330c      	adds	r3, #12
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	330d      	adds	r3, #13
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	4313      	orrs	r3, r2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	7b9a      	ldrb	r2, [r3, #14]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	7bda      	ldrb	r2, [r3, #15]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	7c1a      	ldrb	r2, [r3, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	7c5a      	ldrb	r2, [r3, #17]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	745a      	strb	r2, [r3, #17]
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b08a      	sub	sp, #40	; 0x28
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	4613      	mov	r3, r2
 8008f52:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	785a      	ldrb	r2, [r3, #1]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3303      	adds	r3, #3
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	021b      	lsls	r3, r3, #8
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	791a      	ldrb	r2, [r3, #4]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	795a      	ldrb	r2, [r3, #5]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	799a      	ldrb	r2, [r3, #6]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	79da      	ldrb	r2, [r3, #7]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	7a1a      	ldrb	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	2b09      	cmp	r3, #9
 8008fc0:	d95f      	bls.n	8009082 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008fc2:	2309      	movs	r3, #9
 8008fc4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fca:	e051      	b.n	8009070 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fcc:	f107 0316 	add.w	r3, r7, #22
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fd4:	f000 f8e8 	bl	80091a8 <USBH_GetNextDesc>
 8008fd8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	785b      	ldrb	r3, [r3, #1]
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d146      	bne.n	8009070 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fe6:	221a      	movs	r2, #26
 8008fe8:	fb02 f303 	mul.w	r3, r2, r3
 8008fec:	3308      	adds	r3, #8
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ff8:	69f8      	ldr	r0, [r7, #28]
 8008ffa:	f000 f846 	bl	800908a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009004:	2300      	movs	r3, #0
 8009006:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009008:	e022      	b.n	8009050 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800900a:	f107 0316 	add.w	r3, r7, #22
 800900e:	4619      	mov	r1, r3
 8009010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009012:	f000 f8c9 	bl	80091a8 <USBH_GetNextDesc>
 8009016:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b05      	cmp	r3, #5
 800901e:	d117      	bne.n	8009050 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009024:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009028:	3201      	adds	r2, #1
 800902a:	00d2      	lsls	r2, r2, #3
 800902c:	211a      	movs	r1, #26
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	4413      	add	r3, r2
 8009034:	3308      	adds	r3, #8
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4413      	add	r3, r2
 800903a:	3304      	adds	r3, #4
 800903c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800903e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009040:	69b8      	ldr	r0, [r7, #24]
 8009042:	f000 f851 	bl	80090e8 <USBH_ParseEPDesc>
            ep_ix++;
 8009046:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800904a:	3301      	adds	r3, #1
 800904c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	791b      	ldrb	r3, [r3, #4]
 8009054:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009058:	429a      	cmp	r2, r3
 800905a:	d204      	bcs.n	8009066 <USBH_ParseCfgDesc+0x120>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	885a      	ldrh	r2, [r3, #2]
 8009060:	8afb      	ldrh	r3, [r7, #22]
 8009062:	429a      	cmp	r2, r3
 8009064:	d8d1      	bhi.n	800900a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800906a:	3301      	adds	r3, #1
 800906c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009074:	2b01      	cmp	r3, #1
 8009076:	d804      	bhi.n	8009082 <USBH_ParseCfgDesc+0x13c>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	885a      	ldrh	r2, [r3, #2]
 800907c:	8afb      	ldrh	r3, [r7, #22]
 800907e:	429a      	cmp	r2, r3
 8009080:	d8a4      	bhi.n	8008fcc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009082:	bf00      	nop
 8009084:	3728      	adds	r7, #40	; 0x28
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781a      	ldrb	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	785a      	ldrb	r2, [r3, #1]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	789a      	ldrb	r2, [r3, #2]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	78da      	ldrb	r2, [r3, #3]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	791a      	ldrb	r2, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	795a      	ldrb	r2, [r3, #5]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	799a      	ldrb	r2, [r3, #6]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	79da      	ldrb	r2, [r3, #7]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	7a1a      	ldrb	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	721a      	strb	r2, [r3, #8]
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781a      	ldrb	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	785a      	ldrb	r2, [r3, #1]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	789a      	ldrb	r2, [r3, #2]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	78da      	ldrb	r2, [r3, #3]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	3304      	adds	r3, #4
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	b29a      	uxth	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	3305      	adds	r3, #5
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	b29b      	uxth	r3, r3
 8009126:	4313      	orrs	r3, r2
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	799a      	ldrb	r2, [r3, #6]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	719a      	strb	r2, [r3, #6]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009142:	b480      	push	{r7}
 8009144:	b087      	sub	sp, #28
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	4613      	mov	r3, r2
 800914e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3301      	adds	r3, #1
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b03      	cmp	r3, #3
 8009158:	d120      	bne.n	800919c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	1e9a      	subs	r2, r3, #2
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	4293      	cmp	r3, r2
 8009164:	bf28      	it	cs
 8009166:	4613      	movcs	r3, r2
 8009168:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3302      	adds	r3, #2
 800916e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009170:	2300      	movs	r3, #0
 8009172:	82fb      	strh	r3, [r7, #22]
 8009174:	e00b      	b.n	800918e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009176:	8afb      	ldrh	r3, [r7, #22]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3301      	adds	r3, #1
 8009186:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009188:	8afb      	ldrh	r3, [r7, #22]
 800918a:	3302      	adds	r3, #2
 800918c:	82fb      	strh	r3, [r7, #22]
 800918e:	8afa      	ldrh	r2, [r7, #22]
 8009190:	8abb      	ldrh	r3, [r7, #20]
 8009192:	429a      	cmp	r2, r3
 8009194:	d3ef      	bcc.n	8009176 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
  }
}
 800919c:	bf00      	nop
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	881a      	ldrh	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4413      	add	r3, r2
 80091be:	b29a      	uxth	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091d0:	68fb      	ldr	r3, [r7, #12]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	4613      	mov	r3, r2
 80091ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80091ec:	2301      	movs	r3, #1
 80091ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	789b      	ldrb	r3, [r3, #2]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d002      	beq.n	80091fe <USBH_CtlReq+0x20>
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d01d      	beq.n	8009238 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80091fc:	e043      	b.n	8009286 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2202      	movs	r2, #2
 8009214:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009216:	2301      	movs	r3, #1
 8009218:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2203      	movs	r2, #3
 800921e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800922e:	2200      	movs	r2, #0
 8009230:	4619      	mov	r1, r3
 8009232:	f000 fc63 	bl	8009afc <osMessagePut>
      break;
 8009236:	e026      	b.n	8009286 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f829 	bl	8009290 <USBH_HandleControl>
 800923e:	4603      	mov	r3, r0
 8009240:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <USBH_CtlReq+0x70>
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	2b03      	cmp	r3, #3
 800924c:	d106      	bne.n	800925c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	761a      	strb	r2, [r3, #24]
 800925a:	e005      	b.n	8009268 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d102      	bne.n	8009268 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2203      	movs	r2, #3
 800926c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800927c:	2200      	movs	r2, #0
 800927e:	4619      	mov	r1, r3
 8009280:	f000 fc3c 	bl	8009afc <osMessagePut>
      break;
 8009284:	bf00      	nop
  }
  return status;
 8009286:	7dfb      	ldrb	r3, [r7, #23]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af02      	add	r7, sp, #8
 8009296:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7e1b      	ldrb	r3, [r3, #24]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	2b0a      	cmp	r3, #10
 80092a8:	f200 822b 	bhi.w	8009702 <USBH_HandleControl+0x472>
 80092ac:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <USBH_HandleControl+0x24>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	080092e1 	.word	0x080092e1
 80092b8:	080092fb 	.word	0x080092fb
 80092bc:	0800939d 	.word	0x0800939d
 80092c0:	080093c3 	.word	0x080093c3
 80092c4:	0800944f 	.word	0x0800944f
 80092c8:	0800947b 	.word	0x0800947b
 80092cc:	0800953d 	.word	0x0800953d
 80092d0:	0800955f 	.word	0x0800955f
 80092d4:	080095f1 	.word	0x080095f1
 80092d8:	08009619 	.word	0x08009619
 80092dc:	080096ab 	.word	0x080096ab
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f103 0110 	add.w	r1, r3, #16
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	795b      	ldrb	r3, [r3, #5]
 80092ea:	461a      	mov	r2, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa19 	bl	8009724 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2202      	movs	r2, #2
 80092f6:	761a      	strb	r2, [r3, #24]
      break;
 80092f8:	e20e      	b.n	8009718 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	795b      	ldrb	r3, [r3, #5]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f002 fff7 	bl	800c2f4 <USBH_LL_GetURBState>
 8009306:	4603      	mov	r3, r0
 8009308:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d12c      	bne.n	800936a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7c1b      	ldrb	r3, [r3, #16]
 8009314:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009318:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	8adb      	ldrh	r3, [r3, #22]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009322:	7b7b      	ldrb	r3, [r7, #13]
 8009324:	2b80      	cmp	r3, #128	; 0x80
 8009326:	d103      	bne.n	8009330 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2203      	movs	r2, #3
 800932c:	761a      	strb	r2, [r3, #24]
 800932e:	e00d      	b.n	800934c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2205      	movs	r2, #5
 8009334:	761a      	strb	r2, [r3, #24]
 8009336:	e009      	b.n	800934c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009338:	7b7b      	ldrb	r3, [r7, #13]
 800933a:	2b80      	cmp	r3, #128	; 0x80
 800933c:	d103      	bne.n	8009346 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2209      	movs	r2, #9
 8009342:	761a      	strb	r2, [r3, #24]
 8009344:	e002      	b.n	800934c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2207      	movs	r2, #7
 800934a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2203      	movs	r2, #3
 8009350:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009360:	2200      	movs	r2, #0
 8009362:	4619      	mov	r1, r3
 8009364:	f000 fbca 	bl	8009afc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009368:	e1cd      	b.n	8009706 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	2b04      	cmp	r3, #4
 800936e:	d003      	beq.n	8009378 <USBH_HandleControl+0xe8>
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b02      	cmp	r3, #2
 8009374:	f040 81c7 	bne.w	8009706 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	220b      	movs	r2, #11
 800937c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2203      	movs	r2, #3
 8009382:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009392:	2200      	movs	r2, #0
 8009394:	4619      	mov	r1, r3
 8009396:	f000 fbb1 	bl	8009afc <osMessagePut>
      break;
 800939a:	e1b4      	b.n	8009706 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6899      	ldr	r1, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	899a      	ldrh	r2, [r3, #12]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	791b      	ldrb	r3, [r3, #4]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f9f4 	bl	80097a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2204      	movs	r2, #4
 80093be:	761a      	strb	r2, [r3, #24]
      break;
 80093c0:	e1aa      	b.n	8009718 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	791b      	ldrb	r3, [r3, #4]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f002 ff93 	bl	800c2f4 <USBH_LL_GetURBState>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d110      	bne.n	80093fa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2209      	movs	r2, #9
 80093dc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2203      	movs	r2, #3
 80093e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80093f2:	2200      	movs	r2, #0
 80093f4:	4619      	mov	r1, r3
 80093f6:	f000 fb81 	bl	8009afc <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b05      	cmp	r3, #5
 80093fe:	d110      	bne.n	8009422 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009400:	2303      	movs	r3, #3
 8009402:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2203      	movs	r2, #3
 8009408:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009418:	2200      	movs	r2, #0
 800941a:	4619      	mov	r1, r3
 800941c:	f000 fb6e 	bl	8009afc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009420:	e173      	b.n	800970a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	2b04      	cmp	r3, #4
 8009426:	f040 8170 	bne.w	800970a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	220b      	movs	r2, #11
 800942e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2203      	movs	r2, #3
 8009434:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009444:	2200      	movs	r2, #0
 8009446:	4619      	mov	r1, r3
 8009448:	f000 fb58 	bl	8009afc <osMessagePut>
      break;
 800944c:	e15d      	b.n	800970a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6899      	ldr	r1, [r3, #8]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	899a      	ldrh	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	7958      	ldrb	r0, [r3, #5]
 800945a:	2301      	movs	r3, #1
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4603      	mov	r3, r0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f979 	bl	8009758 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2206      	movs	r2, #6
 8009476:	761a      	strb	r2, [r3, #24]
      break;
 8009478:	e14e      	b.n	8009718 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	795b      	ldrb	r3, [r3, #5]
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f002 ff37 	bl	800c2f4 <USBH_LL_GetURBState>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d111      	bne.n	80094b4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2207      	movs	r2, #7
 8009494:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2203      	movs	r2, #3
 800949a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094aa:	2200      	movs	r2, #0
 80094ac:	4619      	mov	r1, r3
 80094ae:	f000 fb25 	bl	8009afc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094b2:	e12c      	b.n	800970e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d113      	bne.n	80094e2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220c      	movs	r2, #12
 80094be:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80094c0:	2303      	movs	r3, #3
 80094c2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2203      	movs	r2, #3
 80094c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094d8:	2200      	movs	r2, #0
 80094da:	4619      	mov	r1, r3
 80094dc:	f000 fb0e 	bl	8009afc <osMessagePut>
      break;
 80094e0:	e115      	b.n	800970e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d111      	bne.n	800950c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2205      	movs	r2, #5
 80094ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2203      	movs	r2, #3
 80094f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009502:	2200      	movs	r2, #0
 8009504:	4619      	mov	r1, r3
 8009506:	f000 faf9 	bl	8009afc <osMessagePut>
      break;
 800950a:	e100      	b.n	800970e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b04      	cmp	r3, #4
 8009510:	f040 80fd 	bne.w	800970e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	220b      	movs	r2, #11
 8009518:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800951a:	2302      	movs	r3, #2
 800951c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2203      	movs	r2, #3
 8009522:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009532:	2200      	movs	r2, #0
 8009534:	4619      	mov	r1, r3
 8009536:	f000 fae1 	bl	8009afc <osMessagePut>
      break;
 800953a:	e0e8      	b.n	800970e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	791b      	ldrb	r3, [r3, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f92c 	bl	80097a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009550:	b29a      	uxth	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2208      	movs	r2, #8
 800955a:	761a      	strb	r2, [r3, #24]

      break;
 800955c:	e0dc      	b.n	8009718 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	791b      	ldrb	r3, [r3, #4]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f002 fec5 	bl	800c2f4 <USBH_LL_GetURBState>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d113      	bne.n	800959c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	220d      	movs	r2, #13
 8009578:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2203      	movs	r2, #3
 8009582:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009592:	2200      	movs	r2, #0
 8009594:	4619      	mov	r1, r3
 8009596:	f000 fab1 	bl	8009afc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800959a:	e0ba      	b.n	8009712 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d111      	bne.n	80095c6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	220b      	movs	r2, #11
 80095a6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2203      	movs	r2, #3
 80095ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095bc:	2200      	movs	r2, #0
 80095be:	4619      	mov	r1, r3
 80095c0:	f000 fa9c 	bl	8009afc <osMessagePut>
      break;
 80095c4:	e0a5      	b.n	8009712 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	f040 80a2 	bne.w	8009712 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80095ce:	2303      	movs	r3, #3
 80095d0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2203      	movs	r2, #3
 80095d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095e6:	2200      	movs	r2, #0
 80095e8:	4619      	mov	r1, r3
 80095ea:	f000 fa87 	bl	8009afc <osMessagePut>
      break;
 80095ee:	e090      	b.n	8009712 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	795a      	ldrb	r2, [r3, #5]
 80095f4:	2301      	movs	r3, #1
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	2200      	movs	r2, #0
 80095fc:	2100      	movs	r1, #0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f8aa 	bl	8009758 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	220a      	movs	r2, #10
 8009614:	761a      	strb	r2, [r3, #24]
      break;
 8009616:	e07f      	b.n	8009718 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	795b      	ldrb	r3, [r3, #5]
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f002 fe68 	bl	800c2f4 <USBH_LL_GetURBState>
 8009624:	4603      	mov	r3, r0
 8009626:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d113      	bne.n	8009656 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	220d      	movs	r2, #13
 8009636:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2203      	movs	r2, #3
 800963c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800964c:	2200      	movs	r2, #0
 800964e:	4619      	mov	r1, r3
 8009650:	f000 fa54 	bl	8009afc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009654:	e05f      	b.n	8009716 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d111      	bne.n	8009680 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2209      	movs	r2, #9
 8009660:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2203      	movs	r2, #3
 8009666:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009676:	2200      	movs	r2, #0
 8009678:	4619      	mov	r1, r3
 800967a:	f000 fa3f 	bl	8009afc <osMessagePut>
      break;
 800967e:	e04a      	b.n	8009716 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	2b04      	cmp	r3, #4
 8009684:	d147      	bne.n	8009716 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	220b      	movs	r2, #11
 800968a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2203      	movs	r2, #3
 8009690:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096a0:	2200      	movs	r2, #0
 80096a2:	4619      	mov	r1, r3
 80096a4:	f000 fa2a 	bl	8009afc <osMessagePut>
      break;
 80096a8:	e035      	b.n	8009716 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	7e5b      	ldrb	r3, [r3, #25]
 80096ae:	3301      	adds	r3, #1
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	765a      	strb	r2, [r3, #25]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	7e5b      	ldrb	r3, [r3, #25]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d806      	bhi.n	80096cc <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80096ca:	e025      	b.n	8009718 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096d2:	2106      	movs	r1, #6
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	795b      	ldrb	r3, [r3, #5]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f90d 	bl	8009904 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	791b      	ldrb	r3, [r3, #4]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f907 	bl	8009904 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80096fc:	2302      	movs	r3, #2
 80096fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009700:	e00a      	b.n	8009718 <USBH_HandleControl+0x488>

    default:
      break;
 8009702:	bf00      	nop
 8009704:	e008      	b.n	8009718 <USBH_HandleControl+0x488>
      break;
 8009706:	bf00      	nop
 8009708:	e006      	b.n	8009718 <USBH_HandleControl+0x488>
      break;
 800970a:	bf00      	nop
 800970c:	e004      	b.n	8009718 <USBH_HandleControl+0x488>
      break;
 800970e:	bf00      	nop
 8009710:	e002      	b.n	8009718 <USBH_HandleControl+0x488>
      break;
 8009712:	bf00      	nop
 8009714:	e000      	b.n	8009718 <USBH_HandleControl+0x488>
      break;
 8009716:	bf00      	nop
  }

  return status;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop

08009724 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af04      	add	r7, sp, #16
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	4613      	mov	r3, r2
 8009730:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009732:	79f9      	ldrb	r1, [r7, #7]
 8009734:	2300      	movs	r3, #0
 8009736:	9303      	str	r3, [sp, #12]
 8009738:	2308      	movs	r3, #8
 800973a:	9302      	str	r3, [sp, #8]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	2300      	movs	r3, #0
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f002 fda2 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af04      	add	r7, sp, #16
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4611      	mov	r1, r2
 8009764:	461a      	mov	r2, r3
 8009766:	460b      	mov	r3, r1
 8009768:	80fb      	strh	r3, [r7, #6]
 800976a:	4613      	mov	r3, r2
 800976c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800977c:	7979      	ldrb	r1, [r7, #5]
 800977e:	7e3b      	ldrb	r3, [r7, #24]
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	9302      	str	r3, [sp, #8]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	2301      	movs	r3, #1
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	2300      	movs	r3, #0
 8009790:	2200      	movs	r2, #0
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f002 fd7d 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b088      	sub	sp, #32
 80097a6:	af04      	add	r7, sp, #16
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	4611      	mov	r1, r2
 80097ae:	461a      	mov	r2, r3
 80097b0:	460b      	mov	r3, r1
 80097b2:	80fb      	strh	r3, [r7, #6]
 80097b4:	4613      	mov	r3, r2
 80097b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80097b8:	7979      	ldrb	r1, [r7, #5]
 80097ba:	2300      	movs	r3, #0
 80097bc:	9303      	str	r3, [sp, #12]
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	9302      	str	r3, [sp, #8]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	2301      	movs	r3, #1
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	2300      	movs	r3, #0
 80097cc:	2201      	movs	r2, #1
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f002 fd5f 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80097d4:	2300      	movs	r3, #0

}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b088      	sub	sp, #32
 80097e2:	af04      	add	r7, sp, #16
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	4611      	mov	r1, r2
 80097ea:	461a      	mov	r2, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	80fb      	strh	r3, [r7, #6]
 80097f0:	4613      	mov	r3, r2
 80097f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009802:	7979      	ldrb	r1, [r7, #5]
 8009804:	7e3b      	ldrb	r3, [r7, #24]
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	9302      	str	r3, [sp, #8]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	2301      	movs	r3, #1
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2302      	movs	r3, #2
 8009816:	2200      	movs	r2, #0
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f002 fd3a 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af04      	add	r7, sp, #16
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4611      	mov	r1, r2
 8009834:	461a      	mov	r2, r3
 8009836:	460b      	mov	r3, r1
 8009838:	80fb      	strh	r3, [r7, #6]
 800983a:	4613      	mov	r3, r2
 800983c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800983e:	7979      	ldrb	r1, [r7, #5]
 8009840:	2300      	movs	r3, #0
 8009842:	9303      	str	r3, [sp, #12]
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	9302      	str	r3, [sp, #8]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	2301      	movs	r3, #1
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	2302      	movs	r3, #2
 8009852:	2201      	movs	r2, #1
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f002 fd1c 	bl	800c292 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af04      	add	r7, sp, #16
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	4608      	mov	r0, r1
 800986e:	4611      	mov	r1, r2
 8009870:	461a      	mov	r2, r3
 8009872:	4603      	mov	r3, r0
 8009874:	70fb      	strb	r3, [r7, #3]
 8009876:	460b      	mov	r3, r1
 8009878:	70bb      	strb	r3, [r7, #2]
 800987a:	4613      	mov	r3, r2
 800987c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800987e:	7878      	ldrb	r0, [r7, #1]
 8009880:	78ba      	ldrb	r2, [r7, #2]
 8009882:	78f9      	ldrb	r1, [r7, #3]
 8009884:	8b3b      	ldrh	r3, [r7, #24]
 8009886:	9302      	str	r3, [sp, #8]
 8009888:	7d3b      	ldrb	r3, [r7, #20]
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	7c3b      	ldrb	r3, [r7, #16]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	4603      	mov	r3, r0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f002 fcaf 	bl	800c1f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f002 fcce 	bl	800c254 <USBH_LL_ClosePipe>

  return USBH_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f836 	bl	8009940 <USBH_GetFreePipe>
 80098d4:	4603      	mov	r3, r0
 80098d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80098d8:	89fb      	ldrh	r3, [r7, #14]
 80098da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098de:	4293      	cmp	r3, r2
 80098e0:	d00a      	beq.n	80098f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80098e2:	78fa      	ldrb	r2, [r7, #3]
 80098e4:	89fb      	ldrh	r3, [r7, #14]
 80098e6:	f003 030f 	and.w	r3, r3, #15
 80098ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	33e0      	adds	r3, #224	; 0xe0
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	b2db      	uxtb	r3, r3
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	2b0a      	cmp	r3, #10
 8009914:	d80d      	bhi.n	8009932 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009916:	78fb      	ldrb	r3, [r7, #3]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	33e0      	adds	r3, #224	; 0xe0
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	33e0      	adds	r3, #224	; 0xe0
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800994c:	2300      	movs	r3, #0
 800994e:	73fb      	strb	r3, [r7, #15]
 8009950:	e00f      	b.n	8009972 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	33e0      	adds	r3, #224	; 0xe0
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	b29b      	uxth	r3, r3
 800996a:	e007      	b.n	800997c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	3301      	adds	r3, #1
 8009970:	73fb      	strb	r3, [r7, #15]
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	2b0a      	cmp	r3, #10
 8009976:	d9ec      	bls.n	8009952 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009978:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800999a:	2b84      	cmp	r3, #132	; 0x84
 800999c:	d005      	beq.n	80099aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800999e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4413      	add	r3, r2
 80099a6:	3303      	adds	r3, #3
 80099a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80099aa:	68fb      	ldr	r3, [r7, #12]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099be:	f3ef 8305 	mrs	r3, IPSR
 80099c2:	607b      	str	r3, [r7, #4]
  return(result);
 80099c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bf14      	ite	ne
 80099ca:	2301      	movne	r3, #1
 80099cc:	2300      	moveq	r3, #0
 80099ce:	b2db      	uxtb	r3, r3
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80099e0:	f001 f8f4 	bl	800abcc <vTaskStartScheduler>
  
  return osOK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	bd80      	pop	{r7, pc}

080099ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80099ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ec:	b089      	sub	sp, #36	; 0x24
 80099ee:	af04      	add	r7, sp, #16
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d020      	beq.n	8009a3e <osThreadCreate+0x54>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01c      	beq.n	8009a3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685c      	ldr	r4, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681d      	ldr	r5, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691e      	ldr	r6, [r3, #16]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff ffb6 	bl	8009988 <makeFreeRtosPriority>
 8009a1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a26:	9202      	str	r2, [sp, #8]
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	9100      	str	r1, [sp, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	4632      	mov	r2, r6
 8009a30:	4629      	mov	r1, r5
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fefb 	bl	800a82e <xTaskCreateStatic>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e01c      	b.n	8009a78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685c      	ldr	r4, [r3, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a4a:	b29e      	uxth	r6, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff ff98 	bl	8009988 <makeFreeRtosPriority>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	f107 030c 	add.w	r3, r7, #12
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	9200      	str	r2, [sp, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	4632      	mov	r2, r6
 8009a66:	4629      	mov	r1, r5
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 ff3a 	bl	800a8e2 <xTaskCreate>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d001      	beq.n	8009a78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e000      	b.n	8009a7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a78:	68fb      	ldr	r3, [r7, #12]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <osDelay+0x16>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	e000      	b.n	8009a9a <osDelay+0x18>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 f862 	bl	800ab64 <vTaskDelay>
  
  return osOK;
 8009aa0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009aaa:	b590      	push	{r4, r7, lr}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af02      	add	r7, sp, #8
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d012      	beq.n	8009ae2 <osMessageCreate+0x38>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00e      	beq.n	8009ae2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6859      	ldr	r1, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68dc      	ldr	r4, [r3, #12]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	4623      	mov	r3, r4
 8009ada:	f000 f9df 	bl	8009e9c <xQueueGenericCreateStatic>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	e008      	b.n	8009af4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	4619      	mov	r1, r3
 8009aee:	f000 fa48 	bl	8009f82 <xQueueGenericCreate>
 8009af2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}

08009afc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <osMessagePut+0x1e>
    ticks = 1;
 8009b16:	2301      	movs	r3, #1
 8009b18:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009b1a:	f7ff ff4d 	bl	80099b8 <inHandlerMode>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d018      	beq.n	8009b56 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009b24:	f107 0210 	add.w	r2, r7, #16
 8009b28:	f107 0108 	add.w	r1, r7, #8
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 fb80 	bl	800a234 <xQueueGenericSendFromISR>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d001      	beq.n	8009b3e <osMessagePut+0x42>
      return osErrorOS;
 8009b3a:	23ff      	movs	r3, #255	; 0xff
 8009b3c:	e018      	b.n	8009b70 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d014      	beq.n	8009b6e <osMessagePut+0x72>
 8009b44:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <osMessagePut+0x7c>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	e00b      	b.n	8009b6e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009b56:	f107 0108 	add.w	r1, r7, #8
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fa6e 	bl	800a040 <xQueueGenericSend>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d001      	beq.n	8009b6e <osMessagePut+0x72>
      return osErrorOS;
 8009b6a:	23ff      	movs	r3, #255	; 0xff
 8009b6c:	e000      	b.n	8009b70 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b08b      	sub	sp, #44	; 0x2c
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10a      	bne.n	8009bac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009b96:	2380      	movs	r3, #128	; 0x80
 8009b98:	617b      	str	r3, [r7, #20]
    return event;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	461c      	mov	r4, r3
 8009b9e:	f107 0314 	add.w	r3, r7, #20
 8009ba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009baa:	e054      	b.n	8009c56 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d103      	bne.n	8009bc4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc2:	e009      	b.n	8009bd8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d006      	beq.n	8009bd8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <osMessageGet+0x5c>
      ticks = 1;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009bd8:	f7ff feee 	bl	80099b8 <inHandlerMode>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01c      	beq.n	8009c1c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009be2:	f107 0220 	add.w	r2, r7, #32
 8009be6:	f107 0314 	add.w	r3, r7, #20
 8009bea:	3304      	adds	r3, #4
 8009bec:	4619      	mov	r1, r3
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	f000 fc90 	bl	800a514 <xQueueReceiveFromISR>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d102      	bne.n	8009c00 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	617b      	str	r3, [r7, #20]
 8009bfe:	e001      	b.n	8009c04 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01d      	beq.n	8009c46 <osMessageGet+0xca>
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <osMessageGet+0xe4>)
 8009c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	e014      	b.n	8009c46 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009c1c:	f107 0314 	add.w	r3, r7, #20
 8009c20:	3304      	adds	r3, #4
 8009c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c24:	4619      	mov	r1, r3
 8009c26:	68b8      	ldr	r0, [r7, #8]
 8009c28:	f000 fb98 	bl	800a35c <xQueueReceive>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d102      	bne.n	8009c38 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009c32:	2310      	movs	r3, #16
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	e006      	b.n	8009c46 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <osMessageGet+0xc6>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e000      	b.n	8009c44 <osMessageGet+0xc8>
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	461c      	mov	r4, r3
 8009c4a:	f107 0314 	add.w	r3, r7, #20
 8009c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	372c      	adds	r7, #44	; 0x2c
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd90      	pop	{r4, r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	e000ed04 	.word	0xe000ed04

08009c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f103 0208 	add.w	r2, r3, #8
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295
 8009c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f103 0208 	add.w	r2, r3, #8
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f103 0208 	add.w	r2, r3, #8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	601a      	str	r2, [r3, #0]
}
 8009cfa:	bf00      	nop
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1c:	d103      	bne.n	8009d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e00c      	b.n	8009d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	e002      	b.n	8009d34 <vListInsert+0x2e>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d2f6      	bcs.n	8009d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	601a      	str	r2, [r3, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6892      	ldr	r2, [r2, #8]
 8009d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	6852      	ldr	r2, [r2, #4]
 8009d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d103      	bne.n	8009dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	1e5a      	subs	r2, r3, #1
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	60bb      	str	r3, [r7, #8]
 8009df2:	e7fe      	b.n	8009df2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009df4:	f001 fd32 	bl	800b85c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	68f9      	ldr	r1, [r7, #12]
 8009e02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e04:	fb01 f303 	mul.w	r3, r1, r3
 8009e08:	441a      	add	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e24:	3b01      	subs	r3, #1
 8009e26:	68f9      	ldr	r1, [r7, #12]
 8009e28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	441a      	add	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	22ff      	movs	r2, #255	; 0xff
 8009e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	22ff      	movs	r2, #255	; 0xff
 8009e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d114      	bne.n	8009e74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01a      	beq.n	8009e88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3310      	adds	r3, #16
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 f91c 	bl	800b094 <xTaskRemoveFromEventList>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d012      	beq.n	8009e88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e62:	4b0d      	ldr	r3, [pc, #52]	; (8009e98 <xQueueGenericReset+0xcc>)
 8009e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	e009      	b.n	8009e88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3310      	adds	r3, #16
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff fef3 	bl	8009c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3324      	adds	r3, #36	; 0x24
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff feee 	bl	8009c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e88:	f001 fd16 	bl	800b8b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e8c:	2301      	movs	r3, #1
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	e000ed04 	.word	0xe000ed04

08009e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08e      	sub	sp, #56	; 0x38
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d109      	bne.n	8009ec4 <xQueueGenericCreateStatic+0x28>
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ec2:	e7fe      	b.n	8009ec2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <xQueueGenericCreateStatic+0x42>
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
 8009edc:	e7fe      	b.n	8009edc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <xQueueGenericCreateStatic+0x4e>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <xQueueGenericCreateStatic+0x52>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <xQueueGenericCreateStatic+0x54>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d109      	bne.n	8009f08 <xQueueGenericCreateStatic+0x6c>
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	623b      	str	r3, [r7, #32]
 8009f06:	e7fe      	b.n	8009f06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <xQueueGenericCreateStatic+0x78>
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <xQueueGenericCreateStatic+0x7c>
 8009f14:	2301      	movs	r3, #1
 8009f16:	e000      	b.n	8009f1a <xQueueGenericCreateStatic+0x7e>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d109      	bne.n	8009f32 <xQueueGenericCreateStatic+0x96>
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	e7fe      	b.n	8009f30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f32:	2348      	movs	r3, #72	; 0x48
 8009f34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b48      	cmp	r3, #72	; 0x48
 8009f3a:	d009      	beq.n	8009f50 <xQueueGenericCreateStatic+0xb4>
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	e7fe      	b.n	8009f4e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00d      	beq.n	8009f78 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	68b9      	ldr	r1, [r7, #8]
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 f844 	bl	800a000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3730      	adds	r7, #48	; 0x30
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b08a      	sub	sp, #40	; 0x28
 8009f86:	af02      	add	r7, sp, #8
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <xQueueGenericCreate+0x28>
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	613b      	str	r3, [r7, #16]
 8009fa8:	e7fe      	b.n	8009fa8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]
 8009fb4:	e004      	b.n	8009fc0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
 8009fbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	3348      	adds	r3, #72	; 0x48
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 fd63 	bl	800ba90 <pvPortMalloc>
 8009fca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d011      	beq.n	8009ff6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	3348      	adds	r3, #72	; 0x48
 8009fda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fe4:	79fa      	ldrb	r2, [r7, #7]
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	4613      	mov	r3, r2
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f805 	bl	800a000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3720      	adds	r7, #32
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e002      	b.n	800a022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a02e:	2101      	movs	r1, #1
 800a030:	69b8      	ldr	r0, [r7, #24]
 800a032:	f7ff fecb 	bl	8009dcc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08e      	sub	sp, #56	; 0x38
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a04e:	2300      	movs	r3, #0
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d109      	bne.n	800a070 <xQueueGenericSend+0x30>
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a06e:	e7fe      	b.n	800a06e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <xQueueGenericSend+0x3e>
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <xQueueGenericSend+0x42>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <xQueueGenericSend+0x44>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <xQueueGenericSend+0x5c>
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
 800a09a:	e7fe      	b.n	800a09a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d103      	bne.n	800a0aa <xQueueGenericSend+0x6a>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <xQueueGenericSend+0x6e>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueGenericSend+0x70>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d109      	bne.n	800a0c8 <xQueueGenericSend+0x88>
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	623b      	str	r3, [r7, #32]
 800a0c6:	e7fe      	b.n	800a0c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0c8:	f001 f99c 	bl	800b404 <xTaskGetSchedulerState>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <xQueueGenericSend+0x98>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <xQueueGenericSend+0x9c>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <xQueueGenericSend+0x9e>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d109      	bne.n	800a0f6 <xQueueGenericSend+0xb6>
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0f6:	f001 fbb1 	bl	800b85c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a102:	429a      	cmp	r2, r3
 800a104:	d302      	bcc.n	800a10c <xQueueGenericSend+0xcc>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d129      	bne.n	800a160 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a112:	f000 fa7c 	bl	800a60e <prvCopyDataToQueue>
 800a116:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d010      	beq.n	800a142 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	3324      	adds	r3, #36	; 0x24
 800a124:	4618      	mov	r0, r3
 800a126:	f000 ffb5 	bl	800b094 <xTaskRemoveFromEventList>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d013      	beq.n	800a158 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a130:	4b3f      	ldr	r3, [pc, #252]	; (800a230 <xQueueGenericSend+0x1f0>)
 800a132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	e00a      	b.n	800a158 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a148:	4b39      	ldr	r3, [pc, #228]	; (800a230 <xQueueGenericSend+0x1f0>)
 800a14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a158:	f001 fbae 	bl	800b8b8 <vPortExitCritical>
				return pdPASS;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e063      	b.n	800a228 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d103      	bne.n	800a16e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a166:	f001 fba7 	bl	800b8b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e05c      	b.n	800a228 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a174:	f107 0314 	add.w	r3, r7, #20
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 ffed 	bl	800b158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a17e:	2301      	movs	r3, #1
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a182:	f001 fb99 	bl	800b8b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a186:	f000 fd7f 	bl	800ac88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a18a:	f001 fb67 	bl	800b85c <vPortEnterCritical>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a194:	b25b      	sxtb	r3, r3
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d103      	bne.n	800a1a4 <xQueueGenericSend+0x164>
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1aa:	b25b      	sxtb	r3, r3
 800a1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b0:	d103      	bne.n	800a1ba <xQueueGenericSend+0x17a>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1ba:	f001 fb7d 	bl	800b8b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1be:	1d3a      	adds	r2, r7, #4
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 ffdc 	bl	800b184 <xTaskCheckForTimeOut>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d124      	bne.n	800a21c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d4:	f000 fb13 	bl	800a7fe <prvIsQueueFull>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d018      	beq.n	800a210 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	3310      	adds	r3, #16
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 ff30 	bl	800b04c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ee:	f000 fa9e 	bl	800a72e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1f2:	f000 fd57 	bl	800aca4 <xTaskResumeAll>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f47f af7c 	bne.w	800a0f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a1fe:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <xQueueGenericSend+0x1f0>)
 800a200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	e772      	b.n	800a0f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a212:	f000 fa8c 	bl	800a72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a216:	f000 fd45 	bl	800aca4 <xTaskResumeAll>
 800a21a:	e76c      	b.n	800a0f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a21e:	f000 fa86 	bl	800a72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a222:	f000 fd3f 	bl	800aca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3738      	adds	r7, #56	; 0x38
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08e      	sub	sp, #56	; 0x38
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d109      	bne.n	800a260 <xQueueGenericSendFromISR+0x2c>
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
 800a25e:	e7fe      	b.n	800a25e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d103      	bne.n	800a26e <xQueueGenericSendFromISR+0x3a>
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <xQueueGenericSendFromISR+0x3e>
 800a26e:	2301      	movs	r3, #1
 800a270:	e000      	b.n	800a274 <xQueueGenericSendFromISR+0x40>
 800a272:	2300      	movs	r3, #0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <xQueueGenericSendFromISR+0x58>
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	623b      	str	r3, [r7, #32]
 800a28a:	e7fe      	b.n	800a28a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d103      	bne.n	800a29a <xQueueGenericSendFromISR+0x66>
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <xQueueGenericSendFromISR+0x6a>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <xQueueGenericSendFromISR+0x6c>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d109      	bne.n	800a2b8 <xQueueGenericSendFromISR+0x84>
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	61fb      	str	r3, [r7, #28]
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2b8:	f001 fbac 	bl	800ba14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2bc:	f3ef 8211 	mrs	r2, BASEPRI
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	61ba      	str	r2, [r7, #24]
 800a2d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d302      	bcc.n	800a2ea <xQueueGenericSendFromISR+0xb6>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d12c      	bne.n	800a344 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2fa:	f000 f988 	bl	800a60e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d112      	bne.n	800a32e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d016      	beq.n	800a33e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	3324      	adds	r3, #36	; 0x24
 800a314:	4618      	mov	r0, r3
 800a316:	f000 febd 	bl	800b094 <xTaskRemoveFromEventList>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00e      	beq.n	800a33e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	e007      	b.n	800a33e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a32e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a332:	3301      	adds	r3, #1
 800a334:	b2db      	uxtb	r3, r3
 800a336:	b25a      	sxtb	r2, r3
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a33e:	2301      	movs	r3, #1
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a342:	e001      	b.n	800a348 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a344:	2300      	movs	r3, #0
 800a346:	637b      	str	r3, [r7, #52]	; 0x34
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a354:	4618      	mov	r0, r3
 800a356:	3738      	adds	r7, #56	; 0x38
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08c      	sub	sp, #48	; 0x30
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a368:	2300      	movs	r3, #0
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <xQueueReceive+0x2e>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	623b      	str	r3, [r7, #32]
 800a388:	e7fe      	b.n	800a388 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d103      	bne.n	800a398 <xQueueReceive+0x3c>
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <xQueueReceive+0x40>
 800a398:	2301      	movs	r3, #1
 800a39a:	e000      	b.n	800a39e <xQueueReceive+0x42>
 800a39c:	2300      	movs	r3, #0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <xQueueReceive+0x5a>
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3b6:	f001 f825 	bl	800b404 <xTaskGetSchedulerState>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <xQueueReceive+0x6a>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <xQueueReceive+0x6e>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e000      	b.n	800a3cc <xQueueReceive+0x70>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d109      	bne.n	800a3e4 <xQueueReceive+0x88>
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	e7fe      	b.n	800a3e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3e4:	f001 fa3a 	bl	800b85c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d01f      	beq.n	800a434 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f8:	f000 f973 	bl	800a6e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	1e5a      	subs	r2, r3, #1
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00f      	beq.n	800a42c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	3310      	adds	r3, #16
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fe3f 	bl	800b094 <xTaskRemoveFromEventList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d007      	beq.n	800a42c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a41c:	4b3c      	ldr	r3, [pc, #240]	; (800a510 <xQueueReceive+0x1b4>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a42c:	f001 fa44 	bl	800b8b8 <vPortExitCritical>
				return pdPASS;
 800a430:	2301      	movs	r3, #1
 800a432:	e069      	b.n	800a508 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d103      	bne.n	800a442 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a43a:	f001 fa3d 	bl	800b8b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a43e:	2300      	movs	r3, #0
 800a440:	e062      	b.n	800a508 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d106      	bne.n	800a456 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a448:	f107 0310 	add.w	r3, r7, #16
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fe83 	bl	800b158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a452:	2301      	movs	r3, #1
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a456:	f001 fa2f 	bl	800b8b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a45a:	f000 fc15 	bl	800ac88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a45e:	f001 f9fd 	bl	800b85c <vPortEnterCritical>
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a468:	b25b      	sxtb	r3, r3
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d103      	bne.n	800a478 <xQueueReceive+0x11c>
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a47e:	b25b      	sxtb	r3, r3
 800a480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a484:	d103      	bne.n	800a48e <xQueueReceive+0x132>
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a48e:	f001 fa13 	bl	800b8b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a492:	1d3a      	adds	r2, r7, #4
 800a494:	f107 0310 	add.w	r3, r7, #16
 800a498:	4611      	mov	r1, r2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fe72 	bl	800b184 <xTaskCheckForTimeOut>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d123      	bne.n	800a4ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a8:	f000 f993 	bl	800a7d2 <prvIsQueueEmpty>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d017      	beq.n	800a4e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	3324      	adds	r3, #36	; 0x24
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fdc6 	bl	800b04c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c2:	f000 f934 	bl	800a72e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4c6:	f000 fbed 	bl	800aca4 <xTaskResumeAll>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d189      	bne.n	800a3e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <xQueueReceive+0x1b4>)
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	e780      	b.n	800a3e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e4:	f000 f923 	bl	800a72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4e8:	f000 fbdc 	bl	800aca4 <xTaskResumeAll>
 800a4ec:	e77a      	b.n	800a3e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f0:	f000 f91d 	bl	800a72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4f4:	f000 fbd6 	bl	800aca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4fa:	f000 f96a 	bl	800a7d2 <prvIsQueueEmpty>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	f43f af6f 	beq.w	800a3e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a506:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3730      	adds	r7, #48	; 0x30
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08e      	sub	sp, #56	; 0x38
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	2b00      	cmp	r3, #0
 800a528:	d109      	bne.n	800a53e <xQueueReceiveFromISR+0x2a>
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	623b      	str	r3, [r7, #32]
 800a53c:	e7fe      	b.n	800a53c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d103      	bne.n	800a54c <xQueueReceiveFromISR+0x38>
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <xQueueReceiveFromISR+0x3c>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e000      	b.n	800a552 <xQueueReceiveFromISR+0x3e>
 800a550:	2300      	movs	r3, #0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <xQueueReceiveFromISR+0x56>
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	e7fe      	b.n	800a568 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a56a:	f001 fa53 	bl	800ba14 <vPortValidateInterruptPriority>
	__asm volatile
 800a56e:	f3ef 8211 	mrs	r2, BASEPRI
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	61ba      	str	r2, [r7, #24]
 800a584:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a586:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a588:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d02f      	beq.n	800a5f6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5a4:	f000 f89d 	bl	800a6e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	1e5a      	subs	r2, r3, #1
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a5b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d112      	bne.n	800a5e0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d016      	beq.n	800a5f0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	3310      	adds	r3, #16
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 fd64 	bl	800b094 <xTaskRemoveFromEventList>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00e      	beq.n	800a5f0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00b      	beq.n	800a5f0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]
 800a5de:	e007      	b.n	800a5f0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	b25a      	sxtb	r2, r3
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a5f4:	e001      	b.n	800a5fa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a606:	4618      	mov	r0, r3
 800a608:	3738      	adds	r7, #56	; 0x38
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b086      	sub	sp, #24
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	60b9      	str	r1, [r7, #8]
 800a618:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10d      	bne.n	800a648 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d14d      	bne.n	800a6d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 ff01 	bl	800b440 <xTaskPriorityDisinherit>
 800a63e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	609a      	str	r2, [r3, #8]
 800a646:	e043      	b.n	800a6d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d119      	bne.n	800a682 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6858      	ldr	r0, [r3, #4]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	461a      	mov	r2, r3
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	f001 ff35 	bl	800c4c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	441a      	add	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	429a      	cmp	r2, r3
 800a676:	d32b      	bcc.n	800a6d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	605a      	str	r2, [r3, #4]
 800a680:	e026      	b.n	800a6d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	68d8      	ldr	r0, [r3, #12]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68a:	461a      	mov	r2, r3
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	f001 ff1b 	bl	800c4c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	425b      	negs	r3, r3
 800a69c:	441a      	add	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d207      	bcs.n	800a6be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	425b      	negs	r3, r3
 800a6b8:	441a      	add	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d105      	bne.n	800a6d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6d8:	697b      	ldr	r3, [r7, #20]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d018      	beq.n	800a726 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fc:	441a      	add	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d303      	bcc.n	800a716 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68d9      	ldr	r1, [r3, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	461a      	mov	r2, r3
 800a720:	6838      	ldr	r0, [r7, #0]
 800a722:	f001 fed1 	bl	800c4c8 <memcpy>
	}
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a736:	f001 f891 	bl	800b85c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a740:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a742:	e011      	b.n	800a768 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d012      	beq.n	800a772 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fc9f 	bl	800b094 <xTaskRemoveFromEventList>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a75c:	f000 fd72 	bl	800b244 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	3b01      	subs	r3, #1
 800a764:	b2db      	uxtb	r3, r3
 800a766:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dce9      	bgt.n	800a744 <prvUnlockQueue+0x16>
 800a770:	e000      	b.n	800a774 <prvUnlockQueue+0x46>
					break;
 800a772:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	22ff      	movs	r2, #255	; 0xff
 800a778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a77c:	f001 f89c 	bl	800b8b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a780:	f001 f86c 	bl	800b85c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a78a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a78c:	e011      	b.n	800a7b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d012      	beq.n	800a7bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3310      	adds	r3, #16
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fc7a 	bl	800b094 <xTaskRemoveFromEventList>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7a6:	f000 fd4d 	bl	800b244 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dce9      	bgt.n	800a78e <prvUnlockQueue+0x60>
 800a7ba:	e000      	b.n	800a7be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	22ff      	movs	r2, #255	; 0xff
 800a7c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7c6:	f001 f877 	bl	800b8b8 <vPortExitCritical>
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7da:	f001 f83f 	bl	800b85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	e001      	b.n	800a7f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f0:	f001 f862 	bl	800b8b8 <vPortExitCritical>

	return xReturn;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a806:	f001 f829 	bl	800b85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a812:	429a      	cmp	r2, r3
 800a814:	d102      	bne.n	800a81c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a816:	2301      	movs	r3, #1
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	e001      	b.n	800a820 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a820:	f001 f84a 	bl	800b8b8 <vPortExitCritical>

	return xReturn;
 800a824:	68fb      	ldr	r3, [r7, #12]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b08e      	sub	sp, #56	; 0x38
 800a832:	af04      	add	r7, sp, #16
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	607a      	str	r2, [r7, #4]
 800a83a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d109      	bne.n	800a856 <xTaskCreateStatic+0x28>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	623b      	str	r3, [r7, #32]
 800a854:	e7fe      	b.n	800a854 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d109      	bne.n	800a870 <xTaskCreateStatic+0x42>
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	61fb      	str	r3, [r7, #28]
 800a86e:	e7fe      	b.n	800a86e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a870:	2358      	movs	r3, #88	; 0x58
 800a872:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b58      	cmp	r3, #88	; 0x58
 800a878:	d009      	beq.n	800a88e <xTaskCreateStatic+0x60>
 800a87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	e7fe      	b.n	800a88c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a88e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01e      	beq.n	800a8d4 <xTaskCreateStatic+0xa6>
 800a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01b      	beq.n	800a8d4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9303      	str	r3, [sp, #12]
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	9302      	str	r3, [sp, #8]
 800a8b6:	f107 0314 	add.w	r3, r7, #20
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	68b9      	ldr	r1, [r7, #8]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 f850 	bl	800a96c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8ce:	f000 f8df 	bl	800aa90 <prvAddNewTaskToReadyList>
 800a8d2:	e001      	b.n	800a8d8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8d8:	697b      	ldr	r3, [r7, #20]
	}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b08c      	sub	sp, #48	; 0x30
 800a8e6:	af04      	add	r7, sp, #16
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 f8ca 	bl	800ba90 <pvPortMalloc>
 800a8fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00e      	beq.n	800a922 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a904:	2058      	movs	r0, #88	; 0x58
 800a906:	f001 f8c3 	bl	800ba90 <pvPortMalloc>
 800a90a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	631a      	str	r2, [r3, #48]	; 0x30
 800a918:	e005      	b.n	800a926 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a91a:	6978      	ldr	r0, [r7, #20]
 800a91c:	f001 f97e 	bl	800bc1c <vPortFree>
 800a920:	e001      	b.n	800a926 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d017      	beq.n	800a95c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a934:	88fa      	ldrh	r2, [r7, #6]
 800a936:	2300      	movs	r3, #0
 800a938:	9303      	str	r3, [sp, #12]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	9302      	str	r3, [sp, #8]
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f80e 	bl	800a96c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a950:	69f8      	ldr	r0, [r7, #28]
 800a952:	f000 f89d 	bl	800aa90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a956:	2301      	movs	r3, #1
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	e002      	b.n	800a962 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a962:	69bb      	ldr	r3, [r7, #24]
	}
 800a964:	4618      	mov	r0, r3
 800a966:	3720      	adds	r7, #32
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	461a      	mov	r2, r3
 800a984:	21a5      	movs	r1, #165	; 0xa5
 800a986:	f001 fdaa 	bl	800c4de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a994:	3b01      	subs	r3, #1
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f023 0307 	bic.w	r3, r3, #7
 800a9a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d009      	beq.n	800a9c2 <prvInitialiseNewTask+0x56>
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	e7fe      	b.n	800a9c0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01f      	beq.n	800aa08 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
 800a9cc:	e012      	b.n	800a9f4 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	7819      	ldrb	r1, [r3, #0]
 800a9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	4413      	add	r3, r2
 800a9dc:	3334      	adds	r3, #52	; 0x34
 800a9de:	460a      	mov	r2, r1
 800a9e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d006      	beq.n	800a9fc <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	61fb      	str	r3, [r7, #28]
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	2b0f      	cmp	r3, #15
 800a9f8:	d9e9      	bls.n	800a9ce <prvInitialiseNewTask+0x62>
 800a9fa:	e000      	b.n	800a9fe <prvInitialiseNewTask+0x92>
			{
				break;
 800a9fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa06:	e003      	b.n	800aa10 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	2b06      	cmp	r3, #6
 800aa14:	d901      	bls.n	800aa1a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa16:	2306      	movs	r3, #6
 800aa18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa24:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	2200      	movs	r2, #0
 800aa2a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff f937 	bl	8009ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	3318      	adds	r3, #24
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff f932 	bl	8009ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	f1c3 0207 	rsb	r2, r3, #7
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	2200      	movs	r2, #0
 800aa5a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	2200      	movs	r2, #0
 800aa60:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	68f9      	ldr	r1, [r7, #12]
 800aa6e:	69b8      	ldr	r0, [r7, #24]
 800aa70:	f000 fdd0 	bl	800b614 <pxPortInitialiseStack>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa86:	bf00      	nop
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa98:	f000 fee0 	bl	800b85c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa9c:	4b2a      	ldr	r3, [pc, #168]	; (800ab48 <prvAddNewTaskToReadyList+0xb8>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	4a29      	ldr	r2, [pc, #164]	; (800ab48 <prvAddNewTaskToReadyList+0xb8>)
 800aaa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaa6:	4b29      	ldr	r3, [pc, #164]	; (800ab4c <prvAddNewTaskToReadyList+0xbc>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d109      	bne.n	800aac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aaae:	4a27      	ldr	r2, [pc, #156]	; (800ab4c <prvAddNewTaskToReadyList+0xbc>)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aab4:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <prvAddNewTaskToReadyList+0xb8>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d110      	bne.n	800aade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aabc:	f000 fbe8 	bl	800b290 <prvInitialiseTaskLists>
 800aac0:	e00d      	b.n	800aade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aac2:	4b23      	ldr	r3, [pc, #140]	; (800ab50 <prvAddNewTaskToReadyList+0xc0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d109      	bne.n	800aade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aaca:	4b20      	ldr	r3, [pc, #128]	; (800ab4c <prvAddNewTaskToReadyList+0xbc>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d802      	bhi.n	800aade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aad8:	4a1c      	ldr	r2, [pc, #112]	; (800ab4c <prvAddNewTaskToReadyList+0xbc>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aade:	4b1d      	ldr	r3, [pc, #116]	; (800ab54 <prvAddNewTaskToReadyList+0xc4>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	4a1b      	ldr	r2, [pc, #108]	; (800ab54 <prvAddNewTaskToReadyList+0xc4>)
 800aae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	2201      	movs	r2, #1
 800aaee:	409a      	lsls	r2, r3
 800aaf0:	4b19      	ldr	r3, [pc, #100]	; (800ab58 <prvAddNewTaskToReadyList+0xc8>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	4a18      	ldr	r2, [pc, #96]	; (800ab58 <prvAddNewTaskToReadyList+0xc8>)
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4a15      	ldr	r2, [pc, #84]	; (800ab5c <prvAddNewTaskToReadyList+0xcc>)
 800ab08:	441a      	add	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7ff f8d4 	bl	8009cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab16:	f000 fecf 	bl	800b8b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab1a:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <prvAddNewTaskToReadyList+0xc0>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab22:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <prvAddNewTaskToReadyList+0xbc>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d207      	bcs.n	800ab40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <prvAddNewTaskToReadyList+0xd0>)
 800ab32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	20000414 	.word	0x20000414
 800ab4c:	20000314 	.word	0x20000314
 800ab50:	20000420 	.word	0x20000420
 800ab54:	20000430 	.word	0x20000430
 800ab58:	2000041c 	.word	0x2000041c
 800ab5c:	20000318 	.word	0x20000318
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d016      	beq.n	800aba4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab76:	4b13      	ldr	r3, [pc, #76]	; (800abc4 <vTaskDelay+0x60>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d009      	beq.n	800ab92 <vTaskDelay+0x2e>
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	60bb      	str	r3, [r7, #8]
 800ab90:	e7fe      	b.n	800ab90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ab92:	f000 f879 	bl	800ac88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab96:	2100      	movs	r1, #0
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fcd5 	bl	800b548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab9e:	f000 f881 	bl	800aca4 <xTaskResumeAll>
 800aba2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d107      	bne.n	800abba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <vTaskDelay+0x64>)
 800abac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abba:	bf00      	nop
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	2000043c 	.word	0x2000043c
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	; 0x28
 800abd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abda:	463a      	mov	r2, r7
 800abdc:	1d39      	adds	r1, r7, #4
 800abde:	f107 0308 	add.w	r3, r7, #8
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f5 fcee 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	9202      	str	r2, [sp, #8]
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	2300      	movs	r3, #0
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	2300      	movs	r3, #0
 800abf8:	460a      	mov	r2, r1
 800abfa:	491d      	ldr	r1, [pc, #116]	; (800ac70 <vTaskStartScheduler+0xa4>)
 800abfc:	481d      	ldr	r0, [pc, #116]	; (800ac74 <vTaskStartScheduler+0xa8>)
 800abfe:	f7ff fe16 	bl	800a82e <xTaskCreateStatic>
 800ac02:	4602      	mov	r2, r0
 800ac04:	4b1c      	ldr	r3, [pc, #112]	; (800ac78 <vTaskStartScheduler+0xac>)
 800ac06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac08:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <vTaskStartScheduler+0xac>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac10:	2301      	movs	r3, #1
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	e001      	b.n	800ac1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d115      	bne.n	800ac4c <vTaskStartScheduler+0x80>
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac32:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <vTaskStartScheduler+0xb0>)
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac3a:	4b11      	ldr	r3, [pc, #68]	; (800ac80 <vTaskStartScheduler+0xb4>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac40:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <vTaskStartScheduler+0xb8>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac46:	f000 fd6b 	bl	800b720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac4a:	e00d      	b.n	800ac68 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac52:	d109      	bne.n	800ac68 <vTaskStartScheduler+0x9c>
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e7fe      	b.n	800ac66 <vTaskStartScheduler+0x9a>
}
 800ac68:	bf00      	nop
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	0800d4bc 	.word	0x0800d4bc
 800ac74:	0800b25d 	.word	0x0800b25d
 800ac78:	20000438 	.word	0x20000438
 800ac7c:	20000434 	.word	0x20000434
 800ac80:	20000420 	.word	0x20000420
 800ac84:	20000418 	.word	0x20000418

0800ac88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ac8c:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <vTaskSuspendAll+0x18>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3301      	adds	r3, #1
 800ac92:	4a03      	ldr	r2, [pc, #12]	; (800aca0 <vTaskSuspendAll+0x18>)
 800ac94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ac96:	bf00      	nop
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	2000043c 	.word	0x2000043c

0800aca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acae:	2300      	movs	r3, #0
 800acb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acb2:	4b41      	ldr	r3, [pc, #260]	; (800adb8 <xTaskResumeAll+0x114>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d109      	bne.n	800acce <xTaskResumeAll+0x2a>
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	e7fe      	b.n	800accc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acce:	f000 fdc5 	bl	800b85c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acd2:	4b39      	ldr	r3, [pc, #228]	; (800adb8 <xTaskResumeAll+0x114>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	4a37      	ldr	r2, [pc, #220]	; (800adb8 <xTaskResumeAll+0x114>)
 800acda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acdc:	4b36      	ldr	r3, [pc, #216]	; (800adb8 <xTaskResumeAll+0x114>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d161      	bne.n	800ada8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ace4:	4b35      	ldr	r3, [pc, #212]	; (800adbc <xTaskResumeAll+0x118>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d05d      	beq.n	800ada8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acec:	e02e      	b.n	800ad4c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acee:	4b34      	ldr	r3, [pc, #208]	; (800adc0 <xTaskResumeAll+0x11c>)
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3318      	adds	r3, #24
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff f83c 	bl	8009d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff f837 	bl	8009d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0e:	2201      	movs	r2, #1
 800ad10:	409a      	lsls	r2, r3
 800ad12:	4b2c      	ldr	r3, [pc, #176]	; (800adc4 <xTaskResumeAll+0x120>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	4a2a      	ldr	r2, [pc, #168]	; (800adc4 <xTaskResumeAll+0x120>)
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4a27      	ldr	r2, [pc, #156]	; (800adc8 <xTaskResumeAll+0x124>)
 800ad2a:	441a      	add	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f7fe ffc3 	bl	8009cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	4b23      	ldr	r3, [pc, #140]	; (800adcc <xTaskResumeAll+0x128>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d302      	bcc.n	800ad4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800ad46:	4b22      	ldr	r3, [pc, #136]	; (800add0 <xTaskResumeAll+0x12c>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad4c:	4b1c      	ldr	r3, [pc, #112]	; (800adc0 <xTaskResumeAll+0x11c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1cc      	bne.n	800acee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad5a:	f000 fb33 	bl	800b3c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ad5e:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <xTaskResumeAll+0x130>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d010      	beq.n	800ad8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad6a:	f000 f837 	bl	800addc <xTaskIncrementTick>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800ad74:	4b16      	ldr	r3, [pc, #88]	; (800add0 <xTaskResumeAll+0x12c>)
 800ad76:	2201      	movs	r2, #1
 800ad78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1f1      	bne.n	800ad6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <xTaskResumeAll+0x130>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <xTaskResumeAll+0x12c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad98:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <xTaskResumeAll+0x134>)
 800ad9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ada8:	f000 fd86 	bl	800b8b8 <vPortExitCritical>

	return xAlreadyYielded;
 800adac:	68bb      	ldr	r3, [r7, #8]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	2000043c 	.word	0x2000043c
 800adbc:	20000414 	.word	0x20000414
 800adc0:	200003d4 	.word	0x200003d4
 800adc4:	2000041c 	.word	0x2000041c
 800adc8:	20000318 	.word	0x20000318
 800adcc:	20000314 	.word	0x20000314
 800add0:	20000428 	.word	0x20000428
 800add4:	20000424 	.word	0x20000424
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade6:	4b4e      	ldr	r3, [pc, #312]	; (800af20 <xTaskIncrementTick+0x144>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 8087 	bne.w	800aefe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adf0:	4b4c      	ldr	r3, [pc, #304]	; (800af24 <xTaskIncrementTick+0x148>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3301      	adds	r3, #1
 800adf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800adf8:	4a4a      	ldr	r2, [pc, #296]	; (800af24 <xTaskIncrementTick+0x148>)
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d11f      	bne.n	800ae44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae04:	4b48      	ldr	r3, [pc, #288]	; (800af28 <xTaskIncrementTick+0x14c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d009      	beq.n	800ae22 <xTaskIncrementTick+0x46>
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	e7fe      	b.n	800ae20 <xTaskIncrementTick+0x44>
 800ae22:	4b41      	ldr	r3, [pc, #260]	; (800af28 <xTaskIncrementTick+0x14c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	4b40      	ldr	r3, [pc, #256]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a3e      	ldr	r2, [pc, #248]	; (800af28 <xTaskIncrementTick+0x14c>)
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	4a3e      	ldr	r2, [pc, #248]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	4b3e      	ldr	r3, [pc, #248]	; (800af30 <xTaskIncrementTick+0x154>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	4a3c      	ldr	r2, [pc, #240]	; (800af30 <xTaskIncrementTick+0x154>)
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	f000 fac0 	bl	800b3c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae44:	4b3b      	ldr	r3, [pc, #236]	; (800af34 <xTaskIncrementTick+0x158>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d348      	bcc.n	800aee0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae4e:	4b36      	ldr	r3, [pc, #216]	; (800af28 <xTaskIncrementTick+0x14c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae58:	4b36      	ldr	r3, [pc, #216]	; (800af34 <xTaskIncrementTick+0x158>)
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5e:	601a      	str	r2, [r3, #0]
					break;
 800ae60:	e03e      	b.n	800aee0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae62:	4b31      	ldr	r3, [pc, #196]	; (800af28 <xTaskIncrementTick+0x14c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d203      	bcs.n	800ae82 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae7a:	4a2e      	ldr	r2, [pc, #184]	; (800af34 <xTaskIncrementTick+0x158>)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae80:	e02e      	b.n	800aee0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe ff76 	bl	8009d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d004      	beq.n	800ae9e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	3318      	adds	r3, #24
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fe ff6d 	bl	8009d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	2201      	movs	r2, #1
 800aea4:	409a      	lsls	r2, r3
 800aea6:	4b24      	ldr	r3, [pc, #144]	; (800af38 <xTaskIncrementTick+0x15c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	4a22      	ldr	r2, [pc, #136]	; (800af38 <xTaskIncrementTick+0x15c>)
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4a1f      	ldr	r2, [pc, #124]	; (800af3c <xTaskIncrementTick+0x160>)
 800aebe:	441a      	add	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	3304      	adds	r3, #4
 800aec4:	4619      	mov	r1, r3
 800aec6:	4610      	mov	r0, r2
 800aec8:	f7fe fef9 	bl	8009cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed0:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <xTaskIncrementTick+0x164>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d3b9      	bcc.n	800ae4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800aeda:	2301      	movs	r3, #1
 800aedc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aede:	e7b6      	b.n	800ae4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aee0:	4b17      	ldr	r3, [pc, #92]	; (800af40 <xTaskIncrementTick+0x164>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee6:	4915      	ldr	r1, [pc, #84]	; (800af3c <xTaskIncrementTick+0x160>)
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d907      	bls.n	800af08 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800aef8:	2301      	movs	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e004      	b.n	800af08 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aefe:	4b11      	ldr	r3, [pc, #68]	; (800af44 <xTaskIncrementTick+0x168>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	4a0f      	ldr	r2, [pc, #60]	; (800af44 <xTaskIncrementTick+0x168>)
 800af06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800af08:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <xTaskIncrementTick+0x16c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800af14:	697b      	ldr	r3, [r7, #20]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	2000043c 	.word	0x2000043c
 800af24:	20000418 	.word	0x20000418
 800af28:	200003cc 	.word	0x200003cc
 800af2c:	200003d0 	.word	0x200003d0
 800af30:	2000042c 	.word	0x2000042c
 800af34:	20000434 	.word	0x20000434
 800af38:	2000041c 	.word	0x2000041c
 800af3c:	20000318 	.word	0x20000318
 800af40:	20000314 	.word	0x20000314
 800af44:	20000424 	.word	0x20000424
 800af48:	20000428 	.word	0x20000428

0800af4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af52:	4b39      	ldr	r3, [pc, #228]	; (800b038 <vTaskSwitchContext+0xec>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af5a:	4b38      	ldr	r3, [pc, #224]	; (800b03c <vTaskSwitchContext+0xf0>)
 800af5c:	2201      	movs	r2, #1
 800af5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af60:	e065      	b.n	800b02e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800af62:	4b36      	ldr	r3, [pc, #216]	; (800b03c <vTaskSwitchContext+0xf0>)
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800af68:	4b35      	ldr	r3, [pc, #212]	; (800b040 <vTaskSwitchContext+0xf4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800af74:	61bb      	str	r3, [r7, #24]
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d111      	bne.n	800afa4 <vTaskSwitchContext+0x58>
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	3304      	adds	r3, #4
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d10b      	bne.n	800afa4 <vTaskSwitchContext+0x58>
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	3308      	adds	r3, #8
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	429a      	cmp	r2, r3
 800af96:	d105      	bne.n	800afa4 <vTaskSwitchContext+0x58>
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	330c      	adds	r3, #12
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d008      	beq.n	800afb6 <vTaskSwitchContext+0x6a>
 800afa4:	4b26      	ldr	r3, [pc, #152]	; (800b040 <vTaskSwitchContext+0xf4>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <vTaskSwitchContext+0xf4>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3334      	adds	r3, #52	; 0x34
 800afae:	4619      	mov	r1, r3
 800afb0:	4610      	mov	r0, r2
 800afb2:	f7f5 faf4 	bl	800059e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afb6:	4b23      	ldr	r3, [pc, #140]	; (800b044 <vTaskSwitchContext+0xf8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	fab3 f383 	clz	r3, r3
 800afc2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800afc4:	7afb      	ldrb	r3, [r7, #11]
 800afc6:	f1c3 031f 	rsb	r3, r3, #31
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	491e      	ldr	r1, [pc, #120]	; (800b048 <vTaskSwitchContext+0xfc>)
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	440b      	add	r3, r1
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d109      	bne.n	800aff4 <vTaskSwitchContext+0xa8>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	607b      	str	r3, [r7, #4]
 800aff2:	e7fe      	b.n	800aff2 <vTaskSwitchContext+0xa6>
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	4613      	mov	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4a12      	ldr	r2, [pc, #72]	; (800b048 <vTaskSwitchContext+0xfc>)
 800b000:	4413      	add	r3, r2
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	605a      	str	r2, [r3, #4]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3308      	adds	r3, #8
 800b016:	429a      	cmp	r2, r3
 800b018:	d104      	bne.n	800b024 <vTaskSwitchContext+0xd8>
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	605a      	str	r2, [r3, #4]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	4a05      	ldr	r2, [pc, #20]	; (800b040 <vTaskSwitchContext+0xf4>)
 800b02c:	6013      	str	r3, [r2, #0]
}
 800b02e:	bf00      	nop
 800b030:	3720      	adds	r7, #32
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	2000043c 	.word	0x2000043c
 800b03c:	20000428 	.word	0x20000428
 800b040:	20000314 	.word	0x20000314
 800b044:	2000041c 	.word	0x2000041c
 800b048:	20000318 	.word	0x20000318

0800b04c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d109      	bne.n	800b070 <vTaskPlaceOnEventList+0x24>
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	e7fe      	b.n	800b06e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <vTaskPlaceOnEventList+0x44>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3318      	adds	r3, #24
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7fe fe44 	bl	8009d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b07e:	2101      	movs	r1, #1
 800b080:	6838      	ldr	r0, [r7, #0]
 800b082:	f000 fa61 	bl	800b548 <prvAddCurrentTaskToDelayedList>
}
 800b086:	bf00      	nop
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000314 	.word	0x20000314

0800b094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <xTaskRemoveFromEventList+0x2a>
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	e7fe      	b.n	800b0bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	3318      	adds	r3, #24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fe58 	bl	8009d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0c8:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <xTaskRemoveFromEventList+0xac>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d11c      	bne.n	800b10a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe fe4f 	bl	8009d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0de:	2201      	movs	r2, #1
 800b0e0:	409a      	lsls	r2, r3
 800b0e2:	4b18      	ldr	r3, [pc, #96]	; (800b144 <xTaskRemoveFromEventList+0xb0>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	4a16      	ldr	r2, [pc, #88]	; (800b144 <xTaskRemoveFromEventList+0xb0>)
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4a13      	ldr	r2, [pc, #76]	; (800b148 <xTaskRemoveFromEventList+0xb4>)
 800b0fa:	441a      	add	r2, r3
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4619      	mov	r1, r3
 800b102:	4610      	mov	r0, r2
 800b104:	f7fe fddb 	bl	8009cbe <vListInsertEnd>
 800b108:	e005      	b.n	800b116 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	3318      	adds	r3, #24
 800b10e:	4619      	mov	r1, r3
 800b110:	480e      	ldr	r0, [pc, #56]	; (800b14c <xTaskRemoveFromEventList+0xb8>)
 800b112:	f7fe fdd4 	bl	8009cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11a:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <xTaskRemoveFromEventList+0xbc>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b120:	429a      	cmp	r2, r3
 800b122:	d905      	bls.n	800b130 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b128:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <xTaskRemoveFromEventList+0xc0>)
 800b12a:	2201      	movs	r2, #1
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e001      	b.n	800b134 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b134:	697b      	ldr	r3, [r7, #20]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	2000043c 	.word	0x2000043c
 800b144:	2000041c 	.word	0x2000041c
 800b148:	20000318 	.word	0x20000318
 800b14c:	200003d4 	.word	0x200003d4
 800b150:	20000314 	.word	0x20000314
 800b154:	20000428 	.word	0x20000428

0800b158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b160:	4b06      	ldr	r3, [pc, #24]	; (800b17c <vTaskInternalSetTimeOutState+0x24>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <vTaskInternalSetTimeOutState+0x28>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	605a      	str	r2, [r3, #4]
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	2000042c 	.word	0x2000042c
 800b180:	20000418 	.word	0x20000418

0800b184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d109      	bne.n	800b1a8 <xTaskCheckForTimeOut+0x24>
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	e7fe      	b.n	800b1a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d109      	bne.n	800b1c2 <xTaskCheckForTimeOut+0x3e>
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	e7fe      	b.n	800b1c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b1c2:	f000 fb4b 	bl	800b85c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	; (800b23c <xTaskCheckForTimeOut+0xb8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1de:	d102      	bne.n	800b1e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	e023      	b.n	800b22e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	4b15      	ldr	r3, [pc, #84]	; (800b240 <xTaskCheckForTimeOut+0xbc>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d007      	beq.n	800b202 <xTaskCheckForTimeOut+0x7e>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d302      	bcc.n	800b202 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	e015      	b.n	800b22e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d20b      	bcs.n	800b224 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	1ad2      	subs	r2, r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff ff9d 	bl	800b158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b21e:	2300      	movs	r3, #0
 800b220:	61fb      	str	r3, [r7, #28]
 800b222:	e004      	b.n	800b22e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b22a:	2301      	movs	r3, #1
 800b22c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b22e:	f000 fb43 	bl	800b8b8 <vPortExitCritical>

	return xReturn;
 800b232:	69fb      	ldr	r3, [r7, #28]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3720      	adds	r7, #32
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	20000418 	.word	0x20000418
 800b240:	2000042c 	.word	0x2000042c

0800b244 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b244:	b480      	push	{r7}
 800b246:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b248:	4b03      	ldr	r3, [pc, #12]	; (800b258 <vTaskMissedYield+0x14>)
 800b24a:	2201      	movs	r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
}
 800b24e:	bf00      	nop
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	20000428 	.word	0x20000428

0800b25c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b264:	f000 f854 	bl	800b310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b268:	4b07      	ldr	r3, [pc, #28]	; (800b288 <prvIdleTask+0x2c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d907      	bls.n	800b280 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b270:	4b06      	ldr	r3, [pc, #24]	; (800b28c <prvIdleTask+0x30>)
 800b272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b280:	f7f5 f986 	bl	8000590 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b284:	e7ee      	b.n	800b264 <prvIdleTask+0x8>
 800b286:	bf00      	nop
 800b288:	20000318 	.word	0x20000318
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
 800b29a:	e00c      	b.n	800b2b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4a12      	ldr	r2, [pc, #72]	; (800b2f0 <prvInitialiseTaskLists+0x60>)
 800b2a8:	4413      	add	r3, r2
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe fcda 	bl	8009c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b06      	cmp	r3, #6
 800b2ba:	d9ef      	bls.n	800b29c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2bc:	480d      	ldr	r0, [pc, #52]	; (800b2f4 <prvInitialiseTaskLists+0x64>)
 800b2be:	f7fe fcd1 	bl	8009c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2c2:	480d      	ldr	r0, [pc, #52]	; (800b2f8 <prvInitialiseTaskLists+0x68>)
 800b2c4:	f7fe fcce 	bl	8009c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2c8:	480c      	ldr	r0, [pc, #48]	; (800b2fc <prvInitialiseTaskLists+0x6c>)
 800b2ca:	f7fe fccb 	bl	8009c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2ce:	480c      	ldr	r0, [pc, #48]	; (800b300 <prvInitialiseTaskLists+0x70>)
 800b2d0:	f7fe fcc8 	bl	8009c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2d4:	480b      	ldr	r0, [pc, #44]	; (800b304 <prvInitialiseTaskLists+0x74>)
 800b2d6:	f7fe fcc5 	bl	8009c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2da:	4b0b      	ldr	r3, [pc, #44]	; (800b308 <prvInitialiseTaskLists+0x78>)
 800b2dc:	4a05      	ldr	r2, [pc, #20]	; (800b2f4 <prvInitialiseTaskLists+0x64>)
 800b2de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <prvInitialiseTaskLists+0x7c>)
 800b2e2:	4a05      	ldr	r2, [pc, #20]	; (800b2f8 <prvInitialiseTaskLists+0x68>)
 800b2e4:	601a      	str	r2, [r3, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000318 	.word	0x20000318
 800b2f4:	200003a4 	.word	0x200003a4
 800b2f8:	200003b8 	.word	0x200003b8
 800b2fc:	200003d4 	.word	0x200003d4
 800b300:	200003e8 	.word	0x200003e8
 800b304:	20000400 	.word	0x20000400
 800b308:	200003cc 	.word	0x200003cc
 800b30c:	200003d0 	.word	0x200003d0

0800b310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b316:	e019      	b.n	800b34c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b318:	f000 faa0 	bl	800b85c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31c:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <prvCheckTasksWaitingTermination+0x4c>)
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3304      	adds	r3, #4
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe fd25 	bl	8009d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b32e:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <prvCheckTasksWaitingTermination+0x50>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3b01      	subs	r3, #1
 800b334:	4a0a      	ldr	r2, [pc, #40]	; (800b360 <prvCheckTasksWaitingTermination+0x50>)
 800b336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b338:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <prvCheckTasksWaitingTermination+0x54>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	4a09      	ldr	r2, [pc, #36]	; (800b364 <prvCheckTasksWaitingTermination+0x54>)
 800b340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b342:	f000 fab9 	bl	800b8b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f80e 	bl	800b368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b34c:	4b05      	ldr	r3, [pc, #20]	; (800b364 <prvCheckTasksWaitingTermination+0x54>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e1      	bne.n	800b318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200003e8 	.word	0x200003e8
 800b360:	20000414 	.word	0x20000414
 800b364:	200003fc 	.word	0x200003fc

0800b368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b376:	2b00      	cmp	r3, #0
 800b378:	d108      	bne.n	800b38c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fc4c 	bl	800bc1c <vPortFree>
				vPortFree( pxTCB );
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fc49 	bl	800bc1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b38a:	e017      	b.n	800b3bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b392:	2b01      	cmp	r3, #1
 800b394:	d103      	bne.n	800b39e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fc40 	bl	800bc1c <vPortFree>
	}
 800b39c:	e00e      	b.n	800b3bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d009      	beq.n	800b3bc <prvDeleteTCB+0x54>
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	e7fe      	b.n	800b3ba <prvDeleteTCB+0x52>
	}
 800b3bc:	bf00      	nop
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <prvResetNextTaskUnblockTime+0x38>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d104      	bne.n	800b3de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3d4:	4b0a      	ldr	r3, [pc, #40]	; (800b400 <prvResetNextTaskUnblockTime+0x3c>)
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3dc:	e008      	b.n	800b3f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <prvResetNextTaskUnblockTime+0x38>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	4a04      	ldr	r2, [pc, #16]	; (800b400 <prvResetNextTaskUnblockTime+0x3c>)
 800b3ee:	6013      	str	r3, [r2, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	200003cc 	.word	0x200003cc
 800b400:	20000434 	.word	0x20000434

0800b404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b40a:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <xTaskGetSchedulerState+0x34>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d102      	bne.n	800b418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b412:	2301      	movs	r3, #1
 800b414:	607b      	str	r3, [r7, #4]
 800b416:	e008      	b.n	800b42a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b418:	4b08      	ldr	r3, [pc, #32]	; (800b43c <xTaskGetSchedulerState+0x38>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b420:	2302      	movs	r3, #2
 800b422:	607b      	str	r3, [r7, #4]
 800b424:	e001      	b.n	800b42a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b42a:	687b      	ldr	r3, [r7, #4]
	}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	20000420 	.word	0x20000420
 800b43c:	2000043c 	.word	0x2000043c

0800b440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d06c      	beq.n	800b530 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b456:	4b39      	ldr	r3, [pc, #228]	; (800b53c <xTaskPriorityDisinherit+0xfc>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d009      	beq.n	800b474 <xTaskPriorityDisinherit+0x34>
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	e7fe      	b.n	800b472 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d109      	bne.n	800b490 <xTaskPriorityDisinherit+0x50>
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60bb      	str	r3, [r7, #8]
 800b48e:	e7fe      	b.n	800b48e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b494:	1e5a      	subs	r2, r3, #1
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d044      	beq.n	800b530 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d140      	bne.n	800b530 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fc60 	bl	8009d78 <uxListRemove>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d115      	bne.n	800b4ea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c2:	491f      	ldr	r1, [pc, #124]	; (800b540 <xTaskPriorityDisinherit+0x100>)
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xTaskPriorityDisinherit+0xaa>
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	2201      	movs	r2, #1
 800b4da:	fa02 f303 	lsl.w	r3, r2, r3
 800b4de:	43da      	mvns	r2, r3
 800b4e0:	4b18      	ldr	r3, [pc, #96]	; (800b544 <xTaskPriorityDisinherit+0x104>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	4a17      	ldr	r2, [pc, #92]	; (800b544 <xTaskPriorityDisinherit+0x104>)
 800b4e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f6:	f1c3 0207 	rsb	r2, r3, #7
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	2201      	movs	r2, #1
 800b504:	409a      	lsls	r2, r3
 800b506:	4b0f      	ldr	r3, [pc, #60]	; (800b544 <xTaskPriorityDisinherit+0x104>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	4a0d      	ldr	r2, [pc, #52]	; (800b544 <xTaskPriorityDisinherit+0x104>)
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4a08      	ldr	r2, [pc, #32]	; (800b540 <xTaskPriorityDisinherit+0x100>)
 800b51e:	441a      	add	r2, r3
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	3304      	adds	r3, #4
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f7fe fbc9 	bl	8009cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b530:	697b      	ldr	r3, [r7, #20]
	}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20000314 	.word	0x20000314
 800b540:	20000318 	.word	0x20000318
 800b544:	2000041c 	.word	0x2000041c

0800b548 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b552:	4b29      	ldr	r3, [pc, #164]	; (800b5f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b558:	4b28      	ldr	r3, [pc, #160]	; (800b5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3304      	adds	r3, #4
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fc0a 	bl	8009d78 <uxListRemove>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10b      	bne.n	800b582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b56a:	4b24      	ldr	r3, [pc, #144]	; (800b5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	2201      	movs	r2, #1
 800b572:	fa02 f303 	lsl.w	r3, r2, r3
 800b576:	43da      	mvns	r2, r3
 800b578:	4b21      	ldr	r3, [pc, #132]	; (800b600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4013      	ands	r3, r2
 800b57e:	4a20      	ldr	r2, [pc, #128]	; (800b600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d10a      	bne.n	800b5a0 <prvAddCurrentTaskToDelayedList+0x58>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d007      	beq.n	800b5a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3304      	adds	r3, #4
 800b596:	4619      	mov	r1, r3
 800b598:	481a      	ldr	r0, [pc, #104]	; (800b604 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b59a:	f7fe fb90 	bl	8009cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b59e:	e026      	b.n	800b5ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5a8:	4b14      	ldr	r3, [pc, #80]	; (800b5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d209      	bcs.n	800b5cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5b8:	4b13      	ldr	r3, [pc, #76]	; (800b608 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	f7fe fb9e 	bl	8009d06 <vListInsert>
}
 800b5ca:	e010      	b.n	800b5ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f7fe fb94 	bl	8009d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5de:	4b0c      	ldr	r3, [pc, #48]	; (800b610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d202      	bcs.n	800b5ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b5e8:	4a09      	ldr	r2, [pc, #36]	; (800b610 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6013      	str	r3, [r2, #0]
}
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000418 	.word	0x20000418
 800b5fc:	20000314 	.word	0x20000314
 800b600:	2000041c 	.word	0x2000041c
 800b604:	20000400 	.word	0x20000400
 800b608:	200003d0 	.word	0x200003d0
 800b60c:	200003cc 	.word	0x200003cc
 800b610:	20000434 	.word	0x20000434

0800b614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3b04      	subs	r3, #4
 800b624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3b04      	subs	r3, #4
 800b632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f023 0201 	bic.w	r2, r3, #1
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3b04      	subs	r3, #4
 800b642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b644:	4a0c      	ldr	r2, [pc, #48]	; (800b678 <pxPortInitialiseStack+0x64>)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3b14      	subs	r3, #20
 800b64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3b04      	subs	r3, #4
 800b65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f06f 0202 	mvn.w	r2, #2
 800b662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3b20      	subs	r3, #32
 800b668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b66a:	68fb      	ldr	r3, [r7, #12]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	0800b67d 	.word	0x0800b67d

0800b67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <prvTaskExitError+0x50>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d009      	beq.n	800b6a4 <prvTaskExitError+0x28>
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	e7fe      	b.n	800b6a2 <prvTaskExitError+0x26>
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6b6:	bf00      	nop
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d0fc      	beq.n	800b6b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	2000002c 	.word	0x2000002c

0800b6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <pxCurrentTCBConst2>)
 800b6d2:	6819      	ldr	r1, [r3, #0]
 800b6d4:	6808      	ldr	r0, [r1, #0]
 800b6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f380 8809 	msr	PSP, r0
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f04f 0000 	mov.w	r0, #0
 800b6e6:	f380 8811 	msr	BASEPRI, r0
 800b6ea:	4770      	bx	lr
 800b6ec:	f3af 8000 	nop.w

0800b6f0 <pxCurrentTCBConst2>:
 800b6f0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop

0800b6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6f8:	4808      	ldr	r0, [pc, #32]	; (800b71c <prvPortStartFirstTask+0x24>)
 800b6fa:	6800      	ldr	r0, [r0, #0]
 800b6fc:	6800      	ldr	r0, [r0, #0]
 800b6fe:	f380 8808 	msr	MSP, r0
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f380 8814 	msr	CONTROL, r0
 800b70a:	b662      	cpsie	i
 800b70c:	b661      	cpsie	f
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	df00      	svc	0
 800b718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b71a:	bf00      	nop
 800b71c:	e000ed08 	.word	0xe000ed08

0800b720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b726:	4b44      	ldr	r3, [pc, #272]	; (800b838 <xPortStartScheduler+0x118>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a44      	ldr	r2, [pc, #272]	; (800b83c <xPortStartScheduler+0x11c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d109      	bne.n	800b744 <xPortStartScheduler+0x24>
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	e7fe      	b.n	800b742 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b744:	4b3c      	ldr	r3, [pc, #240]	; (800b838 <xPortStartScheduler+0x118>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a3d      	ldr	r2, [pc, #244]	; (800b840 <xPortStartScheduler+0x120>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d109      	bne.n	800b762 <xPortStartScheduler+0x42>
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	e7fe      	b.n	800b760 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b762:	4b38      	ldr	r3, [pc, #224]	; (800b844 <xPortStartScheduler+0x124>)
 800b764:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	22ff      	movs	r2, #255	; 0xff
 800b772:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b784:	b2da      	uxtb	r2, r3
 800b786:	4b30      	ldr	r3, [pc, #192]	; (800b848 <xPortStartScheduler+0x128>)
 800b788:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b78a:	4b30      	ldr	r3, [pc, #192]	; (800b84c <xPortStartScheduler+0x12c>)
 800b78c:	2207      	movs	r2, #7
 800b78e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b790:	e009      	b.n	800b7a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b792:	4b2e      	ldr	r3, [pc, #184]	; (800b84c <xPortStartScheduler+0x12c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3b01      	subs	r3, #1
 800b798:	4a2c      	ldr	r2, [pc, #176]	; (800b84c <xPortStartScheduler+0x12c>)
 800b79a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ae:	2b80      	cmp	r3, #128	; 0x80
 800b7b0:	d0ef      	beq.n	800b792 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7b2:	4b26      	ldr	r3, [pc, #152]	; (800b84c <xPortStartScheduler+0x12c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f1c3 0307 	rsb	r3, r3, #7
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	d009      	beq.n	800b7d2 <xPortStartScheduler+0xb2>
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	60bb      	str	r3, [r7, #8]
 800b7d0:	e7fe      	b.n	800b7d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7d2:	4b1e      	ldr	r3, [pc, #120]	; (800b84c <xPortStartScheduler+0x12c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	021b      	lsls	r3, r3, #8
 800b7d8:	4a1c      	ldr	r2, [pc, #112]	; (800b84c <xPortStartScheduler+0x12c>)
 800b7da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7dc:	4b1b      	ldr	r3, [pc, #108]	; (800b84c <xPortStartScheduler+0x12c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b7e4:	4a19      	ldr	r2, [pc, #100]	; (800b84c <xPortStartScheduler+0x12c>)
 800b7e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7f0:	4b17      	ldr	r3, [pc, #92]	; (800b850 <xPortStartScheduler+0x130>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a16      	ldr	r2, [pc, #88]	; (800b850 <xPortStartScheduler+0x130>)
 800b7f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7fc:	4b14      	ldr	r3, [pc, #80]	; (800b850 <xPortStartScheduler+0x130>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a13      	ldr	r2, [pc, #76]	; (800b850 <xPortStartScheduler+0x130>)
 800b802:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b806:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b808:	f000 f8d6 	bl	800b9b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b80c:	4b11      	ldr	r3, [pc, #68]	; (800b854 <xPortStartScheduler+0x134>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b812:	f000 f8f5 	bl	800ba00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b816:	4b10      	ldr	r3, [pc, #64]	; (800b858 <xPortStartScheduler+0x138>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a0f      	ldr	r2, [pc, #60]	; (800b858 <xPortStartScheduler+0x138>)
 800b81c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b820:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b822:	f7ff ff69 	bl	800b6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b826:	f7ff fb91 	bl	800af4c <vTaskSwitchContext>
	prvTaskExitError();
 800b82a:	f7ff ff27 	bl	800b67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	e000ed00 	.word	0xe000ed00
 800b83c:	410fc271 	.word	0x410fc271
 800b840:	410fc270 	.word	0x410fc270
 800b844:	e000e400 	.word	0xe000e400
 800b848:	20000440 	.word	0x20000440
 800b84c:	20000444 	.word	0x20000444
 800b850:	e000ed20 	.word	0xe000ed20
 800b854:	2000002c 	.word	0x2000002c
 800b858:	e000ef34 	.word	0xe000ef34

0800b85c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b874:	4b0e      	ldr	r3, [pc, #56]	; (800b8b0 <vPortEnterCritical+0x54>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3301      	adds	r3, #1
 800b87a:	4a0d      	ldr	r2, [pc, #52]	; (800b8b0 <vPortEnterCritical+0x54>)
 800b87c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <vPortEnterCritical+0x54>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10e      	bne.n	800b8a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b886:	4b0b      	ldr	r3, [pc, #44]	; (800b8b4 <vPortEnterCritical+0x58>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d009      	beq.n	800b8a4 <vPortEnterCritical+0x48>
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	603b      	str	r3, [r7, #0]
 800b8a2:	e7fe      	b.n	800b8a2 <vPortEnterCritical+0x46>
	}
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	2000002c 	.word	0x2000002c
 800b8b4:	e000ed04 	.word	0xe000ed04

0800b8b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8be:	4b11      	ldr	r3, [pc, #68]	; (800b904 <vPortExitCritical+0x4c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d109      	bne.n	800b8da <vPortExitCritical+0x22>
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	607b      	str	r3, [r7, #4]
 800b8d8:	e7fe      	b.n	800b8d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <vPortExitCritical+0x4c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	4a08      	ldr	r2, [pc, #32]	; (800b904 <vPortExitCritical+0x4c>)
 800b8e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8e4:	4b07      	ldr	r3, [pc, #28]	; (800b904 <vPortExitCritical+0x4c>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d104      	bne.n	800b8f6 <vPortExitCritical+0x3e>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	2000002c 	.word	0x2000002c
	...

0800b910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b910:	f3ef 8009 	mrs	r0, PSP
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	4b15      	ldr	r3, [pc, #84]	; (800b970 <pxCurrentTCBConst>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	f01e 0f10 	tst.w	lr, #16
 800b920:	bf08      	it	eq
 800b922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92a:	6010      	str	r0, [r2, #0]
 800b92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b934:	f380 8811 	msr	BASEPRI, r0
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f7ff fb04 	bl	800af4c <vTaskSwitchContext>
 800b944:	f04f 0000 	mov.w	r0, #0
 800b948:	f380 8811 	msr	BASEPRI, r0
 800b94c:	bc09      	pop	{r0, r3}
 800b94e:	6819      	ldr	r1, [r3, #0]
 800b950:	6808      	ldr	r0, [r1, #0]
 800b952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b956:	f01e 0f10 	tst.w	lr, #16
 800b95a:	bf08      	it	eq
 800b95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b960:	f380 8809 	msr	PSP, r0
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	f3af 8000 	nop.w

0800b970 <pxCurrentTCBConst>:
 800b970:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop

0800b978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b990:	f7ff fa24 	bl	800addc <xTaskIncrementTick>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b99a:	4b06      	ldr	r3, [pc, #24]	; (800b9b4 <SysTick_Handler+0x3c>)
 800b99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9ac:	bf00      	nop
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	e000ed04 	.word	0xe000ed04

0800b9b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	; (800b9ec <vPortSetupTimerInterrupt+0x34>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9c2:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <vPortSetupTimerInterrupt+0x38>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <vPortSetupTimerInterrupt+0x3c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a0a      	ldr	r2, [pc, #40]	; (800b9f8 <vPortSetupTimerInterrupt+0x40>)
 800b9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d2:	099b      	lsrs	r3, r3, #6
 800b9d4:	4a09      	ldr	r2, [pc, #36]	; (800b9fc <vPortSetupTimerInterrupt+0x44>)
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9da:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <vPortSetupTimerInterrupt+0x34>)
 800b9dc:	2207      	movs	r2, #7
 800b9de:	601a      	str	r2, [r3, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	e000e010 	.word	0xe000e010
 800b9f0:	e000e018 	.word	0xe000e018
 800b9f4:	20000000 	.word	0x20000000
 800b9f8:	10624dd3 	.word	0x10624dd3
 800b9fc:	e000e014 	.word	0xe000e014

0800ba00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba10 <vPortEnableVFP+0x10>
 800ba04:	6801      	ldr	r1, [r0, #0]
 800ba06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba0a:	6001      	str	r1, [r0, #0]
 800ba0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba0e:	bf00      	nop
 800ba10:	e000ed88 	.word	0xe000ed88

0800ba14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba1a:	f3ef 8305 	mrs	r3, IPSR
 800ba1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b0f      	cmp	r3, #15
 800ba24:	d913      	bls.n	800ba4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba26:	4a16      	ldr	r2, [pc, #88]	; (800ba80 <vPortValidateInterruptPriority+0x6c>)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba30:	4b14      	ldr	r3, [pc, #80]	; (800ba84 <vPortValidateInterruptPriority+0x70>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	7afa      	ldrb	r2, [r7, #11]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d209      	bcs.n	800ba4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	e7fe      	b.n	800ba4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	; (800ba88 <vPortValidateInterruptPriority+0x74>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba56:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <vPortValidateInterruptPriority+0x78>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d909      	bls.n	800ba72 <vPortValidateInterruptPriority+0x5e>
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	e7fe      	b.n	800ba70 <vPortValidateInterruptPriority+0x5c>
	}
 800ba72:	bf00      	nop
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	e000e3f0 	.word	0xe000e3f0
 800ba84:	20000440 	.word	0x20000440
 800ba88:	e000ed0c 	.word	0xe000ed0c
 800ba8c:	20000444 	.word	0x20000444

0800ba90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba9c:	f7ff f8f4 	bl	800ac88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800baa0:	4b59      	ldr	r3, [pc, #356]	; (800bc08 <pvPortMalloc+0x178>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800baa8:	f000 f910 	bl	800bccc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800baac:	4b57      	ldr	r3, [pc, #348]	; (800bc0c <pvPortMalloc+0x17c>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4013      	ands	r3, r2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f040 808c 	bne.w	800bbd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d01c      	beq.n	800bafa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bac0:	2208      	movs	r2, #8
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4413      	add	r3, r2
 800bac6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f003 0307 	and.w	r3, r3, #7
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d013      	beq.n	800bafa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f023 0307 	bic.w	r3, r3, #7
 800bad8:	3308      	adds	r3, #8
 800bada:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f003 0307 	and.w	r3, r3, #7
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d009      	beq.n	800bafa <pvPortMalloc+0x6a>
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	e7fe      	b.n	800baf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d068      	beq.n	800bbd2 <pvPortMalloc+0x142>
 800bb00:	4b43      	ldr	r3, [pc, #268]	; (800bc10 <pvPortMalloc+0x180>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d863      	bhi.n	800bbd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb0a:	4b42      	ldr	r3, [pc, #264]	; (800bc14 <pvPortMalloc+0x184>)
 800bb0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb0e:	4b41      	ldr	r3, [pc, #260]	; (800bc14 <pvPortMalloc+0x184>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb14:	e004      	b.n	800bb20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d903      	bls.n	800bb32 <pvPortMalloc+0xa2>
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1f1      	bne.n	800bb16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb32:	4b35      	ldr	r3, [pc, #212]	; (800bc08 <pvPortMalloc+0x178>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d04a      	beq.n	800bbd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2208      	movs	r2, #8
 800bb42:	4413      	add	r3, r2
 800bb44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	1ad2      	subs	r2, r2, r3
 800bb56:	2308      	movs	r3, #8
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d91e      	bls.n	800bb9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4413      	add	r3, r2
 800bb64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	f003 0307 	and.w	r3, r3, #7
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d009      	beq.n	800bb84 <pvPortMalloc+0xf4>
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	613b      	str	r3, [r7, #16]
 800bb82:	e7fe      	b.n	800bb82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1ad2      	subs	r2, r2, r3
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb96:	69b8      	ldr	r0, [r7, #24]
 800bb98:	f000 f8fa 	bl	800bd90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb9c:	4b1c      	ldr	r3, [pc, #112]	; (800bc10 <pvPortMalloc+0x180>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	4a1a      	ldr	r2, [pc, #104]	; (800bc10 <pvPortMalloc+0x180>)
 800bba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbaa:	4b19      	ldr	r3, [pc, #100]	; (800bc10 <pvPortMalloc+0x180>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	4b1a      	ldr	r3, [pc, #104]	; (800bc18 <pvPortMalloc+0x188>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d203      	bcs.n	800bbbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbb6:	4b16      	ldr	r3, [pc, #88]	; (800bc10 <pvPortMalloc+0x180>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a17      	ldr	r2, [pc, #92]	; (800bc18 <pvPortMalloc+0x188>)
 800bbbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	4b12      	ldr	r3, [pc, #72]	; (800bc0c <pvPortMalloc+0x17c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbd2:	f7ff f867 	bl	800aca4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800bbdc:	f7f4 fcea 	bl	80005b4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	f003 0307 	and.w	r3, r3, #7
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d009      	beq.n	800bbfe <pvPortMalloc+0x16e>
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	e7fe      	b.n	800bbfc <pvPortMalloc+0x16c>
	return pvReturn;
 800bbfe:	69fb      	ldr	r3, [r7, #28]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3728      	adds	r7, #40	; 0x28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	20008450 	.word	0x20008450
 800bc0c:	2000845c 	.word	0x2000845c
 800bc10:	20008454 	.word	0x20008454
 800bc14:	20008448 	.word	0x20008448
 800bc18:	20008458 	.word	0x20008458

0800bc1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d046      	beq.n	800bcbc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc2e:	2308      	movs	r3, #8
 800bc30:	425b      	negs	r3, r3
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	4413      	add	r3, r2
 800bc36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <vPortFree+0xa8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4013      	ands	r3, r2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d109      	bne.n	800bc5e <vPortFree+0x42>
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	e7fe      	b.n	800bc5c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <vPortFree+0x5e>
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	60bb      	str	r3, [r7, #8]
 800bc78:	e7fe      	b.n	800bc78 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	4b11      	ldr	r3, [pc, #68]	; (800bcc4 <vPortFree+0xa8>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4013      	ands	r3, r2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d019      	beq.n	800bcbc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d115      	bne.n	800bcbc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <vPortFree+0xa8>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	43db      	mvns	r3, r3
 800bc9a:	401a      	ands	r2, r3
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bca0:	f7fe fff2 	bl	800ac88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <vPortFree+0xac>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4413      	add	r3, r2
 800bcae:	4a06      	ldr	r2, [pc, #24]	; (800bcc8 <vPortFree+0xac>)
 800bcb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcb2:	6938      	ldr	r0, [r7, #16]
 800bcb4:	f000 f86c 	bl	800bd90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bcb8:	f7fe fff4 	bl	800aca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcbc:	bf00      	nop
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	2000845c 	.word	0x2000845c
 800bcc8:	20008454 	.word	0x20008454

0800bccc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcd8:	4b27      	ldr	r3, [pc, #156]	; (800bd78 <prvHeapInit+0xac>)
 800bcda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00c      	beq.n	800bd00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3307      	adds	r3, #7
 800bcea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	4a1f      	ldr	r2, [pc, #124]	; (800bd78 <prvHeapInit+0xac>)
 800bcfc:	4413      	add	r3, r2
 800bcfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd04:	4a1d      	ldr	r2, [pc, #116]	; (800bd7c <prvHeapInit+0xb0>)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd0a:	4b1c      	ldr	r3, [pc, #112]	; (800bd7c <prvHeapInit+0xb0>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	4413      	add	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd18:	2208      	movs	r2, #8
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	1a9b      	subs	r3, r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f023 0307 	bic.w	r3, r3, #7
 800bd26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4a15      	ldr	r2, [pc, #84]	; (800bd80 <prvHeapInit+0xb4>)
 800bd2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd2e:	4b14      	ldr	r3, [pc, #80]	; (800bd80 <prvHeapInit+0xb4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2200      	movs	r2, #0
 800bd34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd36:	4b12      	ldr	r3, [pc, #72]	; (800bd80 <prvHeapInit+0xb4>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	1ad2      	subs	r2, r2, r3
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	; (800bd80 <prvHeapInit+0xb4>)
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <prvHeapInit+0xb8>)
 800bd5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	4a09      	ldr	r2, [pc, #36]	; (800bd88 <prvHeapInit+0xbc>)
 800bd62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd64:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <prvHeapInit+0xc0>)
 800bd66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd6a:	601a      	str	r2, [r3, #0]
}
 800bd6c:	bf00      	nop
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	20000448 	.word	0x20000448
 800bd7c:	20008448 	.word	0x20008448
 800bd80:	20008450 	.word	0x20008450
 800bd84:	20008458 	.word	0x20008458
 800bd88:	20008454 	.word	0x20008454
 800bd8c:	2000845c 	.word	0x2000845c

0800bd90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd98:	4b28      	ldr	r3, [pc, #160]	; (800be3c <prvInsertBlockIntoFreeList+0xac>)
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	e002      	b.n	800bda4 <prvInsertBlockIntoFreeList+0x14>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d8f7      	bhi.n	800bd9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d108      	bne.n	800bdd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	441a      	add	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	441a      	add	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d118      	bne.n	800be18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	4b15      	ldr	r3, [pc, #84]	; (800be40 <prvInsertBlockIntoFreeList+0xb0>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d00d      	beq.n	800be0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685a      	ldr	r2, [r3, #4]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	441a      	add	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	601a      	str	r2, [r3, #0]
 800be0c:	e008      	b.n	800be20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <prvInsertBlockIntoFreeList+0xb0>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	e003      	b.n	800be20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	429a      	cmp	r2, r3
 800be26:	d002      	beq.n	800be2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be2e:	bf00      	nop
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	20008448 	.word	0x20008448
 800be40:	20008450 	.word	0x20008450

0800be44 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800be48:	2200      	movs	r2, #0
 800be4a:	490e      	ldr	r1, [pc, #56]	; (800be84 <MX_USB_HOST_Init+0x40>)
 800be4c:	480e      	ldr	r0, [pc, #56]	; (800be88 <MX_USB_HOST_Init+0x44>)
 800be4e:	f7fc f80d 	bl	8007e6c <USBH_Init>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be58:	f7f5 f8a4 	bl	8000fa4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800be5c:	490b      	ldr	r1, [pc, #44]	; (800be8c <MX_USB_HOST_Init+0x48>)
 800be5e:	480a      	ldr	r0, [pc, #40]	; (800be88 <MX_USB_HOST_Init+0x44>)
 800be60:	f7fc f8ba 	bl	8007fd8 <USBH_RegisterClass>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800be6a:	f7f5 f89b 	bl	8000fa4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800be6e:	4806      	ldr	r0, [pc, #24]	; (800be88 <MX_USB_HOST_Init+0x44>)
 800be70:	f7fc f93e 	bl	80080f0 <USBH_Start>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be7a:	f7f5 f893 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800be7e:	bf00      	nop
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	0800be91 	.word	0x0800be91
 800be88:	2000870c 	.word	0x2000870c
 800be8c:	2000000c 	.word	0x2000000c

0800be90 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d819      	bhi.n	800bed8 <USBH_UserProcess+0x48>
 800bea4:	a201      	add	r2, pc, #4	; (adr r2, 800beac <USBH_UserProcess+0x1c>)
 800bea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beaa:	bf00      	nop
 800beac:	0800bed9 	.word	0x0800bed9
 800beb0:	0800bec9 	.word	0x0800bec9
 800beb4:	0800bed9 	.word	0x0800bed9
 800beb8:	0800bed1 	.word	0x0800bed1
 800bebc:	0800bec1 	.word	0x0800bec1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bec0:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <USBH_UserProcess+0x58>)
 800bec2:	2203      	movs	r2, #3
 800bec4:	701a      	strb	r2, [r3, #0]
  break;
 800bec6:	e008      	b.n	800beda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bec8:	4b07      	ldr	r3, [pc, #28]	; (800bee8 <USBH_UserProcess+0x58>)
 800beca:	2202      	movs	r2, #2
 800becc:	701a      	strb	r2, [r3, #0]
  break;
 800bece:	e004      	b.n	800beda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bed0:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <USBH_UserProcess+0x58>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	701a      	strb	r2, [r3, #0]
  break;
 800bed6:	e000      	b.n	800beda <USBH_UserProcess+0x4a>

  default:
  break;
 800bed8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20008460 	.word	0x20008460

0800beec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08a      	sub	sp, #40	; 0x28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bef4:	f107 0314 	add.w	r3, r7, #20
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	605a      	str	r2, [r3, #4]
 800befe:	609a      	str	r2, [r3, #8]
 800bf00:	60da      	str	r2, [r3, #12]
 800bf02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a24      	ldr	r2, [pc, #144]	; (800bf9c <HAL_HCD_MspInit+0xb0>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d141      	bne.n	800bf92 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf0e:	2300      	movs	r3, #0
 800bf10:	613b      	str	r3, [r7, #16]
 800bf12:	4b23      	ldr	r3, [pc, #140]	; (800bfa0 <HAL_HCD_MspInit+0xb4>)
 800bf14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf16:	4a22      	ldr	r2, [pc, #136]	; (800bfa0 <HAL_HCD_MspInit+0xb4>)
 800bf18:	f043 0302 	orr.w	r3, r3, #2
 800bf1c:	6313      	str	r3, [r2, #48]	; 0x30
 800bf1e:	4b20      	ldr	r3, [pc, #128]	; (800bfa0 <HAL_HCD_MspInit+0xb4>)
 800bf20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	613b      	str	r3, [r7, #16]
 800bf28:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800bf2a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800bf2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf30:	2302      	movs	r3, #2
 800bf32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf40:	f107 0314 	add.w	r3, r7, #20
 800bf44:	4619      	mov	r1, r3
 800bf46:	4817      	ldr	r0, [pc, #92]	; (800bfa4 <HAL_HCD_MspInit+0xb8>)
 800bf48:	f7f6 f822 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800bf4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bf52:	2300      	movs	r3, #0
 800bf54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800bf5a:	f107 0314 	add.w	r3, r7, #20
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4810      	ldr	r0, [pc, #64]	; (800bfa4 <HAL_HCD_MspInit+0xb8>)
 800bf62:	f7f6 f815 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bf66:	2300      	movs	r3, #0
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <HAL_HCD_MspInit+0xb4>)
 800bf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6e:	4a0c      	ldr	r2, [pc, #48]	; (800bfa0 <HAL_HCD_MspInit+0xb4>)
 800bf70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf74:	6313      	str	r3, [r2, #48]	; 0x30
 800bf76:	4b0a      	ldr	r3, [pc, #40]	; (800bfa0 <HAL_HCD_MspInit+0xb4>)
 800bf78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800bf82:	2200      	movs	r2, #0
 800bf84:	2105      	movs	r1, #5
 800bf86:	204d      	movs	r0, #77	; 0x4d
 800bf88:	f7f5 fdd0 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bf8c:	204d      	movs	r0, #77	; 0x4d
 800bf8e:	f7f5 fde9 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bf92:	bf00      	nop
 800bf94:	3728      	adds	r7, #40	; 0x28
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	40040000 	.word	0x40040000
 800bfa0:	40023800 	.word	0x40023800
 800bfa4:	40020400 	.word	0x40020400

0800bfa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fc fd47 	bl	8008a4a <USBH_LL_IncTimer>
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fc fd8b 	bl	8008aee <USBH_LL_Connect>
}
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fc fda0 	bl	8008b34 <USBH_LL_Disconnect>
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
 800c008:	4613      	mov	r3, r2
 800c00a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c012:	4618      	mov	r0, r3
 800c014:	f7fc fdd5 	bl	8008bc2 <USBH_LL_NotifyURBChange>
#endif
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fc fd35 	bl	8008a9e <USBH_LL_PortEnabled>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fc fd41 	bl	8008ad2 <USBH_LL_PortDisabled>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c066:	2b00      	cmp	r3, #0
 800c068:	d132      	bne.n	800c0d0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c06a:	4a1c      	ldr	r2, [pc, #112]	; (800c0dc <USBH_LL_Init+0x84>)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a19      	ldr	r2, [pc, #100]	; (800c0dc <USBH_LL_Init+0x84>)
 800c076:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c07a:	4b18      	ldr	r3, [pc, #96]	; (800c0dc <USBH_LL_Init+0x84>)
 800c07c:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <USBH_LL_Init+0x88>)
 800c07e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c080:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <USBH_LL_Init+0x84>)
 800c082:	220c      	movs	r2, #12
 800c084:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c086:	4b15      	ldr	r3, [pc, #84]	; (800c0dc <USBH_LL_Init+0x84>)
 800c088:	2201      	movs	r2, #1
 800c08a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c08c:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <USBH_LL_Init+0x84>)
 800c08e:	2200      	movs	r2, #0
 800c090:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <USBH_LL_Init+0x84>)
 800c094:	2202      	movs	r2, #2
 800c096:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c098:	4b10      	ldr	r3, [pc, #64]	; (800c0dc <USBH_LL_Init+0x84>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c09e:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <USBH_LL_Init+0x84>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c0a4:	4b0d      	ldr	r3, [pc, #52]	; (800c0dc <USBH_LL_Init+0x84>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c0aa:	4b0c      	ldr	r3, [pc, #48]	; (800c0dc <USBH_LL_Init+0x84>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c0b0:	480a      	ldr	r0, [pc, #40]	; (800c0dc <USBH_LL_Init+0x84>)
 800c0b2:	f7f6 f930 	bl	8002316 <HAL_HCD_Init>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c0bc:	f7f4 ff72 	bl	8000fa4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c0c0:	4806      	ldr	r0, [pc, #24]	; (800c0dc <USBH_LL_Init+0x84>)
 800c0c2:	f7f6 fd33 	bl	8002b2c <HAL_HCD_GetCurrentFrame>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7fc fcae 	bl	8008a2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20008af0 	.word	0x20008af0
 800c0e0:	40040000 	.word	0x40040000

0800c0e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7f6 fc9e 	bl	8002a3c <HAL_HCD_Start>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f95c 	bl	800c3c4 <USBH_Get_USB_Status>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c110:	7bbb      	ldrb	r3, [r7, #14]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c130:	4618      	mov	r0, r3
 800c132:	f7f6 fca6 	bl	8002a82 <HAL_HCD_Stop>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 f941 	bl	800c3c4 <USBH_Get_USB_Status>
 800c142:	4603      	mov	r3, r0
 800c144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c146:	7bbb      	ldrb	r3, [r7, #14]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c158:	2301      	movs	r3, #1
 800c15a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c162:	4618      	mov	r0, r3
 800c164:	f7f6 fcf0 	bl	8002b48 <HAL_HCD_GetCurrentSpeed>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d007      	beq.n	800c17e <USBH_LL_GetSpeed+0x2e>
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d302      	bcc.n	800c178 <USBH_LL_GetSpeed+0x28>
 800c172:	2b02      	cmp	r3, #2
 800c174:	d006      	beq.n	800c184 <USBH_LL_GetSpeed+0x34>
 800c176:	e008      	b.n	800c18a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
    break;
 800c17c:	e008      	b.n	800c190 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c17e:	2301      	movs	r3, #1
 800c180:	73fb      	strb	r3, [r7, #15]
    break;
 800c182:	e005      	b.n	800c190 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c184:	2302      	movs	r3, #2
 800c186:	73fb      	strb	r3, [r7, #15]
    break;
 800c188:	e002      	b.n	800c190 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c18a:	2301      	movs	r3, #1
 800c18c:	73fb      	strb	r3, [r7, #15]
    break;
 800c18e:	bf00      	nop
  }
  return  speed;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f6 fc83 	bl	8002abc <HAL_HCD_ResetPort>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 f901 	bl	800c3c4 <USBH_Get_USB_Status>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7f6 fc8b 	bl	8002b02 <HAL_HCD_HC_GetXferCount>
 800c1ec:	4603      	mov	r3, r0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c1f6:	b590      	push	{r4, r7, lr}
 800c1f8:	b089      	sub	sp, #36	; 0x24
 800c1fa:	af04      	add	r7, sp, #16
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	4608      	mov	r0, r1
 800c200:	4611      	mov	r1, r2
 800c202:	461a      	mov	r2, r3
 800c204:	4603      	mov	r3, r0
 800c206:	70fb      	strb	r3, [r7, #3]
 800c208:	460b      	mov	r3, r1
 800c20a:	70bb      	strb	r3, [r7, #2]
 800c20c:	4613      	mov	r3, r2
 800c20e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c21e:	787c      	ldrb	r4, [r7, #1]
 800c220:	78ba      	ldrb	r2, [r7, #2]
 800c222:	78f9      	ldrb	r1, [r7, #3]
 800c224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c226:	9302      	str	r3, [sp, #8]
 800c228:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4623      	mov	r3, r4
 800c236:	f7f6 f8d0 	bl	80023da <HAL_HCD_HC_Init>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f8bf 	bl	800c3c4 <USBH_Get_USB_Status>
 800c246:	4603      	mov	r3, r0
 800c248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	bd90      	pop	{r4, r7, pc}

0800c254 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c26e:	78fa      	ldrb	r2, [r7, #3]
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f6 f949 	bl	800250a <HAL_HCD_HC_Halt>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f8a0 	bl	800c3c4 <USBH_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c288:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c292:	b590      	push	{r4, r7, lr}
 800c294:	b089      	sub	sp, #36	; 0x24
 800c296:	af04      	add	r7, sp, #16
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	4608      	mov	r0, r1
 800c29c:	4611      	mov	r1, r2
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	70fb      	strb	r3, [r7, #3]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70bb      	strb	r3, [r7, #2]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c2ba:	787c      	ldrb	r4, [r7, #1]
 800c2bc:	78ba      	ldrb	r2, [r7, #2]
 800c2be:	78f9      	ldrb	r1, [r7, #3]
 800c2c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2c4:	9303      	str	r3, [sp, #12]
 800c2c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c2c8:	9302      	str	r3, [sp, #8]
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	4623      	mov	r3, r4
 800c2d6:	f7f6 f93b 	bl	8002550 <HAL_HCD_HC_SubmitRequest>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 f86f 	bl	800c3c4 <USBH_Get_USB_Status>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd90      	pop	{r4, r7, pc}

0800c2f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c306:	78fa      	ldrb	r2, [r7, #3]
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7f6 fbe4 	bl	8002ad8 <HAL_HCD_HC_GetURBState>
 800c310:	4603      	mov	r3, r0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	460b      	mov	r3, r1
 800c324:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f872 	bl	800c41c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c338:	20c8      	movs	r0, #200	; 0xc8
 800c33a:	f7f5 fb1d 	bl	8001978 <HAL_Delay>
  return USBH_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	460b      	mov	r3, r1
 800c352:	70fb      	strb	r3, [r7, #3]
 800c354:	4613      	mov	r3, r2
 800c356:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c35e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c360:	78fa      	ldrb	r2, [r7, #3]
 800c362:	68f9      	ldr	r1, [r7, #12]
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	440b      	add	r3, r1
 800c36e:	333b      	adds	r3, #59	; 0x3b
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c376:	78fa      	ldrb	r2, [r7, #3]
 800c378:	68f9      	ldr	r1, [r7, #12]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	440b      	add	r3, r1
 800c384:	3350      	adds	r3, #80	; 0x50
 800c386:	78ba      	ldrb	r2, [r7, #2]
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e009      	b.n	800c3a0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c38c:	78fa      	ldrb	r2, [r7, #3]
 800c38e:	68f9      	ldr	r1, [r7, #12]
 800c390:	4613      	mov	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	440b      	add	r3, r1
 800c39a:	3351      	adds	r3, #81	; 0x51
 800c39c:	78ba      	ldrb	r2, [r7, #2]
 800c39e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7f5 fade 	bl	8001978 <HAL_Delay>
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3d2:	79fb      	ldrb	r3, [r7, #7]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d817      	bhi.n	800c408 <USBH_Get_USB_Status+0x44>
 800c3d8:	a201      	add	r2, pc, #4	; (adr r2, 800c3e0 <USBH_Get_USB_Status+0x1c>)
 800c3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3de:	bf00      	nop
 800c3e0:	0800c3f1 	.word	0x0800c3f1
 800c3e4:	0800c3f7 	.word	0x0800c3f7
 800c3e8:	0800c3fd 	.word	0x0800c3fd
 800c3ec:	0800c403 	.word	0x0800c403
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3f4:	e00b      	b.n	800c40e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3fa:	e008      	b.n	800c40e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c400:	e005      	b.n	800c40e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c402:	2302      	movs	r3, #2
 800c404:	73fb      	strb	r3, [r7, #15]
    break;
 800c406:	e002      	b.n	800c40e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c408:	2302      	movs	r3, #2
 800c40a:	73fb      	strb	r3, [r7, #15]
    break;
 800c40c:	bf00      	nop
  }
  return usb_status;
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d102      	bne.n	800c436 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c430:	2301      	movs	r3, #1
 800c432:	73fb      	strb	r3, [r7, #15]
 800c434:	e001      	b.n	800c43a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	461a      	mov	r2, r3
 800c43e:	2110      	movs	r1, #16
 800c440:	4803      	ldr	r0, [pc, #12]	; (800c450 <MX_DriverVbusHS+0x34>)
 800c442:	f7f5 ff4f 	bl	80022e4 <HAL_GPIO_WritePin>
}
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	40020800 	.word	0x40020800

0800c454 <__errno>:
 800c454:	4b01      	ldr	r3, [pc, #4]	; (800c45c <__errno+0x8>)
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	20000030 	.word	0x20000030

0800c460 <__libc_init_array>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4e0d      	ldr	r6, [pc, #52]	; (800c498 <__libc_init_array+0x38>)
 800c464:	4c0d      	ldr	r4, [pc, #52]	; (800c49c <__libc_init_array+0x3c>)
 800c466:	1ba4      	subs	r4, r4, r6
 800c468:	10a4      	asrs	r4, r4, #2
 800c46a:	2500      	movs	r5, #0
 800c46c:	42a5      	cmp	r5, r4
 800c46e:	d109      	bne.n	800c484 <__libc_init_array+0x24>
 800c470:	4e0b      	ldr	r6, [pc, #44]	; (800c4a0 <__libc_init_array+0x40>)
 800c472:	4c0c      	ldr	r4, [pc, #48]	; (800c4a4 <__libc_init_array+0x44>)
 800c474:	f000 ff84 	bl	800d380 <_init>
 800c478:	1ba4      	subs	r4, r4, r6
 800c47a:	10a4      	asrs	r4, r4, #2
 800c47c:	2500      	movs	r5, #0
 800c47e:	42a5      	cmp	r5, r4
 800c480:	d105      	bne.n	800c48e <__libc_init_array+0x2e>
 800c482:	bd70      	pop	{r4, r5, r6, pc}
 800c484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c488:	4798      	blx	r3
 800c48a:	3501      	adds	r5, #1
 800c48c:	e7ee      	b.n	800c46c <__libc_init_array+0xc>
 800c48e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c492:	4798      	blx	r3
 800c494:	3501      	adds	r5, #1
 800c496:	e7f2      	b.n	800c47e <__libc_init_array+0x1e>
 800c498:	0800d57c 	.word	0x0800d57c
 800c49c:	0800d57c 	.word	0x0800d57c
 800c4a0:	0800d57c 	.word	0x0800d57c
 800c4a4:	0800d580 	.word	0x0800d580

0800c4a8 <malloc>:
 800c4a8:	4b02      	ldr	r3, [pc, #8]	; (800c4b4 <malloc+0xc>)
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	f000 b86d 	b.w	800c58c <_malloc_r>
 800c4b2:	bf00      	nop
 800c4b4:	20000030 	.word	0x20000030

0800c4b8 <free>:
 800c4b8:	4b02      	ldr	r3, [pc, #8]	; (800c4c4 <free+0xc>)
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	f000 b817 	b.w	800c4f0 <_free_r>
 800c4c2:	bf00      	nop
 800c4c4:	20000030 	.word	0x20000030

0800c4c8 <memcpy>:
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	1e43      	subs	r3, r0, #1
 800c4cc:	440a      	add	r2, r1
 800c4ce:	4291      	cmp	r1, r2
 800c4d0:	d100      	bne.n	800c4d4 <memcpy+0xc>
 800c4d2:	bd10      	pop	{r4, pc}
 800c4d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4dc:	e7f7      	b.n	800c4ce <memcpy+0x6>

0800c4de <memset>:
 800c4de:	4402      	add	r2, r0
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d100      	bne.n	800c4e8 <memset+0xa>
 800c4e6:	4770      	bx	lr
 800c4e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ec:	e7f9      	b.n	800c4e2 <memset+0x4>
	...

0800c4f0 <_free_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	d045      	beq.n	800c584 <_free_r+0x94>
 800c4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4fc:	1f0c      	subs	r4, r1, #4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bfb8      	it	lt
 800c502:	18e4      	addlt	r4, r4, r3
 800c504:	f000 fbc6 	bl	800cc94 <__malloc_lock>
 800c508:	4a1f      	ldr	r2, [pc, #124]	; (800c588 <_free_r+0x98>)
 800c50a:	6813      	ldr	r3, [r2, #0]
 800c50c:	4610      	mov	r0, r2
 800c50e:	b933      	cbnz	r3, 800c51e <_free_r+0x2e>
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	6014      	str	r4, [r2, #0]
 800c514:	4628      	mov	r0, r5
 800c516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c51a:	f000 bbbc 	b.w	800cc96 <__malloc_unlock>
 800c51e:	42a3      	cmp	r3, r4
 800c520:	d90c      	bls.n	800c53c <_free_r+0x4c>
 800c522:	6821      	ldr	r1, [r4, #0]
 800c524:	1862      	adds	r2, r4, r1
 800c526:	4293      	cmp	r3, r2
 800c528:	bf04      	itt	eq
 800c52a:	681a      	ldreq	r2, [r3, #0]
 800c52c:	685b      	ldreq	r3, [r3, #4]
 800c52e:	6063      	str	r3, [r4, #4]
 800c530:	bf04      	itt	eq
 800c532:	1852      	addeq	r2, r2, r1
 800c534:	6022      	streq	r2, [r4, #0]
 800c536:	6004      	str	r4, [r0, #0]
 800c538:	e7ec      	b.n	800c514 <_free_r+0x24>
 800c53a:	4613      	mov	r3, r2
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	b10a      	cbz	r2, 800c544 <_free_r+0x54>
 800c540:	42a2      	cmp	r2, r4
 800c542:	d9fa      	bls.n	800c53a <_free_r+0x4a>
 800c544:	6819      	ldr	r1, [r3, #0]
 800c546:	1858      	adds	r0, r3, r1
 800c548:	42a0      	cmp	r0, r4
 800c54a:	d10b      	bne.n	800c564 <_free_r+0x74>
 800c54c:	6820      	ldr	r0, [r4, #0]
 800c54e:	4401      	add	r1, r0
 800c550:	1858      	adds	r0, r3, r1
 800c552:	4282      	cmp	r2, r0
 800c554:	6019      	str	r1, [r3, #0]
 800c556:	d1dd      	bne.n	800c514 <_free_r+0x24>
 800c558:	6810      	ldr	r0, [r2, #0]
 800c55a:	6852      	ldr	r2, [r2, #4]
 800c55c:	605a      	str	r2, [r3, #4]
 800c55e:	4401      	add	r1, r0
 800c560:	6019      	str	r1, [r3, #0]
 800c562:	e7d7      	b.n	800c514 <_free_r+0x24>
 800c564:	d902      	bls.n	800c56c <_free_r+0x7c>
 800c566:	230c      	movs	r3, #12
 800c568:	602b      	str	r3, [r5, #0]
 800c56a:	e7d3      	b.n	800c514 <_free_r+0x24>
 800c56c:	6820      	ldr	r0, [r4, #0]
 800c56e:	1821      	adds	r1, r4, r0
 800c570:	428a      	cmp	r2, r1
 800c572:	bf04      	itt	eq
 800c574:	6811      	ldreq	r1, [r2, #0]
 800c576:	6852      	ldreq	r2, [r2, #4]
 800c578:	6062      	str	r2, [r4, #4]
 800c57a:	bf04      	itt	eq
 800c57c:	1809      	addeq	r1, r1, r0
 800c57e:	6021      	streq	r1, [r4, #0]
 800c580:	605c      	str	r4, [r3, #4]
 800c582:	e7c7      	b.n	800c514 <_free_r+0x24>
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	bf00      	nop
 800c588:	20008464 	.word	0x20008464

0800c58c <_malloc_r>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	1ccd      	adds	r5, r1, #3
 800c590:	f025 0503 	bic.w	r5, r5, #3
 800c594:	3508      	adds	r5, #8
 800c596:	2d0c      	cmp	r5, #12
 800c598:	bf38      	it	cc
 800c59a:	250c      	movcc	r5, #12
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	4606      	mov	r6, r0
 800c5a0:	db01      	blt.n	800c5a6 <_malloc_r+0x1a>
 800c5a2:	42a9      	cmp	r1, r5
 800c5a4:	d903      	bls.n	800c5ae <_malloc_r+0x22>
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	6033      	str	r3, [r6, #0]
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	f000 fb71 	bl	800cc94 <__malloc_lock>
 800c5b2:	4a21      	ldr	r2, [pc, #132]	; (800c638 <_malloc_r+0xac>)
 800c5b4:	6814      	ldr	r4, [r2, #0]
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	b991      	cbnz	r1, 800c5e0 <_malloc_r+0x54>
 800c5ba:	4c20      	ldr	r4, [pc, #128]	; (800c63c <_malloc_r+0xb0>)
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	b91b      	cbnz	r3, 800c5c8 <_malloc_r+0x3c>
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f000 f8b9 	bl	800c738 <_sbrk_r>
 800c5c6:	6020      	str	r0, [r4, #0]
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f000 f8b4 	bl	800c738 <_sbrk_r>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d124      	bne.n	800c61e <_malloc_r+0x92>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	6033      	str	r3, [r6, #0]
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f000 fb5c 	bl	800cc96 <__malloc_unlock>
 800c5de:	e7e4      	b.n	800c5aa <_malloc_r+0x1e>
 800c5e0:	680b      	ldr	r3, [r1, #0]
 800c5e2:	1b5b      	subs	r3, r3, r5
 800c5e4:	d418      	bmi.n	800c618 <_malloc_r+0x8c>
 800c5e6:	2b0b      	cmp	r3, #11
 800c5e8:	d90f      	bls.n	800c60a <_malloc_r+0x7e>
 800c5ea:	600b      	str	r3, [r1, #0]
 800c5ec:	50cd      	str	r5, [r1, r3]
 800c5ee:	18cc      	adds	r4, r1, r3
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f000 fb50 	bl	800cc96 <__malloc_unlock>
 800c5f6:	f104 000b 	add.w	r0, r4, #11
 800c5fa:	1d23      	adds	r3, r4, #4
 800c5fc:	f020 0007 	bic.w	r0, r0, #7
 800c600:	1ac3      	subs	r3, r0, r3
 800c602:	d0d3      	beq.n	800c5ac <_malloc_r+0x20>
 800c604:	425a      	negs	r2, r3
 800c606:	50e2      	str	r2, [r4, r3]
 800c608:	e7d0      	b.n	800c5ac <_malloc_r+0x20>
 800c60a:	428c      	cmp	r4, r1
 800c60c:	684b      	ldr	r3, [r1, #4]
 800c60e:	bf16      	itet	ne
 800c610:	6063      	strne	r3, [r4, #4]
 800c612:	6013      	streq	r3, [r2, #0]
 800c614:	460c      	movne	r4, r1
 800c616:	e7eb      	b.n	800c5f0 <_malloc_r+0x64>
 800c618:	460c      	mov	r4, r1
 800c61a:	6849      	ldr	r1, [r1, #4]
 800c61c:	e7cc      	b.n	800c5b8 <_malloc_r+0x2c>
 800c61e:	1cc4      	adds	r4, r0, #3
 800c620:	f024 0403 	bic.w	r4, r4, #3
 800c624:	42a0      	cmp	r0, r4
 800c626:	d005      	beq.n	800c634 <_malloc_r+0xa8>
 800c628:	1a21      	subs	r1, r4, r0
 800c62a:	4630      	mov	r0, r6
 800c62c:	f000 f884 	bl	800c738 <_sbrk_r>
 800c630:	3001      	adds	r0, #1
 800c632:	d0cf      	beq.n	800c5d4 <_malloc_r+0x48>
 800c634:	6025      	str	r5, [r4, #0]
 800c636:	e7db      	b.n	800c5f0 <_malloc_r+0x64>
 800c638:	20008464 	.word	0x20008464
 800c63c:	20008468 	.word	0x20008468

0800c640 <iprintf>:
 800c640:	b40f      	push	{r0, r1, r2, r3}
 800c642:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <iprintf+0x2c>)
 800c644:	b513      	push	{r0, r1, r4, lr}
 800c646:	681c      	ldr	r4, [r3, #0]
 800c648:	b124      	cbz	r4, 800c654 <iprintf+0x14>
 800c64a:	69a3      	ldr	r3, [r4, #24]
 800c64c:	b913      	cbnz	r3, 800c654 <iprintf+0x14>
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fa32 	bl	800cab8 <__sinit>
 800c654:	ab05      	add	r3, sp, #20
 800c656:	9a04      	ldr	r2, [sp, #16]
 800c658:	68a1      	ldr	r1, [r4, #8]
 800c65a:	9301      	str	r3, [sp, #4]
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 fb45 	bl	800ccec <_vfiprintf_r>
 800c662:	b002      	add	sp, #8
 800c664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c668:	b004      	add	sp, #16
 800c66a:	4770      	bx	lr
 800c66c:	20000030 	.word	0x20000030

0800c670 <_puts_r>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	460e      	mov	r6, r1
 800c674:	4605      	mov	r5, r0
 800c676:	b118      	cbz	r0, 800c680 <_puts_r+0x10>
 800c678:	6983      	ldr	r3, [r0, #24]
 800c67a:	b90b      	cbnz	r3, 800c680 <_puts_r+0x10>
 800c67c:	f000 fa1c 	bl	800cab8 <__sinit>
 800c680:	69ab      	ldr	r3, [r5, #24]
 800c682:	68ac      	ldr	r4, [r5, #8]
 800c684:	b913      	cbnz	r3, 800c68c <_puts_r+0x1c>
 800c686:	4628      	mov	r0, r5
 800c688:	f000 fa16 	bl	800cab8 <__sinit>
 800c68c:	4b23      	ldr	r3, [pc, #140]	; (800c71c <_puts_r+0xac>)
 800c68e:	429c      	cmp	r4, r3
 800c690:	d117      	bne.n	800c6c2 <_puts_r+0x52>
 800c692:	686c      	ldr	r4, [r5, #4]
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	071b      	lsls	r3, r3, #28
 800c698:	d51d      	bpl.n	800c6d6 <_puts_r+0x66>
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	b1db      	cbz	r3, 800c6d6 <_puts_r+0x66>
 800c69e:	3e01      	subs	r6, #1
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	60a3      	str	r3, [r4, #8]
 800c6aa:	b9e9      	cbnz	r1, 800c6e8 <_puts_r+0x78>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	da2e      	bge.n	800c70e <_puts_r+0x9e>
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	210a      	movs	r1, #10
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f000 f84f 	bl	800c758 <__swbuf_r>
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	d011      	beq.n	800c6e2 <_puts_r+0x72>
 800c6be:	200a      	movs	r0, #10
 800c6c0:	e011      	b.n	800c6e6 <_puts_r+0x76>
 800c6c2:	4b17      	ldr	r3, [pc, #92]	; (800c720 <_puts_r+0xb0>)
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	d101      	bne.n	800c6cc <_puts_r+0x5c>
 800c6c8:	68ac      	ldr	r4, [r5, #8]
 800c6ca:	e7e3      	b.n	800c694 <_puts_r+0x24>
 800c6cc:	4b15      	ldr	r3, [pc, #84]	; (800c724 <_puts_r+0xb4>)
 800c6ce:	429c      	cmp	r4, r3
 800c6d0:	bf08      	it	eq
 800c6d2:	68ec      	ldreq	r4, [r5, #12]
 800c6d4:	e7de      	b.n	800c694 <_puts_r+0x24>
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4628      	mov	r0, r5
 800c6da:	f000 f88f 	bl	800c7fc <__swsetup_r>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d0dd      	beq.n	800c69e <_puts_r+0x2e>
 800c6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	da04      	bge.n	800c6f6 <_puts_r+0x86>
 800c6ec:	69a2      	ldr	r2, [r4, #24]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	dc06      	bgt.n	800c700 <_puts_r+0x90>
 800c6f2:	290a      	cmp	r1, #10
 800c6f4:	d004      	beq.n	800c700 <_puts_r+0x90>
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	6022      	str	r2, [r4, #0]
 800c6fc:	7019      	strb	r1, [r3, #0]
 800c6fe:	e7cf      	b.n	800c6a0 <_puts_r+0x30>
 800c700:	4622      	mov	r2, r4
 800c702:	4628      	mov	r0, r5
 800c704:	f000 f828 	bl	800c758 <__swbuf_r>
 800c708:	3001      	adds	r0, #1
 800c70a:	d1c9      	bne.n	800c6a0 <_puts_r+0x30>
 800c70c:	e7e9      	b.n	800c6e2 <_puts_r+0x72>
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	200a      	movs	r0, #10
 800c712:	1c5a      	adds	r2, r3, #1
 800c714:	6022      	str	r2, [r4, #0]
 800c716:	7018      	strb	r0, [r3, #0]
 800c718:	e7e5      	b.n	800c6e6 <_puts_r+0x76>
 800c71a:	bf00      	nop
 800c71c:	0800d500 	.word	0x0800d500
 800c720:	0800d520 	.word	0x0800d520
 800c724:	0800d4e0 	.word	0x0800d4e0

0800c728 <puts>:
 800c728:	4b02      	ldr	r3, [pc, #8]	; (800c734 <puts+0xc>)
 800c72a:	4601      	mov	r1, r0
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	f7ff bf9f 	b.w	800c670 <_puts_r>
 800c732:	bf00      	nop
 800c734:	20000030 	.word	0x20000030

0800c738 <_sbrk_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4c06      	ldr	r4, [pc, #24]	; (800c754 <_sbrk_r+0x1c>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4605      	mov	r5, r0
 800c740:	4608      	mov	r0, r1
 800c742:	6023      	str	r3, [r4, #0]
 800c744:	f7f5 f860 	bl	8001808 <_sbrk>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d102      	bne.n	800c752 <_sbrk_r+0x1a>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	b103      	cbz	r3, 800c752 <_sbrk_r+0x1a>
 800c750:	602b      	str	r3, [r5, #0]
 800c752:	bd38      	pop	{r3, r4, r5, pc}
 800c754:	20008db4 	.word	0x20008db4

0800c758 <__swbuf_r>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	460e      	mov	r6, r1
 800c75c:	4614      	mov	r4, r2
 800c75e:	4605      	mov	r5, r0
 800c760:	b118      	cbz	r0, 800c76a <__swbuf_r+0x12>
 800c762:	6983      	ldr	r3, [r0, #24]
 800c764:	b90b      	cbnz	r3, 800c76a <__swbuf_r+0x12>
 800c766:	f000 f9a7 	bl	800cab8 <__sinit>
 800c76a:	4b21      	ldr	r3, [pc, #132]	; (800c7f0 <__swbuf_r+0x98>)
 800c76c:	429c      	cmp	r4, r3
 800c76e:	d12a      	bne.n	800c7c6 <__swbuf_r+0x6e>
 800c770:	686c      	ldr	r4, [r5, #4]
 800c772:	69a3      	ldr	r3, [r4, #24]
 800c774:	60a3      	str	r3, [r4, #8]
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	071a      	lsls	r2, r3, #28
 800c77a:	d52e      	bpl.n	800c7da <__swbuf_r+0x82>
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	b363      	cbz	r3, 800c7da <__swbuf_r+0x82>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	6820      	ldr	r0, [r4, #0]
 800c784:	1ac0      	subs	r0, r0, r3
 800c786:	6963      	ldr	r3, [r4, #20]
 800c788:	b2f6      	uxtb	r6, r6
 800c78a:	4283      	cmp	r3, r0
 800c78c:	4637      	mov	r7, r6
 800c78e:	dc04      	bgt.n	800c79a <__swbuf_r+0x42>
 800c790:	4621      	mov	r1, r4
 800c792:	4628      	mov	r0, r5
 800c794:	f000 f926 	bl	800c9e4 <_fflush_r>
 800c798:	bb28      	cbnz	r0, 800c7e6 <__swbuf_r+0x8e>
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	6022      	str	r2, [r4, #0]
 800c7a6:	701e      	strb	r6, [r3, #0]
 800c7a8:	6963      	ldr	r3, [r4, #20]
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	4283      	cmp	r3, r0
 800c7ae:	d004      	beq.n	800c7ba <__swbuf_r+0x62>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	07db      	lsls	r3, r3, #31
 800c7b4:	d519      	bpl.n	800c7ea <__swbuf_r+0x92>
 800c7b6:	2e0a      	cmp	r6, #10
 800c7b8:	d117      	bne.n	800c7ea <__swbuf_r+0x92>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f000 f911 	bl	800c9e4 <_fflush_r>
 800c7c2:	b190      	cbz	r0, 800c7ea <__swbuf_r+0x92>
 800c7c4:	e00f      	b.n	800c7e6 <__swbuf_r+0x8e>
 800c7c6:	4b0b      	ldr	r3, [pc, #44]	; (800c7f4 <__swbuf_r+0x9c>)
 800c7c8:	429c      	cmp	r4, r3
 800c7ca:	d101      	bne.n	800c7d0 <__swbuf_r+0x78>
 800c7cc:	68ac      	ldr	r4, [r5, #8]
 800c7ce:	e7d0      	b.n	800c772 <__swbuf_r+0x1a>
 800c7d0:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <__swbuf_r+0xa0>)
 800c7d2:	429c      	cmp	r4, r3
 800c7d4:	bf08      	it	eq
 800c7d6:	68ec      	ldreq	r4, [r5, #12]
 800c7d8:	e7cb      	b.n	800c772 <__swbuf_r+0x1a>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 f80d 	bl	800c7fc <__swsetup_r>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d0cc      	beq.n	800c780 <__swbuf_r+0x28>
 800c7e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	0800d500 	.word	0x0800d500
 800c7f4:	0800d520 	.word	0x0800d520
 800c7f8:	0800d4e0 	.word	0x0800d4e0

0800c7fc <__swsetup_r>:
 800c7fc:	4b32      	ldr	r3, [pc, #200]	; (800c8c8 <__swsetup_r+0xcc>)
 800c7fe:	b570      	push	{r4, r5, r6, lr}
 800c800:	681d      	ldr	r5, [r3, #0]
 800c802:	4606      	mov	r6, r0
 800c804:	460c      	mov	r4, r1
 800c806:	b125      	cbz	r5, 800c812 <__swsetup_r+0x16>
 800c808:	69ab      	ldr	r3, [r5, #24]
 800c80a:	b913      	cbnz	r3, 800c812 <__swsetup_r+0x16>
 800c80c:	4628      	mov	r0, r5
 800c80e:	f000 f953 	bl	800cab8 <__sinit>
 800c812:	4b2e      	ldr	r3, [pc, #184]	; (800c8cc <__swsetup_r+0xd0>)
 800c814:	429c      	cmp	r4, r3
 800c816:	d10f      	bne.n	800c838 <__swsetup_r+0x3c>
 800c818:	686c      	ldr	r4, [r5, #4]
 800c81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c81e:	b29a      	uxth	r2, r3
 800c820:	0715      	lsls	r5, r2, #28
 800c822:	d42c      	bmi.n	800c87e <__swsetup_r+0x82>
 800c824:	06d0      	lsls	r0, r2, #27
 800c826:	d411      	bmi.n	800c84c <__swsetup_r+0x50>
 800c828:	2209      	movs	r2, #9
 800c82a:	6032      	str	r2, [r6, #0]
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	f04f 30ff 	mov.w	r0, #4294967295
 800c836:	e03e      	b.n	800c8b6 <__swsetup_r+0xba>
 800c838:	4b25      	ldr	r3, [pc, #148]	; (800c8d0 <__swsetup_r+0xd4>)
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d101      	bne.n	800c842 <__swsetup_r+0x46>
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	e7eb      	b.n	800c81a <__swsetup_r+0x1e>
 800c842:	4b24      	ldr	r3, [pc, #144]	; (800c8d4 <__swsetup_r+0xd8>)
 800c844:	429c      	cmp	r4, r3
 800c846:	bf08      	it	eq
 800c848:	68ec      	ldreq	r4, [r5, #12]
 800c84a:	e7e6      	b.n	800c81a <__swsetup_r+0x1e>
 800c84c:	0751      	lsls	r1, r2, #29
 800c84e:	d512      	bpl.n	800c876 <__swsetup_r+0x7a>
 800c850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c852:	b141      	cbz	r1, 800c866 <__swsetup_r+0x6a>
 800c854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c858:	4299      	cmp	r1, r3
 800c85a:	d002      	beq.n	800c862 <__swsetup_r+0x66>
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7ff fe47 	bl	800c4f0 <_free_r>
 800c862:	2300      	movs	r3, #0
 800c864:	6363      	str	r3, [r4, #52]	; 0x34
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	2300      	movs	r3, #0
 800c870:	6063      	str	r3, [r4, #4]
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	f043 0308 	orr.w	r3, r3, #8
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	b94b      	cbnz	r3, 800c896 <__swsetup_r+0x9a>
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c88c:	d003      	beq.n	800c896 <__swsetup_r+0x9a>
 800c88e:	4621      	mov	r1, r4
 800c890:	4630      	mov	r0, r6
 800c892:	f000 f9bf 	bl	800cc14 <__smakebuf_r>
 800c896:	89a2      	ldrh	r2, [r4, #12]
 800c898:	f012 0301 	ands.w	r3, r2, #1
 800c89c:	d00c      	beq.n	800c8b8 <__swsetup_r+0xbc>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60a3      	str	r3, [r4, #8]
 800c8a2:	6963      	ldr	r3, [r4, #20]
 800c8a4:	425b      	negs	r3, r3
 800c8a6:	61a3      	str	r3, [r4, #24]
 800c8a8:	6923      	ldr	r3, [r4, #16]
 800c8aa:	b953      	cbnz	r3, 800c8c2 <__swsetup_r+0xc6>
 800c8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c8b4:	d1ba      	bne.n	800c82c <__swsetup_r+0x30>
 800c8b6:	bd70      	pop	{r4, r5, r6, pc}
 800c8b8:	0792      	lsls	r2, r2, #30
 800c8ba:	bf58      	it	pl
 800c8bc:	6963      	ldrpl	r3, [r4, #20]
 800c8be:	60a3      	str	r3, [r4, #8]
 800c8c0:	e7f2      	b.n	800c8a8 <__swsetup_r+0xac>
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	e7f7      	b.n	800c8b6 <__swsetup_r+0xba>
 800c8c6:	bf00      	nop
 800c8c8:	20000030 	.word	0x20000030
 800c8cc:	0800d500 	.word	0x0800d500
 800c8d0:	0800d520 	.word	0x0800d520
 800c8d4:	0800d4e0 	.word	0x0800d4e0

0800c8d8 <__sflush_r>:
 800c8d8:	898a      	ldrh	r2, [r1, #12]
 800c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	4605      	mov	r5, r0
 800c8e0:	0710      	lsls	r0, r2, #28
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	d458      	bmi.n	800c998 <__sflush_r+0xc0>
 800c8e6:	684b      	ldr	r3, [r1, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dc05      	bgt.n	800c8f8 <__sflush_r+0x20>
 800c8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	dc02      	bgt.n	800c8f8 <__sflush_r+0x20>
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	d0f9      	beq.n	800c8f2 <__sflush_r+0x1a>
 800c8fe:	2300      	movs	r3, #0
 800c900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c904:	682f      	ldr	r7, [r5, #0]
 800c906:	6a21      	ldr	r1, [r4, #32]
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	d032      	beq.n	800c972 <__sflush_r+0x9a>
 800c90c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	075a      	lsls	r2, r3, #29
 800c912:	d505      	bpl.n	800c920 <__sflush_r+0x48>
 800c914:	6863      	ldr	r3, [r4, #4]
 800c916:	1ac0      	subs	r0, r0, r3
 800c918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c91a:	b10b      	cbz	r3, 800c920 <__sflush_r+0x48>
 800c91c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c91e:	1ac0      	subs	r0, r0, r3
 800c920:	2300      	movs	r3, #0
 800c922:	4602      	mov	r2, r0
 800c924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c926:	6a21      	ldr	r1, [r4, #32]
 800c928:	4628      	mov	r0, r5
 800c92a:	47b0      	blx	r6
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	d106      	bne.n	800c940 <__sflush_r+0x68>
 800c932:	6829      	ldr	r1, [r5, #0]
 800c934:	291d      	cmp	r1, #29
 800c936:	d848      	bhi.n	800c9ca <__sflush_r+0xf2>
 800c938:	4a29      	ldr	r2, [pc, #164]	; (800c9e0 <__sflush_r+0x108>)
 800c93a:	40ca      	lsrs	r2, r1
 800c93c:	07d6      	lsls	r6, r2, #31
 800c93e:	d544      	bpl.n	800c9ca <__sflush_r+0xf2>
 800c940:	2200      	movs	r2, #0
 800c942:	6062      	str	r2, [r4, #4]
 800c944:	04d9      	lsls	r1, r3, #19
 800c946:	6922      	ldr	r2, [r4, #16]
 800c948:	6022      	str	r2, [r4, #0]
 800c94a:	d504      	bpl.n	800c956 <__sflush_r+0x7e>
 800c94c:	1c42      	adds	r2, r0, #1
 800c94e:	d101      	bne.n	800c954 <__sflush_r+0x7c>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b903      	cbnz	r3, 800c956 <__sflush_r+0x7e>
 800c954:	6560      	str	r0, [r4, #84]	; 0x54
 800c956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c958:	602f      	str	r7, [r5, #0]
 800c95a:	2900      	cmp	r1, #0
 800c95c:	d0c9      	beq.n	800c8f2 <__sflush_r+0x1a>
 800c95e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c962:	4299      	cmp	r1, r3
 800c964:	d002      	beq.n	800c96c <__sflush_r+0x94>
 800c966:	4628      	mov	r0, r5
 800c968:	f7ff fdc2 	bl	800c4f0 <_free_r>
 800c96c:	2000      	movs	r0, #0
 800c96e:	6360      	str	r0, [r4, #52]	; 0x34
 800c970:	e7c0      	b.n	800c8f4 <__sflush_r+0x1c>
 800c972:	2301      	movs	r3, #1
 800c974:	4628      	mov	r0, r5
 800c976:	47b0      	blx	r6
 800c978:	1c41      	adds	r1, r0, #1
 800c97a:	d1c8      	bne.n	800c90e <__sflush_r+0x36>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0c5      	beq.n	800c90e <__sflush_r+0x36>
 800c982:	2b1d      	cmp	r3, #29
 800c984:	d001      	beq.n	800c98a <__sflush_r+0xb2>
 800c986:	2b16      	cmp	r3, #22
 800c988:	d101      	bne.n	800c98e <__sflush_r+0xb6>
 800c98a:	602f      	str	r7, [r5, #0]
 800c98c:	e7b1      	b.n	800c8f2 <__sflush_r+0x1a>
 800c98e:	89a3      	ldrh	r3, [r4, #12]
 800c990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c994:	81a3      	strh	r3, [r4, #12]
 800c996:	e7ad      	b.n	800c8f4 <__sflush_r+0x1c>
 800c998:	690f      	ldr	r7, [r1, #16]
 800c99a:	2f00      	cmp	r7, #0
 800c99c:	d0a9      	beq.n	800c8f2 <__sflush_r+0x1a>
 800c99e:	0793      	lsls	r3, r2, #30
 800c9a0:	680e      	ldr	r6, [r1, #0]
 800c9a2:	bf08      	it	eq
 800c9a4:	694b      	ldreq	r3, [r1, #20]
 800c9a6:	600f      	str	r7, [r1, #0]
 800c9a8:	bf18      	it	ne
 800c9aa:	2300      	movne	r3, #0
 800c9ac:	eba6 0807 	sub.w	r8, r6, r7
 800c9b0:	608b      	str	r3, [r1, #8]
 800c9b2:	f1b8 0f00 	cmp.w	r8, #0
 800c9b6:	dd9c      	ble.n	800c8f2 <__sflush_r+0x1a>
 800c9b8:	4643      	mov	r3, r8
 800c9ba:	463a      	mov	r2, r7
 800c9bc:	6a21      	ldr	r1, [r4, #32]
 800c9be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b0      	blx	r6
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	dc06      	bgt.n	800c9d6 <__sflush_r+0xfe>
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ce:	81a3      	strh	r3, [r4, #12]
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	e78e      	b.n	800c8f4 <__sflush_r+0x1c>
 800c9d6:	4407      	add	r7, r0
 800c9d8:	eba8 0800 	sub.w	r8, r8, r0
 800c9dc:	e7e9      	b.n	800c9b2 <__sflush_r+0xda>
 800c9de:	bf00      	nop
 800c9e0:	20400001 	.word	0x20400001

0800c9e4 <_fflush_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	690b      	ldr	r3, [r1, #16]
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	b1db      	cbz	r3, 800ca26 <_fflush_r+0x42>
 800c9ee:	b118      	cbz	r0, 800c9f8 <_fflush_r+0x14>
 800c9f0:	6983      	ldr	r3, [r0, #24]
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <_fflush_r+0x14>
 800c9f4:	f000 f860 	bl	800cab8 <__sinit>
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <_fflush_r+0x48>)
 800c9fa:	429c      	cmp	r4, r3
 800c9fc:	d109      	bne.n	800ca12 <_fflush_r+0x2e>
 800c9fe:	686c      	ldr	r4, [r5, #4]
 800ca00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca04:	b17b      	cbz	r3, 800ca26 <_fflush_r+0x42>
 800ca06:	4621      	mov	r1, r4
 800ca08:	4628      	mov	r0, r5
 800ca0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca0e:	f7ff bf63 	b.w	800c8d8 <__sflush_r>
 800ca12:	4b07      	ldr	r3, [pc, #28]	; (800ca30 <_fflush_r+0x4c>)
 800ca14:	429c      	cmp	r4, r3
 800ca16:	d101      	bne.n	800ca1c <_fflush_r+0x38>
 800ca18:	68ac      	ldr	r4, [r5, #8]
 800ca1a:	e7f1      	b.n	800ca00 <_fflush_r+0x1c>
 800ca1c:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <_fflush_r+0x50>)
 800ca1e:	429c      	cmp	r4, r3
 800ca20:	bf08      	it	eq
 800ca22:	68ec      	ldreq	r4, [r5, #12]
 800ca24:	e7ec      	b.n	800ca00 <_fflush_r+0x1c>
 800ca26:	2000      	movs	r0, #0
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0800d500 	.word	0x0800d500
 800ca30:	0800d520 	.word	0x0800d520
 800ca34:	0800d4e0 	.word	0x0800d4e0

0800ca38 <std>:
 800ca38:	2300      	movs	r3, #0
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca42:	6083      	str	r3, [r0, #8]
 800ca44:	8181      	strh	r1, [r0, #12]
 800ca46:	6643      	str	r3, [r0, #100]	; 0x64
 800ca48:	81c2      	strh	r2, [r0, #14]
 800ca4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca4e:	6183      	str	r3, [r0, #24]
 800ca50:	4619      	mov	r1, r3
 800ca52:	2208      	movs	r2, #8
 800ca54:	305c      	adds	r0, #92	; 0x5c
 800ca56:	f7ff fd42 	bl	800c4de <memset>
 800ca5a:	4b05      	ldr	r3, [pc, #20]	; (800ca70 <std+0x38>)
 800ca5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca5e:	4b05      	ldr	r3, [pc, #20]	; (800ca74 <std+0x3c>)
 800ca60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca62:	4b05      	ldr	r3, [pc, #20]	; (800ca78 <std+0x40>)
 800ca64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca66:	4b05      	ldr	r3, [pc, #20]	; (800ca7c <std+0x44>)
 800ca68:	6224      	str	r4, [r4, #32]
 800ca6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca6c:	bd10      	pop	{r4, pc}
 800ca6e:	bf00      	nop
 800ca70:	0800d229 	.word	0x0800d229
 800ca74:	0800d24b 	.word	0x0800d24b
 800ca78:	0800d283 	.word	0x0800d283
 800ca7c:	0800d2a7 	.word	0x0800d2a7

0800ca80 <_cleanup_r>:
 800ca80:	4901      	ldr	r1, [pc, #4]	; (800ca88 <_cleanup_r+0x8>)
 800ca82:	f000 b885 	b.w	800cb90 <_fwalk_reent>
 800ca86:	bf00      	nop
 800ca88:	0800c9e5 	.word	0x0800c9e5

0800ca8c <__sfmoreglue>:
 800ca8c:	b570      	push	{r4, r5, r6, lr}
 800ca8e:	1e4a      	subs	r2, r1, #1
 800ca90:	2568      	movs	r5, #104	; 0x68
 800ca92:	4355      	muls	r5, r2
 800ca94:	460e      	mov	r6, r1
 800ca96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca9a:	f7ff fd77 	bl	800c58c <_malloc_r>
 800ca9e:	4604      	mov	r4, r0
 800caa0:	b140      	cbz	r0, 800cab4 <__sfmoreglue+0x28>
 800caa2:	2100      	movs	r1, #0
 800caa4:	e9c0 1600 	strd	r1, r6, [r0]
 800caa8:	300c      	adds	r0, #12
 800caaa:	60a0      	str	r0, [r4, #8]
 800caac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cab0:	f7ff fd15 	bl	800c4de <memset>
 800cab4:	4620      	mov	r0, r4
 800cab6:	bd70      	pop	{r4, r5, r6, pc}

0800cab8 <__sinit>:
 800cab8:	6983      	ldr	r3, [r0, #24]
 800caba:	b510      	push	{r4, lr}
 800cabc:	4604      	mov	r4, r0
 800cabe:	bb33      	cbnz	r3, 800cb0e <__sinit+0x56>
 800cac0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cac4:	6503      	str	r3, [r0, #80]	; 0x50
 800cac6:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <__sinit+0x58>)
 800cac8:	4a12      	ldr	r2, [pc, #72]	; (800cb14 <__sinit+0x5c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6282      	str	r2, [r0, #40]	; 0x28
 800cace:	4298      	cmp	r0, r3
 800cad0:	bf04      	itt	eq
 800cad2:	2301      	moveq	r3, #1
 800cad4:	6183      	streq	r3, [r0, #24]
 800cad6:	f000 f81f 	bl	800cb18 <__sfp>
 800cada:	6060      	str	r0, [r4, #4]
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 f81b 	bl	800cb18 <__sfp>
 800cae2:	60a0      	str	r0, [r4, #8]
 800cae4:	4620      	mov	r0, r4
 800cae6:	f000 f817 	bl	800cb18 <__sfp>
 800caea:	2200      	movs	r2, #0
 800caec:	60e0      	str	r0, [r4, #12]
 800caee:	2104      	movs	r1, #4
 800caf0:	6860      	ldr	r0, [r4, #4]
 800caf2:	f7ff ffa1 	bl	800ca38 <std>
 800caf6:	2201      	movs	r2, #1
 800caf8:	2109      	movs	r1, #9
 800cafa:	68a0      	ldr	r0, [r4, #8]
 800cafc:	f7ff ff9c 	bl	800ca38 <std>
 800cb00:	2202      	movs	r2, #2
 800cb02:	2112      	movs	r1, #18
 800cb04:	68e0      	ldr	r0, [r4, #12]
 800cb06:	f7ff ff97 	bl	800ca38 <std>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	61a3      	str	r3, [r4, #24]
 800cb0e:	bd10      	pop	{r4, pc}
 800cb10:	0800d4dc 	.word	0x0800d4dc
 800cb14:	0800ca81 	.word	0x0800ca81

0800cb18 <__sfp>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	4b1b      	ldr	r3, [pc, #108]	; (800cb88 <__sfp+0x70>)
 800cb1c:	681e      	ldr	r6, [r3, #0]
 800cb1e:	69b3      	ldr	r3, [r6, #24]
 800cb20:	4607      	mov	r7, r0
 800cb22:	b913      	cbnz	r3, 800cb2a <__sfp+0x12>
 800cb24:	4630      	mov	r0, r6
 800cb26:	f7ff ffc7 	bl	800cab8 <__sinit>
 800cb2a:	3648      	adds	r6, #72	; 0x48
 800cb2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb30:	3b01      	subs	r3, #1
 800cb32:	d503      	bpl.n	800cb3c <__sfp+0x24>
 800cb34:	6833      	ldr	r3, [r6, #0]
 800cb36:	b133      	cbz	r3, 800cb46 <__sfp+0x2e>
 800cb38:	6836      	ldr	r6, [r6, #0]
 800cb3a:	e7f7      	b.n	800cb2c <__sfp+0x14>
 800cb3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb40:	b16d      	cbz	r5, 800cb5e <__sfp+0x46>
 800cb42:	3468      	adds	r4, #104	; 0x68
 800cb44:	e7f4      	b.n	800cb30 <__sfp+0x18>
 800cb46:	2104      	movs	r1, #4
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f7ff ff9f 	bl	800ca8c <__sfmoreglue>
 800cb4e:	6030      	str	r0, [r6, #0]
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d1f1      	bne.n	800cb38 <__sfp+0x20>
 800cb54:	230c      	movs	r3, #12
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	4604      	mov	r4, r0
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb5e:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <__sfp+0x74>)
 800cb60:	6665      	str	r5, [r4, #100]	; 0x64
 800cb62:	e9c4 5500 	strd	r5, r5, [r4]
 800cb66:	60a5      	str	r5, [r4, #8]
 800cb68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cb6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cb70:	2208      	movs	r2, #8
 800cb72:	4629      	mov	r1, r5
 800cb74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb78:	f7ff fcb1 	bl	800c4de <memset>
 800cb7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb84:	e7e9      	b.n	800cb5a <__sfp+0x42>
 800cb86:	bf00      	nop
 800cb88:	0800d4dc 	.word	0x0800d4dc
 800cb8c:	ffff0001 	.word	0xffff0001

0800cb90 <_fwalk_reent>:
 800cb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb94:	4680      	mov	r8, r0
 800cb96:	4689      	mov	r9, r1
 800cb98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb9c:	2600      	movs	r6, #0
 800cb9e:	b914      	cbnz	r4, 800cba6 <_fwalk_reent+0x16>
 800cba0:	4630      	mov	r0, r6
 800cba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cbaa:	3f01      	subs	r7, #1
 800cbac:	d501      	bpl.n	800cbb2 <_fwalk_reent+0x22>
 800cbae:	6824      	ldr	r4, [r4, #0]
 800cbb0:	e7f5      	b.n	800cb9e <_fwalk_reent+0xe>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d907      	bls.n	800cbc8 <_fwalk_reent+0x38>
 800cbb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	d003      	beq.n	800cbc8 <_fwalk_reent+0x38>
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	47c8      	blx	r9
 800cbc6:	4306      	orrs	r6, r0
 800cbc8:	3568      	adds	r5, #104	; 0x68
 800cbca:	e7ee      	b.n	800cbaa <_fwalk_reent+0x1a>

0800cbcc <__swhatbuf_r>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	460e      	mov	r6, r1
 800cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	b096      	sub	sp, #88	; 0x58
 800cbd8:	4614      	mov	r4, r2
 800cbda:	461d      	mov	r5, r3
 800cbdc:	da07      	bge.n	800cbee <__swhatbuf_r+0x22>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	602b      	str	r3, [r5, #0]
 800cbe2:	89b3      	ldrh	r3, [r6, #12]
 800cbe4:	061a      	lsls	r2, r3, #24
 800cbe6:	d410      	bmi.n	800cc0a <__swhatbuf_r+0x3e>
 800cbe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbec:	e00e      	b.n	800cc0c <__swhatbuf_r+0x40>
 800cbee:	466a      	mov	r2, sp
 800cbf0:	f000 fb80 	bl	800d2f4 <_fstat_r>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	dbf2      	blt.n	800cbde <__swhatbuf_r+0x12>
 800cbf8:	9a01      	ldr	r2, [sp, #4]
 800cbfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc02:	425a      	negs	r2, r3
 800cc04:	415a      	adcs	r2, r3
 800cc06:	602a      	str	r2, [r5, #0]
 800cc08:	e7ee      	b.n	800cbe8 <__swhatbuf_r+0x1c>
 800cc0a:	2340      	movs	r3, #64	; 0x40
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	b016      	add	sp, #88	; 0x58
 800cc12:	bd70      	pop	{r4, r5, r6, pc}

0800cc14 <__smakebuf_r>:
 800cc14:	898b      	ldrh	r3, [r1, #12]
 800cc16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc18:	079d      	lsls	r5, r3, #30
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	d507      	bpl.n	800cc30 <__smakebuf_r+0x1c>
 800cc20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	6123      	str	r3, [r4, #16]
 800cc28:	2301      	movs	r3, #1
 800cc2a:	6163      	str	r3, [r4, #20]
 800cc2c:	b002      	add	sp, #8
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	ab01      	add	r3, sp, #4
 800cc32:	466a      	mov	r2, sp
 800cc34:	f7ff ffca 	bl	800cbcc <__swhatbuf_r>
 800cc38:	9900      	ldr	r1, [sp, #0]
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f7ff fca5 	bl	800c58c <_malloc_r>
 800cc42:	b948      	cbnz	r0, 800cc58 <__smakebuf_r+0x44>
 800cc44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc48:	059a      	lsls	r2, r3, #22
 800cc4a:	d4ef      	bmi.n	800cc2c <__smakebuf_r+0x18>
 800cc4c:	f023 0303 	bic.w	r3, r3, #3
 800cc50:	f043 0302 	orr.w	r3, r3, #2
 800cc54:	81a3      	strh	r3, [r4, #12]
 800cc56:	e7e3      	b.n	800cc20 <__smakebuf_r+0xc>
 800cc58:	4b0d      	ldr	r3, [pc, #52]	; (800cc90 <__smakebuf_r+0x7c>)
 800cc5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	6020      	str	r0, [r4, #0]
 800cc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc64:	81a3      	strh	r3, [r4, #12]
 800cc66:	9b00      	ldr	r3, [sp, #0]
 800cc68:	6163      	str	r3, [r4, #20]
 800cc6a:	9b01      	ldr	r3, [sp, #4]
 800cc6c:	6120      	str	r0, [r4, #16]
 800cc6e:	b15b      	cbz	r3, 800cc88 <__smakebuf_r+0x74>
 800cc70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc74:	4630      	mov	r0, r6
 800cc76:	f000 fb4f 	bl	800d318 <_isatty_r>
 800cc7a:	b128      	cbz	r0, 800cc88 <__smakebuf_r+0x74>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	f043 0301 	orr.w	r3, r3, #1
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	431d      	orrs	r5, r3
 800cc8c:	81a5      	strh	r5, [r4, #12]
 800cc8e:	e7cd      	b.n	800cc2c <__smakebuf_r+0x18>
 800cc90:	0800ca81 	.word	0x0800ca81

0800cc94 <__malloc_lock>:
 800cc94:	4770      	bx	lr

0800cc96 <__malloc_unlock>:
 800cc96:	4770      	bx	lr

0800cc98 <__sfputc_r>:
 800cc98:	6893      	ldr	r3, [r2, #8]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	b410      	push	{r4}
 800cca0:	6093      	str	r3, [r2, #8]
 800cca2:	da08      	bge.n	800ccb6 <__sfputc_r+0x1e>
 800cca4:	6994      	ldr	r4, [r2, #24]
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	db01      	blt.n	800ccae <__sfputc_r+0x16>
 800ccaa:	290a      	cmp	r1, #10
 800ccac:	d103      	bne.n	800ccb6 <__sfputc_r+0x1e>
 800ccae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccb2:	f7ff bd51 	b.w	800c758 <__swbuf_r>
 800ccb6:	6813      	ldr	r3, [r2, #0]
 800ccb8:	1c58      	adds	r0, r3, #1
 800ccba:	6010      	str	r0, [r2, #0]
 800ccbc:	7019      	strb	r1, [r3, #0]
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <__sfputs_r>:
 800ccc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc8:	4606      	mov	r6, r0
 800ccca:	460f      	mov	r7, r1
 800cccc:	4614      	mov	r4, r2
 800ccce:	18d5      	adds	r5, r2, r3
 800ccd0:	42ac      	cmp	r4, r5
 800ccd2:	d101      	bne.n	800ccd8 <__sfputs_r+0x12>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e007      	b.n	800cce8 <__sfputs_r+0x22>
 800ccd8:	463a      	mov	r2, r7
 800ccda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccde:	4630      	mov	r0, r6
 800cce0:	f7ff ffda 	bl	800cc98 <__sfputc_r>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d1f3      	bne.n	800ccd0 <__sfputs_r+0xa>
 800cce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccec <_vfiprintf_r>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	b09d      	sub	sp, #116	; 0x74
 800ccf4:	4617      	mov	r7, r2
 800ccf6:	461d      	mov	r5, r3
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	b118      	cbz	r0, 800cd04 <_vfiprintf_r+0x18>
 800ccfc:	6983      	ldr	r3, [r0, #24]
 800ccfe:	b90b      	cbnz	r3, 800cd04 <_vfiprintf_r+0x18>
 800cd00:	f7ff feda 	bl	800cab8 <__sinit>
 800cd04:	4b7c      	ldr	r3, [pc, #496]	; (800cef8 <_vfiprintf_r+0x20c>)
 800cd06:	429c      	cmp	r4, r3
 800cd08:	d158      	bne.n	800cdbc <_vfiprintf_r+0xd0>
 800cd0a:	6874      	ldr	r4, [r6, #4]
 800cd0c:	89a3      	ldrh	r3, [r4, #12]
 800cd0e:	0718      	lsls	r0, r3, #28
 800cd10:	d55e      	bpl.n	800cdd0 <_vfiprintf_r+0xe4>
 800cd12:	6923      	ldr	r3, [r4, #16]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d05b      	beq.n	800cdd0 <_vfiprintf_r+0xe4>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1c:	2320      	movs	r3, #32
 800cd1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd22:	2330      	movs	r3, #48	; 0x30
 800cd24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd28:	9503      	str	r5, [sp, #12]
 800cd2a:	f04f 0b01 	mov.w	fp, #1
 800cd2e:	46b8      	mov	r8, r7
 800cd30:	4645      	mov	r5, r8
 800cd32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd36:	b10b      	cbz	r3, 800cd3c <_vfiprintf_r+0x50>
 800cd38:	2b25      	cmp	r3, #37	; 0x25
 800cd3a:	d154      	bne.n	800cde6 <_vfiprintf_r+0xfa>
 800cd3c:	ebb8 0a07 	subs.w	sl, r8, r7
 800cd40:	d00b      	beq.n	800cd5a <_vfiprintf_r+0x6e>
 800cd42:	4653      	mov	r3, sl
 800cd44:	463a      	mov	r2, r7
 800cd46:	4621      	mov	r1, r4
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7ff ffbc 	bl	800ccc6 <__sfputs_r>
 800cd4e:	3001      	adds	r0, #1
 800cd50:	f000 80c2 	beq.w	800ced8 <_vfiprintf_r+0x1ec>
 800cd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd56:	4453      	add	r3, sl
 800cd58:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5a:	f898 3000 	ldrb.w	r3, [r8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f000 80ba 	beq.w	800ced8 <_vfiprintf_r+0x1ec>
 800cd64:	2300      	movs	r3, #0
 800cd66:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd6e:	9304      	str	r3, [sp, #16]
 800cd70:	9307      	str	r3, [sp, #28]
 800cd72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd76:	931a      	str	r3, [sp, #104]	; 0x68
 800cd78:	46a8      	mov	r8, r5
 800cd7a:	2205      	movs	r2, #5
 800cd7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cd80:	485e      	ldr	r0, [pc, #376]	; (800cefc <_vfiprintf_r+0x210>)
 800cd82:	f7f3 fa35 	bl	80001f0 <memchr>
 800cd86:	9b04      	ldr	r3, [sp, #16]
 800cd88:	bb78      	cbnz	r0, 800cdea <_vfiprintf_r+0xfe>
 800cd8a:	06d9      	lsls	r1, r3, #27
 800cd8c:	bf44      	itt	mi
 800cd8e:	2220      	movmi	r2, #32
 800cd90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd94:	071a      	lsls	r2, r3, #28
 800cd96:	bf44      	itt	mi
 800cd98:	222b      	movmi	r2, #43	; 0x2b
 800cd9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd9e:	782a      	ldrb	r2, [r5, #0]
 800cda0:	2a2a      	cmp	r2, #42	; 0x2a
 800cda2:	d02a      	beq.n	800cdfa <_vfiprintf_r+0x10e>
 800cda4:	9a07      	ldr	r2, [sp, #28]
 800cda6:	46a8      	mov	r8, r5
 800cda8:	2000      	movs	r0, #0
 800cdaa:	250a      	movs	r5, #10
 800cdac:	4641      	mov	r1, r8
 800cdae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdb2:	3b30      	subs	r3, #48	; 0x30
 800cdb4:	2b09      	cmp	r3, #9
 800cdb6:	d969      	bls.n	800ce8c <_vfiprintf_r+0x1a0>
 800cdb8:	b360      	cbz	r0, 800ce14 <_vfiprintf_r+0x128>
 800cdba:	e024      	b.n	800ce06 <_vfiprintf_r+0x11a>
 800cdbc:	4b50      	ldr	r3, [pc, #320]	; (800cf00 <_vfiprintf_r+0x214>)
 800cdbe:	429c      	cmp	r4, r3
 800cdc0:	d101      	bne.n	800cdc6 <_vfiprintf_r+0xda>
 800cdc2:	68b4      	ldr	r4, [r6, #8]
 800cdc4:	e7a2      	b.n	800cd0c <_vfiprintf_r+0x20>
 800cdc6:	4b4f      	ldr	r3, [pc, #316]	; (800cf04 <_vfiprintf_r+0x218>)
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	bf08      	it	eq
 800cdcc:	68f4      	ldreq	r4, [r6, #12]
 800cdce:	e79d      	b.n	800cd0c <_vfiprintf_r+0x20>
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff fd12 	bl	800c7fc <__swsetup_r>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d09d      	beq.n	800cd18 <_vfiprintf_r+0x2c>
 800cddc:	f04f 30ff 	mov.w	r0, #4294967295
 800cde0:	b01d      	add	sp, #116	; 0x74
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	46a8      	mov	r8, r5
 800cde8:	e7a2      	b.n	800cd30 <_vfiprintf_r+0x44>
 800cdea:	4a44      	ldr	r2, [pc, #272]	; (800cefc <_vfiprintf_r+0x210>)
 800cdec:	1a80      	subs	r0, r0, r2
 800cdee:	fa0b f000 	lsl.w	r0, fp, r0
 800cdf2:	4318      	orrs	r0, r3
 800cdf4:	9004      	str	r0, [sp, #16]
 800cdf6:	4645      	mov	r5, r8
 800cdf8:	e7be      	b.n	800cd78 <_vfiprintf_r+0x8c>
 800cdfa:	9a03      	ldr	r2, [sp, #12]
 800cdfc:	1d11      	adds	r1, r2, #4
 800cdfe:	6812      	ldr	r2, [r2, #0]
 800ce00:	9103      	str	r1, [sp, #12]
 800ce02:	2a00      	cmp	r2, #0
 800ce04:	db01      	blt.n	800ce0a <_vfiprintf_r+0x11e>
 800ce06:	9207      	str	r2, [sp, #28]
 800ce08:	e004      	b.n	800ce14 <_vfiprintf_r+0x128>
 800ce0a:	4252      	negs	r2, r2
 800ce0c:	f043 0302 	orr.w	r3, r3, #2
 800ce10:	9207      	str	r2, [sp, #28]
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	f898 3000 	ldrb.w	r3, [r8]
 800ce18:	2b2e      	cmp	r3, #46	; 0x2e
 800ce1a:	d10e      	bne.n	800ce3a <_vfiprintf_r+0x14e>
 800ce1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ce20:	2b2a      	cmp	r3, #42	; 0x2a
 800ce22:	d138      	bne.n	800ce96 <_vfiprintf_r+0x1aa>
 800ce24:	9b03      	ldr	r3, [sp, #12]
 800ce26:	1d1a      	adds	r2, r3, #4
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	9203      	str	r2, [sp, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	bfb8      	it	lt
 800ce30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce34:	f108 0802 	add.w	r8, r8, #2
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	4d33      	ldr	r5, [pc, #204]	; (800cf08 <_vfiprintf_r+0x21c>)
 800ce3c:	f898 1000 	ldrb.w	r1, [r8]
 800ce40:	2203      	movs	r2, #3
 800ce42:	4628      	mov	r0, r5
 800ce44:	f7f3 f9d4 	bl	80001f0 <memchr>
 800ce48:	b140      	cbz	r0, 800ce5c <_vfiprintf_r+0x170>
 800ce4a:	2340      	movs	r3, #64	; 0x40
 800ce4c:	1b40      	subs	r0, r0, r5
 800ce4e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce52:	9b04      	ldr	r3, [sp, #16]
 800ce54:	4303      	orrs	r3, r0
 800ce56:	f108 0801 	add.w	r8, r8, #1
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	f898 1000 	ldrb.w	r1, [r8]
 800ce60:	482a      	ldr	r0, [pc, #168]	; (800cf0c <_vfiprintf_r+0x220>)
 800ce62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce66:	2206      	movs	r2, #6
 800ce68:	f108 0701 	add.w	r7, r8, #1
 800ce6c:	f7f3 f9c0 	bl	80001f0 <memchr>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d037      	beq.n	800cee4 <_vfiprintf_r+0x1f8>
 800ce74:	4b26      	ldr	r3, [pc, #152]	; (800cf10 <_vfiprintf_r+0x224>)
 800ce76:	bb1b      	cbnz	r3, 800cec0 <_vfiprintf_r+0x1d4>
 800ce78:	9b03      	ldr	r3, [sp, #12]
 800ce7a:	3307      	adds	r3, #7
 800ce7c:	f023 0307 	bic.w	r3, r3, #7
 800ce80:	3308      	adds	r3, #8
 800ce82:	9303      	str	r3, [sp, #12]
 800ce84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce86:	444b      	add	r3, r9
 800ce88:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8a:	e750      	b.n	800cd2e <_vfiprintf_r+0x42>
 800ce8c:	fb05 3202 	mla	r2, r5, r2, r3
 800ce90:	2001      	movs	r0, #1
 800ce92:	4688      	mov	r8, r1
 800ce94:	e78a      	b.n	800cdac <_vfiprintf_r+0xc0>
 800ce96:	2300      	movs	r3, #0
 800ce98:	f108 0801 	add.w	r8, r8, #1
 800ce9c:	9305      	str	r3, [sp, #20]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	250a      	movs	r5, #10
 800cea2:	4640      	mov	r0, r8
 800cea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cea8:	3a30      	subs	r2, #48	; 0x30
 800ceaa:	2a09      	cmp	r2, #9
 800ceac:	d903      	bls.n	800ceb6 <_vfiprintf_r+0x1ca>
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d0c3      	beq.n	800ce3a <_vfiprintf_r+0x14e>
 800ceb2:	9105      	str	r1, [sp, #20]
 800ceb4:	e7c1      	b.n	800ce3a <_vfiprintf_r+0x14e>
 800ceb6:	fb05 2101 	mla	r1, r5, r1, r2
 800ceba:	2301      	movs	r3, #1
 800cebc:	4680      	mov	r8, r0
 800cebe:	e7f0      	b.n	800cea2 <_vfiprintf_r+0x1b6>
 800cec0:	ab03      	add	r3, sp, #12
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	4622      	mov	r2, r4
 800cec6:	4b13      	ldr	r3, [pc, #76]	; (800cf14 <_vfiprintf_r+0x228>)
 800cec8:	a904      	add	r1, sp, #16
 800ceca:	4630      	mov	r0, r6
 800cecc:	f3af 8000 	nop.w
 800ced0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ced4:	4681      	mov	r9, r0
 800ced6:	d1d5      	bne.n	800ce84 <_vfiprintf_r+0x198>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	065b      	lsls	r3, r3, #25
 800cedc:	f53f af7e 	bmi.w	800cddc <_vfiprintf_r+0xf0>
 800cee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cee2:	e77d      	b.n	800cde0 <_vfiprintf_r+0xf4>
 800cee4:	ab03      	add	r3, sp, #12
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	4622      	mov	r2, r4
 800ceea:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <_vfiprintf_r+0x228>)
 800ceec:	a904      	add	r1, sp, #16
 800ceee:	4630      	mov	r0, r6
 800cef0:	f000 f888 	bl	800d004 <_printf_i>
 800cef4:	e7ec      	b.n	800ced0 <_vfiprintf_r+0x1e4>
 800cef6:	bf00      	nop
 800cef8:	0800d500 	.word	0x0800d500
 800cefc:	0800d540 	.word	0x0800d540
 800cf00:	0800d520 	.word	0x0800d520
 800cf04:	0800d4e0 	.word	0x0800d4e0
 800cf08:	0800d546 	.word	0x0800d546
 800cf0c:	0800d54a 	.word	0x0800d54a
 800cf10:	00000000 	.word	0x00000000
 800cf14:	0800ccc7 	.word	0x0800ccc7

0800cf18 <_printf_common>:
 800cf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf1c:	4691      	mov	r9, r2
 800cf1e:	461f      	mov	r7, r3
 800cf20:	688a      	ldr	r2, [r1, #8]
 800cf22:	690b      	ldr	r3, [r1, #16]
 800cf24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	bfb8      	it	lt
 800cf2c:	4613      	movlt	r3, r2
 800cf2e:	f8c9 3000 	str.w	r3, [r9]
 800cf32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf36:	4606      	mov	r6, r0
 800cf38:	460c      	mov	r4, r1
 800cf3a:	b112      	cbz	r2, 800cf42 <_printf_common+0x2a>
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	f8c9 3000 	str.w	r3, [r9]
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	0699      	lsls	r1, r3, #26
 800cf46:	bf42      	ittt	mi
 800cf48:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cf4c:	3302      	addmi	r3, #2
 800cf4e:	f8c9 3000 	strmi.w	r3, [r9]
 800cf52:	6825      	ldr	r5, [r4, #0]
 800cf54:	f015 0506 	ands.w	r5, r5, #6
 800cf58:	d107      	bne.n	800cf6a <_printf_common+0x52>
 800cf5a:	f104 0a19 	add.w	sl, r4, #25
 800cf5e:	68e3      	ldr	r3, [r4, #12]
 800cf60:	f8d9 2000 	ldr.w	r2, [r9]
 800cf64:	1a9b      	subs	r3, r3, r2
 800cf66:	42ab      	cmp	r3, r5
 800cf68:	dc28      	bgt.n	800cfbc <_printf_common+0xa4>
 800cf6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	3300      	adds	r3, #0
 800cf72:	bf18      	it	ne
 800cf74:	2301      	movne	r3, #1
 800cf76:	0692      	lsls	r2, r2, #26
 800cf78:	d42d      	bmi.n	800cfd6 <_printf_common+0xbe>
 800cf7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf7e:	4639      	mov	r1, r7
 800cf80:	4630      	mov	r0, r6
 800cf82:	47c0      	blx	r8
 800cf84:	3001      	adds	r0, #1
 800cf86:	d020      	beq.n	800cfca <_printf_common+0xb2>
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	68e5      	ldr	r5, [r4, #12]
 800cf8c:	f8d9 2000 	ldr.w	r2, [r9]
 800cf90:	f003 0306 	and.w	r3, r3, #6
 800cf94:	2b04      	cmp	r3, #4
 800cf96:	bf08      	it	eq
 800cf98:	1aad      	subeq	r5, r5, r2
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	6922      	ldr	r2, [r4, #16]
 800cf9e:	bf0c      	ite	eq
 800cfa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfa4:	2500      	movne	r5, #0
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	bfc4      	itt	gt
 800cfaa:	1a9b      	subgt	r3, r3, r2
 800cfac:	18ed      	addgt	r5, r5, r3
 800cfae:	f04f 0900 	mov.w	r9, #0
 800cfb2:	341a      	adds	r4, #26
 800cfb4:	454d      	cmp	r5, r9
 800cfb6:	d11a      	bne.n	800cfee <_printf_common+0xd6>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e008      	b.n	800cfce <_printf_common+0xb6>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	4652      	mov	r2, sl
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d103      	bne.n	800cfd2 <_printf_common+0xba>
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	3501      	adds	r5, #1
 800cfd4:	e7c3      	b.n	800cf5e <_printf_common+0x46>
 800cfd6:	18e1      	adds	r1, r4, r3
 800cfd8:	1c5a      	adds	r2, r3, #1
 800cfda:	2030      	movs	r0, #48	; 0x30
 800cfdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfe0:	4422      	add	r2, r4
 800cfe2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfe6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfea:	3302      	adds	r3, #2
 800cfec:	e7c5      	b.n	800cf7a <_printf_common+0x62>
 800cfee:	2301      	movs	r3, #1
 800cff0:	4622      	mov	r2, r4
 800cff2:	4639      	mov	r1, r7
 800cff4:	4630      	mov	r0, r6
 800cff6:	47c0      	blx	r8
 800cff8:	3001      	adds	r0, #1
 800cffa:	d0e6      	beq.n	800cfca <_printf_common+0xb2>
 800cffc:	f109 0901 	add.w	r9, r9, #1
 800d000:	e7d8      	b.n	800cfb4 <_printf_common+0x9c>
	...

0800d004 <_printf_i>:
 800d004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d008:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d00c:	460c      	mov	r4, r1
 800d00e:	7e09      	ldrb	r1, [r1, #24]
 800d010:	b085      	sub	sp, #20
 800d012:	296e      	cmp	r1, #110	; 0x6e
 800d014:	4617      	mov	r7, r2
 800d016:	4606      	mov	r6, r0
 800d018:	4698      	mov	r8, r3
 800d01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d01c:	f000 80b3 	beq.w	800d186 <_printf_i+0x182>
 800d020:	d822      	bhi.n	800d068 <_printf_i+0x64>
 800d022:	2963      	cmp	r1, #99	; 0x63
 800d024:	d036      	beq.n	800d094 <_printf_i+0x90>
 800d026:	d80a      	bhi.n	800d03e <_printf_i+0x3a>
 800d028:	2900      	cmp	r1, #0
 800d02a:	f000 80b9 	beq.w	800d1a0 <_printf_i+0x19c>
 800d02e:	2958      	cmp	r1, #88	; 0x58
 800d030:	f000 8083 	beq.w	800d13a <_printf_i+0x136>
 800d034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d038:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d03c:	e032      	b.n	800d0a4 <_printf_i+0xa0>
 800d03e:	2964      	cmp	r1, #100	; 0x64
 800d040:	d001      	beq.n	800d046 <_printf_i+0x42>
 800d042:	2969      	cmp	r1, #105	; 0x69
 800d044:	d1f6      	bne.n	800d034 <_printf_i+0x30>
 800d046:	6820      	ldr	r0, [r4, #0]
 800d048:	6813      	ldr	r3, [r2, #0]
 800d04a:	0605      	lsls	r5, r0, #24
 800d04c:	f103 0104 	add.w	r1, r3, #4
 800d050:	d52a      	bpl.n	800d0a8 <_printf_i+0xa4>
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	6011      	str	r1, [r2, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	da03      	bge.n	800d062 <_printf_i+0x5e>
 800d05a:	222d      	movs	r2, #45	; 0x2d
 800d05c:	425b      	negs	r3, r3
 800d05e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d062:	486f      	ldr	r0, [pc, #444]	; (800d220 <_printf_i+0x21c>)
 800d064:	220a      	movs	r2, #10
 800d066:	e039      	b.n	800d0dc <_printf_i+0xd8>
 800d068:	2973      	cmp	r1, #115	; 0x73
 800d06a:	f000 809d 	beq.w	800d1a8 <_printf_i+0x1a4>
 800d06e:	d808      	bhi.n	800d082 <_printf_i+0x7e>
 800d070:	296f      	cmp	r1, #111	; 0x6f
 800d072:	d020      	beq.n	800d0b6 <_printf_i+0xb2>
 800d074:	2970      	cmp	r1, #112	; 0x70
 800d076:	d1dd      	bne.n	800d034 <_printf_i+0x30>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	f043 0320 	orr.w	r3, r3, #32
 800d07e:	6023      	str	r3, [r4, #0]
 800d080:	e003      	b.n	800d08a <_printf_i+0x86>
 800d082:	2975      	cmp	r1, #117	; 0x75
 800d084:	d017      	beq.n	800d0b6 <_printf_i+0xb2>
 800d086:	2978      	cmp	r1, #120	; 0x78
 800d088:	d1d4      	bne.n	800d034 <_printf_i+0x30>
 800d08a:	2378      	movs	r3, #120	; 0x78
 800d08c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d090:	4864      	ldr	r0, [pc, #400]	; (800d224 <_printf_i+0x220>)
 800d092:	e055      	b.n	800d140 <_printf_i+0x13c>
 800d094:	6813      	ldr	r3, [r2, #0]
 800d096:	1d19      	adds	r1, r3, #4
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6011      	str	r1, [r2, #0]
 800d09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e08c      	b.n	800d1c2 <_printf_i+0x1be>
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	6011      	str	r1, [r2, #0]
 800d0ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d0b0:	bf18      	it	ne
 800d0b2:	b21b      	sxthne	r3, r3
 800d0b4:	e7cf      	b.n	800d056 <_printf_i+0x52>
 800d0b6:	6813      	ldr	r3, [r2, #0]
 800d0b8:	6825      	ldr	r5, [r4, #0]
 800d0ba:	1d18      	adds	r0, r3, #4
 800d0bc:	6010      	str	r0, [r2, #0]
 800d0be:	0628      	lsls	r0, r5, #24
 800d0c0:	d501      	bpl.n	800d0c6 <_printf_i+0xc2>
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	e002      	b.n	800d0cc <_printf_i+0xc8>
 800d0c6:	0668      	lsls	r0, r5, #25
 800d0c8:	d5fb      	bpl.n	800d0c2 <_printf_i+0xbe>
 800d0ca:	881b      	ldrh	r3, [r3, #0]
 800d0cc:	4854      	ldr	r0, [pc, #336]	; (800d220 <_printf_i+0x21c>)
 800d0ce:	296f      	cmp	r1, #111	; 0x6f
 800d0d0:	bf14      	ite	ne
 800d0d2:	220a      	movne	r2, #10
 800d0d4:	2208      	moveq	r2, #8
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0dc:	6865      	ldr	r5, [r4, #4]
 800d0de:	60a5      	str	r5, [r4, #8]
 800d0e0:	2d00      	cmp	r5, #0
 800d0e2:	f2c0 8095 	blt.w	800d210 <_printf_i+0x20c>
 800d0e6:	6821      	ldr	r1, [r4, #0]
 800d0e8:	f021 0104 	bic.w	r1, r1, #4
 800d0ec:	6021      	str	r1, [r4, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d13d      	bne.n	800d16e <_printf_i+0x16a>
 800d0f2:	2d00      	cmp	r5, #0
 800d0f4:	f040 808e 	bne.w	800d214 <_printf_i+0x210>
 800d0f8:	4665      	mov	r5, ip
 800d0fa:	2a08      	cmp	r2, #8
 800d0fc:	d10b      	bne.n	800d116 <_printf_i+0x112>
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	07db      	lsls	r3, r3, #31
 800d102:	d508      	bpl.n	800d116 <_printf_i+0x112>
 800d104:	6923      	ldr	r3, [r4, #16]
 800d106:	6862      	ldr	r2, [r4, #4]
 800d108:	429a      	cmp	r2, r3
 800d10a:	bfde      	ittt	le
 800d10c:	2330      	movle	r3, #48	; 0x30
 800d10e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d112:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d116:	ebac 0305 	sub.w	r3, ip, r5
 800d11a:	6123      	str	r3, [r4, #16]
 800d11c:	f8cd 8000 	str.w	r8, [sp]
 800d120:	463b      	mov	r3, r7
 800d122:	aa03      	add	r2, sp, #12
 800d124:	4621      	mov	r1, r4
 800d126:	4630      	mov	r0, r6
 800d128:	f7ff fef6 	bl	800cf18 <_printf_common>
 800d12c:	3001      	adds	r0, #1
 800d12e:	d14d      	bne.n	800d1cc <_printf_i+0x1c8>
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	b005      	add	sp, #20
 800d136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d13a:	4839      	ldr	r0, [pc, #228]	; (800d220 <_printf_i+0x21c>)
 800d13c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d140:	6813      	ldr	r3, [r2, #0]
 800d142:	6821      	ldr	r1, [r4, #0]
 800d144:	1d1d      	adds	r5, r3, #4
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6015      	str	r5, [r2, #0]
 800d14a:	060a      	lsls	r2, r1, #24
 800d14c:	d50b      	bpl.n	800d166 <_printf_i+0x162>
 800d14e:	07ca      	lsls	r2, r1, #31
 800d150:	bf44      	itt	mi
 800d152:	f041 0120 	orrmi.w	r1, r1, #32
 800d156:	6021      	strmi	r1, [r4, #0]
 800d158:	b91b      	cbnz	r3, 800d162 <_printf_i+0x15e>
 800d15a:	6822      	ldr	r2, [r4, #0]
 800d15c:	f022 0220 	bic.w	r2, r2, #32
 800d160:	6022      	str	r2, [r4, #0]
 800d162:	2210      	movs	r2, #16
 800d164:	e7b7      	b.n	800d0d6 <_printf_i+0xd2>
 800d166:	064d      	lsls	r5, r1, #25
 800d168:	bf48      	it	mi
 800d16a:	b29b      	uxthmi	r3, r3
 800d16c:	e7ef      	b.n	800d14e <_printf_i+0x14a>
 800d16e:	4665      	mov	r5, ip
 800d170:	fbb3 f1f2 	udiv	r1, r3, r2
 800d174:	fb02 3311 	mls	r3, r2, r1, r3
 800d178:	5cc3      	ldrb	r3, [r0, r3]
 800d17a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d17e:	460b      	mov	r3, r1
 800d180:	2900      	cmp	r1, #0
 800d182:	d1f5      	bne.n	800d170 <_printf_i+0x16c>
 800d184:	e7b9      	b.n	800d0fa <_printf_i+0xf6>
 800d186:	6813      	ldr	r3, [r2, #0]
 800d188:	6825      	ldr	r5, [r4, #0]
 800d18a:	6961      	ldr	r1, [r4, #20]
 800d18c:	1d18      	adds	r0, r3, #4
 800d18e:	6010      	str	r0, [r2, #0]
 800d190:	0628      	lsls	r0, r5, #24
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	d501      	bpl.n	800d19a <_printf_i+0x196>
 800d196:	6019      	str	r1, [r3, #0]
 800d198:	e002      	b.n	800d1a0 <_printf_i+0x19c>
 800d19a:	066a      	lsls	r2, r5, #25
 800d19c:	d5fb      	bpl.n	800d196 <_printf_i+0x192>
 800d19e:	8019      	strh	r1, [r3, #0]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	6123      	str	r3, [r4, #16]
 800d1a4:	4665      	mov	r5, ip
 800d1a6:	e7b9      	b.n	800d11c <_printf_i+0x118>
 800d1a8:	6813      	ldr	r3, [r2, #0]
 800d1aa:	1d19      	adds	r1, r3, #4
 800d1ac:	6011      	str	r1, [r2, #0]
 800d1ae:	681d      	ldr	r5, [r3, #0]
 800d1b0:	6862      	ldr	r2, [r4, #4]
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f7f3 f81b 	bl	80001f0 <memchr>
 800d1ba:	b108      	cbz	r0, 800d1c0 <_printf_i+0x1bc>
 800d1bc:	1b40      	subs	r0, r0, r5
 800d1be:	6060      	str	r0, [r4, #4]
 800d1c0:	6863      	ldr	r3, [r4, #4]
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1ca:	e7a7      	b.n	800d11c <_printf_i+0x118>
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	462a      	mov	r2, r5
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	47c0      	blx	r8
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	d0aa      	beq.n	800d130 <_printf_i+0x12c>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	079b      	lsls	r3, r3, #30
 800d1de:	d413      	bmi.n	800d208 <_printf_i+0x204>
 800d1e0:	68e0      	ldr	r0, [r4, #12]
 800d1e2:	9b03      	ldr	r3, [sp, #12]
 800d1e4:	4298      	cmp	r0, r3
 800d1e6:	bfb8      	it	lt
 800d1e8:	4618      	movlt	r0, r3
 800d1ea:	e7a3      	b.n	800d134 <_printf_i+0x130>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	464a      	mov	r2, r9
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	47c0      	blx	r8
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	d09a      	beq.n	800d130 <_printf_i+0x12c>
 800d1fa:	3501      	adds	r5, #1
 800d1fc:	68e3      	ldr	r3, [r4, #12]
 800d1fe:	9a03      	ldr	r2, [sp, #12]
 800d200:	1a9b      	subs	r3, r3, r2
 800d202:	42ab      	cmp	r3, r5
 800d204:	dcf2      	bgt.n	800d1ec <_printf_i+0x1e8>
 800d206:	e7eb      	b.n	800d1e0 <_printf_i+0x1dc>
 800d208:	2500      	movs	r5, #0
 800d20a:	f104 0919 	add.w	r9, r4, #25
 800d20e:	e7f5      	b.n	800d1fc <_printf_i+0x1f8>
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1ac      	bne.n	800d16e <_printf_i+0x16a>
 800d214:	7803      	ldrb	r3, [r0, #0]
 800d216:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d21a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d21e:	e76c      	b.n	800d0fa <_printf_i+0xf6>
 800d220:	0800d551 	.word	0x0800d551
 800d224:	0800d562 	.word	0x0800d562

0800d228 <__sread>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	f000 f894 	bl	800d35c <_read_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	bfab      	itete	ge
 800d238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrhlt	r3, [r4, #12]
 800d23c:	181b      	addge	r3, r3, r0
 800d23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d242:	bfac      	ite	ge
 800d244:	6563      	strge	r3, [r4, #84]	; 0x54
 800d246:	81a3      	strhlt	r3, [r4, #12]
 800d248:	bd10      	pop	{r4, pc}

0800d24a <__swrite>:
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	461f      	mov	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	05db      	lsls	r3, r3, #23
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4616      	mov	r6, r2
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1e>
 800d25c:	2302      	movs	r3, #2
 800d25e:	2200      	movs	r2, #0
 800d260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d264:	f000 f868 	bl	800d338 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	4632      	mov	r2, r6
 800d276:	463b      	mov	r3, r7
 800d278:	4628      	mov	r0, r5
 800d27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	f000 b817 	b.w	800d2b0 <_write_r>

0800d282 <__sseek>:
 800d282:	b510      	push	{r4, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28a:	f000 f855 	bl	800d338 <_lseek_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	bf15      	itete	ne
 800d294:	6560      	strne	r0, [r4, #84]	; 0x54
 800d296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29e:	81a3      	strheq	r3, [r4, #12]
 800d2a0:	bf18      	it	ne
 800d2a2:	81a3      	strhne	r3, [r4, #12]
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__sclose>:
 800d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2aa:	f000 b813 	b.w	800d2d4 <_close_r>
	...

0800d2b0 <_write_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4c07      	ldr	r4, [pc, #28]	; (800d2d0 <_write_r+0x20>)
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6022      	str	r2, [r4, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f7f3 fe4e 	bl	8000f60 <_write>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_write_r+0x1e>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_write_r+0x1e>
 800d2cc:	602b      	str	r3, [r5, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	20008db4 	.word	0x20008db4

0800d2d4 <_close_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4c06      	ldr	r4, [pc, #24]	; (800d2f0 <_close_r+0x1c>)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4605      	mov	r5, r0
 800d2dc:	4608      	mov	r0, r1
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	f7f4 fa5d 	bl	800179e <_close>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_close_r+0x1a>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_close_r+0x1a>
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	20008db4 	.word	0x20008db4

0800d2f4 <_fstat_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4c07      	ldr	r4, [pc, #28]	; (800d314 <_fstat_r+0x20>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	f7f4 fa58 	bl	80017b6 <_fstat>
 800d306:	1c43      	adds	r3, r0, #1
 800d308:	d102      	bne.n	800d310 <_fstat_r+0x1c>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	b103      	cbz	r3, 800d310 <_fstat_r+0x1c>
 800d30e:	602b      	str	r3, [r5, #0]
 800d310:	bd38      	pop	{r3, r4, r5, pc}
 800d312:	bf00      	nop
 800d314:	20008db4 	.word	0x20008db4

0800d318 <_isatty_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	4c06      	ldr	r4, [pc, #24]	; (800d334 <_isatty_r+0x1c>)
 800d31c:	2300      	movs	r3, #0
 800d31e:	4605      	mov	r5, r0
 800d320:	4608      	mov	r0, r1
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	f7f4 fa57 	bl	80017d6 <_isatty>
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	d102      	bne.n	800d332 <_isatty_r+0x1a>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	b103      	cbz	r3, 800d332 <_isatty_r+0x1a>
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	20008db4 	.word	0x20008db4

0800d338 <_lseek_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4c07      	ldr	r4, [pc, #28]	; (800d358 <_lseek_r+0x20>)
 800d33c:	4605      	mov	r5, r0
 800d33e:	4608      	mov	r0, r1
 800d340:	4611      	mov	r1, r2
 800d342:	2200      	movs	r2, #0
 800d344:	6022      	str	r2, [r4, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f7f4 fa50 	bl	80017ec <_lseek>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_lseek_r+0x1e>
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	b103      	cbz	r3, 800d356 <_lseek_r+0x1e>
 800d354:	602b      	str	r3, [r5, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	20008db4 	.word	0x20008db4

0800d35c <_read_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4c07      	ldr	r4, [pc, #28]	; (800d37c <_read_r+0x20>)
 800d360:	4605      	mov	r5, r0
 800d362:	4608      	mov	r0, r1
 800d364:	4611      	mov	r1, r2
 800d366:	2200      	movs	r2, #0
 800d368:	6022      	str	r2, [r4, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	f7f4 f9fa 	bl	8001764 <_read>
 800d370:	1c43      	adds	r3, r0, #1
 800d372:	d102      	bne.n	800d37a <_read_r+0x1e>
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	b103      	cbz	r3, 800d37a <_read_r+0x1e>
 800d378:	602b      	str	r3, [r5, #0]
 800d37a:	bd38      	pop	{r3, r4, r5, pc}
 800d37c:	20008db4 	.word	0x20008db4

0800d380 <_init>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	bf00      	nop
 800d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d386:	bc08      	pop	{r3}
 800d388:	469e      	mov	lr, r3
 800d38a:	4770      	bx	lr

0800d38c <_fini>:
 800d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38e:	bf00      	nop
 800d390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d392:	bc08      	pop	{r3}
 800d394:	469e      	mov	lr, r3
 800d396:	4770      	bx	lr
