
29_9_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080025fc  080025fc  000125fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ec  080026ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026ec  080026ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026ec  080026ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  08002764  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002764  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069ff  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f6  00000000  00000000  00026a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000690  00000000  00000000  00027f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00028620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000178a6  00000000  00000000  00028bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a99  00000000  00000000  0004049e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082bcd  00000000  00000000  00045f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8b04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000200c  00000000  00000000  000c8b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080025e4 	.word	0x080025e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080025e4 	.word	0x080025e4

0800014c <main>:
static void MX_USART1_UART_Init(void);



int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

  HAL_Init();
 8000150:	f000 fa60 	bl	8000614 <HAL_Init>
  SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000158:	f000 f888 	bl	800026c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f85c 	bl	8000218 <MX_USART1_UART_Init>


  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 8000160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <main+0x44>)
 8000166:	f000 fd2f 	bl	8000bc8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800016a:	2064      	movs	r0, #100	; 0x64
 800016c:	f000 fab4 	bl	80006d8 <HAL_Delay>
	  nLoop++;
 8000170:	4b08      	ldr	r3, [pc, #32]	; (8000194 <main+0x48>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	3301      	adds	r3, #1
 8000176:	4a07      	ldr	r2, [pc, #28]	; (8000194 <main+0x48>)
 8000178:	6013      	str	r3, [r2, #0]
	  printf("I am in ");
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <main+0x4c>)
 800017c:	f001 fb44 	bl	8001808 <iprintf>
	  printf("Loop  == %d \n\r", nLoop);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <main+0x48>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4619      	mov	r1, r3
 8000186:	4805      	ldr	r0, [pc, #20]	; (800019c <main+0x50>)
 8000188:	f001 fb3e 	bl	8001808 <iprintf>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // PORTC, Pin PC13
 800018c:	e7e8      	b.n	8000160 <main+0x14>
 800018e:	bf00      	nop
 8000190:	40011000 	.word	0x40011000
 8000194:	2000008c 	.word	0x2000008c
 8000198:	080025fc 	.word	0x080025fc
 800019c:	08002608 	.word	0x08002608

080001a0 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fb22 	bl	80017f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fd10 	bl	8000bfc <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e2:	f000 f8b5 	bl	8000350 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 ff7c 	bl	80010fc <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020a:	f000 f8a1 	bl	8000350 <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_USART1_UART_Init>:




static void MX_USART1_UART_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <MX_USART1_UART_Init+0x50>)
 8000220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000222:	4b10      	ldr	r3, [pc, #64]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800023c:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800023e:	220c      	movs	r2, #12
 8000240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_USART1_UART_Init+0x4c>)
 8000250:	f001 f8f0 	bl	8001434 <HAL_UART_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800025a:	f000 f879 	bl	8000350 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000009c 	.word	0x2000009c
 8000268:	40013800 	.word	0x40013800

0800026c <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000272:	f107 0308 	add.w	r3, r7, #8
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_GPIO_Init+0x78>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <MX_GPIO_Init+0x78>)
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_GPIO_Init+0x78>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0310 	and.w	r3, r3, #16
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_GPIO_Init+0x78>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <MX_GPIO_Init+0x78>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_GPIO_Init+0x78>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	603b      	str	r3, [r7, #0]
 80002ae:	683b      	ldr	r3, [r7, #0]


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b6:	480c      	ldr	r0, [pc, #48]	; (80002e8 <MX_GPIO_Init+0x7c>)
 80002b8:	f000 fc6e 	bl	8000b98 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	2302      	movs	r3, #2
 80002cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	4619      	mov	r1, r3
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_GPIO_Init+0x7c>)
 80002d6:	f000 fb05 	bl	80008e4 <HAL_GPIO_Init>

}
 80002da:	bf00      	nop
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40011000 	.word	0x40011000

080002ec <__io_putchar>:



//asynchronous UART transmit function
int __io_putchar(int ch)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 80002fa:	f107 010c 	add.w	r1, r7, #12
 80002fe:	230a      	movs	r3, #10
 8000300:	2201      	movs	r2, #1
 8000302:	4804      	ldr	r0, [pc, #16]	; (8000314 <__io_putchar+0x28>)
 8000304:	f001 f8e3 	bl	80014ce <HAL_UART_Transmit>
 return ch;
 8000308:	687b      	ldr	r3, [r7, #4]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000009c 	.word	0x2000009c

08000318 <_write>:


//writing msg to com

int _write(int file,char *ptr, int len)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	e009      	b.n	800033e <_write+0x26>
 {
 __io_putchar(*ptr++);
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	1c5a      	adds	r2, r3, #1
 800032e:	60ba      	str	r2, [r7, #8]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ffda 	bl	80002ec <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	3301      	adds	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	429a      	cmp	r2, r3
 8000344:	dbf1      	blt.n	800032a <_write+0x12>
 }
return len;
 8000346:	687b      	ldr	r3, [r7, #4]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <Error_Handler>:



void Error_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
printf("Internal error");
 8000354:	4802      	ldr	r0, [pc, #8]	; (8000360 <Error_Handler+0x10>)
 8000356:	f001 fa57 	bl	8001808 <iprintf>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	08002618 	.word	0x08002618

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <HAL_MspInit+0x5c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x5c>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <HAL_MspInit+0x60>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <HAL_MspInit+0x60>)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010000 	.word	0x40010000

080003c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <HAL_UART_MspInit+0x8c>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d131      	bne.n	800044c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <HAL_UART_MspInit+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1a      	ldr	r2, [pc, #104]	; (8000458 <HAL_UART_MspInit+0x90>)
 80003ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <HAL_UART_MspInit+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_UART_MspInit+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_UART_MspInit+0x90>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_UART_MspInit+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800041c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000422:	2303      	movs	r3, #3
 8000424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <HAL_UART_MspInit+0x94>)
 800042e:	f000 fa59 	bl	80008e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <HAL_UART_MspInit+0x94>)
 8000448:	f000 fa4c 	bl	80008e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40013800 	.word	0x40013800
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <HardFault_Handler+0x4>

08000472 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <MemManage_Handler+0x4>

08000478 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <BusFault_Handler+0x4>

0800047e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <UsageFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ac:	f000 f8f8 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e00a      	b.n	80004dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004c6:	f3af 8000 	nop.w
 80004ca:	4601      	mov	r1, r0
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	60ba      	str	r2, [r7, #8]
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf0      	blt.n	80004c6 <_read+0x12>
	}

return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	return -1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000514:	605a      	str	r2, [r3, #4]
	return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <_isatty>:

int _isatty(int file)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
	return 1;
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr

08000536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000536:	b480      	push	{r7}
 8000538:	b085      	sub	sp, #20
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
	return 0;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
	...

08000550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <_sbrk+0x5c>)
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <_sbrk+0x60>)
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <_sbrk+0x64>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <_sbrk+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	429a      	cmp	r2, r3
 800057e:	d207      	bcs.n	8000590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000580:	f001 f910 	bl	80017a4 <__errno>
 8000584:	4602      	mov	r2, r0
 8000586:	230c      	movs	r3, #12
 8000588:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	e009      	b.n	80005a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <_sbrk+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20005000 	.word	0x20005000
 80005b0:	00000400 	.word	0x00000400
 80005b4:	20000090 	.word	0x20000090
 80005b8:	200000e8 	.word	0x200000e8

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ca:	e003      	b.n	80005d4 <LoopCopyDataInit>

080005cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005d2:	3104      	adds	r1, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005dc:	d3f6      	bcc.n	80005cc <CopyDataInit>
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e0:	e002      	b.n	80005e8 <LoopFillZerobss>

080005e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e4:	f842 3b04 	str.w	r3, [r2], #4

080005e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005ec:	d3f9      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ee:	f7ff ffe5 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f001 f8dd 	bl	80017b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fda9 	bl	800014c <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r3, =_sidata
 80005fc:	080026f4 	.word	0x080026f4
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000604:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000608:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800060c:	200000e4 	.word	0x200000e4

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f929 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff fe98 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f933 	bl	80008ca <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f909 	bl	8000892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000008 	.word	0x20000008
 80006c0:	200000dc 	.word	0x200000dc

080006c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	200000dc 	.word	0x200000dc

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff fff0 	bl	80006c4 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_Delay+0x40>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffe0 	bl	80006c4 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000008 	.word	0x20000008

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff90 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff49 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff5e 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff90 	bl	80007d4 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5f 	bl	8000780 <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffb0 	bl	8000838 <SysTick_Config>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b08b      	sub	sp, #44	; 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e127      	b.n	8000b48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f8:	2201      	movs	r2, #1
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	429a      	cmp	r2, r3
 8000912:	f040 8116 	bne.w	8000b42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b12      	cmp	r3, #18
 800091c:	d034      	beq.n	8000988 <HAL_GPIO_Init+0xa4>
 800091e:	2b12      	cmp	r3, #18
 8000920:	d80d      	bhi.n	800093e <HAL_GPIO_Init+0x5a>
 8000922:	2b02      	cmp	r3, #2
 8000924:	d02b      	beq.n	800097e <HAL_GPIO_Init+0x9a>
 8000926:	2b02      	cmp	r3, #2
 8000928:	d804      	bhi.n	8000934 <HAL_GPIO_Init+0x50>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d031      	beq.n	8000992 <HAL_GPIO_Init+0xae>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d01c      	beq.n	800096c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000932:	e048      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000934:	2b03      	cmp	r3, #3
 8000936:	d043      	beq.n	80009c0 <HAL_GPIO_Init+0xdc>
 8000938:	2b11      	cmp	r3, #17
 800093a:	d01b      	beq.n	8000974 <HAL_GPIO_Init+0x90>
          break;
 800093c:	e043      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800093e:	4a89      	ldr	r2, [pc, #548]	; (8000b64 <HAL_GPIO_Init+0x280>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d026      	beq.n	8000992 <HAL_GPIO_Init+0xae>
 8000944:	4a87      	ldr	r2, [pc, #540]	; (8000b64 <HAL_GPIO_Init+0x280>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d806      	bhi.n	8000958 <HAL_GPIO_Init+0x74>
 800094a:	4a87      	ldr	r2, [pc, #540]	; (8000b68 <HAL_GPIO_Init+0x284>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d020      	beq.n	8000992 <HAL_GPIO_Init+0xae>
 8000950:	4a86      	ldr	r2, [pc, #536]	; (8000b6c <HAL_GPIO_Init+0x288>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01d      	beq.n	8000992 <HAL_GPIO_Init+0xae>
          break;
 8000956:	e036      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000958:	4a85      	ldr	r2, [pc, #532]	; (8000b70 <HAL_GPIO_Init+0x28c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d019      	beq.n	8000992 <HAL_GPIO_Init+0xae>
 800095e:	4a85      	ldr	r2, [pc, #532]	; (8000b74 <HAL_GPIO_Init+0x290>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d016      	beq.n	8000992 <HAL_GPIO_Init+0xae>
 8000964:	4a84      	ldr	r2, [pc, #528]	; (8000b78 <HAL_GPIO_Init+0x294>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0xae>
          break;
 800096a:	e02c      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e028      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	3304      	adds	r3, #4
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e023      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	3308      	adds	r3, #8
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e01e      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	330c      	adds	r3, #12
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e019      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800099a:	2304      	movs	r3, #4
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e012      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d105      	bne.n	80009b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	611a      	str	r2, [r3, #16]
          break;
 80009b2:	e008      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b4:	2308      	movs	r3, #8
 80009b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	615a      	str	r2, [r3, #20]
          break;
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2bff      	cmp	r3, #255	; 0xff
 80009ca:	d801      	bhi.n	80009d0 <HAL_GPIO_Init+0xec>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	e001      	b.n	80009d4 <HAL_GPIO_Init+0xf0>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3304      	adds	r3, #4
 80009d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d802      	bhi.n	80009e2 <HAL_GPIO_Init+0xfe>
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x104>
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	3b08      	subs	r3, #8
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	210f      	movs	r1, #15
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	401a      	ands	r2, r3
 80009fa:	6a39      	ldr	r1, [r7, #32]
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	431a      	orrs	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 8096 	beq.w	8000b42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b59      	ldr	r3, [pc, #356]	; (8000b7c <HAL_GPIO_Init+0x298>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a58      	ldr	r2, [pc, #352]	; (8000b7c <HAL_GPIO_Init+0x298>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <HAL_GPIO_Init+0x298>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a2e:	4a54      	ldr	r2, [pc, #336]	; (8000b80 <HAL_GPIO_Init+0x29c>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	220f      	movs	r2, #15
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4b      	ldr	r2, [pc, #300]	; (8000b84 <HAL_GPIO_Init+0x2a0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0x19e>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4a      	ldr	r2, [pc, #296]	; (8000b88 <HAL_GPIO_Init+0x2a4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00d      	beq.n	8000a7e <HAL_GPIO_Init+0x19a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a49      	ldr	r2, [pc, #292]	; (8000b8c <HAL_GPIO_Init+0x2a8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d007      	beq.n	8000a7a <HAL_GPIO_Init+0x196>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a48      	ldr	r2, [pc, #288]	; (8000b90 <HAL_GPIO_Init+0x2ac>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_GPIO_Init+0x192>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x1a0>
 8000a76:	2304      	movs	r3, #4
 8000a78:	e004      	b.n	8000a84 <HAL_GPIO_Init+0x1a0>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_Init+0x1a0>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x1a0>
 8000a82:	2300      	movs	r3, #0
 8000a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a86:	f002 0203 	and.w	r2, r2, #3
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a94:	493a      	ldr	r1, [pc, #232]	; (8000b80 <HAL_GPIO_Init+0x29c>)
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4938      	ldr	r1, [pc, #224]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	600b      	str	r3, [r1, #0]
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	4933      	ldr	r1, [pc, #204]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	492e      	ldr	r1, [pc, #184]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	604b      	str	r3, [r1, #4]
 8000ae2:	e006      	b.n	8000af2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4929      	ldr	r1, [pc, #164]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	4924      	ldr	r1, [pc, #144]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	608b      	str	r3, [r1, #8]
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	491f      	ldr	r1, [pc, #124]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	491a      	ldr	r1, [pc, #104]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60cb      	str	r3, [r1, #12]
 8000b32:	e006      	b.n	8000b42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4915      	ldr	r1, [pc, #84]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	3301      	adds	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f47f aed0 	bne.w	80008f8 <HAL_GPIO_Init+0x14>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	372c      	adds	r7, #44	; 0x2c
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	10210000 	.word	0x10210000
 8000b68:	10110000 	.word	0x10110000
 8000b6c:	10120000 	.word	0x10120000
 8000b70:	10310000 	.word	0x10310000
 8000b74:	10320000 	.word	0x10320000
 8000b78:	10220000 	.word	0x10220000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	40011400 	.word	0x40011400
 8000b94:	40010400 	.word	0x40010400

08000b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba8:	787b      	ldrb	r3, [r7, #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bb4:	e003      	b.n	8000bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	041a      	lsls	r2, r3, #16
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	611a      	str	r2, [r3, #16]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4013      	ands	r3, r2
 8000be0:	041a      	lsls	r2, r3, #16
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43d9      	mvns	r1, r3
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	400b      	ands	r3, r1
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e26c      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 8087 	beq.w	8000d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c1c:	4b92      	ldr	r3, [pc, #584]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 030c 	and.w	r3, r3, #12
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d00c      	beq.n	8000c42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c28:	4b8f      	ldr	r3, [pc, #572]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d112      	bne.n	8000c5a <HAL_RCC_OscConfig+0x5e>
 8000c34:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d10b      	bne.n	8000c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d06c      	beq.n	8000d28 <HAL_RCC_OscConfig+0x12c>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d168      	bne.n	8000d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e246      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c62:	d106      	bne.n	8000c72 <HAL_RCC_OscConfig+0x76>
 8000c64:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a7f      	ldr	r2, [pc, #508]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e02e      	b.n	8000cd0 <HAL_RCC_OscConfig+0xd4>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10c      	bne.n	8000c94 <HAL_RCC_OscConfig+0x98>
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a7a      	ldr	r2, [pc, #488]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4b78      	ldr	r3, [pc, #480]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a77      	ldr	r2, [pc, #476]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e01d      	b.n	8000cd0 <HAL_RCC_OscConfig+0xd4>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c9c:	d10c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0xbc>
 8000c9e:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a71      	ldr	r2, [pc, #452]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a6e      	ldr	r2, [pc, #440]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e00b      	b.n	8000cd0 <HAL_RCC_OscConfig+0xd4>
 8000cb8:	4b6b      	ldr	r3, [pc, #428]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a6a      	ldr	r2, [pc, #424]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b68      	ldr	r3, [pc, #416]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a67      	ldr	r2, [pc, #412]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d013      	beq.n	8000d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fcf4 	bl	80006c4 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fcf0 	bl	80006c4 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	; 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e1fa      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f0      	beq.n	8000ce0 <HAL_RCC_OscConfig+0xe4>
 8000cfe:	e014      	b.n	8000d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fce0 	bl	80006c4 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fcdc 	bl	80006c4 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e1e6      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1a:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x10c>
 8000d26:	e000      	b.n	8000d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d063      	beq.n	8000dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d42:	4b49      	ldr	r3, [pc, #292]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d11c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x18c>
 8000d4e:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d116      	bne.n	8000d88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <HAL_RCC_OscConfig+0x176>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d001      	beq.n	8000d72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e1ba      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4939      	ldr	r1, [pc, #228]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d86:	e03a      	b.n	8000dfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d020      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_RCC_OscConfig+0x270>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fc95 	bl	80006c4 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fc91 	bl	80006c4 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e19b      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4927      	ldr	r1, [pc, #156]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]
 8000dd0:	e015      	b.n	8000dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <HAL_RCC_OscConfig+0x270>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc74 	bl	80006c4 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc70 	bl	80006c4 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e17a      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d03a      	beq.n	8000e80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d019      	beq.n	8000e46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_RCC_OscConfig+0x274>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e18:	f7ff fc54 	bl	80006c4 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fc50 	bl	80006c4 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e15a      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f0      	beq.n	8000e20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 fada 	bl	80013f8 <RCC_Delay>
 8000e44:	e01c      	b.n	8000e80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_RCC_OscConfig+0x274>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fc3a 	bl	80006c4 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e52:	e00f      	b.n	8000e74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc36 	bl	80006c4 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d908      	bls.n	8000e74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e140      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	42420000 	.word	0x42420000
 8000e70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	4b9e      	ldr	r3, [pc, #632]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1e9      	bne.n	8000e54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80a6 	beq.w	8000fda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e92:	4b97      	ldr	r3, [pc, #604]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10d      	bne.n	8000eba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a93      	ldr	r2, [pc, #588]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b91      	ldr	r3, [pc, #580]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	4b8e      	ldr	r3, [pc, #568]	; (80010f4 <HAL_RCC_OscConfig+0x4f8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <HAL_RCC_OscConfig+0x4f8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a8a      	ldr	r2, [pc, #552]	; (80010f4 <HAL_RCC_OscConfig+0x4f8>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fbf7 	bl	80006c4 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eda:	f7ff fbf3 	bl	80006c4 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b64      	cmp	r3, #100	; 0x64
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0fd      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <HAL_RCC_OscConfig+0x4f8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x312>
 8000f00:	4b7b      	ldr	r3, [pc, #492]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a7a      	ldr	r2, [pc, #488]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	e02d      	b.n	8000f6a <HAL_RCC_OscConfig+0x36e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x334>
 8000f16:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a75      	ldr	r2, [pc, #468]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6213      	str	r3, [r2, #32]
 8000f22:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a72      	ldr	r2, [pc, #456]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	6213      	str	r3, [r2, #32]
 8000f2e:	e01c      	b.n	8000f6a <HAL_RCC_OscConfig+0x36e>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d10c      	bne.n	8000f52 <HAL_RCC_OscConfig+0x356>
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a6c      	ldr	r2, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6213      	str	r3, [r2, #32]
 8000f44:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a69      	ldr	r2, [pc, #420]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	e00b      	b.n	8000f6a <HAL_RCC_OscConfig+0x36e>
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a66      	ldr	r2, [pc, #408]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a63      	ldr	r2, [pc, #396]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 0304 	bic.w	r3, r3, #4
 8000f68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d015      	beq.n	8000f9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff fba7 	bl	80006c4 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	e00a      	b.n	8000f90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fba3 	bl	80006c4 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e0ab      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f90:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ee      	beq.n	8000f7a <HAL_RCC_OscConfig+0x37e>
 8000f9c:	e014      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fb91 	bl	80006c4 <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa4:	e00a      	b.n	8000fbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fb8d 	bl	80006c4 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e095      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1ee      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d105      	bne.n	8000fda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a47      	ldr	r2, [pc, #284]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8081 	beq.w	80010e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d061      	beq.n	80010b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d146      	bne.n	8001086 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_RCC_OscConfig+0x4fc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fb61 	bl	80006c4 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff fb5d 	bl	80006c4 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e067      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f0      	bne.n	8001006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102c:	d108      	bne.n	8001040 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102e:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	492d      	ldr	r1, [pc, #180]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a19      	ldr	r1, [r3, #32]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	430b      	orrs	r3, r1
 8001052:	4927      	ldr	r1, [pc, #156]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x4fc>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff fb31 	bl	80006c4 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001066:	f7ff fb2d 	bl	80006c4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e037      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x46a>
 8001084:	e02f      	b.n	80010e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_RCC_OscConfig+0x4fc>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fb1a 	bl	80006c4 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001094:	f7ff fb16 	bl	80006c4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e020      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x498>
 80010b2:	e018      	b.n	80010e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e013      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010de:	429a      	cmp	r2, r3
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40007000 	.word	0x40007000
 80010f8:	42420060 	.word	0x42420060

080010fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0d0      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001110:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d910      	bls.n	8001140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 0207 	bic.w	r2, r3, #7
 8001126:	4965      	ldr	r1, [pc, #404]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b8      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800117a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	494d      	ldr	r1, [pc, #308]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	4313      	orrs	r3, r2
 800118c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d040      	beq.n	800121c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d115      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ba:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e073      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e06b      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f023 0203 	bic.w	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4936      	ldr	r1, [pc, #216]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ec:	f7ff fa6a 	bl	80006c4 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	e00a      	b.n	800120a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7ff fa66 	bl	80006c4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e053      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 020c 	and.w	r2, r3, #12
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	429a      	cmp	r2, r3
 800121a:	d1eb      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d210      	bcs.n	800124c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 0207 	bic.w	r2, r3, #7
 8001232:	4922      	ldr	r1, [pc, #136]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e032      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4916      	ldr	r1, [pc, #88]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f821 	bl	80012d0 <HAL_RCC_GetSysClockFreq>
 800128e:	4601      	mov	r1, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_RCC_ClockConfig+0x1c8>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	fa21 f303 	lsr.w	r3, r1, r3
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1cc>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1d0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f9c8 	bl	8000640 <HAL_InitTick>

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40022000 	.word	0x40022000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	0800263c 	.word	0x0800263c
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012d8:	1d3c      	adds	r4, r7, #4
 80012da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d002      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x40>
 800130a:	2b08      	cmp	r3, #8
 800130c:	d003      	beq.n	8001316 <HAL_RCC_GetSysClockFreq+0x46>
 800130e:	e02d      	b.n	800136c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001312:	623b      	str	r3, [r7, #32]
      break;
 8001314:	e02d      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001322:	4413      	add	r3, r2
 8001324:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001328:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	0c5b      	lsrs	r3, r3, #17
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001342:	4413      	add	r3, r2
 8001344:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001348:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_RCC_GetSysClockFreq+0xbc>)
 800134e:	fb02 f203 	mul.w	r2, r2, r3
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	fbb2 f3f3 	udiv	r3, r2, r3
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 800135a:	e004      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	623b      	str	r3, [r7, #32]
      break;
 800136a:	e002      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_RCC_GetSysClockFreq+0xbc>)
 800136e:	623b      	str	r3, [r7, #32]
      break;
 8001370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001372:	6a3b      	ldr	r3, [r7, #32]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bc90      	pop	{r4, r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	08002628 	.word	0x08002628
 8001384:	08002638 	.word	0x08002638
 8001388:	40021000 	.word	0x40021000
 800138c:	007a1200 	.word	0x007a1200
 8001390:	003d0900 	.word	0x003d0900

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000000 	.word	0x20000000

080013a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013ac:	f7ff fff2 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b0:	4601      	mov	r1, r0
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	0800264c 	.word	0x0800264c

080013d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d4:	f7ff ffde 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013d8:	4601      	mov	r1, r0
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0adb      	lsrs	r3, r3, #11
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	0800264c 	.word	0x0800264c

080013f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <RCC_Delay+0x34>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <RCC_Delay+0x38>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0a5b      	lsrs	r3, r3, #9
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001414:	bf00      	nop
  }
  while (Delay --);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1e5a      	subs	r2, r3, #1
 800141a:	60fa      	str	r2, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f9      	bne.n	8001414 <RCC_Delay+0x1c>
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e03f      	b.n	80014c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7fe ffb4 	bl	80003c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2224      	movs	r2, #36	; 0x24
 8001464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f905 	bl	8001688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800148c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800149c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b08a      	sub	sp, #40	; 0x28
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d17c      	bne.n	80015e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_UART_Transmit+0x2c>
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e075      	b.n	80015ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_UART_Transmit+0x3e>
 8001508:	2302      	movs	r3, #2
 800150a:	e06e      	b.n	80015ea <HAL_UART_Transmit+0x11c>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2221      	movs	r2, #33	; 0x21
 800151e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001522:	f7ff f8cf 	bl	80006c4 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	88fa      	ldrh	r2, [r7, #6]
 8001532:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800153c:	d108      	bne.n	8001550 <HAL_UART_Transmit+0x82>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	e003      	b.n	8001558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001560:	e02a      	b.n	80015b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f840 	bl	80015f2 <UART_WaitOnFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e036      	b.n	80015ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	3302      	adds	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	e007      	b.n	80015aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1cf      	bne.n	8001562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2200      	movs	r2, #0
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f810 	bl	80015f2 <UART_WaitOnFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e006      	b.n	80015ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2220      	movs	r2, #32
 80015e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4613      	mov	r3, r2
 8001600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001602:	e02c      	b.n	800165e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160a:	d028      	beq.n	800165e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <UART_WaitOnFlagUntilTimeout+0x30>
 8001612:	f7ff f857 	bl	80006c4 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	429a      	cmp	r2, r3
 8001620:	d21d      	bcs.n	800165e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001630:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e00f      	b.n	800167e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4013      	ands	r3, r2
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	429a      	cmp	r2, r3
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	429a      	cmp	r2, r3
 800167a:	d0c3      	beq.n	8001604 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016c2:	f023 030c 	bic.w	r3, r3, #12
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a2c      	ldr	r2, [pc, #176]	; (800179c <UART_SetConfig+0x114>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d103      	bne.n	80016f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016f0:	f7ff fe6e 	bl	80013d0 <HAL_RCC_GetPCLK2Freq>
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	e002      	b.n	80016fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016f8:	f7ff fe56 	bl	80013a8 <HAL_RCC_GetPCLK1Freq>
 80016fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	009a      	lsls	r2, r3, #2
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <UART_SetConfig+0x118>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	0119      	lsls	r1, r3, #4
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009a      	lsls	r2, r3, #2
 8001728:	441a      	add	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fbb2 f2f3 	udiv	r2, r2, r3
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <UART_SetConfig+0x118>)
 8001736:	fba3 0302 	umull	r0, r3, r3, r2
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2064      	movs	r0, #100	; 0x64
 800173e:	fb00 f303 	mul.w	r3, r0, r3
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	3332      	adds	r3, #50	; 0x32
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <UART_SetConfig+0x118>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001754:	4419      	add	r1, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	009a      	lsls	r2, r3, #2
 8001760:	441a      	add	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fbb2 f2f3 	udiv	r2, r2, r3
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <UART_SetConfig+0x118>)
 800176e:	fba3 0302 	umull	r0, r3, r3, r2
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2064      	movs	r0, #100	; 0x64
 8001776:	fb00 f303 	mul.w	r3, r0, r3
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	3332      	adds	r3, #50	; 0x32
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <UART_SetConfig+0x118>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	f003 020f 	and.w	r2, r3, #15
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	440a      	add	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013800 	.word	0x40013800
 80017a0:	51eb851f 	.word	0x51eb851f

080017a4 <__errno>:
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <__errno+0x8>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <__libc_init_array>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	2500      	movs	r5, #0
 80017b4:	4e0c      	ldr	r6, [pc, #48]	; (80017e8 <__libc_init_array+0x38>)
 80017b6:	4c0d      	ldr	r4, [pc, #52]	; (80017ec <__libc_init_array+0x3c>)
 80017b8:	1ba4      	subs	r4, r4, r6
 80017ba:	10a4      	asrs	r4, r4, #2
 80017bc:	42a5      	cmp	r5, r4
 80017be:	d109      	bne.n	80017d4 <__libc_init_array+0x24>
 80017c0:	f000 ff10 	bl	80025e4 <_init>
 80017c4:	2500      	movs	r5, #0
 80017c6:	4e0a      	ldr	r6, [pc, #40]	; (80017f0 <__libc_init_array+0x40>)
 80017c8:	4c0a      	ldr	r4, [pc, #40]	; (80017f4 <__libc_init_array+0x44>)
 80017ca:	1ba4      	subs	r4, r4, r6
 80017cc:	10a4      	asrs	r4, r4, #2
 80017ce:	42a5      	cmp	r5, r4
 80017d0:	d105      	bne.n	80017de <__libc_init_array+0x2e>
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017d8:	4798      	blx	r3
 80017da:	3501      	adds	r5, #1
 80017dc:	e7ee      	b.n	80017bc <__libc_init_array+0xc>
 80017de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017e2:	4798      	blx	r3
 80017e4:	3501      	adds	r5, #1
 80017e6:	e7f2      	b.n	80017ce <__libc_init_array+0x1e>
 80017e8:	080026ec 	.word	0x080026ec
 80017ec:	080026ec 	.word	0x080026ec
 80017f0:	080026ec 	.word	0x080026ec
 80017f4:	080026f0 	.word	0x080026f0

080017f8 <memset>:
 80017f8:	4603      	mov	r3, r0
 80017fa:	4402      	add	r2, r0
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d100      	bne.n	8001802 <memset+0xa>
 8001800:	4770      	bx	lr
 8001802:	f803 1b01 	strb.w	r1, [r3], #1
 8001806:	e7f9      	b.n	80017fc <memset+0x4>

08001808 <iprintf>:
 8001808:	b40f      	push	{r0, r1, r2, r3}
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <iprintf+0x2c>)
 800180c:	b513      	push	{r0, r1, r4, lr}
 800180e:	681c      	ldr	r4, [r3, #0]
 8001810:	b124      	cbz	r4, 800181c <iprintf+0x14>
 8001812:	69a3      	ldr	r3, [r4, #24]
 8001814:	b913      	cbnz	r3, 800181c <iprintf+0x14>
 8001816:	4620      	mov	r0, r4
 8001818:	f000 f84e 	bl	80018b8 <__sinit>
 800181c:	ab05      	add	r3, sp, #20
 800181e:	9a04      	ldr	r2, [sp, #16]
 8001820:	68a1      	ldr	r1, [r4, #8]
 8001822:	4620      	mov	r0, r4
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	f000 f953 	bl	8001ad0 <_vfiprintf_r>
 800182a:	b002      	add	sp, #8
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001830:	b004      	add	sp, #16
 8001832:	4770      	bx	lr
 8001834:	2000000c 	.word	0x2000000c

08001838 <std>:
 8001838:	2300      	movs	r3, #0
 800183a:	b510      	push	{r4, lr}
 800183c:	4604      	mov	r4, r0
 800183e:	e9c0 3300 	strd	r3, r3, [r0]
 8001842:	6083      	str	r3, [r0, #8]
 8001844:	8181      	strh	r1, [r0, #12]
 8001846:	6643      	str	r3, [r0, #100]	; 0x64
 8001848:	81c2      	strh	r2, [r0, #14]
 800184a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800184e:	6183      	str	r3, [r0, #24]
 8001850:	4619      	mov	r1, r3
 8001852:	2208      	movs	r2, #8
 8001854:	305c      	adds	r0, #92	; 0x5c
 8001856:	f7ff ffcf 	bl	80017f8 <memset>
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <std+0x38>)
 800185c:	6224      	str	r4, [r4, #32]
 800185e:	6263      	str	r3, [r4, #36]	; 0x24
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <std+0x3c>)
 8001862:	62a3      	str	r3, [r4, #40]	; 0x28
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <std+0x40>)
 8001866:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <std+0x44>)
 800186a:	6323      	str	r3, [r4, #48]	; 0x30
 800186c:	bd10      	pop	{r4, pc}
 800186e:	bf00      	nop
 8001870:	0800202d 	.word	0x0800202d
 8001874:	0800204f 	.word	0x0800204f
 8001878:	08002087 	.word	0x08002087
 800187c:	080020ab 	.word	0x080020ab

08001880 <_cleanup_r>:
 8001880:	4901      	ldr	r1, [pc, #4]	; (8001888 <_cleanup_r+0x8>)
 8001882:	f000 b885 	b.w	8001990 <_fwalk_reent>
 8001886:	bf00      	nop
 8001888:	08002385 	.word	0x08002385

0800188c <__sfmoreglue>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	2568      	movs	r5, #104	; 0x68
 8001890:	1e4a      	subs	r2, r1, #1
 8001892:	4355      	muls	r5, r2
 8001894:	460e      	mov	r6, r1
 8001896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800189a:	f000 f897 	bl	80019cc <_malloc_r>
 800189e:	4604      	mov	r4, r0
 80018a0:	b140      	cbz	r0, 80018b4 <__sfmoreglue+0x28>
 80018a2:	2100      	movs	r1, #0
 80018a4:	e9c0 1600 	strd	r1, r6, [r0]
 80018a8:	300c      	adds	r0, #12
 80018aa:	60a0      	str	r0, [r4, #8]
 80018ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018b0:	f7ff ffa2 	bl	80017f8 <memset>
 80018b4:	4620      	mov	r0, r4
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <__sinit>:
 80018b8:	6983      	ldr	r3, [r0, #24]
 80018ba:	b510      	push	{r4, lr}
 80018bc:	4604      	mov	r4, r0
 80018be:	bb33      	cbnz	r3, 800190e <__sinit+0x56>
 80018c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80018c4:	6503      	str	r3, [r0, #80]	; 0x50
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <__sinit+0x58>)
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <__sinit+0x5c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6282      	str	r2, [r0, #40]	; 0x28
 80018ce:	4298      	cmp	r0, r3
 80018d0:	bf04      	itt	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	6183      	streq	r3, [r0, #24]
 80018d6:	f000 f81f 	bl	8001918 <__sfp>
 80018da:	6060      	str	r0, [r4, #4]
 80018dc:	4620      	mov	r0, r4
 80018de:	f000 f81b 	bl	8001918 <__sfp>
 80018e2:	60a0      	str	r0, [r4, #8]
 80018e4:	4620      	mov	r0, r4
 80018e6:	f000 f817 	bl	8001918 <__sfp>
 80018ea:	2200      	movs	r2, #0
 80018ec:	60e0      	str	r0, [r4, #12]
 80018ee:	2104      	movs	r1, #4
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff ffa1 	bl	8001838 <std>
 80018f6:	2201      	movs	r2, #1
 80018f8:	2109      	movs	r1, #9
 80018fa:	68a0      	ldr	r0, [r4, #8]
 80018fc:	f7ff ff9c 	bl	8001838 <std>
 8001900:	2202      	movs	r2, #2
 8001902:	2112      	movs	r1, #18
 8001904:	68e0      	ldr	r0, [r4, #12]
 8001906:	f7ff ff97 	bl	8001838 <std>
 800190a:	2301      	movs	r3, #1
 800190c:	61a3      	str	r3, [r4, #24]
 800190e:	bd10      	pop	{r4, pc}
 8001910:	08002654 	.word	0x08002654
 8001914:	08001881 	.word	0x08001881

08001918 <__sfp>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <__sfp+0x70>)
 800191c:	4607      	mov	r7, r0
 800191e:	681e      	ldr	r6, [r3, #0]
 8001920:	69b3      	ldr	r3, [r6, #24]
 8001922:	b913      	cbnz	r3, 800192a <__sfp+0x12>
 8001924:	4630      	mov	r0, r6
 8001926:	f7ff ffc7 	bl	80018b8 <__sinit>
 800192a:	3648      	adds	r6, #72	; 0x48
 800192c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001930:	3b01      	subs	r3, #1
 8001932:	d503      	bpl.n	800193c <__sfp+0x24>
 8001934:	6833      	ldr	r3, [r6, #0]
 8001936:	b133      	cbz	r3, 8001946 <__sfp+0x2e>
 8001938:	6836      	ldr	r6, [r6, #0]
 800193a:	e7f7      	b.n	800192c <__sfp+0x14>
 800193c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001940:	b16d      	cbz	r5, 800195e <__sfp+0x46>
 8001942:	3468      	adds	r4, #104	; 0x68
 8001944:	e7f4      	b.n	8001930 <__sfp+0x18>
 8001946:	2104      	movs	r1, #4
 8001948:	4638      	mov	r0, r7
 800194a:	f7ff ff9f 	bl	800188c <__sfmoreglue>
 800194e:	6030      	str	r0, [r6, #0]
 8001950:	2800      	cmp	r0, #0
 8001952:	d1f1      	bne.n	8001938 <__sfp+0x20>
 8001954:	230c      	movs	r3, #12
 8001956:	4604      	mov	r4, r0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4620      	mov	r0, r4
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <__sfp+0x74>)
 8001960:	6665      	str	r5, [r4, #100]	; 0x64
 8001962:	e9c4 5500 	strd	r5, r5, [r4]
 8001966:	60a5      	str	r5, [r4, #8]
 8001968:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800196c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001970:	2208      	movs	r2, #8
 8001972:	4629      	mov	r1, r5
 8001974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001978:	f7ff ff3e 	bl	80017f8 <memset>
 800197c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001984:	e7e9      	b.n	800195a <__sfp+0x42>
 8001986:	bf00      	nop
 8001988:	08002654 	.word	0x08002654
 800198c:	ffff0001 	.word	0xffff0001

08001990 <_fwalk_reent>:
 8001990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001994:	4680      	mov	r8, r0
 8001996:	4689      	mov	r9, r1
 8001998:	2600      	movs	r6, #0
 800199a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800199e:	b914      	cbnz	r4, 80019a6 <_fwalk_reent+0x16>
 80019a0:	4630      	mov	r0, r6
 80019a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80019aa:	3f01      	subs	r7, #1
 80019ac:	d501      	bpl.n	80019b2 <_fwalk_reent+0x22>
 80019ae:	6824      	ldr	r4, [r4, #0]
 80019b0:	e7f5      	b.n	800199e <_fwalk_reent+0xe>
 80019b2:	89ab      	ldrh	r3, [r5, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d907      	bls.n	80019c8 <_fwalk_reent+0x38>
 80019b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019bc:	3301      	adds	r3, #1
 80019be:	d003      	beq.n	80019c8 <_fwalk_reent+0x38>
 80019c0:	4629      	mov	r1, r5
 80019c2:	4640      	mov	r0, r8
 80019c4:	47c8      	blx	r9
 80019c6:	4306      	orrs	r6, r0
 80019c8:	3568      	adds	r5, #104	; 0x68
 80019ca:	e7ee      	b.n	80019aa <_fwalk_reent+0x1a>

080019cc <_malloc_r>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	1ccd      	adds	r5, r1, #3
 80019d0:	f025 0503 	bic.w	r5, r5, #3
 80019d4:	3508      	adds	r5, #8
 80019d6:	2d0c      	cmp	r5, #12
 80019d8:	bf38      	it	cc
 80019da:	250c      	movcc	r5, #12
 80019dc:	2d00      	cmp	r5, #0
 80019de:	4606      	mov	r6, r0
 80019e0:	db01      	blt.n	80019e6 <_malloc_r+0x1a>
 80019e2:	42a9      	cmp	r1, r5
 80019e4:	d903      	bls.n	80019ee <_malloc_r+0x22>
 80019e6:	230c      	movs	r3, #12
 80019e8:	6033      	str	r3, [r6, #0]
 80019ea:	2000      	movs	r0, #0
 80019ec:	bd70      	pop	{r4, r5, r6, pc}
 80019ee:	f000 fd77 	bl	80024e0 <__malloc_lock>
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <_malloc_r+0xac>)
 80019f4:	6814      	ldr	r4, [r2, #0]
 80019f6:	4621      	mov	r1, r4
 80019f8:	b991      	cbnz	r1, 8001a20 <_malloc_r+0x54>
 80019fa:	4c20      	ldr	r4, [pc, #128]	; (8001a7c <_malloc_r+0xb0>)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	b91b      	cbnz	r3, 8001a08 <_malloc_r+0x3c>
 8001a00:	4630      	mov	r0, r6
 8001a02:	f000 fb03 	bl	800200c <_sbrk_r>
 8001a06:	6020      	str	r0, [r4, #0]
 8001a08:	4629      	mov	r1, r5
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f000 fafe 	bl	800200c <_sbrk_r>
 8001a10:	1c43      	adds	r3, r0, #1
 8001a12:	d124      	bne.n	8001a5e <_malloc_r+0x92>
 8001a14:	230c      	movs	r3, #12
 8001a16:	4630      	mov	r0, r6
 8001a18:	6033      	str	r3, [r6, #0]
 8001a1a:	f000 fd62 	bl	80024e2 <__malloc_unlock>
 8001a1e:	e7e4      	b.n	80019ea <_malloc_r+0x1e>
 8001a20:	680b      	ldr	r3, [r1, #0]
 8001a22:	1b5b      	subs	r3, r3, r5
 8001a24:	d418      	bmi.n	8001a58 <_malloc_r+0x8c>
 8001a26:	2b0b      	cmp	r3, #11
 8001a28:	d90f      	bls.n	8001a4a <_malloc_r+0x7e>
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	18cc      	adds	r4, r1, r3
 8001a2e:	50cd      	str	r5, [r1, r3]
 8001a30:	4630      	mov	r0, r6
 8001a32:	f000 fd56 	bl	80024e2 <__malloc_unlock>
 8001a36:	f104 000b 	add.w	r0, r4, #11
 8001a3a:	1d23      	adds	r3, r4, #4
 8001a3c:	f020 0007 	bic.w	r0, r0, #7
 8001a40:	1ac3      	subs	r3, r0, r3
 8001a42:	d0d3      	beq.n	80019ec <_malloc_r+0x20>
 8001a44:	425a      	negs	r2, r3
 8001a46:	50e2      	str	r2, [r4, r3]
 8001a48:	e7d0      	b.n	80019ec <_malloc_r+0x20>
 8001a4a:	684b      	ldr	r3, [r1, #4]
 8001a4c:	428c      	cmp	r4, r1
 8001a4e:	bf16      	itet	ne
 8001a50:	6063      	strne	r3, [r4, #4]
 8001a52:	6013      	streq	r3, [r2, #0]
 8001a54:	460c      	movne	r4, r1
 8001a56:	e7eb      	b.n	8001a30 <_malloc_r+0x64>
 8001a58:	460c      	mov	r4, r1
 8001a5a:	6849      	ldr	r1, [r1, #4]
 8001a5c:	e7cc      	b.n	80019f8 <_malloc_r+0x2c>
 8001a5e:	1cc4      	adds	r4, r0, #3
 8001a60:	f024 0403 	bic.w	r4, r4, #3
 8001a64:	42a0      	cmp	r0, r4
 8001a66:	d005      	beq.n	8001a74 <_malloc_r+0xa8>
 8001a68:	1a21      	subs	r1, r4, r0
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	f000 face 	bl	800200c <_sbrk_r>
 8001a70:	3001      	adds	r0, #1
 8001a72:	d0cf      	beq.n	8001a14 <_malloc_r+0x48>
 8001a74:	6025      	str	r5, [r4, #0]
 8001a76:	e7db      	b.n	8001a30 <_malloc_r+0x64>
 8001a78:	20000094 	.word	0x20000094
 8001a7c:	20000098 	.word	0x20000098

08001a80 <__sfputc_r>:
 8001a80:	6893      	ldr	r3, [r2, #8]
 8001a82:	b410      	push	{r4}
 8001a84:	3b01      	subs	r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	6093      	str	r3, [r2, #8]
 8001a8a:	da07      	bge.n	8001a9c <__sfputc_r+0x1c>
 8001a8c:	6994      	ldr	r4, [r2, #24]
 8001a8e:	42a3      	cmp	r3, r4
 8001a90:	db01      	blt.n	8001a96 <__sfputc_r+0x16>
 8001a92:	290a      	cmp	r1, #10
 8001a94:	d102      	bne.n	8001a9c <__sfputc_r+0x1c>
 8001a96:	bc10      	pop	{r4}
 8001a98:	f000 bb0c 	b.w	80020b4 <__swbuf_r>
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	1c58      	adds	r0, r3, #1
 8001aa0:	6010      	str	r0, [r2, #0]
 8001aa2:	7019      	strb	r1, [r3, #0]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	bc10      	pop	{r4}
 8001aa8:	4770      	bx	lr

08001aaa <__sfputs_r>:
 8001aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aac:	4606      	mov	r6, r0
 8001aae:	460f      	mov	r7, r1
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	18d5      	adds	r5, r2, r3
 8001ab4:	42ac      	cmp	r4, r5
 8001ab6:	d101      	bne.n	8001abc <__sfputs_r+0x12>
 8001ab8:	2000      	movs	r0, #0
 8001aba:	e007      	b.n	8001acc <__sfputs_r+0x22>
 8001abc:	463a      	mov	r2, r7
 8001abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	f7ff ffdc 	bl	8001a80 <__sfputc_r>
 8001ac8:	1c43      	adds	r3, r0, #1
 8001aca:	d1f3      	bne.n	8001ab4 <__sfputs_r+0xa>
 8001acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ad0 <_vfiprintf_r>:
 8001ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	b09d      	sub	sp, #116	; 0x74
 8001ad8:	4617      	mov	r7, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	4606      	mov	r6, r0
 8001ade:	b118      	cbz	r0, 8001ae8 <_vfiprintf_r+0x18>
 8001ae0:	6983      	ldr	r3, [r0, #24]
 8001ae2:	b90b      	cbnz	r3, 8001ae8 <_vfiprintf_r+0x18>
 8001ae4:	f7ff fee8 	bl	80018b8 <__sinit>
 8001ae8:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <_vfiprintf_r+0x20c>)
 8001aea:	429c      	cmp	r4, r3
 8001aec:	d158      	bne.n	8001ba0 <_vfiprintf_r+0xd0>
 8001aee:	6874      	ldr	r4, [r6, #4]
 8001af0:	89a3      	ldrh	r3, [r4, #12]
 8001af2:	0718      	lsls	r0, r3, #28
 8001af4:	d55e      	bpl.n	8001bb4 <_vfiprintf_r+0xe4>
 8001af6:	6923      	ldr	r3, [r4, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d05b      	beq.n	8001bb4 <_vfiprintf_r+0xe4>
 8001afc:	2300      	movs	r3, #0
 8001afe:	9309      	str	r3, [sp, #36]	; 0x24
 8001b00:	2320      	movs	r3, #32
 8001b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b06:	2330      	movs	r3, #48	; 0x30
 8001b08:	f04f 0b01 	mov.w	fp, #1
 8001b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b10:	9503      	str	r5, [sp, #12]
 8001b12:	46b8      	mov	r8, r7
 8001b14:	4645      	mov	r5, r8
 8001b16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001b1a:	b10b      	cbz	r3, 8001b20 <_vfiprintf_r+0x50>
 8001b1c:	2b25      	cmp	r3, #37	; 0x25
 8001b1e:	d154      	bne.n	8001bca <_vfiprintf_r+0xfa>
 8001b20:	ebb8 0a07 	subs.w	sl, r8, r7
 8001b24:	d00b      	beq.n	8001b3e <_vfiprintf_r+0x6e>
 8001b26:	4653      	mov	r3, sl
 8001b28:	463a      	mov	r2, r7
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f7ff ffbc 	bl	8001aaa <__sfputs_r>
 8001b32:	3001      	adds	r0, #1
 8001b34:	f000 80c2 	beq.w	8001cbc <_vfiprintf_r+0x1ec>
 8001b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3a:	4453      	add	r3, sl
 8001b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8001b3e:	f898 3000 	ldrb.w	r3, [r8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80ba 	beq.w	8001cbc <_vfiprintf_r+0x1ec>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	9307      	str	r3, [sp, #28]
 8001b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8001b5c:	46a8      	mov	r8, r5
 8001b5e:	2205      	movs	r2, #5
 8001b60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001b64:	485e      	ldr	r0, [pc, #376]	; (8001ce0 <_vfiprintf_r+0x210>)
 8001b66:	f000 fcad 	bl	80024c4 <memchr>
 8001b6a:	9b04      	ldr	r3, [sp, #16]
 8001b6c:	bb78      	cbnz	r0, 8001bce <_vfiprintf_r+0xfe>
 8001b6e:	06d9      	lsls	r1, r3, #27
 8001b70:	bf44      	itt	mi
 8001b72:	2220      	movmi	r2, #32
 8001b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b78:	071a      	lsls	r2, r3, #28
 8001b7a:	bf44      	itt	mi
 8001b7c:	222b      	movmi	r2, #43	; 0x2b
 8001b7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b82:	782a      	ldrb	r2, [r5, #0]
 8001b84:	2a2a      	cmp	r2, #42	; 0x2a
 8001b86:	d02a      	beq.n	8001bde <_vfiprintf_r+0x10e>
 8001b88:	46a8      	mov	r8, r5
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	250a      	movs	r5, #10
 8001b8e:	9a07      	ldr	r2, [sp, #28]
 8001b90:	4641      	mov	r1, r8
 8001b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b96:	3b30      	subs	r3, #48	; 0x30
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d969      	bls.n	8001c70 <_vfiprintf_r+0x1a0>
 8001b9c:	b360      	cbz	r0, 8001bf8 <_vfiprintf_r+0x128>
 8001b9e:	e024      	b.n	8001bea <_vfiprintf_r+0x11a>
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <_vfiprintf_r+0x214>)
 8001ba2:	429c      	cmp	r4, r3
 8001ba4:	d101      	bne.n	8001baa <_vfiprintf_r+0xda>
 8001ba6:	68b4      	ldr	r4, [r6, #8]
 8001ba8:	e7a2      	b.n	8001af0 <_vfiprintf_r+0x20>
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <_vfiprintf_r+0x218>)
 8001bac:	429c      	cmp	r4, r3
 8001bae:	bf08      	it	eq
 8001bb0:	68f4      	ldreq	r4, [r6, #12]
 8001bb2:	e79d      	b.n	8001af0 <_vfiprintf_r+0x20>
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	f000 fae0 	bl	800217c <__swsetup_r>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d09d      	beq.n	8001afc <_vfiprintf_r+0x2c>
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	b01d      	add	sp, #116	; 0x74
 8001bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bca:	46a8      	mov	r8, r5
 8001bcc:	e7a2      	b.n	8001b14 <_vfiprintf_r+0x44>
 8001bce:	4a44      	ldr	r2, [pc, #272]	; (8001ce0 <_vfiprintf_r+0x210>)
 8001bd0:	4645      	mov	r5, r8
 8001bd2:	1a80      	subs	r0, r0, r2
 8001bd4:	fa0b f000 	lsl.w	r0, fp, r0
 8001bd8:	4318      	orrs	r0, r3
 8001bda:	9004      	str	r0, [sp, #16]
 8001bdc:	e7be      	b.n	8001b5c <_vfiprintf_r+0x8c>
 8001bde:	9a03      	ldr	r2, [sp, #12]
 8001be0:	1d11      	adds	r1, r2, #4
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	9103      	str	r1, [sp, #12]
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	db01      	blt.n	8001bee <_vfiprintf_r+0x11e>
 8001bea:	9207      	str	r2, [sp, #28]
 8001bec:	e004      	b.n	8001bf8 <_vfiprintf_r+0x128>
 8001bee:	4252      	negs	r2, r2
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	9207      	str	r2, [sp, #28]
 8001bf6:	9304      	str	r3, [sp, #16]
 8001bf8:	f898 3000 	ldrb.w	r3, [r8]
 8001bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8001bfe:	d10e      	bne.n	8001c1e <_vfiprintf_r+0x14e>
 8001c00:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001c04:	2b2a      	cmp	r3, #42	; 0x2a
 8001c06:	d138      	bne.n	8001c7a <_vfiprintf_r+0x1aa>
 8001c08:	9b03      	ldr	r3, [sp, #12]
 8001c0a:	f108 0802 	add.w	r8, r8, #2
 8001c0e:	1d1a      	adds	r2, r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	9203      	str	r2, [sp, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bfb8      	it	lt
 8001c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c1c:	9305      	str	r3, [sp, #20]
 8001c1e:	4d33      	ldr	r5, [pc, #204]	; (8001cec <_vfiprintf_r+0x21c>)
 8001c20:	2203      	movs	r2, #3
 8001c22:	f898 1000 	ldrb.w	r1, [r8]
 8001c26:	4628      	mov	r0, r5
 8001c28:	f000 fc4c 	bl	80024c4 <memchr>
 8001c2c:	b140      	cbz	r0, 8001c40 <_vfiprintf_r+0x170>
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	1b40      	subs	r0, r0, r5
 8001c32:	fa03 f000 	lsl.w	r0, r3, r0
 8001c36:	9b04      	ldr	r3, [sp, #16]
 8001c38:	f108 0801 	add.w	r8, r8, #1
 8001c3c:	4303      	orrs	r3, r0
 8001c3e:	9304      	str	r3, [sp, #16]
 8001c40:	f898 1000 	ldrb.w	r1, [r8]
 8001c44:	2206      	movs	r2, #6
 8001c46:	482a      	ldr	r0, [pc, #168]	; (8001cf0 <_vfiprintf_r+0x220>)
 8001c48:	f108 0701 	add.w	r7, r8, #1
 8001c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c50:	f000 fc38 	bl	80024c4 <memchr>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d037      	beq.n	8001cc8 <_vfiprintf_r+0x1f8>
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <_vfiprintf_r+0x224>)
 8001c5a:	bb1b      	cbnz	r3, 8001ca4 <_vfiprintf_r+0x1d4>
 8001c5c:	9b03      	ldr	r3, [sp, #12]
 8001c5e:	3307      	adds	r3, #7
 8001c60:	f023 0307 	bic.w	r3, r3, #7
 8001c64:	3308      	adds	r3, #8
 8001c66:	9303      	str	r3, [sp, #12]
 8001c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c6a:	444b      	add	r3, r9
 8001c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c6e:	e750      	b.n	8001b12 <_vfiprintf_r+0x42>
 8001c70:	fb05 3202 	mla	r2, r5, r2, r3
 8001c74:	2001      	movs	r0, #1
 8001c76:	4688      	mov	r8, r1
 8001c78:	e78a      	b.n	8001b90 <_vfiprintf_r+0xc0>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	250a      	movs	r5, #10
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f108 0801 	add.w	r8, r8, #1
 8001c84:	9305      	str	r3, [sp, #20]
 8001c86:	4640      	mov	r0, r8
 8001c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c8c:	3a30      	subs	r2, #48	; 0x30
 8001c8e:	2a09      	cmp	r2, #9
 8001c90:	d903      	bls.n	8001c9a <_vfiprintf_r+0x1ca>
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0c3      	beq.n	8001c1e <_vfiprintf_r+0x14e>
 8001c96:	9105      	str	r1, [sp, #20]
 8001c98:	e7c1      	b.n	8001c1e <_vfiprintf_r+0x14e>
 8001c9a:	fb05 2101 	mla	r1, r5, r1, r2
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4680      	mov	r8, r0
 8001ca2:	e7f0      	b.n	8001c86 <_vfiprintf_r+0x1b6>
 8001ca4:	ab03      	add	r3, sp, #12
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4622      	mov	r2, r4
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <_vfiprintf_r+0x228>)
 8001cac:	a904      	add	r1, sp, #16
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f3af 8000 	nop.w
 8001cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001cb8:	4681      	mov	r9, r0
 8001cba:	d1d5      	bne.n	8001c68 <_vfiprintf_r+0x198>
 8001cbc:	89a3      	ldrh	r3, [r4, #12]
 8001cbe:	065b      	lsls	r3, r3, #25
 8001cc0:	f53f af7e 	bmi.w	8001bc0 <_vfiprintf_r+0xf0>
 8001cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cc6:	e77d      	b.n	8001bc4 <_vfiprintf_r+0xf4>
 8001cc8:	ab03      	add	r3, sp, #12
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4622      	mov	r2, r4
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <_vfiprintf_r+0x228>)
 8001cd0:	a904      	add	r1, sp, #16
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f000 f888 	bl	8001de8 <_printf_i>
 8001cd8:	e7ec      	b.n	8001cb4 <_vfiprintf_r+0x1e4>
 8001cda:	bf00      	nop
 8001cdc:	08002678 	.word	0x08002678
 8001ce0:	080026b8 	.word	0x080026b8
 8001ce4:	08002698 	.word	0x08002698
 8001ce8:	08002658 	.word	0x08002658
 8001cec:	080026be 	.word	0x080026be
 8001cf0:	080026c2 	.word	0x080026c2
 8001cf4:	00000000 	.word	0x00000000
 8001cf8:	08001aab 	.word	0x08001aab

08001cfc <_printf_common>:
 8001cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d00:	4691      	mov	r9, r2
 8001d02:	461f      	mov	r7, r3
 8001d04:	688a      	ldr	r2, [r1, #8]
 8001d06:	690b      	ldr	r3, [r1, #16]
 8001d08:	4606      	mov	r6, r0
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	bfb8      	it	lt
 8001d0e:	4613      	movlt	r3, r2
 8001d10:	f8c9 3000 	str.w	r3, [r9]
 8001d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d18:	460c      	mov	r4, r1
 8001d1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d1e:	b112      	cbz	r2, 8001d26 <_printf_common+0x2a>
 8001d20:	3301      	adds	r3, #1
 8001d22:	f8c9 3000 	str.w	r3, [r9]
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	0699      	lsls	r1, r3, #26
 8001d2a:	bf42      	ittt	mi
 8001d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d30:	3302      	addmi	r3, #2
 8001d32:	f8c9 3000 	strmi.w	r3, [r9]
 8001d36:	6825      	ldr	r5, [r4, #0]
 8001d38:	f015 0506 	ands.w	r5, r5, #6
 8001d3c:	d107      	bne.n	8001d4e <_printf_common+0x52>
 8001d3e:	f104 0a19 	add.w	sl, r4, #25
 8001d42:	68e3      	ldr	r3, [r4, #12]
 8001d44:	f8d9 2000 	ldr.w	r2, [r9]
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	42ab      	cmp	r3, r5
 8001d4c:	dc29      	bgt.n	8001da2 <_printf_common+0xa6>
 8001d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d52:	6822      	ldr	r2, [r4, #0]
 8001d54:	3300      	adds	r3, #0
 8001d56:	bf18      	it	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	0692      	lsls	r2, r2, #26
 8001d5c:	d42e      	bmi.n	8001dbc <_printf_common+0xc0>
 8001d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d62:	4639      	mov	r1, r7
 8001d64:	4630      	mov	r0, r6
 8001d66:	47c0      	blx	r8
 8001d68:	3001      	adds	r0, #1
 8001d6a:	d021      	beq.n	8001db0 <_printf_common+0xb4>
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	68e5      	ldr	r5, [r4, #12]
 8001d70:	f003 0306 	and.w	r3, r3, #6
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	bf18      	it	ne
 8001d78:	2500      	movne	r5, #0
 8001d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8001d7e:	f04f 0900 	mov.w	r9, #0
 8001d82:	bf08      	it	eq
 8001d84:	1aad      	subeq	r5, r5, r2
 8001d86:	68a3      	ldr	r3, [r4, #8]
 8001d88:	6922      	ldr	r2, [r4, #16]
 8001d8a:	bf08      	it	eq
 8001d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bfc4      	itt	gt
 8001d94:	1a9b      	subgt	r3, r3, r2
 8001d96:	18ed      	addgt	r5, r5, r3
 8001d98:	341a      	adds	r4, #26
 8001d9a:	454d      	cmp	r5, r9
 8001d9c:	d11a      	bne.n	8001dd4 <_printf_common+0xd8>
 8001d9e:	2000      	movs	r0, #0
 8001da0:	e008      	b.n	8001db4 <_printf_common+0xb8>
 8001da2:	2301      	movs	r3, #1
 8001da4:	4652      	mov	r2, sl
 8001da6:	4639      	mov	r1, r7
 8001da8:	4630      	mov	r0, r6
 8001daa:	47c0      	blx	r8
 8001dac:	3001      	adds	r0, #1
 8001dae:	d103      	bne.n	8001db8 <_printf_common+0xbc>
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001db8:	3501      	adds	r5, #1
 8001dba:	e7c2      	b.n	8001d42 <_printf_common+0x46>
 8001dbc:	2030      	movs	r0, #48	; 0x30
 8001dbe:	18e1      	adds	r1, r4, r3
 8001dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001dca:	4422      	add	r2, r4
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001dd2:	e7c4      	b.n	8001d5e <_printf_common+0x62>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	4639      	mov	r1, r7
 8001dda:	4630      	mov	r0, r6
 8001ddc:	47c0      	blx	r8
 8001dde:	3001      	adds	r0, #1
 8001de0:	d0e6      	beq.n	8001db0 <_printf_common+0xb4>
 8001de2:	f109 0901 	add.w	r9, r9, #1
 8001de6:	e7d8      	b.n	8001d9a <_printf_common+0x9e>

08001de8 <_printf_i>:
 8001de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001df0:	460c      	mov	r4, r1
 8001df2:	7e09      	ldrb	r1, [r1, #24]
 8001df4:	b085      	sub	sp, #20
 8001df6:	296e      	cmp	r1, #110	; 0x6e
 8001df8:	4617      	mov	r7, r2
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	4698      	mov	r8, r3
 8001dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e00:	f000 80b3 	beq.w	8001f6a <_printf_i+0x182>
 8001e04:	d822      	bhi.n	8001e4c <_printf_i+0x64>
 8001e06:	2963      	cmp	r1, #99	; 0x63
 8001e08:	d036      	beq.n	8001e78 <_printf_i+0x90>
 8001e0a:	d80a      	bhi.n	8001e22 <_printf_i+0x3a>
 8001e0c:	2900      	cmp	r1, #0
 8001e0e:	f000 80b9 	beq.w	8001f84 <_printf_i+0x19c>
 8001e12:	2958      	cmp	r1, #88	; 0x58
 8001e14:	f000 8083 	beq.w	8001f1e <_printf_i+0x136>
 8001e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001e20:	e032      	b.n	8001e88 <_printf_i+0xa0>
 8001e22:	2964      	cmp	r1, #100	; 0x64
 8001e24:	d001      	beq.n	8001e2a <_printf_i+0x42>
 8001e26:	2969      	cmp	r1, #105	; 0x69
 8001e28:	d1f6      	bne.n	8001e18 <_printf_i+0x30>
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	0605      	lsls	r5, r0, #24
 8001e30:	f103 0104 	add.w	r1, r3, #4
 8001e34:	d52a      	bpl.n	8001e8c <_printf_i+0xa4>
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6011      	str	r1, [r2, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da03      	bge.n	8001e46 <_printf_i+0x5e>
 8001e3e:	222d      	movs	r2, #45	; 0x2d
 8001e40:	425b      	negs	r3, r3
 8001e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e46:	486f      	ldr	r0, [pc, #444]	; (8002004 <_printf_i+0x21c>)
 8001e48:	220a      	movs	r2, #10
 8001e4a:	e039      	b.n	8001ec0 <_printf_i+0xd8>
 8001e4c:	2973      	cmp	r1, #115	; 0x73
 8001e4e:	f000 809d 	beq.w	8001f8c <_printf_i+0x1a4>
 8001e52:	d808      	bhi.n	8001e66 <_printf_i+0x7e>
 8001e54:	296f      	cmp	r1, #111	; 0x6f
 8001e56:	d020      	beq.n	8001e9a <_printf_i+0xb2>
 8001e58:	2970      	cmp	r1, #112	; 0x70
 8001e5a:	d1dd      	bne.n	8001e18 <_printf_i+0x30>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f043 0320 	orr.w	r3, r3, #32
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	e003      	b.n	8001e6e <_printf_i+0x86>
 8001e66:	2975      	cmp	r1, #117	; 0x75
 8001e68:	d017      	beq.n	8001e9a <_printf_i+0xb2>
 8001e6a:	2978      	cmp	r1, #120	; 0x78
 8001e6c:	d1d4      	bne.n	8001e18 <_printf_i+0x30>
 8001e6e:	2378      	movs	r3, #120	; 0x78
 8001e70:	4865      	ldr	r0, [pc, #404]	; (8002008 <_printf_i+0x220>)
 8001e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e76:	e055      	b.n	8001f24 <_printf_i+0x13c>
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e7e:	1d19      	adds	r1, r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6011      	str	r1, [r2, #0]
 8001e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e08c      	b.n	8001fa6 <_printf_i+0x1be>
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e92:	6011      	str	r1, [r2, #0]
 8001e94:	bf18      	it	ne
 8001e96:	b21b      	sxthne	r3, r3
 8001e98:	e7cf      	b.n	8001e3a <_printf_i+0x52>
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	6825      	ldr	r5, [r4, #0]
 8001e9e:	1d18      	adds	r0, r3, #4
 8001ea0:	6010      	str	r0, [r2, #0]
 8001ea2:	0628      	lsls	r0, r5, #24
 8001ea4:	d501      	bpl.n	8001eaa <_printf_i+0xc2>
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e002      	b.n	8001eb0 <_printf_i+0xc8>
 8001eaa:	0668      	lsls	r0, r5, #25
 8001eac:	d5fb      	bpl.n	8001ea6 <_printf_i+0xbe>
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	296f      	cmp	r1, #111	; 0x6f
 8001eb2:	bf14      	ite	ne
 8001eb4:	220a      	movne	r2, #10
 8001eb6:	2208      	moveq	r2, #8
 8001eb8:	4852      	ldr	r0, [pc, #328]	; (8002004 <_printf_i+0x21c>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ec0:	6865      	ldr	r5, [r4, #4]
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	60a5      	str	r5, [r4, #8]
 8001ec6:	f2c0 8095 	blt.w	8001ff4 <_printf_i+0x20c>
 8001eca:	6821      	ldr	r1, [r4, #0]
 8001ecc:	f021 0104 	bic.w	r1, r1, #4
 8001ed0:	6021      	str	r1, [r4, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d13d      	bne.n	8001f52 <_printf_i+0x16a>
 8001ed6:	2d00      	cmp	r5, #0
 8001ed8:	f040 808e 	bne.w	8001ff8 <_printf_i+0x210>
 8001edc:	4665      	mov	r5, ip
 8001ede:	2a08      	cmp	r2, #8
 8001ee0:	d10b      	bne.n	8001efa <_printf_i+0x112>
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	07db      	lsls	r3, r3, #31
 8001ee6:	d508      	bpl.n	8001efa <_printf_i+0x112>
 8001ee8:	6923      	ldr	r3, [r4, #16]
 8001eea:	6862      	ldr	r2, [r4, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	bfde      	ittt	le
 8001ef0:	2330      	movle	r3, #48	; 0x30
 8001ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001efa:	ebac 0305 	sub.w	r3, ip, r5
 8001efe:	6123      	str	r3, [r4, #16]
 8001f00:	f8cd 8000 	str.w	r8, [sp]
 8001f04:	463b      	mov	r3, r7
 8001f06:	aa03      	add	r2, sp, #12
 8001f08:	4621      	mov	r1, r4
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	f7ff fef6 	bl	8001cfc <_printf_common>
 8001f10:	3001      	adds	r0, #1
 8001f12:	d14d      	bne.n	8001fb0 <_printf_i+0x1c8>
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	b005      	add	sp, #20
 8001f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f1e:	4839      	ldr	r0, [pc, #228]	; (8002004 <_printf_i+0x21c>)
 8001f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	6821      	ldr	r1, [r4, #0]
 8001f28:	1d1d      	adds	r5, r3, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6015      	str	r5, [r2, #0]
 8001f2e:	060a      	lsls	r2, r1, #24
 8001f30:	d50b      	bpl.n	8001f4a <_printf_i+0x162>
 8001f32:	07ca      	lsls	r2, r1, #31
 8001f34:	bf44      	itt	mi
 8001f36:	f041 0120 	orrmi.w	r1, r1, #32
 8001f3a:	6021      	strmi	r1, [r4, #0]
 8001f3c:	b91b      	cbnz	r3, 8001f46 <_printf_i+0x15e>
 8001f3e:	6822      	ldr	r2, [r4, #0]
 8001f40:	f022 0220 	bic.w	r2, r2, #32
 8001f44:	6022      	str	r2, [r4, #0]
 8001f46:	2210      	movs	r2, #16
 8001f48:	e7b7      	b.n	8001eba <_printf_i+0xd2>
 8001f4a:	064d      	lsls	r5, r1, #25
 8001f4c:	bf48      	it	mi
 8001f4e:	b29b      	uxthmi	r3, r3
 8001f50:	e7ef      	b.n	8001f32 <_printf_i+0x14a>
 8001f52:	4665      	mov	r5, ip
 8001f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f58:	fb02 3311 	mls	r3, r2, r1, r3
 8001f5c:	5cc3      	ldrb	r3, [r0, r3]
 8001f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f62:	460b      	mov	r3, r1
 8001f64:	2900      	cmp	r1, #0
 8001f66:	d1f5      	bne.n	8001f54 <_printf_i+0x16c>
 8001f68:	e7b9      	b.n	8001ede <_printf_i+0xf6>
 8001f6a:	6813      	ldr	r3, [r2, #0]
 8001f6c:	6825      	ldr	r5, [r4, #0]
 8001f6e:	1d18      	adds	r0, r3, #4
 8001f70:	6961      	ldr	r1, [r4, #20]
 8001f72:	6010      	str	r0, [r2, #0]
 8001f74:	0628      	lsls	r0, r5, #24
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	d501      	bpl.n	8001f7e <_printf_i+0x196>
 8001f7a:	6019      	str	r1, [r3, #0]
 8001f7c:	e002      	b.n	8001f84 <_printf_i+0x19c>
 8001f7e:	066a      	lsls	r2, r5, #25
 8001f80:	d5fb      	bpl.n	8001f7a <_printf_i+0x192>
 8001f82:	8019      	strh	r1, [r3, #0]
 8001f84:	2300      	movs	r3, #0
 8001f86:	4665      	mov	r5, ip
 8001f88:	6123      	str	r3, [r4, #16]
 8001f8a:	e7b9      	b.n	8001f00 <_printf_i+0x118>
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	1d19      	adds	r1, r3, #4
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	681d      	ldr	r5, [r3, #0]
 8001f94:	6862      	ldr	r2, [r4, #4]
 8001f96:	2100      	movs	r1, #0
 8001f98:	4628      	mov	r0, r5
 8001f9a:	f000 fa93 	bl	80024c4 <memchr>
 8001f9e:	b108      	cbz	r0, 8001fa4 <_printf_i+0x1bc>
 8001fa0:	1b40      	subs	r0, r0, r5
 8001fa2:	6060      	str	r0, [r4, #4]
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	6123      	str	r3, [r4, #16]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fae:	e7a7      	b.n	8001f00 <_printf_i+0x118>
 8001fb0:	6923      	ldr	r3, [r4, #16]
 8001fb2:	462a      	mov	r2, r5
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	47c0      	blx	r8
 8001fba:	3001      	adds	r0, #1
 8001fbc:	d0aa      	beq.n	8001f14 <_printf_i+0x12c>
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	079b      	lsls	r3, r3, #30
 8001fc2:	d413      	bmi.n	8001fec <_printf_i+0x204>
 8001fc4:	68e0      	ldr	r0, [r4, #12]
 8001fc6:	9b03      	ldr	r3, [sp, #12]
 8001fc8:	4298      	cmp	r0, r3
 8001fca:	bfb8      	it	lt
 8001fcc:	4618      	movlt	r0, r3
 8001fce:	e7a3      	b.n	8001f18 <_printf_i+0x130>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	464a      	mov	r2, r9
 8001fd4:	4639      	mov	r1, r7
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	47c0      	blx	r8
 8001fda:	3001      	adds	r0, #1
 8001fdc:	d09a      	beq.n	8001f14 <_printf_i+0x12c>
 8001fde:	3501      	adds	r5, #1
 8001fe0:	68e3      	ldr	r3, [r4, #12]
 8001fe2:	9a03      	ldr	r2, [sp, #12]
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	42ab      	cmp	r3, r5
 8001fe8:	dcf2      	bgt.n	8001fd0 <_printf_i+0x1e8>
 8001fea:	e7eb      	b.n	8001fc4 <_printf_i+0x1dc>
 8001fec:	2500      	movs	r5, #0
 8001fee:	f104 0919 	add.w	r9, r4, #25
 8001ff2:	e7f5      	b.n	8001fe0 <_printf_i+0x1f8>
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ac      	bne.n	8001f52 <_printf_i+0x16a>
 8001ff8:	7803      	ldrb	r3, [r0, #0]
 8001ffa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002002:	e76c      	b.n	8001ede <_printf_i+0xf6>
 8002004:	080026c9 	.word	0x080026c9
 8002008:	080026da 	.word	0x080026da

0800200c <_sbrk_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	2300      	movs	r3, #0
 8002010:	4c05      	ldr	r4, [pc, #20]	; (8002028 <_sbrk_r+0x1c>)
 8002012:	4605      	mov	r5, r0
 8002014:	4608      	mov	r0, r1
 8002016:	6023      	str	r3, [r4, #0]
 8002018:	f7fe fa9a 	bl	8000550 <_sbrk>
 800201c:	1c43      	adds	r3, r0, #1
 800201e:	d102      	bne.n	8002026 <_sbrk_r+0x1a>
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	b103      	cbz	r3, 8002026 <_sbrk_r+0x1a>
 8002024:	602b      	str	r3, [r5, #0]
 8002026:	bd38      	pop	{r3, r4, r5, pc}
 8002028:	200000e0 	.word	0x200000e0

0800202c <__sread>:
 800202c:	b510      	push	{r4, lr}
 800202e:	460c      	mov	r4, r1
 8002030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002034:	f000 faa2 	bl	800257c <_read_r>
 8002038:	2800      	cmp	r0, #0
 800203a:	bfab      	itete	ge
 800203c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800203e:	89a3      	ldrhlt	r3, [r4, #12]
 8002040:	181b      	addge	r3, r3, r0
 8002042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002046:	bfac      	ite	ge
 8002048:	6563      	strge	r3, [r4, #84]	; 0x54
 800204a:	81a3      	strhlt	r3, [r4, #12]
 800204c:	bd10      	pop	{r4, pc}

0800204e <__swrite>:
 800204e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002052:	461f      	mov	r7, r3
 8002054:	898b      	ldrh	r3, [r1, #12]
 8002056:	4605      	mov	r5, r0
 8002058:	05db      	lsls	r3, r3, #23
 800205a:	460c      	mov	r4, r1
 800205c:	4616      	mov	r6, r2
 800205e:	d505      	bpl.n	800206c <__swrite+0x1e>
 8002060:	2302      	movs	r3, #2
 8002062:	2200      	movs	r2, #0
 8002064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002068:	f000 f9b6 	bl	80023d8 <_lseek_r>
 800206c:	89a3      	ldrh	r3, [r4, #12]
 800206e:	4632      	mov	r2, r6
 8002070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800207a:	463b      	mov	r3, r7
 800207c:	4628      	mov	r0, r5
 800207e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002082:	f000 b869 	b.w	8002158 <_write_r>

08002086 <__sseek>:
 8002086:	b510      	push	{r4, lr}
 8002088:	460c      	mov	r4, r1
 800208a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800208e:	f000 f9a3 	bl	80023d8 <_lseek_r>
 8002092:	1c43      	adds	r3, r0, #1
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	bf15      	itete	ne
 8002098:	6560      	strne	r0, [r4, #84]	; 0x54
 800209a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800209e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020a2:	81a3      	strheq	r3, [r4, #12]
 80020a4:	bf18      	it	ne
 80020a6:	81a3      	strhne	r3, [r4, #12]
 80020a8:	bd10      	pop	{r4, pc}

080020aa <__sclose>:
 80020aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ae:	f000 b8d3 	b.w	8002258 <_close_r>
	...

080020b4 <__swbuf_r>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	460e      	mov	r6, r1
 80020b8:	4614      	mov	r4, r2
 80020ba:	4605      	mov	r5, r0
 80020bc:	b118      	cbz	r0, 80020c6 <__swbuf_r+0x12>
 80020be:	6983      	ldr	r3, [r0, #24]
 80020c0:	b90b      	cbnz	r3, 80020c6 <__swbuf_r+0x12>
 80020c2:	f7ff fbf9 	bl	80018b8 <__sinit>
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <__swbuf_r+0x98>)
 80020c8:	429c      	cmp	r4, r3
 80020ca:	d12a      	bne.n	8002122 <__swbuf_r+0x6e>
 80020cc:	686c      	ldr	r4, [r5, #4]
 80020ce:	69a3      	ldr	r3, [r4, #24]
 80020d0:	60a3      	str	r3, [r4, #8]
 80020d2:	89a3      	ldrh	r3, [r4, #12]
 80020d4:	071a      	lsls	r2, r3, #28
 80020d6:	d52e      	bpl.n	8002136 <__swbuf_r+0x82>
 80020d8:	6923      	ldr	r3, [r4, #16]
 80020da:	b363      	cbz	r3, 8002136 <__swbuf_r+0x82>
 80020dc:	6923      	ldr	r3, [r4, #16]
 80020de:	6820      	ldr	r0, [r4, #0]
 80020e0:	b2f6      	uxtb	r6, r6
 80020e2:	1ac0      	subs	r0, r0, r3
 80020e4:	6963      	ldr	r3, [r4, #20]
 80020e6:	4637      	mov	r7, r6
 80020e8:	4283      	cmp	r3, r0
 80020ea:	dc04      	bgt.n	80020f6 <__swbuf_r+0x42>
 80020ec:	4621      	mov	r1, r4
 80020ee:	4628      	mov	r0, r5
 80020f0:	f000 f948 	bl	8002384 <_fflush_r>
 80020f4:	bb28      	cbnz	r0, 8002142 <__swbuf_r+0x8e>
 80020f6:	68a3      	ldr	r3, [r4, #8]
 80020f8:	3001      	adds	r0, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	60a3      	str	r3, [r4, #8]
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	6022      	str	r2, [r4, #0]
 8002104:	701e      	strb	r6, [r3, #0]
 8002106:	6963      	ldr	r3, [r4, #20]
 8002108:	4283      	cmp	r3, r0
 800210a:	d004      	beq.n	8002116 <__swbuf_r+0x62>
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	07db      	lsls	r3, r3, #31
 8002110:	d519      	bpl.n	8002146 <__swbuf_r+0x92>
 8002112:	2e0a      	cmp	r6, #10
 8002114:	d117      	bne.n	8002146 <__swbuf_r+0x92>
 8002116:	4621      	mov	r1, r4
 8002118:	4628      	mov	r0, r5
 800211a:	f000 f933 	bl	8002384 <_fflush_r>
 800211e:	b190      	cbz	r0, 8002146 <__swbuf_r+0x92>
 8002120:	e00f      	b.n	8002142 <__swbuf_r+0x8e>
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <__swbuf_r+0x9c>)
 8002124:	429c      	cmp	r4, r3
 8002126:	d101      	bne.n	800212c <__swbuf_r+0x78>
 8002128:	68ac      	ldr	r4, [r5, #8]
 800212a:	e7d0      	b.n	80020ce <__swbuf_r+0x1a>
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <__swbuf_r+0xa0>)
 800212e:	429c      	cmp	r4, r3
 8002130:	bf08      	it	eq
 8002132:	68ec      	ldreq	r4, [r5, #12]
 8002134:	e7cb      	b.n	80020ce <__swbuf_r+0x1a>
 8002136:	4621      	mov	r1, r4
 8002138:	4628      	mov	r0, r5
 800213a:	f000 f81f 	bl	800217c <__swsetup_r>
 800213e:	2800      	cmp	r0, #0
 8002140:	d0cc      	beq.n	80020dc <__swbuf_r+0x28>
 8002142:	f04f 37ff 	mov.w	r7, #4294967295
 8002146:	4638      	mov	r0, r7
 8002148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800214a:	bf00      	nop
 800214c:	08002678 	.word	0x08002678
 8002150:	08002698 	.word	0x08002698
 8002154:	08002658 	.word	0x08002658

08002158 <_write_r>:
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4605      	mov	r5, r0
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	2200      	movs	r2, #0
 8002162:	4c05      	ldr	r4, [pc, #20]	; (8002178 <_write_r+0x20>)
 8002164:	6022      	str	r2, [r4, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	f7fe f8d6 	bl	8000318 <_write>
 800216c:	1c43      	adds	r3, r0, #1
 800216e:	d102      	bne.n	8002176 <_write_r+0x1e>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	b103      	cbz	r3, 8002176 <_write_r+0x1e>
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	200000e0 	.word	0x200000e0

0800217c <__swsetup_r>:
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <__swsetup_r+0xcc>)
 800217e:	b570      	push	{r4, r5, r6, lr}
 8002180:	681d      	ldr	r5, [r3, #0]
 8002182:	4606      	mov	r6, r0
 8002184:	460c      	mov	r4, r1
 8002186:	b125      	cbz	r5, 8002192 <__swsetup_r+0x16>
 8002188:	69ab      	ldr	r3, [r5, #24]
 800218a:	b913      	cbnz	r3, 8002192 <__swsetup_r+0x16>
 800218c:	4628      	mov	r0, r5
 800218e:	f7ff fb93 	bl	80018b8 <__sinit>
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <__swsetup_r+0xd0>)
 8002194:	429c      	cmp	r4, r3
 8002196:	d10f      	bne.n	80021b8 <__swsetup_r+0x3c>
 8002198:	686c      	ldr	r4, [r5, #4]
 800219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	0715      	lsls	r5, r2, #28
 80021a2:	d42c      	bmi.n	80021fe <__swsetup_r+0x82>
 80021a4:	06d0      	lsls	r0, r2, #27
 80021a6:	d411      	bmi.n	80021cc <__swsetup_r+0x50>
 80021a8:	2209      	movs	r2, #9
 80021aa:	6032      	str	r2, [r6, #0]
 80021ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b0:	81a3      	strh	r3, [r4, #12]
 80021b2:	f04f 30ff 	mov.w	r0, #4294967295
 80021b6:	e03e      	b.n	8002236 <__swsetup_r+0xba>
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <__swsetup_r+0xd4>)
 80021ba:	429c      	cmp	r4, r3
 80021bc:	d101      	bne.n	80021c2 <__swsetup_r+0x46>
 80021be:	68ac      	ldr	r4, [r5, #8]
 80021c0:	e7eb      	b.n	800219a <__swsetup_r+0x1e>
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <__swsetup_r+0xd8>)
 80021c4:	429c      	cmp	r4, r3
 80021c6:	bf08      	it	eq
 80021c8:	68ec      	ldreq	r4, [r5, #12]
 80021ca:	e7e6      	b.n	800219a <__swsetup_r+0x1e>
 80021cc:	0751      	lsls	r1, r2, #29
 80021ce:	d512      	bpl.n	80021f6 <__swsetup_r+0x7a>
 80021d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021d2:	b141      	cbz	r1, 80021e6 <__swsetup_r+0x6a>
 80021d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021d8:	4299      	cmp	r1, r3
 80021da:	d002      	beq.n	80021e2 <__swsetup_r+0x66>
 80021dc:	4630      	mov	r0, r6
 80021de:	f000 f981 	bl	80024e4 <_free_r>
 80021e2:	2300      	movs	r3, #0
 80021e4:	6363      	str	r3, [r4, #52]	; 0x34
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021ec:	81a3      	strh	r3, [r4, #12]
 80021ee:	2300      	movs	r3, #0
 80021f0:	6063      	str	r3, [r4, #4]
 80021f2:	6923      	ldr	r3, [r4, #16]
 80021f4:	6023      	str	r3, [r4, #0]
 80021f6:	89a3      	ldrh	r3, [r4, #12]
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	81a3      	strh	r3, [r4, #12]
 80021fe:	6923      	ldr	r3, [r4, #16]
 8002200:	b94b      	cbnz	r3, 8002216 <__swsetup_r+0x9a>
 8002202:	89a3      	ldrh	r3, [r4, #12]
 8002204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220c:	d003      	beq.n	8002216 <__swsetup_r+0x9a>
 800220e:	4621      	mov	r1, r4
 8002210:	4630      	mov	r0, r6
 8002212:	f000 f917 	bl	8002444 <__smakebuf_r>
 8002216:	89a2      	ldrh	r2, [r4, #12]
 8002218:	f012 0301 	ands.w	r3, r2, #1
 800221c:	d00c      	beq.n	8002238 <__swsetup_r+0xbc>
 800221e:	2300      	movs	r3, #0
 8002220:	60a3      	str	r3, [r4, #8]
 8002222:	6963      	ldr	r3, [r4, #20]
 8002224:	425b      	negs	r3, r3
 8002226:	61a3      	str	r3, [r4, #24]
 8002228:	6923      	ldr	r3, [r4, #16]
 800222a:	b953      	cbnz	r3, 8002242 <__swsetup_r+0xc6>
 800222c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002230:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002234:	d1ba      	bne.n	80021ac <__swsetup_r+0x30>
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	0792      	lsls	r2, r2, #30
 800223a:	bf58      	it	pl
 800223c:	6963      	ldrpl	r3, [r4, #20]
 800223e:	60a3      	str	r3, [r4, #8]
 8002240:	e7f2      	b.n	8002228 <__swsetup_r+0xac>
 8002242:	2000      	movs	r0, #0
 8002244:	e7f7      	b.n	8002236 <__swsetup_r+0xba>
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c
 800224c:	08002678 	.word	0x08002678
 8002250:	08002698 	.word	0x08002698
 8002254:	08002658 	.word	0x08002658

08002258 <_close_r>:
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	2300      	movs	r3, #0
 800225c:	4c05      	ldr	r4, [pc, #20]	; (8002274 <_close_r+0x1c>)
 800225e:	4605      	mov	r5, r0
 8002260:	4608      	mov	r0, r1
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	f7fe f943 	bl	80004ee <_close>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d102      	bne.n	8002272 <_close_r+0x1a>
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	b103      	cbz	r3, 8002272 <_close_r+0x1a>
 8002270:	602b      	str	r3, [r5, #0]
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	200000e0 	.word	0x200000e0

08002278 <__sflush_r>:
 8002278:	898a      	ldrh	r2, [r1, #12]
 800227a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800227e:	4605      	mov	r5, r0
 8002280:	0710      	lsls	r0, r2, #28
 8002282:	460c      	mov	r4, r1
 8002284:	d458      	bmi.n	8002338 <__sflush_r+0xc0>
 8002286:	684b      	ldr	r3, [r1, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	dc05      	bgt.n	8002298 <__sflush_r+0x20>
 800228c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	dc02      	bgt.n	8002298 <__sflush_r+0x20>
 8002292:	2000      	movs	r0, #0
 8002294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800229a:	2e00      	cmp	r6, #0
 800229c:	d0f9      	beq.n	8002292 <__sflush_r+0x1a>
 800229e:	2300      	movs	r3, #0
 80022a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022a4:	682f      	ldr	r7, [r5, #0]
 80022a6:	6a21      	ldr	r1, [r4, #32]
 80022a8:	602b      	str	r3, [r5, #0]
 80022aa:	d032      	beq.n	8002312 <__sflush_r+0x9a>
 80022ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	075a      	lsls	r2, r3, #29
 80022b2:	d505      	bpl.n	80022c0 <__sflush_r+0x48>
 80022b4:	6863      	ldr	r3, [r4, #4]
 80022b6:	1ac0      	subs	r0, r0, r3
 80022b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ba:	b10b      	cbz	r3, 80022c0 <__sflush_r+0x48>
 80022bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022be:	1ac0      	subs	r0, r0, r3
 80022c0:	2300      	movs	r3, #0
 80022c2:	4602      	mov	r2, r0
 80022c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022c6:	6a21      	ldr	r1, [r4, #32]
 80022c8:	4628      	mov	r0, r5
 80022ca:	47b0      	blx	r6
 80022cc:	1c43      	adds	r3, r0, #1
 80022ce:	89a3      	ldrh	r3, [r4, #12]
 80022d0:	d106      	bne.n	80022e0 <__sflush_r+0x68>
 80022d2:	6829      	ldr	r1, [r5, #0]
 80022d4:	291d      	cmp	r1, #29
 80022d6:	d848      	bhi.n	800236a <__sflush_r+0xf2>
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <__sflush_r+0x108>)
 80022da:	40ca      	lsrs	r2, r1
 80022dc:	07d6      	lsls	r6, r2, #31
 80022de:	d544      	bpl.n	800236a <__sflush_r+0xf2>
 80022e0:	2200      	movs	r2, #0
 80022e2:	6062      	str	r2, [r4, #4]
 80022e4:	6922      	ldr	r2, [r4, #16]
 80022e6:	04d9      	lsls	r1, r3, #19
 80022e8:	6022      	str	r2, [r4, #0]
 80022ea:	d504      	bpl.n	80022f6 <__sflush_r+0x7e>
 80022ec:	1c42      	adds	r2, r0, #1
 80022ee:	d101      	bne.n	80022f4 <__sflush_r+0x7c>
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	b903      	cbnz	r3, 80022f6 <__sflush_r+0x7e>
 80022f4:	6560      	str	r0, [r4, #84]	; 0x54
 80022f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022f8:	602f      	str	r7, [r5, #0]
 80022fa:	2900      	cmp	r1, #0
 80022fc:	d0c9      	beq.n	8002292 <__sflush_r+0x1a>
 80022fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002302:	4299      	cmp	r1, r3
 8002304:	d002      	beq.n	800230c <__sflush_r+0x94>
 8002306:	4628      	mov	r0, r5
 8002308:	f000 f8ec 	bl	80024e4 <_free_r>
 800230c:	2000      	movs	r0, #0
 800230e:	6360      	str	r0, [r4, #52]	; 0x34
 8002310:	e7c0      	b.n	8002294 <__sflush_r+0x1c>
 8002312:	2301      	movs	r3, #1
 8002314:	4628      	mov	r0, r5
 8002316:	47b0      	blx	r6
 8002318:	1c41      	adds	r1, r0, #1
 800231a:	d1c8      	bne.n	80022ae <__sflush_r+0x36>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0c5      	beq.n	80022ae <__sflush_r+0x36>
 8002322:	2b1d      	cmp	r3, #29
 8002324:	d001      	beq.n	800232a <__sflush_r+0xb2>
 8002326:	2b16      	cmp	r3, #22
 8002328:	d101      	bne.n	800232e <__sflush_r+0xb6>
 800232a:	602f      	str	r7, [r5, #0]
 800232c:	e7b1      	b.n	8002292 <__sflush_r+0x1a>
 800232e:	89a3      	ldrh	r3, [r4, #12]
 8002330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002334:	81a3      	strh	r3, [r4, #12]
 8002336:	e7ad      	b.n	8002294 <__sflush_r+0x1c>
 8002338:	690f      	ldr	r7, [r1, #16]
 800233a:	2f00      	cmp	r7, #0
 800233c:	d0a9      	beq.n	8002292 <__sflush_r+0x1a>
 800233e:	0793      	lsls	r3, r2, #30
 8002340:	bf18      	it	ne
 8002342:	2300      	movne	r3, #0
 8002344:	680e      	ldr	r6, [r1, #0]
 8002346:	bf08      	it	eq
 8002348:	694b      	ldreq	r3, [r1, #20]
 800234a:	eba6 0807 	sub.w	r8, r6, r7
 800234e:	600f      	str	r7, [r1, #0]
 8002350:	608b      	str	r3, [r1, #8]
 8002352:	f1b8 0f00 	cmp.w	r8, #0
 8002356:	dd9c      	ble.n	8002292 <__sflush_r+0x1a>
 8002358:	4643      	mov	r3, r8
 800235a:	463a      	mov	r2, r7
 800235c:	6a21      	ldr	r1, [r4, #32]
 800235e:	4628      	mov	r0, r5
 8002360:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002362:	47b0      	blx	r6
 8002364:	2800      	cmp	r0, #0
 8002366:	dc06      	bgt.n	8002376 <__sflush_r+0xfe>
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236e:	81a3      	strh	r3, [r4, #12]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	e78e      	b.n	8002294 <__sflush_r+0x1c>
 8002376:	4407      	add	r7, r0
 8002378:	eba8 0800 	sub.w	r8, r8, r0
 800237c:	e7e9      	b.n	8002352 <__sflush_r+0xda>
 800237e:	bf00      	nop
 8002380:	20400001 	.word	0x20400001

08002384 <_fflush_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	690b      	ldr	r3, [r1, #16]
 8002388:	4605      	mov	r5, r0
 800238a:	460c      	mov	r4, r1
 800238c:	b1db      	cbz	r3, 80023c6 <_fflush_r+0x42>
 800238e:	b118      	cbz	r0, 8002398 <_fflush_r+0x14>
 8002390:	6983      	ldr	r3, [r0, #24]
 8002392:	b90b      	cbnz	r3, 8002398 <_fflush_r+0x14>
 8002394:	f7ff fa90 	bl	80018b8 <__sinit>
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <_fflush_r+0x48>)
 800239a:	429c      	cmp	r4, r3
 800239c:	d109      	bne.n	80023b2 <_fflush_r+0x2e>
 800239e:	686c      	ldr	r4, [r5, #4]
 80023a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a4:	b17b      	cbz	r3, 80023c6 <_fflush_r+0x42>
 80023a6:	4621      	mov	r1, r4
 80023a8:	4628      	mov	r0, r5
 80023aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ae:	f7ff bf63 	b.w	8002278 <__sflush_r>
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_fflush_r+0x4c>)
 80023b4:	429c      	cmp	r4, r3
 80023b6:	d101      	bne.n	80023bc <_fflush_r+0x38>
 80023b8:	68ac      	ldr	r4, [r5, #8]
 80023ba:	e7f1      	b.n	80023a0 <_fflush_r+0x1c>
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <_fflush_r+0x50>)
 80023be:	429c      	cmp	r4, r3
 80023c0:	bf08      	it	eq
 80023c2:	68ec      	ldreq	r4, [r5, #12]
 80023c4:	e7ec      	b.n	80023a0 <_fflush_r+0x1c>
 80023c6:	2000      	movs	r0, #0
 80023c8:	bd38      	pop	{r3, r4, r5, pc}
 80023ca:	bf00      	nop
 80023cc:	08002678 	.word	0x08002678
 80023d0:	08002698 	.word	0x08002698
 80023d4:	08002658 	.word	0x08002658

080023d8 <_lseek_r>:
 80023d8:	b538      	push	{r3, r4, r5, lr}
 80023da:	4605      	mov	r5, r0
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	2200      	movs	r2, #0
 80023e2:	4c05      	ldr	r4, [pc, #20]	; (80023f8 <_lseek_r+0x20>)
 80023e4:	6022      	str	r2, [r4, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f7fe f8a5 	bl	8000536 <_lseek>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d102      	bne.n	80023f6 <_lseek_r+0x1e>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	b103      	cbz	r3, 80023f6 <_lseek_r+0x1e>
 80023f4:	602b      	str	r3, [r5, #0]
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	200000e0 	.word	0x200000e0

080023fc <__swhatbuf_r>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	460e      	mov	r6, r1
 8002400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002404:	b096      	sub	sp, #88	; 0x58
 8002406:	2900      	cmp	r1, #0
 8002408:	4614      	mov	r4, r2
 800240a:	461d      	mov	r5, r3
 800240c:	da07      	bge.n	800241e <__swhatbuf_r+0x22>
 800240e:	2300      	movs	r3, #0
 8002410:	602b      	str	r3, [r5, #0]
 8002412:	89b3      	ldrh	r3, [r6, #12]
 8002414:	061a      	lsls	r2, r3, #24
 8002416:	d410      	bmi.n	800243a <__swhatbuf_r+0x3e>
 8002418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800241c:	e00e      	b.n	800243c <__swhatbuf_r+0x40>
 800241e:	466a      	mov	r2, sp
 8002420:	f000 f8be 	bl	80025a0 <_fstat_r>
 8002424:	2800      	cmp	r0, #0
 8002426:	dbf2      	blt.n	800240e <__swhatbuf_r+0x12>
 8002428:	9a01      	ldr	r2, [sp, #4]
 800242a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800242e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002432:	425a      	negs	r2, r3
 8002434:	415a      	adcs	r2, r3
 8002436:	602a      	str	r2, [r5, #0]
 8002438:	e7ee      	b.n	8002418 <__swhatbuf_r+0x1c>
 800243a:	2340      	movs	r3, #64	; 0x40
 800243c:	2000      	movs	r0, #0
 800243e:	6023      	str	r3, [r4, #0]
 8002440:	b016      	add	sp, #88	; 0x58
 8002442:	bd70      	pop	{r4, r5, r6, pc}

08002444 <__smakebuf_r>:
 8002444:	898b      	ldrh	r3, [r1, #12]
 8002446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002448:	079d      	lsls	r5, r3, #30
 800244a:	4606      	mov	r6, r0
 800244c:	460c      	mov	r4, r1
 800244e:	d507      	bpl.n	8002460 <__smakebuf_r+0x1c>
 8002450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	6123      	str	r3, [r4, #16]
 8002458:	2301      	movs	r3, #1
 800245a:	6163      	str	r3, [r4, #20]
 800245c:	b002      	add	sp, #8
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	ab01      	add	r3, sp, #4
 8002462:	466a      	mov	r2, sp
 8002464:	f7ff ffca 	bl	80023fc <__swhatbuf_r>
 8002468:	9900      	ldr	r1, [sp, #0]
 800246a:	4605      	mov	r5, r0
 800246c:	4630      	mov	r0, r6
 800246e:	f7ff faad 	bl	80019cc <_malloc_r>
 8002472:	b948      	cbnz	r0, 8002488 <__smakebuf_r+0x44>
 8002474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002478:	059a      	lsls	r2, r3, #22
 800247a:	d4ef      	bmi.n	800245c <__smakebuf_r+0x18>
 800247c:	f023 0303 	bic.w	r3, r3, #3
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	81a3      	strh	r3, [r4, #12]
 8002486:	e7e3      	b.n	8002450 <__smakebuf_r+0xc>
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <__smakebuf_r+0x7c>)
 800248a:	62b3      	str	r3, [r6, #40]	; 0x28
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	6020      	str	r0, [r4, #0]
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	81a3      	strh	r3, [r4, #12]
 8002496:	9b00      	ldr	r3, [sp, #0]
 8002498:	6120      	str	r0, [r4, #16]
 800249a:	6163      	str	r3, [r4, #20]
 800249c:	9b01      	ldr	r3, [sp, #4]
 800249e:	b15b      	cbz	r3, 80024b8 <__smakebuf_r+0x74>
 80024a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024a4:	4630      	mov	r0, r6
 80024a6:	f000 f88d 	bl	80025c4 <_isatty_r>
 80024aa:	b128      	cbz	r0, 80024b8 <__smakebuf_r+0x74>
 80024ac:	89a3      	ldrh	r3, [r4, #12]
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	81a3      	strh	r3, [r4, #12]
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	431d      	orrs	r5, r3
 80024bc:	81a5      	strh	r5, [r4, #12]
 80024be:	e7cd      	b.n	800245c <__smakebuf_r+0x18>
 80024c0:	08001881 	.word	0x08001881

080024c4 <memchr>:
 80024c4:	b510      	push	{r4, lr}
 80024c6:	b2c9      	uxtb	r1, r1
 80024c8:	4402      	add	r2, r0
 80024ca:	4290      	cmp	r0, r2
 80024cc:	4603      	mov	r3, r0
 80024ce:	d101      	bne.n	80024d4 <memchr+0x10>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e003      	b.n	80024dc <memchr+0x18>
 80024d4:	781c      	ldrb	r4, [r3, #0]
 80024d6:	3001      	adds	r0, #1
 80024d8:	428c      	cmp	r4, r1
 80024da:	d1f6      	bne.n	80024ca <memchr+0x6>
 80024dc:	4618      	mov	r0, r3
 80024de:	bd10      	pop	{r4, pc}

080024e0 <__malloc_lock>:
 80024e0:	4770      	bx	lr

080024e2 <__malloc_unlock>:
 80024e2:	4770      	bx	lr

080024e4 <_free_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4605      	mov	r5, r0
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d043      	beq.n	8002574 <_free_r+0x90>
 80024ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024f0:	1f0c      	subs	r4, r1, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bfb8      	it	lt
 80024f6:	18e4      	addlt	r4, r4, r3
 80024f8:	f7ff fff2 	bl	80024e0 <__malloc_lock>
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <_free_r+0x94>)
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	4610      	mov	r0, r2
 8002502:	b933      	cbnz	r3, 8002512 <_free_r+0x2e>
 8002504:	6063      	str	r3, [r4, #4]
 8002506:	6014      	str	r4, [r2, #0]
 8002508:	4628      	mov	r0, r5
 800250a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800250e:	f7ff bfe8 	b.w	80024e2 <__malloc_unlock>
 8002512:	42a3      	cmp	r3, r4
 8002514:	d90b      	bls.n	800252e <_free_r+0x4a>
 8002516:	6821      	ldr	r1, [r4, #0]
 8002518:	1862      	adds	r2, r4, r1
 800251a:	4293      	cmp	r3, r2
 800251c:	bf01      	itttt	eq
 800251e:	681a      	ldreq	r2, [r3, #0]
 8002520:	685b      	ldreq	r3, [r3, #4]
 8002522:	1852      	addeq	r2, r2, r1
 8002524:	6022      	streq	r2, [r4, #0]
 8002526:	6063      	str	r3, [r4, #4]
 8002528:	6004      	str	r4, [r0, #0]
 800252a:	e7ed      	b.n	8002508 <_free_r+0x24>
 800252c:	4613      	mov	r3, r2
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	b10a      	cbz	r2, 8002536 <_free_r+0x52>
 8002532:	42a2      	cmp	r2, r4
 8002534:	d9fa      	bls.n	800252c <_free_r+0x48>
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	1858      	adds	r0, r3, r1
 800253a:	42a0      	cmp	r0, r4
 800253c:	d10b      	bne.n	8002556 <_free_r+0x72>
 800253e:	6820      	ldr	r0, [r4, #0]
 8002540:	4401      	add	r1, r0
 8002542:	1858      	adds	r0, r3, r1
 8002544:	4282      	cmp	r2, r0
 8002546:	6019      	str	r1, [r3, #0]
 8002548:	d1de      	bne.n	8002508 <_free_r+0x24>
 800254a:	6810      	ldr	r0, [r2, #0]
 800254c:	6852      	ldr	r2, [r2, #4]
 800254e:	4401      	add	r1, r0
 8002550:	6019      	str	r1, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e7d8      	b.n	8002508 <_free_r+0x24>
 8002556:	d902      	bls.n	800255e <_free_r+0x7a>
 8002558:	230c      	movs	r3, #12
 800255a:	602b      	str	r3, [r5, #0]
 800255c:	e7d4      	b.n	8002508 <_free_r+0x24>
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	1821      	adds	r1, r4, r0
 8002562:	428a      	cmp	r2, r1
 8002564:	bf01      	itttt	eq
 8002566:	6811      	ldreq	r1, [r2, #0]
 8002568:	6852      	ldreq	r2, [r2, #4]
 800256a:	1809      	addeq	r1, r1, r0
 800256c:	6021      	streq	r1, [r4, #0]
 800256e:	6062      	str	r2, [r4, #4]
 8002570:	605c      	str	r4, [r3, #4]
 8002572:	e7c9      	b.n	8002508 <_free_r+0x24>
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	20000094 	.word	0x20000094

0800257c <_read_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4605      	mov	r5, r0
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	2200      	movs	r2, #0
 8002586:	4c05      	ldr	r4, [pc, #20]	; (800259c <_read_r+0x20>)
 8002588:	6022      	str	r2, [r4, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f7fd ff92 	bl	80004b4 <_read>
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d102      	bne.n	800259a <_read_r+0x1e>
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	b103      	cbz	r3, 800259a <_read_r+0x1e>
 8002598:	602b      	str	r3, [r5, #0]
 800259a:	bd38      	pop	{r3, r4, r5, pc}
 800259c:	200000e0 	.word	0x200000e0

080025a0 <_fstat_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	2300      	movs	r3, #0
 80025a4:	4c06      	ldr	r4, [pc, #24]	; (80025c0 <_fstat_r+0x20>)
 80025a6:	4605      	mov	r5, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	f7fd ffa9 	bl	8000504 <_fstat>
 80025b2:	1c43      	adds	r3, r0, #1
 80025b4:	d102      	bne.n	80025bc <_fstat_r+0x1c>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	b103      	cbz	r3, 80025bc <_fstat_r+0x1c>
 80025ba:	602b      	str	r3, [r5, #0]
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	200000e0 	.word	0x200000e0

080025c4 <_isatty_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	2300      	movs	r3, #0
 80025c8:	4c05      	ldr	r4, [pc, #20]	; (80025e0 <_isatty_r+0x1c>)
 80025ca:	4605      	mov	r5, r0
 80025cc:	4608      	mov	r0, r1
 80025ce:	6023      	str	r3, [r4, #0]
 80025d0:	f7fd ffa7 	bl	8000522 <_isatty>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d102      	bne.n	80025de <_isatty_r+0x1a>
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	b103      	cbz	r3, 80025de <_isatty_r+0x1a>
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	200000e0 	.word	0x200000e0

080025e4 <_init>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr

080025f0 <_fini>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr
